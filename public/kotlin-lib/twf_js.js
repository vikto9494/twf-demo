if (typeof kotlin === 'undefined') {
  throw new Error("Error loading module 'twf_js'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'twf_js'.");
}
var twf_js = function (_, Kotlin) {
  'use strict';
  var listOf = Kotlin.kotlin.collections.listOf_mh5how$;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var mutableSetOf = Kotlin.kotlin.collections.mutableSetOf_i5x0yv$;
  var toString = Kotlin.toString;
  var toList = Kotlin.kotlin.collections.toList_us0mfu$;
  var toList_0 = Kotlin.kotlin.collections.toList_7wnvza$;
  var flatten = Kotlin.kotlin.collections.flatten_u0ad8z$;
  var plus = Kotlin.kotlin.collections.plus_mydzjv$;
  var ensureNotNull = Kotlin.ensureNotNull;
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  var toMutableMap = Kotlin.kotlin.collections.toMutableMap_abgq59$;
  var toChar = Kotlin.toChar;
  var downTo = Kotlin.kotlin.ranges.downTo_ui3wc7$;
  var Regex_init = Kotlin.kotlin.text.Regex_init_61zpoe$;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_4c7yge$;
  var unboxChar = Kotlin.unboxChar;
  var copyToArray = Kotlin.kotlin.collections.copyToArray;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var LinkedHashSet_init = Kotlin.kotlin.collections.LinkedHashSet_init_287e2$;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var HashSet_init = Kotlin.kotlin.collections.HashSet_init_287e2$;
  var Map = Kotlin.kotlin.collections.Map;
  var throwCCE = Kotlin.throwCCE;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init_za3lpa$;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var setOf = Kotlin.kotlin.collections.setOf_mh5how$;
  var setOf_0 = Kotlin.kotlin.collections.setOf_i5x0yv$;
  var split = Kotlin.kotlin.text.split_ip8yn$;
  var toSet = Kotlin.kotlin.collections.toSet_7wnvza$;
  var endsWith = Kotlin.kotlin.text.endsWith_sgbm27$;
  var replace = Kotlin.kotlin.text.replace_680rmw$;
  var subtract = Kotlin.kotlin.collections.subtract_q4559j$;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var mapOf = Kotlin.kotlin.collections.mapOf_x2b85n$;
  var toDoubleOrNull = Kotlin.kotlin.text.toDoubleOrNull_pdl1vz$;
  var last = Kotlin.kotlin.collections.last_2p1efm$;
  var numberToInt = Kotlin.numberToInt;
  var Math_0 = Math;
  var intersect = Kotlin.kotlin.collections.intersect_q4559j$;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var joinToString = Kotlin.kotlin.collections.joinToString_fmv235$;
  var isBlank = Kotlin.kotlin.text.isBlank_gw00vp$;
  var toMutableSet = Kotlin.kotlin.collections.toMutableSet_us0mfu$;
  var listOf_0 = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var contains = Kotlin.kotlin.collections.contains_2ws7j4$;
  var List = Kotlin.kotlin.collections.List;
  var mapCapacity = Kotlin.kotlin.collections.mapCapacity_za3lpa$;
  var coerceAtLeast = Kotlin.kotlin.ranges.coerceAtLeast_dqglrj$;
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_bwtc7$;
  var equals = Kotlin.equals;
  var toDouble = Kotlin.kotlin.text.toDouble_pdl1vz$;
  var distinct = Kotlin.kotlin.collections.distinct_7wnvza$;
  var addAll = Kotlin.kotlin.collections.addAll_ipc267$;
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  var rangeTo = Kotlin.kotlin.ranges.rangeTo_38ydlf$;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Pair = Kotlin.kotlin.Pair;
  var mutableMapOf = Kotlin.kotlin.collections.mutableMapOf_qfcya0$;
  var mapOf_0 = Kotlin.kotlin.collections.mapOf_qfcya0$;
  var removeAll = Kotlin.kotlin.collections.removeAll_qafx1e$;
  var first = Kotlin.kotlin.collections.first_2p1efm$;
  var get_lastIndex = Kotlin.kotlin.collections.get_lastIndex_55thoc$;
  var math = Kotlin.kotlin.math;
  var log = Kotlin.kotlin.math.log_lu1900$;
  var LinkedHashMap_init_0 = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  var union = Kotlin.kotlin.collections.union_q4559j$;
  var compareBy = Kotlin.kotlin.comparisons.compareBy_bvgy4j$;
  var sortedWith = Kotlin.kotlin.collections.sortedWith_eknfly$;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init;
  var toMutableSet_0 = Kotlin.kotlin.collections.toMutableSet_bvy38s$;
  var plus_0 = Kotlin.kotlin.collections.plus_khz7k3$;
  var sorted = Kotlin.kotlin.collections.sorted_exjks8$;
  var asSequence = Kotlin.kotlin.collections.asSequence_7wnvza$;
  var filter = Kotlin.kotlin.sequences.filter_euau3h$;
  var firstOrNull = Kotlin.kotlin.sequences.firstOrNull_veqyi0$;
  var sortedDescending = Kotlin.kotlin.collections.sortedDescending_exjks8$;
  var sortedWith_0 = Kotlin.kotlin.sequences.sortedWith_vjgqpk$;
  var StringBuilder_init_0 = Kotlin.kotlin.text.StringBuilder_init;
  var hashCode = Kotlin.hashCode;
  var Throwable = Error;
  var emptySet = Kotlin.kotlin.collections.emptySet_287e2$;
  var kotlin_js_internal_DoubleCompanionObject = Kotlin.kotlin.js.internal.DoubleCompanionObject;
  var Collection = Kotlin.kotlin.collections.Collection;
  var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
  var toIntOrNull = Kotlin.kotlin.text.toIntOrNull_pdl1vz$;
  var firstOrNull_0 = Kotlin.kotlin.text.firstOrNull_gw00vp$;
  var mutableListOf = Kotlin.kotlin.collections.mutableListOf_i5x0yv$;
  var binarySearch = Kotlin.kotlin.collections.binarySearch_jhx6be$;
  var startsWith = Kotlin.kotlin.text.startsWith_7epoxm$;
  var toMap = Kotlin.kotlin.collections.toMap_6hr0sd$;
  var wrapFunction = Kotlin.wrapFunction;
  var Comparator = Kotlin.kotlin.Comparator;
  var contains_0 = Kotlin.kotlin.text.contains_sgbm27$;
  var StringBuilder = Kotlin.kotlin.text.StringBuilder;
  var first_0 = Kotlin.kotlin.collections.first_7wnvza$;
  var contains_1 = Kotlin.kotlin.text.contains_li3zpu$;
  var toMutableSet_1 = Kotlin.kotlin.collections.toMutableSet_7wnvza$;
  var drop = Kotlin.kotlin.collections.drop_ba2ldo$;
  var checkCountOverflow = Kotlin.kotlin.collections.checkCountOverflow_za3lpa$;
  var UnsupportedOperationException_init = Kotlin.kotlin.UnsupportedOperationException_init_pdl1vj$;
  var throwUPAE = Kotlin.throwUPAE;
  var println = Kotlin.kotlin.io.println_s8jyv4$;
  var arrayListOf = Kotlin.kotlin.collections.arrayListOf_i5x0yv$;
  var isNaN_0 = Kotlin.kotlin.isNaN_yrwdxr$;
  var toList_1 = Kotlin.kotlin.collections.toList_abgq59$;
  var isFinite = Kotlin.kotlin.isFinite_yrwdxr$;
  var isInfinite = Kotlin.kotlin.isInfinite_yrwdxr$;
  var sortWith = Kotlin.kotlin.collections.sortWith_nqfjgj$;
  var first_1 = Kotlin.kotlin.text.first_gw00vp$;
  var last_0 = Kotlin.kotlin.text.last_gw00vp$;
  var get_lastIndex_0 = Kotlin.kotlin.text.get_lastIndex_gw00vp$;
  var repeat = Kotlin.kotlin.text.repeat_94bcnn$;
  var max = Kotlin.kotlin.collections.max_exjks8$;
  var contains_2 = Kotlin.kotlin.collections.contains_mjy6jw$;
  var get_indices = Kotlin.kotlin.text.get_indices_gw00vp$;
  var toBoxedChar = Kotlin.toBoxedChar;
  var get_lastIndex_1 = Kotlin.kotlin.collections.get_lastIndex_m7z4lg$;
  var firstOrNull_1 = Kotlin.kotlin.collections.firstOrNull_2p1efm$;
  var Unit = Kotlin.kotlin.Unit;
  var toMutableList_0 = Kotlin.kotlin.collections.toMutableList_us0mfu$;
  var indexOf = Kotlin.kotlin.collections.indexOf_bv23uc$;
  var reverse = Kotlin.kotlin.collections.reverse_vvxzk3$;
  var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
  var first_2 = Kotlin.kotlin.collections.first_us0mfu$;
  var Array_0 = Array;
  var iterator = Kotlin.kotlin.text.iterator_gw00vp$;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var isWhitespace = Kotlin.kotlin.text.isWhitespace_myv2d0$;
  var zip = Kotlin.kotlin.collections.zip_45mdf7$;
  var startsWith_0 = Kotlin.kotlin.text.startsWith_sgbm27$;
  var substringBefore = Kotlin.kotlin.text.substringBefore_8cymmc$;
  var endsWith_0 = Kotlin.kotlin.text.endsWith_7epoxm$;
  var lastIndexOfAny = Kotlin.kotlin.text.lastIndexOfAny_7utkvz$;
  var removeSuffix = Kotlin.kotlin.text.removeSuffix_gsj5wt$;
  var startsWith_1 = Kotlin.kotlin.text.startsWith_li3zpu$;
  var trim = Kotlin.kotlin.text.trim_gw00vp$;
  var sum = Kotlin.kotlin.collections.sum_l63kqw$;
  var dropLast = Kotlin.kotlin.text.dropLast_94bcnn$;
  var toString_0 = Kotlin.kotlin.text.toString_dqglrj$;
  var MutableList = Kotlin.kotlin.collections.MutableList;
  var elementAt = Kotlin.kotlin.text.elementAt_94bcnn$;
  var lazy = Kotlin.kotlin.lazy_klfg04$;
  var replace_0 = Kotlin.kotlin.text.replace_r2fvfm$;
  var dropLast_0 = Kotlin.kotlin.collections.dropLast_yzln2o$;
  var StringBuilder_init_1 = Kotlin.kotlin.text.StringBuilder_init_6bul2c$;
  var substringAfterLast = Kotlin.kotlin.text.substringAfterLast_j4ogox$;
  var substringBeforeLast = Kotlin.kotlin.text.substringBeforeLast_j4ogox$;
  var reversed = Kotlin.kotlin.text.reversed_gw00vp$;
  var putAll = Kotlin.kotlin.collections.putAll_cweazw$;
  var IllegalStateException_init_0 = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
  var Comparable = Kotlin.kotlin.Comparable;
  var Exception_init = Kotlin.kotlin.Exception_init_pdl1vj$;
  var ArrayList = Kotlin.kotlin.collections.ArrayList;
  var kotlin_js_internal_IntCompanionObject = Kotlin.kotlin.js.internal.IntCompanionObject;
  var kotlin_js_internal_LongCompanionObject = Kotlin.kotlin.js.internal.LongCompanionObject;
  var kotlin_js_internal_FloatCompanionObject = Kotlin.kotlin.js.internal.FloatCompanionObject;
  var Random = Kotlin.kotlin.random.Random;
  var substringAfter = Kotlin.kotlin.text.substringAfter_j4ogox$;
  var substringBefore_0 = Kotlin.kotlin.text.substringBefore_j4ogox$;
  var CharRange = Kotlin.kotlin.ranges.CharRange;
  var substringAfter_0 = Kotlin.kotlin.text.substringAfter_8cymmc$;
  var split_0 = Kotlin.kotlin.text.split_o64adg$;
  var indexOf_0 = Kotlin.kotlin.text.indexOf_l5u8uk$;
  var minus = Kotlin.kotlin.collections.minus_khz7k3$;
  var average = Kotlin.kotlin.collections.average_l63kqw$;
  var sum_0 = Kotlin.kotlin.collections.sum_plj8ka$;
  var take = Kotlin.kotlin.collections.take_ba2ldo$;
  var lastOrNull = Kotlin.kotlin.collections.lastOrNull_2p1efm$;
  var shuffled = Kotlin.kotlin.collections.shuffled_7wnvza$;
  var random = Kotlin.kotlin.collections.random_iscd7z$;
  var max_0 = Kotlin.kotlin.collections.max_l63kqw$;
  var reversed_0 = Kotlin.kotlin.comparisons.reversed_2avth4$;
  var replaceFirst = Kotlin.kotlin.text.replaceFirst_680rmw$;
  var findAnyOf = Kotlin.kotlin.text.findAnyOf_7utkvz$;
  var toSet_0 = Kotlin.kotlin.collections.toSet_us0mfu$;
  ComputationType.prototype = Object.create(Enum.prototype);
  ComputationType.prototype.constructor = ComputationType;
  ComputeExpressionVariableType.prototype = Object.create(Enum.prototype);
  ComputeExpressionVariableType.prototype.constructor = ComputeExpressionVariableType;
  EmptyDomainException.prototype = Object.create(Throwable.prototype);
  EmptyDomainException.prototype.constructor = EmptyDomainException;
  ComparisonType.prototype = Object.create(Enum.prototype);
  ComparisonType.prototype.constructor = ComparisonType;
  ErrorLevel.prototype = Object.create(Enum.prototype);
  ErrorLevel.prototype.constructor = ErrorLevel;
  StringDefinitionType.prototype = Object.create(Enum.prototype);
  StringDefinitionType.prototype.constructor = StringDefinitionType;
  ReportType.prototype = Object.create(Enum.prototype);
  ReportType.prototype.constructor = ReportType;
  RuleTag.prototype = Object.create(Enum.prototype);
  RuleTag.prototype.constructor = RuleTag;
  TaskTagCode.prototype = Object.create(Enum.prototype);
  TaskTagCode.prototype.constructor = TaskTagCode;
  TaskSetTagCode.prototype = Object.create(Enum.prototype);
  TaskSetTagCode.prototype.constructor = TaskSetTagCode;
  NodeType.prototype = Object.create(Enum.prototype);
  NodeType.prototype.constructor = NodeType;
  ForwardInverseExtensionType.prototype = Object.create(Enum.prototype);
  ForwardInverseExtensionType.prototype.constructor = ForwardInverseExtensionType;
  SubstitutionInstanceVarType.prototype = Object.create(Enum.prototype);
  SubstitutionInstanceVarType.prototype.constructor = SubstitutionInstanceVarType;
  ExpressionSubstitutionNormType.prototype = Object.create(Enum.prototype);
  ExpressionSubstitutionNormType.prototype.constructor = ExpressionSubstitutionNormType;
  MathMlTagTreeNode$Type.prototype = Object.create(Enum.prototype);
  MathMlTagTreeNode$Type.prototype.constructor = MathMlTagTreeNode$Type;
  MathMlTagTreeNode$TexArgumentType.prototype = Object.create(Enum.prototype);
  MathMlTagTreeNode$TexArgumentType.prototype.constructor = MathMlTagTreeNode$TexArgumentType;
  ExpressionParserNode$Type.prototype = Object.create(Enum.prototype);
  ExpressionParserNode$Type.prototype.constructor = ExpressionParserNode$Type;
  ExpressionTreeParser$ParserState.prototype = Object.create(Enum.prototype);
  ExpressionTreeParser$ParserState.prototype.constructor = ExpressionTreeParser$ParserState;
  ExpressionTreeParser$TokenParserState.prototype = Object.create(Enum.prototype);
  ExpressionTreeParser$TokenParserState.prototype.constructor = ExpressionTreeParser$TokenParserState;
  ComparableTransformationPartType.prototype = Object.create(Enum.prototype);
  ComparableTransformationPartType.prototype.constructor = ComparableTransformationPartType;
  SubstitutionDirection.prototype = Object.create(Enum.prototype);
  SubstitutionDirection.prototype.constructor = SubstitutionDirection;
  TransformationChainParser$ParserState.prototype = Object.create(Enum.prototype);
  TransformationChainParser$ParserState.prototype.constructor = TransformationChainParser$ParserState;
  MessageType.prototype = Object.create(Enum.prototype);
  MessageType.prototype.constructor = MessageType;
  Form.prototype = Object.create(Enum.prototype);
  Form.prototype.constructor = Form;
  NumberIntervalType.prototype = Object.create(Enum.prototype);
  NumberIntervalType.prototype.constructor = NumberIntervalType;
  Case.prototype = Object.create(Enum.prototype);
  Case.prototype.constructor = Case;
  ExpressionGenerationDirection.prototype = Object.create(Enum.prototype);
  ExpressionGenerationDirection.prototype.constructor = ExpressionGenerationDirection;
  RuleTag_0.prototype = Object.create(Enum.prototype);
  RuleTag_0.prototype.constructor = RuleTag_0;
  SortOrder.prototype = Object.create(Enum.prototype);
  SortOrder.prototype.constructor = SortOrder;
  SortType.prototype = Object.create(Enum.prototype);
  SortType.prototype.constructor = SortType;
  function createConfigurationFromRulePacksAndParams(actualRulePackCodes, additionalParamsMap) {
    if (actualRulePackCodes === void 0) {
      actualRulePackCodes = copyToArray(listOf('Algebra'));
    }
    if (additionalParamsMap === void 0) {
      additionalParamsMap = emptyMap();
    }
    return createConfigurationFromRulePacksAndDetailSolutionCheckingParams(actualRulePackCodes, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, additionalParamsMap);
  }
  function createConfigurationFromRulePacksAndDetailSolutionCheckingParams$lambda$lambda(closure$rulePackCode) {
    return function () {
      return "ERROR: rule pack '" + closure$rulePackCode + "' not found";
    };
  }
  function createConfigurationFromRulePacksAndDetailSolutionCheckingParams(actualRulePackCodes, wellKnownFunctionsString, expressionTransformationRulesString, maxExpressionTransformationWeight, unlimitedWellKnownFunctionsString, taskContextExpressionTransformationRules, maxDistBetweenDiffSteps, scopeFilter, wellKnownFunctions, unlimitedWellKnownFunctions, expressionTransformationRules, subjectType, additionalParamsMap) {
    if (actualRulePackCodes === void 0)
      actualRulePackCodes = [];
    if (wellKnownFunctionsString === void 0)
      wellKnownFunctionsString = '';
    if (expressionTransformationRulesString === void 0)
      expressionTransformationRulesString = '';
    if (maxExpressionTransformationWeight === void 0)
      maxExpressionTransformationWeight = '1.0';
    if (unlimitedWellKnownFunctionsString === void 0)
      unlimitedWellKnownFunctionsString = wellKnownFunctionsString;
    if (taskContextExpressionTransformationRules === void 0)
      taskContextExpressionTransformationRules = '';
    if (maxDistBetweenDiffSteps === void 0)
      maxDistBetweenDiffSteps = '';
    if (scopeFilter === void 0)
      scopeFilter = '';
    if (wellKnownFunctions === void 0) {
      wellKnownFunctions = emptyList();
    }
    if (unlimitedWellKnownFunctions === void 0)
      unlimitedWellKnownFunctions = wellKnownFunctions;
    if (expressionTransformationRules === void 0) {
      expressionTransformationRules = emptyList();
    }
    if (subjectType === void 0)
      subjectType = '';
    if (additionalParamsMap === void 0) {
      additionalParamsMap = emptyMap();
    }
    var tmp$;
    var compiledConfiguration = compiledConfigurationBySettings(wellKnownFunctionsString, expressionTransformationRulesString, maxExpressionTransformationWeight, unlimitedWellKnownFunctionsString, taskContextExpressionTransformationRules, maxDistBetweenDiffSteps, scopeFilter, wellKnownFunctions, unlimitedWellKnownFunctions, expressionTransformationRules, subjectType, additionalParamsMap);
    if (!(actualRulePackCodes.length === 0)) {
      var rulePacksMap = DefaultRulePacks$Companion_getInstance().map();
      var allRulePackCodes = LinkedHashSet_init();
      if ((tmp$ = actualRulePackCodesBySubject(actualRulePackCodes)) != null) {
        var tmp$_0;
        for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
          var element = tmp$[tmp$_0];
          var rulePack = rulePacksMap.get_11rb$(element);
          if (rulePack != null) {
            allRulePackCodes.addAll_brywnq$(getRulePackCodesFromTree(rulePack, rulePacksMap));
          }
           else {
            log_1.addMessage_cte53e$(createConfigurationFromRulePacksAndDetailSolutionCheckingParams$lambda$lambda(element), void 0, 0);
          }
        }
      }
      var expressionSubstitutions = ArrayList_init();
      var tmp$_1;
      tmp$_1 = allRulePackCodes.iterator();
      while (tmp$_1.hasNext()) {
        var element_0 = tmp$_1.next();
        var tmp$_2;
        var rulePack_0 = rulePacksMap.get_11rb$(element_0);
        if (rulePack_0 != null) {
          if ((tmp$_2 = rulePack_0.rules) != null) {
            var tmp$_3;
            tmp$_3 = tmp$_2.iterator();
            while (tmp$_3.hasNext()) {
              var element_1 = tmp$_3.next();
              expressionSubstitutions.add_11rb$(expressionSubstitutionFromRuleITR(element_1));
            }
          }
        }
      }
      setExpressionSubstitutions(compiledConfiguration, expressionSubstitutions);
    }
    return compiledConfiguration;
  }
  function setExpressionSubstitutions$lambda$lambda() {
    return 'expression substitutions handing';
  }
  function setExpressionSubstitutions$lambda$lambda_0(closure$substitution) {
    return function () {
      return "substitution '" + closure$substitution.code + "' added to expressionTreeAutogeneratedTransformationRuleIdentifiers";
    };
  }
  function setExpressionSubstitutions$lambda$lambda_1(closure$substitution) {
    return function () {
      return "substitution '" + closure$substitution.code + "' added to compiledExpressionTreeTransformationRules and compiledExpressionSimpleAdditionalTreeTransformationRules";
    };
  }
  function setExpressionSubstitutions$lambda$lambda_2(closure$substitution) {
    return function () {
      return "substitution '" + closure$substitution.code + "' added to compiledExpressionTreeTransformationRules";
    };
  }
  function setExpressionSubstitutions($receiver, expressionSubstitutions) {
    var tmp$;
    $receiver.compiledExpressionTreeTransformationRules.clear();
    $receiver.compiledExpressionSimpleAdditionalTreeTransformationRules.clear();
    log_1.addMessage_cte53e$(setExpressionSubstitutions$lambda$lambda, void 0, 1);
    var handledCodesHashSet = HashSet_init();
    tmp$ = expressionSubstitutions.iterator();
    while (tmp$.hasNext()) {
      var substitution = tmp$.next();
      if (handledCodesHashSet.contains_11rb$(substitution.code))
        continue;
      handledCodesHashSet.add_11rb$(substitution.code);
      if (substitution.left.nodeType === NodeType$EMPTY_getInstance() || substitution.right.nodeType === NodeType$EMPTY_getInstance()) {
        if (substitution.code.length > 0) {
          log_1.addMessage_cte53e$(setExpressionSubstitutions$lambda$lambda_0(substitution), void 0, 2);
          $receiver.expressionTreeAutogeneratedTransformationRuleIdentifiers.put_xwzc9p$(substitution.code, substitution);
        }
      }
       else {
        if (!$receiver.verificationOnlyMode || substitution.left.containsFunctionBesides_ywdfdh$($receiver.notNeedRulesfunctionNameNumberOfArgsSet) || substitution.right.containsFunctionBesides_ywdfdh$($receiver.notNeedRulesfunctionNameNumberOfArgsSet)) {
          $receiver.compiledExpressionTreeTransformationRules.add_11rb$(substitution);
          if (substitution.simpleAdditional) {
            log_1.addMessage_cte53e$(setExpressionSubstitutions$lambda$lambda_1(substitution), void 0, 2);
            $receiver.compiledExpressionSimpleAdditionalTreeTransformationRules.add_11rb$(substitution);
          }
           else {
            log_1.addMessage_cte53e$(setExpressionSubstitutions$lambda$lambda_2(substitution), void 0, 2);
          }
        }
      }
    }
  }
  function getRulePackCodesFromTree(rulePackITR, rulePacksITR) {
    var tmp$, tmp$_0;
    tmp$ = rulePackITR.code;
    if (tmp$ == null) {
      throw IllegalArgumentException_init('No code in Rule Pack');
    }
    var result = mutableSetOf([tmp$]);
    if ((tmp$_0 = rulePackITR.rulePacks) != null) {
      var tmp$_1;
      tmp$_1 = tmp$_0.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        var key = element.rulePackCode;
        var tmp$_2;
        var rulePack = (Kotlin.isType(tmp$_2 = rulePacksITR, Map) ? tmp$_2 : throwCCE()).get_11rb$(key);
        if (rulePack != null) {
          result.addAll_brywnq$(getRulePackCodesFromTree(rulePack, rulePacksITR));
        }
         else {
          throw IllegalArgumentException_init("No Rule Pack with code '" + toString(element.rulePackCode) + "'");
        }
      }
    }
    return result;
  }
  function actualRulePackCodesBySubject(subjects) {
    var destination = ArrayList_init_0(subjects.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== subjects.length; ++tmp$) {
      var item = subjects[tmp$];
      destination.add_11rb$(toList(actualRulePackCodesBySubject_0(item)));
    }
    return copyToArray(flatten(toList_0(destination)));
  }
  function actualRulePackCodesBySubject_0(subject) {
    switch (subject) {
      case 'ShortMultiplication':
        return ['ShortMultiplication'];
      case 'Trigonometry':
        return ['InverseTrigonometricFunctions'];
      case 'Logarithm':
        return ['Logarithm'];
      case 'Logic':
        return ['RelativeComplement', 'LogicZhegalkinNandNor'];
      case 'Combinatorics':
        return ['BasicCombinatorics'];
      case 'Complexes':
        return ['ComplexNumbers'];
      case 'Algebra':
        return ['Logarithm', 'Factorial', 'AdvancedTrigonometry'];
      case 'Physics':
        return ['PhysicsSimpleMoving', 'PhysicsCircleMoving', 'PhysicsNuclear', 'PhysicsMolecular', 'PhysicsElectrodynamics'];
      default:return [subject];
    }
  }
  function getAllAlgebraSubstitutions() {
    return plus(plus(getLogarithmSubstitutions(), getFactorialSubstitutions()), getAdvancedTrigonometrySubstitutions());
  }
  function getArithmeticDivisionSubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('ArithmeticDivision')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getLogarithmSubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('Logarithm')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getFactorialSubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('Factorial')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getBasicTrigonometricDefinitionsIdentitySubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('BasicTrigonometricDefinitionsIdentity')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getTrigonometrySinCosSumReductionSubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('TrigonometrySinCosSumReduction')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getTrigonometrySubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('Trigonometry')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getAdvancedTrigonometrySubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('AdvancedTrigonometry')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getInverseTrigonometricFunctionsSubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('InverseTrigonometricFunctions')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getComplexNumbersSubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('ComplexNumbers')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getAllExtendedAlgebraSubstitutions() {
    return plus(plus(getAllAlgebraSubstitutions(), getInverseTrigonometricFunctionsSubstitutions()), getComplexNumbersSubstitutions());
  }
  function getLogicBaseSubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('RelativeComplement')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getLogicAbsorptionLawSubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('LogicAbsorptionLaw')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getLogicResolutionSubstitutions(includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(DefaultRulePacks$Companion_getInstance().map().get_11rb$('LogicResolution')), DefaultRulePacks$Companion_getInstance().map(), includeChildRulePacks);
  }
  function getAllLogicSubstitutions() {
    return plus(plus(getLogicBaseSubstitutions(), getLogicAbsorptionLawSubstitutions()), getLogicResolutionSubstitutions());
  }
  function getLogicBaseOrAndNot(packsMap, includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(packsMap.get_11rb$('LogicBaseOrAndNot')), packsMap, includeChildRulePacks);
  }
  function getLogicBaseImplicXorAlleq(packsMap, includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(packsMap.get_11rb$('LogicBaseImplicXorAlleq')), packsMap, includeChildRulePacks);
  }
  function getLogicBaseSubstitutions_0(packsMap, includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return plus(expressionSubstitutionsFromRulePackITR(ensureNotNull(packsMap.get_11rb$('RelativeComplement')), packsMap, includeChildRulePacks), expressionSubstitutionsFromRulePackITR(ensureNotNull(packsMap.get_11rb$('RelativeComplement')), packsMap, includeChildRulePacks));
  }
  function getLogicAbsorptionLawSubstitutions_0(packsMap, includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(packsMap.get_11rb$('LogicAbsorptionLaw')), packsMap, includeChildRulePacks);
  }
  function getLogicResolutionSubstitutions_0(packsMap, includeChildRulePacks) {
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = true;
    return expressionSubstitutionsFromRulePackITR(ensureNotNull(packsMap.get_11rb$('LogicResolution')), packsMap, includeChildRulePacks);
  }
  function getLogicNewVariablesSubstitutions(numberOfVariables, includeChildRulePacks) {
    if (numberOfVariables === void 0)
      numberOfVariables = 0;
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = false;
    return getLogicNewVariablesSubstitutions_0(ModifiedLogicRulePacks$Companion_getInstance().map(), numberOfVariables, includeChildRulePacks);
  }
  function getLogicNewVariablesSubstitutions_0(packsMap, numberOfVariables, includeChildRulePacks) {
    if (numberOfVariables === void 0)
      numberOfVariables = 0;
    if (includeChildRulePacks === void 0)
      includeChildRulePacks = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    var result = toMutableMap(emptyMap());
    tmp$ = downTo(122, toChar(toChar(122 - numberOfVariables) + 1)).iterator();
    while (tmp$.hasNext()) {
      var ch = unboxChar(tmp$.next());
      tmp$_2 = String.fromCharCode(ch);
      tmp$_1 = ensureNotNull(packsMap.get_11rb$('LogicNewVariables'));
      var tmp$_7;
      if ((tmp$_0 = ensureNotNull(packsMap.get_11rb$('LogicNewVariables')).rules) != null) {
        var destination = ArrayList_init_0(collectionSizeOrDefault(tmp$_0, 10));
        var tmp$_8;
        tmp$_8 = tmp$_0.iterator();
        while (tmp$_8.hasNext()) {
          var item = tmp$_8.next();
          var tmp$_9 = destination.add_11rb$;
          var tmp$_10;
          var tmp$_11;
          if ((tmp$_10 = item.rightStructureString) != null) {
            var regex = Regex_init('[^a-zA-Z]z[^a-zA-Z]');
            var replace_20wsma$result;
            replace_20wsma$break: do {
              var match = regex.find_905azu$(tmp$_10);
              if (match == null) {
                replace_20wsma$result = tmp$_10.toString();
                break replace_20wsma$break;
              }
              var lastStart = 0;
              var length = tmp$_10.length;
              var sb = StringBuilder_init(length);
              do {
                var foundMatch = ensureNotNull(match);
                sb.append_ezbsdh$(tmp$_10, lastStart, foundMatch.range.start);
                sb.append_gw00v9$(String.fromCharCode(foundMatch.value.charCodeAt(0)) + String.fromCharCode(ch) + String.fromCharCode(foundMatch.value.charCodeAt(2)));
                lastStart = foundMatch.range.endInclusive + 1 | 0;
                match = foundMatch.next();
              }
               while (lastStart < length && match != null);
              if (lastStart < length) {
                sb.append_ezbsdh$(tmp$_10, lastStart, length);
              }
              replace_20wsma$result = sb.toString();
            }
             while (false);
            tmp$_11 = replace_20wsma$result;
          }
           else
            tmp$_11 = null;
          tmp$_9.call(destination, item.copy_wic270$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, tmp$_11));
        }
        tmp$_7 = destination;
      }
       else
        tmp$_7 = null;
      var value = expressionSubstitutionsFromRulePackITR(tmp$_1.copy_65vnc2$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, tmp$_7), packsMap, includeChildRulePacks);
      result.put_xwzc9p$(tmp$_2, value);
      tmp$_6 = String.fromCharCode(ch);
      var key = String.fromCharCode(ch);
      var tmp$_12;
      tmp$_5 = (tmp$_12 = result.get_11rb$(key)) != null ? tmp$_12 : ArrayList_init();
      tmp$_4 = ensureNotNull(packsMap.get_11rb$('LogicAbsorptionLawReverse'));
      var tmp$_13;
      if ((tmp$_3 = ensureNotNull(packsMap.get_11rb$('LogicAbsorptionLawReverse')).rules) != null) {
        var destination_0 = ArrayList_init_0(collectionSizeOrDefault(tmp$_3, 10));
        var tmp$_14;
        tmp$_14 = tmp$_3.iterator();
        while (tmp$_14.hasNext()) {
          var item_0 = tmp$_14.next();
          var tmp$_15 = destination_0.add_11rb$;
          var tmp$_16;
          var tmp$_17;
          if ((tmp$_16 = item_0.rightStructureString) != null) {
            var regex_0 = Regex_init('[^a-zA-Z]z[^a-zA-Z]');
            var replace_20wsma$result_0;
            replace_20wsma$break: do {
              var match_0 = regex_0.find_905azu$(tmp$_16);
              if (match_0 == null) {
                replace_20wsma$result_0 = tmp$_16.toString();
                break replace_20wsma$break;
              }
              var lastStart_0 = 0;
              var length_0 = tmp$_16.length;
              var sb_0 = StringBuilder_init(length_0);
              do {
                var foundMatch_0 = ensureNotNull(match_0);
                sb_0.append_ezbsdh$(tmp$_16, lastStart_0, foundMatch_0.range.start);
                sb_0.append_gw00v9$(String.fromCharCode(foundMatch_0.value.charCodeAt(0)) + String.fromCharCode(ch) + String.fromCharCode(foundMatch_0.value.charCodeAt(2)));
                lastStart_0 = foundMatch_0.range.endInclusive + 1 | 0;
                match_0 = foundMatch_0.next();
              }
               while (lastStart_0 < length_0 && match_0 != null);
              if (lastStart_0 < length_0) {
                sb_0.append_ezbsdh$(tmp$_16, lastStart_0, length_0);
              }
              replace_20wsma$result_0 = sb_0.toString();
            }
             while (false);
            tmp$_17 = replace_20wsma$result_0;
          }
           else
            tmp$_17 = null;
          tmp$_15.call(destination_0, item_0.copy_wic270$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, tmp$_17));
        }
        tmp$_13 = destination_0;
      }
       else
        tmp$_13 = null;
      var value_0 = toMutableList(plus(tmp$_5, expressionSubstitutionsFromRulePackITR(tmp$_4.copy_65vnc2$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, tmp$_13), packsMap, includeChildRulePacks)));
      result.put_xwzc9p$(tmp$_6, value_0);
    }
    return result;
  }
  function normalizeExpressionToUsualForm(expression, compiledConfiguration) {
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration();
    var topExpressionNode = expression.getTopNode();
    topExpressionNode.normalizeNullWeightCommutativeFunctions();
    topExpressionNode.reduceExtraSigns_9jge9g$(setOf('+'), setOf('-'));
    topExpressionNode.normalizeSubtructions_z11m8b$(compiledConfiguration.functionConfiguration);
    topExpressionNode.normalizeFunctionStringDefinitions_z11m8b$(compiledConfiguration.functionConfiguration);
    topExpressionNode.normalizeNumbers();
    topExpressionNode.normalizeParentLinks();
    topExpressionNode.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$();
    topExpressionNode.computeIdentifier_5osufp$();
  }
  function compareWithoutSubstitutions(left, right, scope, notChangesOnVariablesFunction, maxExpressionBustCount, functionConfiguration, comparisonSettings, debugOutputMessages, compiledConfiguration) {
    if (scope === void 0)
      scope = setOf('');
    if (notChangesOnVariablesFunction === void 0)
      notChangesOnVariablesFunction = setOf_0(['+', '-', '*', '/', '^']);
    if (maxExpressionBustCount === void 0)
      maxExpressionBustCount = 4096;
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration(scope, notChangesOnVariablesFunction);
    if (comparisonSettings === void 0) {
      var $receiver = new ComparisonSettings();
      $receiver.maxExpressionBustCount = maxExpressionBustCount;
      comparisonSettings = $receiver;
    }
    if (debugOutputMessages === void 0)
      debugOutputMessages = new DebugOutputMessages();
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration, comparisonSettings, void 0, void 0, void 0, void 0, void 0, void 0, debugOutputMessages);
    return compiledConfiguration.factComparator.expressionComparator.compareWithoutSubstitutions_fb5b0y$(left, right);
  }
  function compareByPattern(expression, pattern) {
    return checkExpressionStructure(expression, pattern);
  }
  function compareWithoutSubstitutions_0(left, right, scope, notChangesOnVariablesFunction, maxExpressionBustCount, functionConfiguration, comparisonSettings, debugOutputMessages, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (notChangesOnVariablesFunction === void 0)
      notChangesOnVariablesFunction = '+;-;*;/;^';
    if (maxExpressionBustCount === void 0)
      maxExpressionBustCount = 4096;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      var tmp$_0 = toSet(destination);
      var $receiver_0 = split(notChangesOnVariablesFunction, [';']);
      var destination_0 = ArrayList_init();
      var tmp$_1;
      tmp$_1 = $receiver_0.iterator();
      while (tmp$_1.hasNext()) {
        var element_0 = tmp$_1.next();
        if (element_0.length > 0)
          destination_0.add_11rb$(element_0);
      }
      functionConfiguration = new FunctionConfiguration(tmp$_0, toSet(destination_0));
    }
    if (comparisonSettings === void 0) {
      var $receiver_1 = new ComparisonSettings();
      $receiver_1.maxExpressionBustCount = maxExpressionBustCount;
      comparisonSettings = $receiver_1;
    }
    if (debugOutputMessages === void 0)
      debugOutputMessages = new DebugOutputMessages();
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration, comparisonSettings, void 0, void 0, void 0, void 0, void 0, void 0, debugOutputMessages);
    return compareWithoutSubstitutions(stringToExpression(left, void 0, void 0, void 0, compiledConfiguration), stringToExpression(right, void 0, void 0, void 0, compiledConfiguration), void 0, void 0, void 0, void 0, void 0, void 0, compiledConfiguration);
  }
  function compareByPattern_0(expression, pattern, scope, notChangesOnVariablesFunction, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (notChangesOnVariablesFunction === void 0)
      notChangesOnVariablesFunction = '+;-;*;/;^';
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      var tmp$_0 = toSet(destination);
      var $receiver_0 = split(notChangesOnVariablesFunction, [';']);
      var destination_0 = ArrayList_init();
      var tmp$_1;
      tmp$_1 = $receiver_0.iterator();
      while (tmp$_1.hasNext()) {
        var element_0 = tmp$_1.next();
        if (element_0.length > 0)
          destination_0.add_11rb$(element_0);
      }
      functionConfiguration = new FunctionConfiguration(tmp$_0, toSet(destination_0));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    return compareByPattern(stringToExpression(expression, void 0, void 0, void 0, compiledConfiguration), stringToExpressionStructurePattern(pattern, void 0, functionConfiguration));
  }
  function compareWithoutSubstitutionsStructureStrings(leftStructureString, rightStructureString, scope, notChangesOnVariablesFunction, functionConfiguration, debugOutputMessages, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (notChangesOnVariablesFunction === void 0)
      notChangesOnVariablesFunction = '+;-;*;/;^';
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      var tmp$_0 = toSet(destination);
      var $receiver_0 = split(notChangesOnVariablesFunction, [';']);
      var destination_0 = ArrayList_init();
      var tmp$_1;
      tmp$_1 = $receiver_0.iterator();
      while (tmp$_1.hasNext()) {
        var element_0 = tmp$_1.next();
        if (element_0.length > 0)
          destination_0.add_11rb$(element_0);
      }
      functionConfiguration = new FunctionConfiguration(tmp$_0, toSet(destination_0));
    }
    if (debugOutputMessages === void 0)
      debugOutputMessages = new DebugOutputMessages();
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration, void 0, void 0, void 0, void 0, void 0, void 0, void 0, debugOutputMessages);
    return compareWithoutSubstitutions(structureStringToExpression(leftStructureString), structureStringToExpression(rightStructureString), void 0, void 0, void 0, void 0, void 0, void 0, compiledConfiguration);
  }
  function stringToExpression(string, scope, isMathMl, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (isMathMl === void 0)
      isMathMl = false;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    var expressionTreeParser = new ExpressionTreeParser(string, void 0, compiledConfiguration.functionConfiguration, compiledConfiguration.compiledImmediateVariableReplacements, isMathMl);
    expressionTreeParser.parse();
    return expressionTreeParser.root;
  }
  function expressionToString(expressionNode, characterEscapingDepth) {
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    return escapeCharacters(expressionNode.toPlainTextView_8ellkq$(), characterEscapingDepth);
  }
  function expressionToUnicodeString$lambda(it) {
    return it.unicodeRepresentation;
  }
  function expressionToUnicodeString(expressionNode, characterEscapingDepth) {
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    return escapeCharacters(expressionNode.toPlainTextView_8ellkq$(void 0, void 0, expressionToUnicodeString$lambda), characterEscapingDepth);
  }
  function expressionToTexString(expressionNode, characterEscapingDepth) {
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    return escapeCharacters(expressionNode.toTexView_bu354u$(), characterEscapingDepth);
  }
  function structureStringToExpression(structureString, scope, functionConfiguration) {
    if (scope === void 0)
      scope = '';
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    var expressionNodeConstructor = new ExpressionNodeConstructor(functionConfiguration);
    var result = expressionNodeConstructor.construct_61zpoe$(structureString);
    result.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$();
    result.computeIdentifier_5osufp$();
    return result;
  }
  function expressionToStructureString(expressionNode) {
    return expressionNode.toString();
  }
  function stringToStructureString(string, scope, isMathMl, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (isMathMl === void 0)
      isMathMl = false;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    return expressionToStructureString(stringToExpression(string, scope, isMathMl, functionConfiguration, compiledConfiguration));
  }
  function structureStringToString(structureString, scope, functionConfiguration, characterEscapingDepth) {
    if (scope === void 0)
      scope = '';
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    return expressionToString(structureStringToExpression(structureString, scope, functionConfiguration), characterEscapingDepth);
  }
  function structureStringToTexString(structureString, scope, functionConfiguration, characterEscapingDepth) {
    if (scope === void 0)
      scope = '';
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    return expressionToTexString(structureStringToExpression(structureString, scope, functionConfiguration), characterEscapingDepth);
  }
  function stringToExpressionStructurePattern(string, scope, functionConfiguration) {
    if (scope === void 0)
      scope = '';
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    var expressionStructureConditionConstructor = new ExpressionStructureConditionConstructor();
    return expressionStructureConditionConstructor.parse_61zpoe$(string);
  }
  function investigateIfExpressionFormIsStructureString(expression) {
    if (!endsWith(expression, 41)) {
      return false;
    }
    return true;
  }
  function decodeUrlSymbols(string) {
    return replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(string, '%20', ' ', true), '%22', '"', true), '%23', '#', true), '%24', '$', true), '%25', '%', true), '%26', '&', true), '%2b', '+', true), '%2c', ',', true), '%2f', '/', true), '%3a', ':', true), '%3b', ';', true), '%3c', '<', true), '%3d', '=', true), '%3e', '>', true), '%3f', '?', true), '%40', '@', true), '%5b', '[', true), '%5c', '\\', true), '%5d', ']', true), '%5e', '^', true), '%60', '`', true), '%7b', '{', true), '%7c', '|', true), '%7d', '}', true), '%7e', '~', true);
  }
  function optGenerateSimpleComputationRule(expressionPartOriginal, simpleComputationRuleParams) {
    var tmp$, tmp$_0;
    var result = ArrayList_init();
    var tmp$_1 = !simpleComputationRuleParams.isIncluded || calcComplexity(expressionPartOriginal) > 4;
    if (!tmp$_1) {
      tmp$_1 = !subtract(expressionPartOriginal.getContainedFunctions(), simpleComputationRuleParams.operationsMap.keys).isEmpty();
    }
    if (tmp$_1) {
      return result;
    }
    var expressionPart = expressionPartOriginal.clone();
    expressionPart.variableReplacement_y0zsll$(mapOf(to('\u03C0', PI_STRING)));
    if (expressionPart.getContainedVariables().isEmpty()) {
      if (!expressionPart.children.isEmpty()) {
        tmp$ = computeNodeIfSimple(expressionPart, simpleComputationRuleParams);
        if (tmp$ == null) {
          return result;
        }
        var computed = tmp$;
        result.add_11rb$(new ExpressionSubstitution(addRootNodeToExpression(expressionPart.clone()), addRootNodeToExpression(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(computed)))));
      }
       else if (toDoubleOrNull(expressionPart.value) != null) {
        tmp$_0 = toDoubleOrNull(expressionPart.value);
        if (tmp$_0 == null) {
          return result;
        }
        var currentValue = tmp$_0;
        var plusTreeNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '+');
        plusTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(currentValue - 1)));
        plusTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
        result.add_11rb$(new ExpressionSubstitution(addRootNodeToExpression(expressionPart.clone()), addRootNodeToExpression(plusTreeNode)));
        var minusTreeNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '+');
        minusTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(currentValue + 1)));
        minusTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
        last(minusTreeNode.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
        result.add_11rb$(new ExpressionSubstitution(addRootNodeToExpression(expressionPart.clone()), addRootNodeToExpression(minusTreeNode)));
        var intCurrentValue = numberToInt(currentValue);
        if (1 < intCurrentValue && intCurrentValue < 145 && toReal_0(intCurrentValue - currentValue).additivelyEqualToZero()) {
          var sqrtValue = numberToInt(Math_0.sqrt(currentValue));
          for (var i = 2; i <= sqrtValue; i++) {
            var div = intCurrentValue / i | 0;
            if (intCurrentValue === Kotlin.imul(i, div)) {
              var mulTreeNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '*');
              mulTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), i.toString()));
              mulTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), div.toString()));
              result.add_11rb$(new ExpressionSubstitution(addRootNodeToExpression(expressionPart.clone()), addRootNodeToExpression(mulTreeNode)));
            }
          }
        }
      }
    }
    return result;
  }
  function expressionSubstitutionFromStrings(left, right, scope, basedOnTaskContext, matchJumbledAndNested, priority, code, nameEn, nameRu, functionConfiguration, compiledConfiguration) {
    if (left === void 0)
      left = '';
    if (right === void 0)
      right = '';
    if (scope === void 0)
      scope = '';
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = false;
    if (priority === void 0)
      priority = 50;
    if (code === void 0)
      code = '';
    if (nameEn === void 0)
      nameEn = '';
    if (nameRu === void 0)
      nameRu = '';
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    return new ExpressionSubstitution(!isBlank(left) ? stringToExpression(left, void 0, void 0, void 0, compiledConfiguration) : new ExpressionNode(NodeType$EMPTY_getInstance(), ''), !isBlank(right) ? stringToExpression(right, void 0, void 0, void 0, compiledConfiguration) : new ExpressionNode(NodeType$EMPTY_getInstance(), ''), void 0, basedOnTaskContext, !isBlank(code) ? code : "'" + stringToStructureString(left, void 0, void 0, void 0, compiledConfiguration) + "'->'" + stringToStructureString(right, void 0, void 0, void 0, compiledConfiguration) + "'", nameEn, nameRu, void 0, void 0, void 0, matchJumbledAndNested, priority);
  }
  function expressionSubstitutionFromStructureStrings(leftStructureString, rightStructureString, basedOnTaskContext, matchJumbledAndNested, simpleAdditional, isExtending, priority, code, nameEn, nameRu, normalizationType, weight, weightInTaskAutoGeneration, useWhenPostprocessGeneratedExpression, tagsForTaskGenerator) {
    if (leftStructureString === void 0)
      leftStructureString = '';
    if (rightStructureString === void 0)
      rightStructureString = '';
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = false;
    if (simpleAdditional === void 0)
      simpleAdditional = false;
    if (isExtending === void 0)
      isExtending = false;
    if (priority === void 0)
      priority = 50;
    if (code === void 0)
      code = '';
    if (nameEn === void 0)
      nameEn = '';
    if (nameRu === void 0)
      nameRu = '';
    if (normalizationType === void 0)
      normalizationType = ExpressionSubstitutionNormType$ORIGINAL_getInstance();
    if (weight === void 0)
      weight = 1.0;
    if (weightInTaskAutoGeneration === void 0)
      weightInTaskAutoGeneration = 1.0;
    if (useWhenPostprocessGeneratedExpression === void 0)
      useWhenPostprocessGeneratedExpression = false;
    if (tagsForTaskGenerator === void 0) {
      tagsForTaskGenerator = emptyList();
    }
    return new ExpressionSubstitution(!isBlank(leftStructureString) ? structureStringToExpression(leftStructureString) : new ExpressionNode(NodeType$EMPTY_getInstance(), ''), !isBlank(rightStructureString) ? structureStringToExpression(rightStructureString) : new ExpressionNode(NodeType$EMPTY_getInstance(), ''), weight, basedOnTaskContext, !isBlank(code) ? code : "'" + leftStructureString + "'->'" + rightStructureString + "'", nameEn, nameRu, void 0, void 0, void 0, matchJumbledAndNested, priority, void 0, simpleAdditional, isExtending, normalizationType, void 0, weightInTaskAutoGeneration, useWhenPostprocessGeneratedExpression, tagsForTaskGenerator);
  }
  function expressionSubstitutionFromRuleITR(ruleITR) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11;
    return expressionSubstitutionFromStructureStrings((tmp$ = ruleITR.leftStructureString) != null ? tmp$ : '', (tmp$_0 = ruleITR.rightStructureString) != null ? tmp$_0 : '', (tmp$_1 = ruleITR.basedOnTaskContext) != null ? tmp$_1 : false, (tmp$_2 = ruleITR.matchJumbledAndNested) != null ? tmp$_2 : false, (tmp$_3 = ruleITR.simpleAdditional) != null ? tmp$_3 : false, (tmp$_4 = ruleITR.isExtending) != null ? tmp$_4 : false, (tmp$_5 = ruleITR.priority) != null ? tmp$_5 : 50, (tmp$_6 = ruleITR.code) != null ? tmp$_6 : '', (tmp$_7 = ruleITR.nameEn) != null ? tmp$_7 : '', (tmp$_8 = ruleITR.nameRu) != null ? tmp$_8 : '', ExpressionSubstitutionNormType$valueOf((tmp$_9 = ruleITR.normalizationType) != null ? tmp$_9 : 'ORIGINAL'), (tmp$_10 = ruleITR.weight) != null ? tmp$_10 : 1.0, (tmp$_11 = ruleITR.weightInTaskAutoGeneration) != null ? tmp$_11 : 1.0, ruleITR.useWhenPostprocessGeneratedExpression, ruleITR.tagsForTaskGenerator);
  }
  function expressionSubstitutionsFromRulePackITR(rulePackITR, rulePacksITR, includeChildRulePacks) {
    var tmp$, tmp$_0;
    var result = ArrayList_init();
    if (rulePackITR.rules != null) {
      tmp$ = rulePackITR.rules.iterator();
      while (tmp$.hasNext()) {
        var rule = tmp$.next();
        result.add_11rb$(expressionSubstitutionFromRuleITR(rule));
      }
    }
    if (includeChildRulePacks) {
      if ((tmp$_0 = rulePackITR.rulePacks) != null) {
        var tmp$_1;
        tmp$_1 = tmp$_0.iterator();
        while (tmp$_1.hasNext()) {
          var element = tmp$_1.next();
          var key = element.rulePackCode;
          var tmp$_2;
          var rulePack = (Kotlin.isType(tmp$_2 = rulePacksITR, Map) ? tmp$_2 : throwCCE()).get_11rb$(key);
          if (rulePack != null) {
            result.addAll_brywnq$(expressionSubstitutionsFromRulePackITR(rulePack, rulePacksITR, includeChildRulePacks));
          }
           else {
            throw IllegalArgumentException_init("No Rule Pack with code '" + toString(element.rulePackCode) + "'");
          }
        }
      }
    }
    return result;
  }
  function findSubstitutionPlacesInExpression(expression, substitution, compiledConfiguration) {
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration();
    if (!substitution.isAppropriateToFunctions_ywdfdh$(expression.getContainedFunctions()) && intersect(substitution.left.getContainedVariables(), expression.getContainedVariables()).isEmpty()) {
      return ArrayList_init();
    }
    var expr = expression;
    var result = substitution.findAllPossibleSubstitutionPlaces_i8kf4x$(expression, compiledConfiguration.factComparator.expressionComparator);
    if (result.isEmpty() && substitution.matchJumbledAndNested && expression.containsNestedSameFunctions()) {
      expr = expression.cloneWithExpandingNestedSameFunctions();
      result = substitution.findAllPossibleSubstitutionPlaces_i8kf4x$(expr, compiledConfiguration.factComparator.expressionComparator);
    }
    if (result.isEmpty()) {
      expr = expr.cloneAndSimplifyByComputeSimplePlaces_el1bjq$();
      result = substitution.findAllPossibleSubstitutionPlaces_i8kf4x$(expr, compiledConfiguration.factComparator.expressionComparator);
    }
    return result;
  }
  function applySubstitution(expression, substitution, substitutionPlaces, compiledConfiguration) {
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration();
    substitution.applySubstitution_3grqus$(substitutionPlaces, compiledConfiguration.factComparator.expressionComparator);
    expression.getTopNode().reduceExtraSigns_9jge9g$(setOf('+'), setOf('-'));
    expression.getTopNode().normalizeSubtructions_z11m8b$(new FunctionConfiguration());
    expression.getTopNode().computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$();
    expression.normalizeParentLinks();
    return expression;
  }
  function createCompiledConfigurationFromExpressionSubstitutionsAndParams(expressionSubstitutions, additionalParamsMap) {
    if (additionalParamsMap === void 0) {
      additionalParamsMap = emptyMap();
    }
    var destination = ArrayList_init_0(expressionSubstitutions.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== expressionSubstitutions.length; ++tmp$) {
      var item = expressionSubstitutions[tmp$];
      destination.add_11rb$(item.code);
    }
    var destination_0 = ArrayList_init();
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      if (!isBlank(element))
        destination_0.add_11rb$(element);
    }
    var simpleComputationRuleCodesCandidates = toSet(destination_0);
    var $receiver = new CompiledConfiguration(void 0, void 0, void 0, void 0, void 0, void 0, additionalParamsMap, simpleComputationRuleCodesCandidates);
    var tmp$_1;
    $receiver.compiledExpressionTreeTransformationRules.clear();
    $receiver.compiledExpressionSimpleAdditionalTreeTransformationRules.clear();
    var handledCodesHashSet = HashSet_init();
    for (tmp$_1 = 0; tmp$_1 !== expressionSubstitutions.length; ++tmp$_1) {
      var substitution = expressionSubstitutions[tmp$_1];
      if (handledCodesHashSet.contains_11rb$(substitution.code))
        continue;
      handledCodesHashSet.add_11rb$(substitution.code);
      if (substitution.left.nodeType === NodeType$EMPTY_getInstance() || substitution.right.nodeType === NodeType$EMPTY_getInstance()) {
        if (substitution.code.length > 0) {
          $receiver.expressionTreeAutogeneratedTransformationRuleIdentifiers.put_xwzc9p$(substitution.code, substitution);
        }
      }
       else {
        $receiver.compiledExpressionTreeTransformationRules.add_11rb$(substitution);
        if (substitution.simpleAdditional) {
          $receiver.compiledExpressionSimpleAdditionalTreeTransformationRules.add_11rb$(substitution);
        }
      }
    }
    return $receiver;
  }
  function findApplicableSubstitutionsInSelectedPlace(expression, selectedNodeIds, compiledConfiguration, simplifyNotSelectedTopArguments, withReadyApplicationResult, withFullExpressionChangingPart) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = true;
    if (withFullExpressionChangingPart === void 0)
      withFullExpressionChangingPart = true;
    return generateSubstitutionsBySelectedNodes(new SubstitutionSelectionData(expression, selectedNodeIds, compiledConfiguration), void 0, withReadyApplicationResult, void 0, withFullExpressionChangingPart);
  }
  function applySubstitutionInSelectedPlace(expression, selectedNodeIds, substitution, compiledConfiguration, simplifyNotSelectedTopArguments) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    var substitutionSelectionData = new SubstitutionSelectionData(expression, selectedNodeIds, compiledConfiguration);
    fillSubstitutionSelectionData(substitutionSelectionData);
    return applySubstitution_0(substitutionSelectionData, substitution, simplifyNotSelectedTopArguments);
  }
  function checkAndAddNewVariableReplacement(variableName, variableValue, expression, compiledConfiguration) {
    return compiledConfiguration.checkAndAddNewVariableReplacement_6moki$(variableName, variableValue, expression);
  }
  function generateSubstitutionsBySelectedNodesAndItsForwardInverseExtension(expression, selectedNodeIds, compiledConfiguration, forwardInverseExtension, withFullExpressionChangingPart) {
    if (withFullExpressionChangingPart === void 0)
      withFullExpressionChangingPart = true;
    return generateSubstitutionsBySelectedNodesAndItsForwardInverseExtension_0(new SubstitutionSelectionData(expression, selectedNodeIds, compiledConfiguration), forwardInverseExtension, withFullExpressionChangingPart);
  }
  function getAllowedForwardInverseExtensionTypes(compiledConfiguration) {
    var result = ArrayList_init();
    switch (compiledConfiguration.subjectType) {
      case 'set':
      case 'logic':
        if (compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('SetComplicatingExtension')) {
          result.add_11rb$(ForwardInverseExtensionType$LOGIC_ABSORPTION_getInstance());
        }

        break;
      default:if (compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('AdditiveComplicatingExtension')) {
          result.add_11rb$(ForwardInverseExtensionType$ADD_SUBTRACT_getInstance());
        }

        if (compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('MultiplicativeComplicatingExtension')) {
          result.add_11rb$(ForwardInverseExtensionType$MULTIPLY_DIVIDE_getInstance());
        }

        if (compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('PowRootComplicatingExtension')) {
          result.add_11rb$(ForwardInverseExtensionType$POW_ROOT_getInstance());
        }

        if (compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('LogExpComplicatingExtension')) {
          result.add_11rb$(ForwardInverseExtensionType$EXPONENTIATE_LOGARITHM_getInstance());
        }

        break;
    }
    return result;
  }
  function findLowestSubtreeTopOfSelectedNodesInExpression(node, selectedNodes) {
    return findLowestSubtreeTopOfNodes(node, selectedNodes);
  }
  function SubstitutionPlaceOfflineData(parentStartPosition, parentEndPosition, startPosition, endPosition) {
    this.parentStartPosition = parentStartPosition;
    this.parentEndPosition = parentEndPosition;
    this.startPosition = startPosition;
    this.endPosition = endPosition;
  }
  SubstitutionPlaceOfflineData.prototype.toJSON = function () {
    return '{' + ('"' + 'parentStartPosition' + '"' + ':' + '"' + this.parentStartPosition + '"' + ',') + ('"' + 'parentEndPosition' + '"' + ':' + '"' + this.parentEndPosition + '"' + ',') + ('"' + 'startPosition' + '"' + ':' + '"' + this.startPosition + '"' + ',') + ('"' + 'endPosition' + '"' + ':' + '"' + this.endPosition + '"') + '}';
  };
  SubstitutionPlaceOfflineData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubstitutionPlaceOfflineData',
    interfaces: []
  };
  SubstitutionPlaceOfflineData.prototype.component1 = function () {
    return this.parentStartPosition;
  };
  SubstitutionPlaceOfflineData.prototype.component2 = function () {
    return this.parentEndPosition;
  };
  SubstitutionPlaceOfflineData.prototype.component3 = function () {
    return this.startPosition;
  };
  SubstitutionPlaceOfflineData.prototype.component4 = function () {
    return this.endPosition;
  };
  SubstitutionPlaceOfflineData.prototype.copy_tjonv8$ = function (parentStartPosition, parentEndPosition, startPosition, endPosition) {
    return new SubstitutionPlaceOfflineData(parentStartPosition === void 0 ? this.parentStartPosition : parentStartPosition, parentEndPosition === void 0 ? this.parentEndPosition : parentEndPosition, startPosition === void 0 ? this.startPosition : startPosition, endPosition === void 0 ? this.endPosition : endPosition);
  };
  SubstitutionPlaceOfflineData.prototype.toString = function () {
    return 'SubstitutionPlaceOfflineData(parentStartPosition=' + Kotlin.toString(this.parentStartPosition) + (', parentEndPosition=' + Kotlin.toString(this.parentEndPosition)) + (', startPosition=' + Kotlin.toString(this.startPosition)) + (', endPosition=' + Kotlin.toString(this.endPosition)) + ')';
  };
  SubstitutionPlaceOfflineData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.parentStartPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.parentEndPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.startPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.endPosition) | 0;
    return result;
  };
  SubstitutionPlaceOfflineData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.parentStartPosition, other.parentStartPosition) && Kotlin.equals(this.parentEndPosition, other.parentEndPosition) && Kotlin.equals(this.startPosition, other.startPosition) && Kotlin.equals(this.endPosition, other.endPosition)))));
  };
  function findSubstitutionPlacesCoordinatesInExpressionJSON$lambda(it) {
    return it.toJSON();
  }
  function findSubstitutionPlacesCoordinatesInExpressionJSON(expression, substitutionLeft, substitutionRight, scope, basedOnTaskContext, matchJumbledAndNested, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = false;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    var substitutionPlaces = findSubstitutionPlacesInExpression(stringToExpression(expression, void 0, void 0, void 0, compiledConfiguration), expressionSubstitutionFromStrings(substitutionLeft, substitutionRight, void 0, basedOnTaskContext, matchJumbledAndNested, void 0, void 0, void 0, void 0, void 0, compiledConfiguration));
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault(substitutionPlaces, 10));
    var tmp$_0;
    tmp$_0 = substitutionPlaces.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination_0.add_11rb$(new SubstitutionPlaceOfflineData(item.nodeParent.startPosition, item.nodeParent.endPosition, item.nodeParent.children.get_za3lpa$(item.nodeChildIndex).startPosition, item.nodeParent.children.get_za3lpa$(item.nodeChildIndex).endPosition));
    }
    var data = joinToString(destination_0, ',', void 0, void 0, void 0, void 0, findSubstitutionPlacesCoordinatesInExpressionJSON$lambda);
    return '{' + '"' + 'substitutionPlaces' + '"' + ':[' + data + ']}';
  }
  function findStructureStringsSubstitutionPlacesCoordinatesInExpressionJSON$lambda(it) {
    return it.toJSON();
  }
  function findStructureStringsSubstitutionPlacesCoordinatesInExpressionJSON(expression, substitutionLeftStructureString, substitutionRightStructureString, scope, basedOnTaskContext, matchJumbledAndNested, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = false;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    var substitutionPlaces = findSubstitutionPlacesInExpression(stringToExpression(expression, void 0, void 0, void 0, compiledConfiguration), expressionSubstitutionFromStructureStrings(substitutionLeftStructureString, substitutionRightStructureString, basedOnTaskContext, matchJumbledAndNested));
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault(substitutionPlaces, 10));
    var tmp$_0;
    tmp$_0 = substitutionPlaces.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination_0.add_11rb$(new SubstitutionPlaceOfflineData(item.nodeParent.startPosition, item.nodeParent.endPosition, item.nodeParent.children.get_za3lpa$(item.nodeChildIndex).startPosition, item.nodeParent.children.get_za3lpa$(item.nodeChildIndex).endPosition));
    }
    var data = joinToString(destination_0, ',', void 0, void 0, void 0, void 0, findStructureStringsSubstitutionPlacesCoordinatesInExpressionJSON$lambda);
    return '{' + '"' + 'substitutionPlaces' + '"' + ':[' + data + ']}';
  }
  function applyExpressionBySubstitutionPlaceCoordinates(expression, substitutionLeft, substitutionRight, parentStartPosition, parentEndPosition, startPosition, endPosition, scope, basedOnTaskContext, matchJumbledAndNested, characterEscapingDepth, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = false;
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    var tmp$_0;
    var actualExpression = stringToExpression(expression, void 0, void 0, void 0, compiledConfiguration);
    var actualSubstitution = expressionSubstitutionFromStrings(substitutionLeft, substitutionRight, void 0, basedOnTaskContext, matchJumbledAndNested, void 0, void 0, void 0, void 0, void 0, compiledConfiguration);
    var substitutionPlaces = findSubstitutionPlacesInExpression(actualExpression, actualSubstitution);
    var destination_0 = ArrayList_init();
    var tmp$_1;
    tmp$_1 = substitutionPlaces.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      if (element_0.nodeParent.startPosition === parentStartPosition && element_0.nodeParent.endPosition === parentEndPosition && element_0.nodeParent.children.get_za3lpa$(element_0.nodeChildIndex).startPosition === startPosition && element_0.nodeParent.children.get_za3lpa$(element_0.nodeChildIndex).endPosition === endPosition)
        destination_0.add_11rb$(element_0);
    }
    var actualPlace = destination_0;
    if (!actualPlace.isEmpty()) {
      tmp$_0 = applySubstitution(actualExpression, actualSubstitution, actualPlace);
    }
     else {
      tmp$_0 = actualExpression;
    }
    var result = tmp$_0;
    return escapeCharacters(expressionToString(result), characterEscapingDepth);
  }
  function applyExpressionByStructureStringsSubstitutionPlaceCoordinates(expression, substitutionLeftStructureString, substitutionRightStructureString, parentStartPosition, parentEndPosition, startPosition, endPosition, scope, basedOnTaskContext, matchJumbledAndNested, characterEscapingDepth, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = false;
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    var tmp$_0;
    var actualExpression = stringToExpression(expression, void 0, void 0, void 0, compiledConfiguration);
    var actualSubstitution = expressionSubstitutionFromStructureStrings(substitutionLeftStructureString, substitutionRightStructureString, basedOnTaskContext, matchJumbledAndNested);
    var substitutionPlaces = findSubstitutionPlacesInExpression(actualExpression, actualSubstitution);
    var destination_0 = ArrayList_init();
    var tmp$_1;
    tmp$_1 = substitutionPlaces.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      if (element_0.nodeParent.startPosition === parentStartPosition && element_0.nodeParent.endPosition === parentEndPosition && element_0.nodeParent.children.get_za3lpa$(element_0.nodeChildIndex).startPosition === startPosition && element_0.nodeParent.children.get_za3lpa$(element_0.nodeChildIndex).endPosition === endPosition)
        destination_0.add_11rb$(element_0);
    }
    var actualPlace = destination_0;
    if (!actualPlace.isEmpty()) {
      tmp$_0 = applySubstitution(actualExpression, actualSubstitution, actualPlace);
    }
     else {
      tmp$_0 = actualExpression;
    }
    var result = tmp$_0;
    return escapeCharacters(expressionToString(result), characterEscapingDepth);
  }
  function checkAndAddNewVariableReplacement_0(variableName, variableValue, expression, compiledConfiguration) {
    return checkAndAddNewVariableReplacement(variableName, structureStringToExpression(variableValue), structureStringToExpression(expression), compiledConfiguration);
  }
  function createExpressionFrontInput(expression, format) {
    return new ExpressionFrontInput(expression, format);
  }
  function createRuleITR(code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, left, right, priority, isExtending, matchJumbledAndNested, simpleAdditional, basedOnTaskContext, normalizationType, weight, subjectType) {
    if (code === void 0)
      code = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (left === void 0)
      left = null;
    if (right === void 0)
      right = null;
    if (priority === void 0)
      priority = null;
    if (isExtending === void 0)
      isExtending = null;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = null;
    if (simpleAdditional === void 0)
      simpleAdditional = null;
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = null;
    if (normalizationType === void 0)
      normalizationType = null;
    if (weight === void 0)
      weight = null;
    if (subjectType === void 0)
      subjectType = null;
    var tmp$, tmp$_0;
    return new RuleITR(code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, (tmp$ = left != null ? toStructureStructureString(left, subjectType != null ? subjectType : '') : null) != null ? tmp$ : '', (tmp$_0 = right != null ? toStructureStructureString(right, subjectType != null ? subjectType : '') : null) != null ? tmp$_0 : '', priority, isExtending, matchJumbledAndNested, simpleAdditional, basedOnTaskContext, normalizationType, weight);
  }
  function createRulePackLinkITR(namespaceCode, rulePackCode) {
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (rulePackCode === void 0)
      rulePackCode = null;
    return new RulePackLinkITR(namespaceCode, rulePackCode);
  }
  function createRulePackITR(code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, rulePacks, rules, otherCheckSolutionData, otherAutoGenerationData, otherData) {
    if (code === void 0)
      code = null;
    if (version === void 0)
      version = 0;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = 'standard_math';
    if (rulePacks === void 0)
      rulePacks = null;
    if (rules === void 0)
      rules = null;
    if (otherCheckSolutionData === void 0)
      otherCheckSolutionData = null;
    if (otherAutoGenerationData === void 0)
      otherAutoGenerationData = null;
    if (otherData === void 0)
      otherData = null;
    var tmp$, tmp$_0, tmp$_1;
    return new RulePackITR(code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, rulePacks, rules, otherCheckSolutionData != null ? Kotlin.isType(tmp$ = JsonParser$Companion_getInstance().parseMap_61zpoe$(otherCheckSolutionData), Map) ? tmp$ : throwCCE() : null, otherAutoGenerationData != null ? Kotlin.isType(tmp$_0 = JsonParser$Companion_getInstance().parseMap_61zpoe$(otherAutoGenerationData), Map) ? tmp$_0 : throwCCE() : null, otherData != null ? Kotlin.isType(tmp$_1 = JsonParser$Companion_getInstance().parseMap_61zpoe$(otherData), Map) ? tmp$_1 : throwCCE() : null);
  }
  function createTaskITR(taskCreationType, code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, originalExpression, goalType, goalExpression, goalPattern, goalNumberProperty, otherGoalData, rulePacks, rules, stepsNumber, time, difficulty, solution, solutionsStepsTree, interestingFacts, nextRecommendedTasks, hints, otherCheckSolutionData, countOfAutoGeneratedTasks, otherAutoGenerationData, otherAwardData, otherData) {
    if (taskCreationType === void 0)
      taskCreationType = 'manual';
    if (code === void 0)
      code = null;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = null;
    if (tags === void 0)
      tags = null;
    if (originalExpression === void 0)
      originalExpression = null;
    if (goalType === void 0)
      goalType = null;
    if (goalExpression === void 0)
      goalExpression = null;
    if (goalPattern === void 0)
      goalPattern = null;
    if (goalNumberProperty === void 0)
      goalNumberProperty = null;
    if (otherGoalData === void 0)
      otherGoalData = null;
    if (rulePacks === void 0)
      rulePacks = null;
    if (rules === void 0)
      rules = null;
    if (stepsNumber === void 0)
      stepsNumber = null;
    if (time === void 0)
      time = null;
    if (solution === void 0)
      solution = null;
    if (solutionsStepsTree === void 0)
      solutionsStepsTree = null;
    if (interestingFacts === void 0)
      interestingFacts = null;
    if (nextRecommendedTasks === void 0)
      nextRecommendedTasks = null;
    if (hints === void 0)
      hints = null;
    if (otherCheckSolutionData === void 0)
      otherCheckSolutionData = null;
    if (countOfAutoGeneratedTasks === void 0)
      countOfAutoGeneratedTasks = 0;
    if (otherAutoGenerationData === void 0)
      otherAutoGenerationData = null;
    if (otherAwardData === void 0)
      otherAwardData = null;
    if (otherData === void 0)
      otherData = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11;
    return new TaskITR(taskCreationType != null ? taskCreationType : 'manual', code, 1, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, (tmp$ = tags != null ? toMutableSet(tags) : null) != null ? tmp$ : LinkedHashSet_init(), (tmp$_0 = originalExpression != null ? toStructureStructureString(originalExpression, subjectType != null ? subjectType : '') : null) != null ? tmp$_0 : '', void 0, void 0, goalType, (tmp$_1 = goalExpression != null ? toStructureStructureString(goalExpression, subjectType != null ? subjectType : '') : null) != null ? tmp$_1 : '', void 0, void 0, goalPattern, goalNumberProperty, otherGoalData != null ? Kotlin.isType(tmp$_2 = JsonParser$Companion_getInstance().parseMap_61zpoe$(otherGoalData), Map) ? tmp$_2 : throwCCE() : null, rulePacks != null ? toList(rulePacks) : null, rules != null ? toList(rules) : null, stepsNumber, time, difficulty, void 0, (tmp$_3 = solution != null ? toStructureStructureString(solution, subjectType != null ? subjectType : '') : null) != null ? tmp$_3 : '', solutionsStepsTree != null ? Kotlin.isType(tmp$_4 = JsonParser$Companion_getInstance().parseMap_61zpoe$(solutionsStepsTree), Map) ? tmp$_4 : throwCCE() : null, hints != null ? Kotlin.isType(tmp$_7 = JsonParser$Companion_getInstance().parseMap_61zpoe$(hints), Map) ? tmp$_7 : throwCCE() : null, otherCheckSolutionData != null ? Kotlin.isType(tmp$_8 = JsonParser$Companion_getInstance().parseMap_61zpoe$(otherCheckSolutionData), Map) ? tmp$_8 : throwCCE() : null, countOfAutoGeneratedTasks, otherAutoGenerationData != null ? Kotlin.isType(tmp$_9 = JsonParser$Companion_getInstance().parseMap_61zpoe$(otherAutoGenerationData), Map) ? tmp$_9 : throwCCE() : null, interestingFacts != null ? Kotlin.isType(tmp$_5 = JsonParser$Companion_getInstance().parseMap_61zpoe$(interestingFacts), Map) ? tmp$_5 : throwCCE() : null, otherAwardData != null ? Kotlin.isType(tmp$_10 = JsonParser$Companion_getInstance().parseMap_61zpoe$(otherAwardData), Map) ? tmp$_10 : throwCCE() : null, nextRecommendedTasks != null ? Kotlin.isType(tmp$_6 = JsonParser$Companion_getInstance().parseMap_61zpoe$(nextRecommendedTasks), Map) ? tmp$_6 : throwCCE() : null, otherData != null ? Kotlin.isType(tmp$_11 = JsonParser$Companion_getInstance().parseMap_61zpoe$(otherData), Map) ? tmp$_11 : throwCCE() : null);
  }
  function createCompiledConfigurationFromITR(taskITR, rulePacksITR, comparisonSettings, actualRulePackCodes) {
    if (taskITR === void 0)
      taskITR = null;
    if (rulePacksITR === void 0)
      rulePacksITR = null;
    if (comparisonSettings === void 0)
      comparisonSettings = new ComparisonSettings();
    if (actualRulePackCodes === void 0)
      actualRulePackCodes = null;
    var tmp$, tmp$_0;
    var tmp$_1;
    if (rulePacksITR != null) {
      var destination = ArrayList_init();
      var tmp$_2;
      for (tmp$_2 = 0; tmp$_2 !== rulePacksITR.length; ++tmp$_2) {
        var element = rulePacksITR[tmp$_2];
        if (element.code != null)
          destination.add_11rb$(element);
      }
      tmp$_1 = destination;
    }
     else
      tmp$_1 = null;
    var tmp$_3;
    if ((tmp$ = tmp$_1) != null) {
      var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(tmp$, 10)), 16);
      var destination_0 = LinkedHashMap_init(capacity);
      var tmp$_4;
      tmp$_4 = tmp$.iterator();
      while (tmp$_4.hasNext()) {
        var element_0 = tmp$_4.next();
        destination_0.put_xwzc9p$(ensureNotNull(element_0.code), element_0);
      }
      tmp$_3 = destination_0;
    }
     else
      tmp$_3 = null;
    return internalCreateCompiledConfigurationFromITR(taskITR, actualRulePackCodes, (tmp$_0 = tmp$_3) != null ? tmp$_0 : DefaultRulePacks$Companion_getInstance().map(), comparisonSettings);
  }
  function internalCreateCompiledConfigurationFromITR$lambda() {
    return 'build verification settings';
  }
  function internalCreateCompiledConfigurationFromITR$lambda_0() {
    return "'setTheory' is added to scopeFilter (got from task)";
  }
  function internalCreateCompiledConfigurationFromITR$lambda$lambda(it) {
    var tmp$, tmp$_0;
    return ensureNotNull(it.code) + ' : ' + toString((tmp$ = it.rules) != null ? tmp$.size : null) + ' rules : ' + toString((tmp$_0 = it.rulePacks) != null ? tmp$_0.size : null) + ' rulePacks';
  }
  function internalCreateCompiledConfigurationFromITR$lambda_1(closure$rulePacksMap) {
    return function () {
      return 'rulePacksMap: ' + joinToString(closure$rulePacksMap.values, void 0, void 0, void 0, void 0, void 0, internalCreateCompiledConfigurationFromITR$lambda$lambda);
    };
  }
  function internalCreateCompiledConfigurationFromITR$lambda$lambda_0(it) {
    return ensureNotNull(it.rulePackCode);
  }
  function internalCreateCompiledConfigurationFromITR$lambda_2(closure$taskITR) {
    return function () {
      var tmp$;
      return 'taskRulePacks: ' + toString((tmp$ = closure$taskITR != null ? closure$taskITR.rulePacks : null) != null ? joinToString(tmp$, void 0, void 0, void 0, void 0, void 0, internalCreateCompiledConfigurationFromITR$lambda$lambda_0) : null);
    };
  }
  function internalCreateCompiledConfigurationFromITR$lambda$lambda_1(closure$rulePackCode) {
    return function () {
      return "ERROR: rule pack '" + closure$rulePackCode + "' not found";
    };
  }
  function internalCreateCompiledConfigurationFromITR$lambda$lambda_2(closure$rulePack) {
    return function () {
      return "'setTheory' is added to scopeFilter (got from rulePack '" + toString(closure$rulePack.code) + "')";
    };
  }
  function internalCreateCompiledConfigurationFromITR$lambda_3() {
    return 'functionConfiguration rules cleaned';
  }
  function internalCreateCompiledConfigurationFromITR$lambda$lambda_3(it) {
    return it.getIdentifier();
  }
  function internalCreateCompiledConfigurationFromITR$lambda_4(closure$functionConfiguration) {
    return function () {
      return 'notChangesOnVariablesInComparisonFunction: ' + joinToString(closure$functionConfiguration.notChangesOnVariablesInComparisonFunction, void 0, void 0, void 0, void 0, void 0, internalCreateCompiledConfigurationFromITR$lambda$lambda_3);
    };
  }
  function internalCreateCompiledConfigurationFromITR$lambda$lambda_4(it) {
    return it.getIdentifier();
  }
  function internalCreateCompiledConfigurationFromITR$lambda_5(closure$functionConfiguration) {
    return function () {
      return 'notChangesOnVariablesInComparisonFunctionWithoutTransformations: ' + joinToString(closure$functionConfiguration.notChangesOnVariablesInComparisonFunctionWithoutTransformations, void 0, void 0, void 0, void 0, void 0, internalCreateCompiledConfigurationFromITR$lambda$lambda_4);
    };
  }
  function internalCreateCompiledConfigurationFromITR(taskITR, actualRulePackCodes, rulePacksMap, comparisonSettings) {
    if (taskITR === void 0)
      taskITR = null;
    if (actualRulePackCodes === void 0)
      actualRulePackCodes = null;
    if (rulePacksMap === void 0)
      rulePacksMap = DefaultRulePacks$Companion_getInstance().map();
    if (comparisonSettings === void 0)
      comparisonSettings = new ComparisonSettings();
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    log_1.addMessage_cte53e$(internalCreateCompiledConfigurationFromITR$lambda, void 0, 0);
    var scopeFilter = LinkedHashSet_init();
    var subjectType = {v: taskITR != null ? taskITR.subjectType : null};
    if (taskITR != null) {
      if (contains(listOf_0(['set', 'logic']), ensureNotNull(taskITR).subjectType)) {
        log_1.addMessage_cte53e$(internalCreateCompiledConfigurationFromITR$lambda_0, void 0, 1);
        scopeFilter.add_11rb$('setTheory');
      }
    }
    var expressionSubstitutions = ArrayList_init();
    if ((tmp$ = taskITR != null ? taskITR.rules : null) != null) {
      var tmp$_4;
      tmp$_4 = tmp$.iterator();
      while (tmp$_4.hasNext()) {
        var element = tmp$_4.next();
        expressionSubstitutions.add_11rb$(expressionSubstitutionFromRuleITR(element));
      }
    }
    log_1.addMessage_cte53e$(internalCreateCompiledConfigurationFromITR$lambda_1(rulePacksMap), void 0, 1);
    log_1.addMessage_cte53e$(internalCreateCompiledConfigurationFromITR$lambda_2(taskITR), void 0, 1);
    var allRulePackCodes = LinkedHashSet_init();
    if ((tmp$_0 = taskITR != null ? taskITR.rulePacks : null) != null) {
      var tmp$_5;
      tmp$_5 = tmp$_0.iterator();
      while (tmp$_5.hasNext()) {
        var element_0 = tmp$_5.next();
        var key = element_0.rulePackCode;
        var tmp$_6;
        var rulePack = (Kotlin.isType(tmp$_6 = rulePacksMap, Map) ? tmp$_6 : throwCCE()).get_11rb$(key);
        if (rulePack != null) {
          allRulePackCodes.addAll_brywnq$(getRulePackCodesFromTree(rulePack, rulePacksMap));
        }
      }
    }
    if (actualRulePackCodes != null) {
      var tmp$_7;
      for (tmp$_7 = 0; tmp$_7 !== actualRulePackCodes.length; ++tmp$_7) {
        var element_1 = actualRulePackCodes[tmp$_7];
        var rulePack_0 = rulePacksMap.get_11rb$(element_1);
        if (rulePack_0 != null) {
          allRulePackCodes.addAll_brywnq$(getRulePackCodesFromTree(rulePack_0, rulePacksMap));
        }
         else {
          log_1.addMessage_cte53e$(internalCreateCompiledConfigurationFromITR$lambda$lambda_1(element_1), void 0, 0);
        }
      }
    }
    var notChangesOnVariablesInComparisonFunctionSet = LinkedHashSet_init();
    var notChangesOnVariablesInComparisonFunctionWithoutTransformationsSet = LinkedHashSet_init();
    var tmp$_8;
    tmp$_8 = allRulePackCodes.iterator();
    while (tmp$_8.hasNext()) {
      var element_2 = tmp$_8.next();
      var tmp$_9, tmp$_10, tmp$_11;
      var rulePack_1 = rulePacksMap.get_11rb$(element_2);
      if (rulePack_1 != null) {
        if ((tmp$_9 = rulePack_1.rules) != null) {
          var tmp$_12;
          tmp$_12 = tmp$_9.iterator();
          while (tmp$_12.hasNext()) {
            var element_3 = tmp$_12.next();
            expressionSubstitutions.add_11rb$(expressionSubstitutionFromRuleITR(element_3));
          }
        }
        if (rulePack_1.otherCheckSolutionData != null && Kotlin.isType(rulePack_1.otherCheckSolutionData.get_11rb$(notChangesOnVariablesInComparisonFunctionJsonName), List)) {
          notChangesOnVariablesInComparisonFunctionSet.addAll_brywnq$(Kotlin.isType(tmp$_10 = rulePack_1.otherCheckSolutionData.get_11rb$(notChangesOnVariablesInComparisonFunctionJsonName), List) ? tmp$_10 : throwCCE());
        }
        if (rulePack_1.otherCheckSolutionData != null && Kotlin.isType(rulePack_1.otherCheckSolutionData.get_11rb$(notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName), List)) {
          notChangesOnVariablesInComparisonFunctionWithoutTransformationsSet.addAll_brywnq$(Kotlin.isType(tmp$_11 = rulePack_1.otherCheckSolutionData.get_11rb$(notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName), List) ? tmp$_11 : throwCCE());
        }
        if (taskITR == null) {
          if (subjectType.v == null) {
            subjectType.v = rulePack_1.subjectType;
          }
          if (listOf_0(['set', 'logic']).contains_11rb$(rulePack_1.subjectType)) {
            log_1.addMessage_cte53e$(internalCreateCompiledConfigurationFromITR$lambda$lambda_2(rulePack_1), void 0, 1);
            scopeFilter.add_11rb$('setTheory');
          }
        }
      }
    }
    var functionConfiguration = new FunctionConfiguration(scopeFilter);
    if (!expressionSubstitutions.isEmpty() === true) {
      functionConfiguration.treeTransformationRules = ArrayList_init();
      functionConfiguration.taskContextTreeTransformationRules = ArrayList_init();
      log_1.addMessage_cte53e$(internalCreateCompiledConfigurationFromITR$lambda_3, void 0, 1);
    }
    functionConfiguration.notChangesOnVariablesInComparisonFunction = toList_0(notChangesOnVariablesInComparisonFunctionSet);
    functionConfiguration.notChangesOnVariablesInComparisonFunctionWithoutTransformations = toList_0(notChangesOnVariablesInComparisonFunctionWithoutTransformationsSet);
    if ((taskITR != null ? taskITR.otherCheckSolutionData : null) != null && Kotlin.isType(taskITR.otherCheckSolutionData.get_11rb$(notChangesOnVariablesInComparisonFunctionJsonName), List)) {
      functionConfiguration.notChangesOnVariablesInComparisonFunction = Kotlin.isType(tmp$_1 = taskITR.otherCheckSolutionData.get_11rb$(notChangesOnVariablesInComparisonFunctionJsonName), List) ? tmp$_1 : throwCCE();
    }
    if ((taskITR != null ? taskITR.otherCheckSolutionData : null) != null && Kotlin.isType(taskITR.otherCheckSolutionData.get_11rb$(notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName), List)) {
      functionConfiguration.notChangesOnVariablesInComparisonFunctionWithoutTransformations = Kotlin.isType(tmp$_2 = taskITR.otherCheckSolutionData.get_11rb$(notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName), List) ? tmp$_2 : throwCCE();
    }
    log_1.addMessage_cte53e$(internalCreateCompiledConfigurationFromITR$lambda_4(functionConfiguration), void 0, 1);
    log_1.addMessage_cte53e$(internalCreateCompiledConfigurationFromITR$lambda_5(functionConfiguration), void 0, 1);
    var compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration, comparisonSettings, void 0, void 0, void 0, void 0, void 0, void 0, void 0, (tmp$_3 = subjectType.v) != null ? tmp$_3 : '');
    if (!expressionSubstitutions.isEmpty()) {
      setExpressionSubstitutions(compiledConfiguration, expressionSubstitutions);
    }
    var tmp$_13;
    tmp$_13 = allRulePackCodes.iterator();
    while (tmp$_13.hasNext()) {
      var element_4 = tmp$_13.next();
      var rulePack_2 = rulePacksMap.get_11rb$(element_4);
      if (rulePack_2 != null) {
        compiledConfiguration.setInfoFromAdditionalParams_zb9t93$(rulePack_2.otherCheckSolutionData);
      }
    }
    if ((taskITR != null ? taskITR.otherCheckSolutionData : null) != null) {
      compiledConfiguration.setInfoFromAdditionalParams_zb9t93$(taskITR.otherCheckSolutionData);
    }
    return compiledConfiguration;
  }
  function checkSolutionInTexITR(originalTexSolution, taskITR, rulePacksITR, shortErrorDescription, skipTrivialCheck, comparisonSettings, inputCompiledConfiguration) {
    if (shortErrorDescription === void 0)
      shortErrorDescription = '0';
    if (skipTrivialCheck === void 0)
      skipTrivialCheck = false;
    if (comparisonSettings === void 0)
      comparisonSettings = new ComparisonSettings();
    if (inputCompiledConfiguration === void 0)
      inputCompiledConfiguration = null;
    var tmp$, tmp$_0, tmp$_1;
    log_1.clear();
    var finalCompiledConfiguration = inputCompiledConfiguration != null ? inputCompiledConfiguration : createCompiledConfigurationFromITR(taskITR, rulePacksITR, comparisonSettings);
    return checkFactsInTex(originalTexSolution, (tmp$ = taskITR.originalExpressionStructureString) != null ? tmp$ : '', (tmp$_0 = taskITR.goalExpressionStructureString) != null ? tmp$_0 : '', '', (tmp$_1 = taskITR.goalPattern) != null ? tmp$_1 : '', '', '', shortErrorDescription, skipTrivialCheck, finalCompiledConfiguration, taskITR.otherGoalData);
  }
  function checkSolutionInTex(originalTexSolution, startExpressionIdentifier, targetFactPattern, additionalFactsIdentifiers, endExpressionIdentifier, targetFactIdentifier, comparisonSign, wellKnownFunctions, wellKnownFunctionsString, unlimitedWellKnownFunctions, unlimitedWellKnownFunctionsString, expressionTransformationRules, expressionTransformationRulesString, taskContextExpressionTransformationRules, rulePacks, maxExpressionTransformationWeight, maxDistBetweenDiffSteps, scopeFilter, shortErrorDescription, skipTrivialCheck, otherGoalData, subjectType) {
    if (startExpressionIdentifier === void 0)
      startExpressionIdentifier = '';
    if (targetFactPattern === void 0)
      targetFactPattern = '';
    if (additionalFactsIdentifiers === void 0)
      additionalFactsIdentifiers = '';
    if (endExpressionIdentifier === void 0)
      endExpressionIdentifier = '';
    if (targetFactIdentifier === void 0)
      targetFactIdentifier = '';
    if (comparisonSign === void 0)
      comparisonSign = '';
    if (wellKnownFunctions === void 0) {
      wellKnownFunctions = emptyList();
    }
    if (wellKnownFunctionsString === void 0)
      wellKnownFunctionsString = '';
    if (unlimitedWellKnownFunctions === void 0)
      unlimitedWellKnownFunctions = wellKnownFunctions;
    if (unlimitedWellKnownFunctionsString === void 0)
      unlimitedWellKnownFunctionsString = wellKnownFunctionsString;
    if (expressionTransformationRules === void 0) {
      expressionTransformationRules = emptyList();
    }
    if (expressionTransformationRulesString === void 0)
      expressionTransformationRulesString = '';
    if (taskContextExpressionTransformationRules === void 0)
      taskContextExpressionTransformationRules = '';
    if (rulePacks === void 0) {
      rulePacks = copyToArray(emptyList());
    }
    if (maxExpressionTransformationWeight === void 0)
      maxExpressionTransformationWeight = '1.0';
    if (maxDistBetweenDiffSteps === void 0)
      maxDistBetweenDiffSteps = '';
    if (scopeFilter === void 0)
      scopeFilter = '';
    if (shortErrorDescription === void 0)
      shortErrorDescription = '0';
    if (skipTrivialCheck === void 0)
      skipTrivialCheck = false;
    if (otherGoalData === void 0)
      otherGoalData = null;
    if (subjectType === void 0)
      subjectType = '';
    log_1.clear();
    var compiledConfiguration = createConfigurationFromRulePacksAndDetailSolutionCheckingParams(rulePacks, wellKnownFunctionsString, expressionTransformationRulesString, maxExpressionTransformationWeight, unlimitedWellKnownFunctionsString, taskContextExpressionTransformationRules, maxDistBetweenDiffSteps, scopeFilter, wellKnownFunctions, unlimitedWellKnownFunctions, expressionTransformationRules, subjectType);
    return checkFactsInTex(originalTexSolution, startExpressionIdentifier, endExpressionIdentifier, targetFactIdentifier, targetFactPattern, comparisonSign, additionalFactsIdentifiers, shortErrorDescription, skipTrivialCheck, compiledConfiguration, otherGoalData);
  }
  function checkSolutionInTexWithCompiledConfiguration(originalTexSolution, compiledConfiguration, startExpressionIdentifier, targetFactPattern, comparisonSign, additionalFactsIdentifiers, endExpressionIdentifier, targetFactIdentifier, shortErrorDescription, skipTrivialCheck, otherGoalData) {
    if (startExpressionIdentifier === void 0)
      startExpressionIdentifier = '';
    if (targetFactPattern === void 0)
      targetFactPattern = '';
    if (comparisonSign === void 0)
      comparisonSign = '';
    if (additionalFactsIdentifiers === void 0)
      additionalFactsIdentifiers = '';
    if (endExpressionIdentifier === void 0)
      endExpressionIdentifier = '';
    if (targetFactIdentifier === void 0)
      targetFactIdentifier = '';
    if (shortErrorDescription === void 0)
      shortErrorDescription = '0';
    if (skipTrivialCheck === void 0)
      skipTrivialCheck = false;
    if (otherGoalData === void 0)
      otherGoalData = null;
    log_1.clear();
    return checkFactsInTex(originalTexSolution, startExpressionIdentifier, endExpressionIdentifier, targetFactIdentifier, targetFactPattern, comparisonSign, additionalFactsIdentifiers, shortErrorDescription, skipTrivialCheck, compiledConfiguration, otherGoalData);
  }
  function checkChainCorrectnessInTex(originalTexSolution, subjectType) {
    if (subjectType === void 0)
      subjectType = '';
    return checkSolutionInTex(originalTexSolution, '', '', '', '', '', '', emptyList(), '', emptyList(), '', emptyList(), '', '', [], '', '', '', '', true, null, subjectType);
  }
  function generateTasks$lambda(closure$startExpression) {
    return function (it) {
      return ExpressionUtils$Companion_getInstance().structureStringToGeneratedExpression_61zpoe$(closure$startExpression);
    };
  }
  function generateTasks$lambda_0(closure$tasks) {
    return function () {
      return TexReportUtils$Companion_getInstance().fullReport_wv2sjc$(closure$tasks);
    };
  }
  function generateTasks(area, startExpression, rulepacks, additionalParamsJsonString) {
    if (rulepacks === void 0)
      rulepacks = [];
    if (additionalParamsJsonString === void 0)
      additionalParamsJsonString = '{}';
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    log_1.clear();
    if (!equals(area, '(Trigonometry)')) {
      return [];
    }
    var parsedAdditionalParams = JsonParser$Companion_getInstance().parseMap_61zpoe$(additionalParamsJsonString);
    if (parsedAdditionalParams.get_11rb$('tags') == null) {
      tmp$_0 = RuleTag$values_0();
    }
     else {
      var $receiver = Kotlin.isType(tmp$ = parsedAdditionalParams.get_11rb$('tags'), List) ? tmp$ : throwCCE();
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$_4;
      tmp$_4 = $receiver.iterator();
      while (tmp$_4.hasNext()) {
        var item = tmp$_4.next();
        destination.add_11rb$(RuleTag$valueOf_0(item));
      }
      var tagsChosen = toMutableList(destination);
      if (!tagsChosen.contains_11rb$(RuleTag$BASIC_MATH_getInstance_0())) {
        tagsChosen.add_11rb$(RuleTag$BASIC_MATH_getInstance_0());
      }
      tmp$_0 = copyToArray(tagsChosen);
    }
    var tags = tmp$_0;
    var settings = new GeneratorSettings(void 0, mapTargetWeight(toDouble(typeof (tmp$_1 = parsedAdditionalParams.get_11rb$('complexity')) === 'string' ? tmp$_1 : throwCCE())), void 0, generateTasks$lambda(startExpression), void 0, ExpressionUtils$Companion_getInstance().toExpressionSubstitutions_mh4gj9$(toList(rulepacks.length === 0 ? getDefaultRulePacks() : rulepacks), tags), void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, SortType$valueOf(typeof (tmp$_2 = parsedAdditionalParams.get_11rb$('sort')) === 'string' ? tmp$_2 : throwCCE()), SortOrder$valueOf(typeof (tmp$_3 = parsedAdditionalParams.get_11rb$('sortOrder')) === 'string' ? tmp$_3 : throwCCE()));
    var tasks = generateTrigonometricTasks(settings);
    log_1.addMessage_cte53e$(generateTasks$lambda_0(tasks), MessageType$USER_getInstance());
    return copyToArray(tasks);
  }
  function getLogOfGeneration() {
    return log_1.getLogInPlainText_ap6kjd$(MessageType$TECHNICAL_getInstance());
  }
  function getReportOfGeneration() {
    return log_1.getLogInPlainText_ap6kjd$(MessageType$USER_getInstance());
  }
  function getAllTagsForGeneration(area) {
    if (!equals(area, '(Trigonometry)')) {
      return [];
    }
    var $receiver = TrigonometricRulePacks$Companion_getInstance().get();
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      var list = (tmp$_0 = element.rules) != null ? tmp$_0 : emptyList();
      addAll(destination, list);
    }
    var destination_0 = ArrayList_init();
    var tmp$_1;
    tmp$_1 = destination.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      var list_0 = element_0.tagsForTaskGenerator;
      addAll(destination_0, list_0);
    }
    var $receiver_0 = distinct(destination_0);
    var destination_1 = ArrayList_init();
    var tmp$_2;
    tmp$_2 = $receiver_0.iterator();
    while (tmp$_2.hasNext()) {
      var element_1 = tmp$_2.next();
      if (element_1.readyForUseInProduction)
        destination_1.add_11rb$(element_1);
    }
    var destination_2 = ArrayList_init();
    var tmp$_3;
    tmp$_3 = destination_1.iterator();
    while (tmp$_3.hasNext()) {
      var element_2 = tmp$_3.next();
      if (element_2 !== RuleTag$BASIC_MATH_getInstance_0())
        destination_2.add_11rb$(element_2);
    }
    return copyToArray(destination_2);
  }
  function getAllSortTypesForGeneration() {
    return SortType$values();
  }
  function getAllSortOrdersForGeneration() {
    return SortOrder$values();
  }
  function getDefaultRulePacks() {
    return copyToArray(RulePackProvider$Companion_getInstance().getBasicTrigonometricSubstitutions());
  }
  function mapTargetWeight(complexity, minTargetWeight, maxTargetWeight) {
    if (minTargetWeight === void 0)
      minTargetWeight = 1;
    if (maxTargetWeight === void 0)
      maxTargetWeight = 7;
    return minTargetWeight + complexity * (maxTargetWeight - minTargetWeight | 0);
  }
  function BaseNumber(number) {
    this.number = number;
  }
  BaseNumber.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BaseNumber',
    interfaces: []
  };
  function BaseOperationDefinitionWithDomain(baseOp, generalValuesDomain, generalDefinitionDomain, funcToCall) {
    this.baseOp = baseOp;
    this.generalValuesDomain = generalValuesDomain;
    this.generalDefinitionDomain = generalDefinitionDomain;
    this.funcToCall = funcToCall;
  }
  BaseOperationDefinitionWithDomain.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BaseOperationDefinitionWithDomain',
    interfaces: []
  };
  BaseOperationDefinitionWithDomain.prototype.component1 = function () {
    return this.baseOp;
  };
  BaseOperationDefinitionWithDomain.prototype.component2 = function () {
    return this.generalValuesDomain;
  };
  BaseOperationDefinitionWithDomain.prototype.component3 = function () {
    return this.generalDefinitionDomain;
  };
  BaseOperationDefinitionWithDomain.prototype.component4 = function () {
    return this.funcToCall;
  };
  BaseOperationDefinitionWithDomain.prototype.copy_v1g7w6$ = function (baseOp, generalValuesDomain, generalDefinitionDomain, funcToCall) {
    return new BaseOperationDefinitionWithDomain(baseOp === void 0 ? this.baseOp : baseOp, generalValuesDomain === void 0 ? this.generalValuesDomain : generalValuesDomain, generalDefinitionDomain === void 0 ? this.generalDefinitionDomain : generalDefinitionDomain, funcToCall === void 0 ? this.funcToCall : funcToCall);
  };
  BaseOperationDefinitionWithDomain.prototype.toString = function () {
    return 'BaseOperationDefinitionWithDomain(baseOp=' + Kotlin.toString(this.baseOp) + (', generalValuesDomain=' + Kotlin.toString(this.generalValuesDomain)) + (', generalDefinitionDomain=' + Kotlin.toString(this.generalDefinitionDomain)) + (', funcToCall=' + Kotlin.toString(this.funcToCall)) + ')';
  };
  BaseOperationDefinitionWithDomain.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.baseOp) | 0;
    result = result * 31 + Kotlin.hashCode(this.generalValuesDomain) | 0;
    result = result * 31 + Kotlin.hashCode(this.generalDefinitionDomain) | 0;
    result = result * 31 + Kotlin.hashCode(this.funcToCall) | 0;
    return result;
  };
  BaseOperationDefinitionWithDomain.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.baseOp, other.baseOp) && Kotlin.equals(this.generalValuesDomain, other.generalValuesDomain) && Kotlin.equals(this.generalDefinitionDomain, other.generalDefinitionDomain) && Kotlin.equals(this.funcToCall, other.funcToCall)))));
  };
  function ComputationType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ComputationType_initFields() {
    ComputationType_initFields = function () {
    };
    ComputationType$COMPLEX_instance = new ComputationType('COMPLEX', 0);
    ComputationType$DOUBLE_instance = new ComputationType('DOUBLE', 1);
  }
  var ComputationType$COMPLEX_instance;
  function ComputationType$COMPLEX_getInstance() {
    ComputationType_initFields();
    return ComputationType$COMPLEX_instance;
  }
  var ComputationType$DOUBLE_instance;
  function ComputationType$DOUBLE_getInstance() {
    ComputationType_initFields();
    return ComputationType$DOUBLE_instance;
  }
  ComputationType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ComputationType',
    interfaces: [Enum]
  };
  function ComputationType$values() {
    return [ComputationType$COMPLEX_getInstance(), ComputationType$DOUBLE_getInstance()];
  }
  ComputationType.values = ComputationType$values;
  function ComputationType$valueOf(name) {
    switch (name) {
      case 'COMPLEX':
        return ComputationType$COMPLEX_getInstance();
      case 'DOUBLE':
        return ComputationType$DOUBLE_getInstance();
      default:throwISE('No enum constant mathhelper.twf.baseoperations.ComputationType.' + name);
    }
  }
  ComputationType.valueOf_61zpoe$ = ComputationType$valueOf;
  function BaseOperationsComputation(computationType) {
    BaseOperationsComputation$Companion_getInstance();
    this.computationType_0 = computationType;
    this.baseComputationOperations_0 = mapOf_0([to(ComputationType$COMPLEX_getInstance(), mapOf_0([to('', BaseOperationsComputation$baseComputationOperations$lambda(this)), to('+', BaseOperationsComputation$baseComputationOperations$lambda_0(this)), to('*', BaseOperationsComputation$baseComputationOperations$lambda_1(this)), to('-', BaseOperationsComputation$baseComputationOperations$lambda_2(this)), to('/', BaseOperationsComputation$baseComputationOperations$lambda_3(this)), to('^', BaseOperationsComputation$baseComputationOperations$lambda_4(this)), to('mod', BaseOperationsComputation$baseComputationOperations$lambda_5(this)), to('and', BaseOperationsComputation$baseComputationOperations$lambda_6(this)), to('or', BaseOperationsComputation$baseComputationOperations$lambda_7(this)), to('xor', BaseOperationsComputation$baseComputationOperations$lambda_8(this)), to('alleq', BaseOperationsComputation$baseComputationOperations$lambda_9(this)), to('not', BaseOperationsComputation$baseComputationOperations$lambda_10(this)), to('sin', BaseOperationsComputation$baseComputationOperations$lambda_11(this)), to('cos', BaseOperationsComputation$baseComputationOperations$lambda_12(this)), to('tg', BaseOperationsComputation$baseComputationOperations$lambda_13(this)), to('sh', BaseOperationsComputation$baseComputationOperations$lambda_14(this)), to('ch', BaseOperationsComputation$baseComputationOperations$lambda_15(this)), to('th', BaseOperationsComputation$baseComputationOperations$lambda_16(this)), to('asin', BaseOperationsComputation$baseComputationOperations$lambda_17(this)), to('acos', BaseOperationsComputation$baseComputationOperations$lambda_18(this)), to('atg', BaseOperationsComputation$baseComputationOperations$lambda_19(this)), to('actg', BaseOperationsComputation$baseComputationOperations$lambda_20(this)), to('pow', BaseOperationsComputation$baseComputationOperations$lambda_21(this)), to('ln', BaseOperationsComputation$baseComputationOperations$lambda_22(this)), to('exp', BaseOperationsComputation$baseComputationOperations$lambda_23(this)), to('abs', BaseOperationsComputation$baseComputationOperations$lambda_24(this)), to('sqrt', BaseOperationsComputation$baseComputationOperations$lambda_25(this))])), to(ComputationType$DOUBLE_getInstance(), mapOf_0([to('', BaseOperationsComputation$baseComputationOperations$lambda_26(this)), to('+', BaseOperationsComputation$baseComputationOperations$lambda_27(this)), to('*', BaseOperationsComputation$baseComputationOperations$lambda_28(this)), to('-', BaseOperationsComputation$baseComputationOperations$lambda_29(this)), to('/', BaseOperationsComputation$baseComputationOperations$lambda_30(this)), to('^', BaseOperationsComputation$baseComputationOperations$lambda_31(this)), to('mod', BaseOperationsComputation$baseComputationOperations$lambda_32(this)), to('and', BaseOperationsComputation$baseComputationOperations$lambda_33(this)), to('or', BaseOperationsComputation$baseComputationOperations$lambda_34(this)), to('xor', BaseOperationsComputation$baseComputationOperations$lambda_35(this)), to('alleq', BaseOperationsComputation$baseComputationOperations$lambda_36(this)), to('not', BaseOperationsComputation$baseComputationOperations$lambda_37(this)), to('implic', BaseOperationsComputation$baseComputationOperations$lambda_38(this)), to('nand', BaseOperationsComputation$baseComputationOperations$lambda_39(this)), to('nor', BaseOperationsComputation$baseComputationOperations$lambda_40(this)), to('set-', BaseOperationsComputation$baseComputationOperations$lambda_41(this)), to('sin', BaseOperationsComputation$baseComputationOperations$lambda_42(this)), to('cos', BaseOperationsComputation$baseComputationOperations$lambda_43(this)), to('tg', BaseOperationsComputation$baseComputationOperations$lambda_44(this)), to('sh', BaseOperationsComputation$baseComputationOperations$lambda_45(this)), to('ch', BaseOperationsComputation$baseComputationOperations$lambda_46(this)), to('th', BaseOperationsComputation$baseComputationOperations$lambda_47(this)), to('asin', BaseOperationsComputation$baseComputationOperations$lambda_48(this)), to('acos', BaseOperationsComputation$baseComputationOperations$lambda_49(this)), to('atg', BaseOperationsComputation$baseComputationOperations$lambda_50(this)), to('actg', BaseOperationsComputation$baseComputationOperations$lambda_51(this)), to('pow', BaseOperationsComputation$baseComputationOperations$lambda_52(this)), to('ln', BaseOperationsComputation$baseComputationOperations$lambda_53(this)), to('exp', BaseOperationsComputation$baseComputationOperations$lambda_54(this)), to('abs', BaseOperationsComputation$baseComputationOperations$lambda_55(this)), to('sqrt', BaseOperationsComputation$baseComputationOperations$lambda_56(this))]))]);
    this.baseComputationComplex = mapOf_0([to('+', BaseOperationsComputation$baseComputationComplex$lambda), to('*', BaseOperationsComputation$baseComputationComplex$lambda_0), to('-', BaseOperationsComputation$baseComputationComplex$lambda_1), to('/', BaseOperationsComputation$baseComputationComplex$lambda_2), to('^', BaseOperationsComputation$baseComputationComplex$lambda_3), to('mod', BaseOperationsComputation$baseComputationComplex$lambda_4), to('and', BaseOperationsComputation$baseComputationComplex$lambda_5), to('or', BaseOperationsComputation$baseComputationComplex$lambda_6), to('xor', BaseOperationsComputation$baseComputationComplex$lambda_7), to('alleq', BaseOperationsComputation$baseComputationComplex$lambda_8), to('not', BaseOperationsComputation$baseComputationComplex$lambda_9), to('sin', BaseOperationsComputation$baseComputationComplex$lambda_10), to('cos', BaseOperationsComputation$baseComputationComplex$lambda_11), to('tg', BaseOperationsComputation$baseComputationComplex$lambda_12), to('sh', BaseOperationsComputation$baseComputationComplex$lambda_13), to('ch', BaseOperationsComputation$baseComputationComplex$lambda_14), to('th', BaseOperationsComputation$baseComputationComplex$lambda_15), to('asin', BaseOperationsComputation$baseComputationComplex$lambda_16), to('acos', BaseOperationsComputation$baseComputationComplex$lambda_17), to('atg', BaseOperationsComputation$baseComputationComplex$lambda_18), to('actg', BaseOperationsComputation$baseComputationComplex$lambda_19), to('pow', BaseOperationsComputation$baseComputationComplex$lambda_20), to('ln', BaseOperationsComputation$baseComputationComplex$lambda_21), to('exp', BaseOperationsComputation$baseComputationComplex$lambda_22), to('abs', BaseOperationsComputation$baseComputationComplex$lambda_23), to('sqrt', BaseOperationsComputation$baseComputationComplex$lambda_24)]);
    this.baseComputationDouble = mapOf_0([to('+', BaseOperationsComputation$baseComputationDouble$lambda), to('*', BaseOperationsComputation$baseComputationDouble$lambda_0), to('-', BaseOperationsComputation$baseComputationDouble$lambda_1), to('/', BaseOperationsComputation$baseComputationDouble$lambda_2), to('^', BaseOperationsComputation$baseComputationDouble$lambda_3), to('mod', BaseOperationsComputation$baseComputationDouble$lambda_4), to('and', BaseOperationsComputation$baseComputationDouble$lambda_5), to('or', BaseOperationsComputation$baseComputationDouble$lambda_6), to('xor', BaseOperationsComputation$baseComputationDouble$lambda_7), to('alleq', BaseOperationsComputation$baseComputationDouble$lambda_8), to('not', BaseOperationsComputation$baseComputationDouble$lambda_9), to('sin', BaseOperationsComputation$baseComputationDouble$lambda_10), to('cos', BaseOperationsComputation$baseComputationDouble$lambda_11), to('tg', BaseOperationsComputation$baseComputationDouble$lambda_12), to('sh', BaseOperationsComputation$baseComputationDouble$lambda_13), to('ch', BaseOperationsComputation$baseComputationDouble$lambda_14), to('th', BaseOperationsComputation$baseComputationDouble$lambda_15), to('asin', BaseOperationsComputation$baseComputationDouble$lambda_16), to('acos', BaseOperationsComputation$baseComputationDouble$lambda_17), to('atg', BaseOperationsComputation$baseComputationDouble$lambda_18), to('actg', BaseOperationsComputation$baseComputationDouble$lambda_19), to('pow', BaseOperationsComputation$baseComputationDouble$lambda_20), to('ln', BaseOperationsComputation$baseComputationDouble$lambda_21), to('exp', BaseOperationsComputation$baseComputationDouble$lambda_22), to('abs', BaseOperationsComputation$baseComputationDouble$lambda_23), to('sqrt', BaseOperationsComputation$baseComputationDouble$lambda_24)]);
  }
  function BaseOperationsComputation$FoldedExpression(nameOfZVariable, from, to, expression) {
    this.nameOfZVariable = nameOfZVariable;
    this.from = from;
    this.to = to;
    this.expression = expression;
  }
  BaseOperationsComputation$FoldedExpression.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FoldedExpression',
    interfaces: []
  };
  function BaseOperationsComputation$Companion() {
    BaseOperationsComputation$Companion_instance = this;
    this.epsilon = 1.19E-6;
  }
  BaseOperationsComputation$Companion.prototype.additivelyEqualTo_0 = function ($receiver, number) {
    return rangeTo(-this.epsilon, this.epsilon).contains_mef7kx$($receiver - number);
  };
  BaseOperationsComputation$Companion.prototype.additivelyEqualToZero_0 = function ($receiver) {
    return rangeTo(-this.epsilon, this.epsilon).contains_mef7kx$($receiver);
  };
  BaseOperationsComputation$Companion.prototype.additivelyEqual_lu1900$ = function (l, r) {
    return l === r || this.additivelyEqualTo_0(l, r);
  };
  BaseOperationsComputation$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BaseOperationsComputation$Companion_instance = null;
  function BaseOperationsComputation$Companion_getInstance() {
    if (BaseOperationsComputation$Companion_instance === null) {
      new BaseOperationsComputation$Companion();
    }
    return BaseOperationsComputation$Companion_instance;
  }
  BaseOperationsComputation.prototype.complexFunctionToAny_0 = function (listOfArgs, baseOperation) {
    return baseOperation(this.parseComplexNumbers_0(listOfArgs));
  };
  BaseOperationsComputation.prototype.complexFunctionToComplex_0 = function (listOfArgs, baseOperation) {
    return baseOperation(this.parseComplexNumbers_0(listOfArgs));
  };
  BaseOperationsComputation.prototype.doubleFunctionToAny_0 = function (listOfArgs, baseOperation) {
    return baseOperation(this.parseDoubleNumbers_0(listOfArgs));
  };
  BaseOperationsComputation.prototype.compute_em03xr$ = function (expressionNode) {
    var tmp$, tmp$_0;
    if (expressionNode.children.isEmpty()) {
      if (equals(expressionNode.value, 'sys_def_i_complex')) {
        tmp$_0 = Complex_init(Real_init(0), Real_init(1), Form$ALGEBRAIC_getInstance());
      }
       else {
        tmp$_0 = this.stringToNumber_0(expressionNode.value);
      }
    }
     else {
      if (this.isFoldedExpression_0(expressionNode)) {
        return this.calculateFoldedExpression_0(expressionNode);
      }
      var listOfArgs = ArrayList_init();
      tmp$ = expressionNode.children.iterator();
      while (tmp$.hasNext()) {
        var childNode = tmp$.next();
        listOfArgs.add_11rb$(this.compute_em03xr$(childNode));
      }
      if (ensureNotNull(this.baseComputationOperations_0.get_11rb$(this.computationType_0)).containsKey_11rb$(expressionNode.value)) {
        tmp$_0 = ensureNotNull(ensureNotNull(this.baseComputationOperations_0.get_11rb$(this.computationType_0)).get_11rb$(expressionNode.value))(listOfArgs);
      }
       else {
        tmp$_0 = this.stringToNumber_0(defaultRandom().toString());
      }
    }
    return tmp$_0;
  };
  BaseOperationsComputation.prototype.calculatePenaltyForNode_j0nkgr$ = function (value, operatorType) {
    if (operatorType === void 0)
      operatorType = '';
    if (equals(operatorType, 'ln') || equals(operatorType, 'asin') || equals(operatorType, 'acos')) {
      var re = abs_0(value.getReal().value);
      var im = abs_0(value.getImaginary().value);
      return re * im;
    }
    return abs_0(value.getImaginary().value);
  };
  BaseOperationsComputation.prototype.computePenalty_7oy7zz$ = function (treeNodes) {
    var tmp$, tmp$_0;
    var penalty = 0.0;
    tmp$ = treeNodes.iterator();
    while (tmp$.hasNext()) {
      var node = tmp$.next();
      if (node.children.isEmpty() || equals(node.func, '')) {
        node.subtreeValue = node.value;
      }
       else {
        var listOfArgs = ArrayList_init();
        tmp$_0 = node.children.iterator();
        while (tmp$_0.hasNext()) {
          var child = tmp$_0.next();
          listOfArgs.add_11rb$(child.subtreeValue);
        }
        if (node.func.length > 0) {
          node.subtreeValue = ensureNotNull(node.functor)(listOfArgs);
          penalty += this.calculatePenaltyForNode_j0nkgr$(node.subtreeValue, node.func);
        }
      }
    }
    return penalty;
  };
  BaseOperationsComputation.prototype.computeValue_ejnlsg$ = function (treeNodes) {
    var tmp$, tmp$_0;
    tmp$ = treeNodes.iterator();
    while (tmp$.hasNext()) {
      var node = tmp$.next();
      if (node.children.isEmpty() && equals(node.func, ''))
        continue;
      else {
        if (!node.children.isEmpty() && !equals(node.func, '')) {
          var listOfArgs = ArrayList_init();
          tmp$_0 = node.children.iterator();
          while (tmp$_0.hasNext()) {
            var child = tmp$_0.next();
            listOfArgs.add_11rb$(child.value);
          }
          node.value = ensureNotNull(node.functor)(listOfArgs);
        }
         else if (node.children.size === 1 && equals(node.func, '')) {
          node.value = node.children.get_za3lpa$(0).value;
        }
      }
    }
  };
  BaseOperationsComputation.prototype.stringToNumber_0 = function (arg) {
    var tmp$;
    switch (this.computationType_0.name) {
      case 'DOUBLE':
        tmp$ = toDouble(arg);
        break;
      case 'COMPLEX':
        tmp$ = toComplex_1(arg);
        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  };
  BaseOperationsComputation.prototype.isFoldedExpression_0 = function (expression) {
    return equals(expression.value, 'P') || equals(expression.value, 'S');
  };
  BaseOperationsComputation.prototype.calculateFoldedExpression_0 = function (expression) {
    var tmp$;
    switch (expression.value) {
      case 'S':
        tmp$ = this.sumN_0(expression);
        break;
      case 'P':
        tmp$ = this.prodN_0(expression);
        break;
      default:throw IllegalArgumentException_init("Given expression's type " + expression.value + ' is not folded');
    }
    return tmp$;
  };
  BaseOperationsComputation.prototype.parseComplexNumbers_0 = function (listOfArgs) {
    var tmp$;
    var listOfNumbers = ArrayList_init();
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (Kotlin.isType(arg, Complex)) {
        listOfNumbers.add_11rb$(arg);
      }
       else {
        throw IllegalArgumentException_init('List contains element, which is not a complex number');
      }
    }
    return listOfNumbers;
  };
  BaseOperationsComputation.prototype.parseDoubleNumbers_0 = function (listOfArgs) {
    var tmp$;
    var listOfNumbers = ArrayList_init();
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (typeof arg === 'number') {
        listOfNumbers.add_11rb$(arg);
      }
       else {
        throw IllegalArgumentException_init('List contains element, which is not a complex number');
      }
    }
    return listOfNumbers;
  };
  BaseOperationsComputation.prototype.brackets_0 = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Not one argument in brackets.');
    }
     else {
      return listOfArgs.get_za3lpa$(0);
    }
  };
  BaseOperationsComputation.prototype.plus_0 = function (listOfArgs) {
    return ensureNotNull(ensureNotNull(this.baseComputationOperations_0.get_11rb$(this.computationType_0)).get_11rb$('+'))(listOfArgs);
  };
  BaseOperationsComputation.prototype.mul_0 = function (listOfArgs) {
    return ensureNotNull(ensureNotNull(this.baseComputationOperations_0.get_11rb$(this.computationType_0)).get_11rb$('*'))(listOfArgs);
  };
  BaseOperationsComputation.prototype.sumN_0 = function (expression) {
    var deploymentOfSum = this.unfold_0(this.convertToFoldedExpression_0(expression));
    return this.plus_0(deploymentOfSum);
  };
  BaseOperationsComputation.prototype.convertToFoldedExpression_0 = function (expression) {
    if (!this.isFoldedExpression_0(expression)) {
      throw IllegalArgumentException_init(expression.value + ' is not folded');
    }
    var from = this.compute_em03xr$(expression.children.get_za3lpa$(1));
    var to = this.compute_em03xr$(expression.children.get_za3lpa$(2));
    return new BaseOperationsComputation$FoldedExpression(expression.children.get_za3lpa$(0).value, this.convertToDouble_0(from), this.convertToDouble_0(to), expression.children.get_za3lpa$(3));
  };
  BaseOperationsComputation.prototype.convertToDouble_0 = function (value) {
    var tmp$, tmp$_0, tmp$_1;
    switch (this.computationType_0.name) {
      case 'DOUBLE':
        tmp$_1 = typeof (tmp$ = value) === 'number' ? tmp$ : throwCCE();
        break;
      case 'COMPLEX':
        tmp$_1 = (Kotlin.isType(tmp$_0 = value, Complex) ? tmp$_0 : throwCCE()).toDouble();
        break;
      default:tmp$_1 = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$_1;
  };
  BaseOperationsComputation.prototype.unfold_0 = function (foldedExpression) {
    var deployedArguments = ArrayList_init();
    var iter = foldedExpression.from;
    while (iter <= foldedExpression.to) {
      var expression = foldedExpression.expression.cloneWithVariableReplacement_y0zsll$(mutableMapOf([new Pair(foldedExpression.nameOfZVariable, iter.toString())]));
      deployedArguments.add_11rb$(this.compute_em03xr$(expression));
      iter = iter + 1;
    }
    return deployedArguments;
  };
  BaseOperationsComputation.prototype.prodN_0 = function (expression) {
    var deploymentOfProd = this.unfold_0(this.convertToFoldedExpression_0(expression));
    return this.mul_0(deploymentOfProd);
  };
  function BaseOperationsComputation$baseComputationOperations$lambda(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.brackets_0(listOfArgs);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda(args) {
    return ComplexBaseOperation$Companion_getInstance().plus_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_0(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_0(args) {
    return ComplexBaseOperation$Companion_getInstance().mul_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_1(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_0);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_1(args) {
    return ComplexBaseOperation$Companion_getInstance().minus_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_2(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_1);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_2(args) {
    return ComplexBaseOperation$Companion_getInstance().div_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_3(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_2);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_3(args) {
    return ComplexBaseOperation$Companion_getInstance().pow_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_4(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_3);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_4(args) {
    return ComplexBaseOperation$Companion_getInstance().mod_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_5(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_4);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_5(args) {
    return ComplexBaseOperation$Companion_getInstance().and_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_6(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_5);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_6(args) {
    return ComplexBaseOperation$Companion_getInstance().or_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_7(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_6);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_7(args) {
    return ComplexBaseOperation$Companion_getInstance().xor_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_8(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_7);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_8(args) {
    return ComplexBaseOperation$Companion_getInstance().alleq_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_9(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_8);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_9(args) {
    return ComplexBaseOperation$Companion_getInstance().not_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_10(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_9);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_10(args) {
    return ComplexBaseOperation$Companion_getInstance().sin_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_11(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_10);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_11(args) {
    return ComplexBaseOperation$Companion_getInstance().cos_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_12(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_11);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_12(args) {
    return ComplexBaseOperation$Companion_getInstance().tan_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_13(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_12);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_13(args) {
    return ComplexBaseOperation$Companion_getInstance().sinh_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_14(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_13);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_14(args) {
    return ComplexBaseOperation$Companion_getInstance().cosh_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_15(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_14);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_15(args) {
    return ComplexBaseOperation$Companion_getInstance().tanh_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_16(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_15);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_16(args) {
    return ComplexBaseOperation$Companion_getInstance().asin_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_17(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_16);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_17(args) {
    return ComplexBaseOperation$Companion_getInstance().acos_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_18(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_17);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_18(args) {
    return ComplexBaseOperation$Companion_getInstance().atan_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_19(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_18);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_19(args) {
    return ComplexBaseOperation$Companion_getInstance().actan_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_20(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_19);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_20(args) {
    return ComplexBaseOperation$Companion_getInstance().pow_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_21(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_20);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_21(args) {
    return ComplexBaseOperation$Companion_getInstance().ln_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_22(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_21);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_22(args) {
    return ComplexBaseOperation$Companion_getInstance().exp_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_23(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_22);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_23(args) {
    return ComplexBaseOperation$Companion_getInstance().abs_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_24(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_23);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_24(args) {
    return ComplexBaseOperation$Companion_getInstance().sqrt_nq6tdq$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_25(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.complexFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_24);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_26(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.brackets_0(listOfArgs);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_25(args) {
    return DoubleBaseOperation$Companion_getInstance().plus_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_27(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_25);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_26(args) {
    return DoubleBaseOperation$Companion_getInstance().mul_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_28(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_26);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_27(args) {
    return DoubleBaseOperation$Companion_getInstance().minus_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_29(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_27);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_28(args) {
    return DoubleBaseOperation$Companion_getInstance().div_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_30(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_28);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_29(args) {
    return DoubleBaseOperation$Companion_getInstance().pow_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_31(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_29);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_30(args) {
    return DoubleBaseOperation$Companion_getInstance().mod_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_32(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_30);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_31(args) {
    return DoubleBaseOperation$Companion_getInstance().and_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_33(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_31);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_32(args) {
    return DoubleBaseOperation$Companion_getInstance().or_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_34(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_32);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_33(args) {
    return DoubleBaseOperation$Companion_getInstance().xor_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_35(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_33);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_34(args) {
    return DoubleBaseOperation$Companion_getInstance().alleq_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_36(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_34);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_35(args) {
    return DoubleBaseOperation$Companion_getInstance().not_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_37(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_35);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_36(args) {
    return DoubleBaseOperation$Companion_getInstance().implic_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_38(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_36);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_37(args) {
    return DoubleBaseOperation$Companion_getInstance().nand_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_39(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_37);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_38(args) {
    return DoubleBaseOperation$Companion_getInstance().nor_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_40(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_38);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_39(args) {
    return DoubleBaseOperation$Companion_getInstance().setMinus_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_41(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_39);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_40(args) {
    return DoubleBaseOperation$Companion_getInstance().sin_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_42(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_40);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_41(args) {
    return DoubleBaseOperation$Companion_getInstance().cos_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_43(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_41);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_42(args) {
    return DoubleBaseOperation$Companion_getInstance().tan_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_44(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_42);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_43(args) {
    return DoubleBaseOperation$Companion_getInstance().sinh_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_45(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_43);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_44(args) {
    return DoubleBaseOperation$Companion_getInstance().cosh_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_46(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_44);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_45(args) {
    return DoubleBaseOperation$Companion_getInstance().tanh_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_47(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_45);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_46(args) {
    return DoubleBaseOperation$Companion_getInstance().asin_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_48(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_46);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_47(args) {
    return DoubleBaseOperation$Companion_getInstance().acos_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_49(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_47);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_48(args) {
    return DoubleBaseOperation$Companion_getInstance().atan_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_50(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_48);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_49(args) {
    return DoubleBaseOperation$Companion_getInstance().actan_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_51(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_49);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_50(args) {
    return DoubleBaseOperation$Companion_getInstance().pow_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_52(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_50);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_51(args) {
    return DoubleBaseOperation$Companion_getInstance().ln_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_53(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_51);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_52(args) {
    return DoubleBaseOperation$Companion_getInstance().exp_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_54(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_52);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_53(args) {
    return DoubleBaseOperation$Companion_getInstance().abs_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_55(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_53);
    };
  }
  function BaseOperationsComputation$baseComputationOperations$lambda$lambda_54(args) {
    return DoubleBaseOperation$Companion_getInstance().sqrt_d3e2cz$(args);
  }
  function BaseOperationsComputation$baseComputationOperations$lambda_56(this$BaseOperationsComputation) {
    return function (listOfArgs) {
      return this$BaseOperationsComputation.doubleFunctionToAny_0(listOfArgs, BaseOperationsComputation$baseComputationOperations$lambda$lambda_54);
    };
  }
  function BaseOperationsComputation$baseComputationComplex$lambda(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().plus_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_0(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().mul_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_1(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().minus_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_2(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().div_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_3(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().pow_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_4(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().mod_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_5(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().and_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_6(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().or_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_7(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().xor_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_8(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().alleq_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_9(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().not_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_10(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().sin_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_11(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().cos_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_12(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().tan_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_13(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().sinh_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_14(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().cosh_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_15(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().tanh_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_16(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().asin_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_17(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().acos_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_18(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().atan_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_19(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().actan_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_20(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().pow_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_21(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().ln_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_22(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().exp_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_23(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().abs_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationComplex$lambda_24(listOfArgs) {
    return ComplexBaseOperation$Companion_getInstance().sqrt_nq6tdq$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().plus_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_0(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().mul_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_1(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().minus_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_2(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().div_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_3(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().pow_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_4(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().mod_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_5(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().and_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_6(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().or_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_7(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().xor_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_8(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().alleq_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_9(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().not_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_10(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().sin_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_11(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().cos_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_12(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().tan_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_13(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().sinh_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_14(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().cosh_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_15(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().tanh_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_16(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().asin_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_17(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().acos_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_18(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().atan_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_19(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().actan_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_20(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().pow_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_21(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().ln_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_22(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().exp_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_23(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().abs_d3e2cz$(listOfArgs);
  }
  function BaseOperationsComputation$baseComputationDouble$lambda_24(listOfArgs) {
    return DoubleBaseOperation$Companion_getInstance().sqrt_d3e2cz$(listOfArgs);
  }
  BaseOperationsComputation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BaseOperationsComputation',
    interfaces: []
  };
  function BaseOperationsDefinition(name, numberOfArguments, calculatingFunction) {
    this.name = name;
    this.numberOfArguments = numberOfArguments;
    this.calculatingFunction = calculatingFunction;
  }
  BaseOperationsDefinition.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BaseOperationsDefinition',
    interfaces: []
  };
  BaseOperationsDefinition.prototype.component1 = function () {
    return this.name;
  };
  BaseOperationsDefinition.prototype.component2 = function () {
    return this.numberOfArguments;
  };
  BaseOperationsDefinition.prototype.component3 = function () {
    return this.calculatingFunction;
  };
  BaseOperationsDefinition.prototype.copy_wlr154$ = function (name, numberOfArguments, calculatingFunction) {
    return new BaseOperationsDefinition(name === void 0 ? this.name : name, numberOfArguments === void 0 ? this.numberOfArguments : numberOfArguments, calculatingFunction === void 0 ? this.calculatingFunction : calculatingFunction);
  };
  BaseOperationsDefinition.prototype.toString = function () {
    return 'BaseOperationsDefinition(name=' + Kotlin.toString(this.name) + (', numberOfArguments=' + Kotlin.toString(this.numberOfArguments)) + (', calculatingFunction=' + Kotlin.toString(this.calculatingFunction)) + ')';
  };
  BaseOperationsDefinition.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.numberOfArguments) | 0;
    result = result * 31 + Kotlin.hashCode(this.calculatingFunction) | 0;
    return result;
  };
  BaseOperationsDefinition.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.numberOfArguments, other.numberOfArguments) && Kotlin.equals(this.calculatingFunction, other.calculatingFunction)))));
  };
  function ComputeExpressionVariableType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ComputeExpressionVariableType_initFields() {
    ComputeExpressionVariableType_initFields = function () {
    };
    ComputeExpressionVariableType$ALL_TO_NUMBERS_instance = new ComputeExpressionVariableType('ALL_TO_NUMBERS', 0);
    ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_instance = new ComputeExpressionVariableType('ALL_TO_NUMBERS_OR_PI_OR_E', 1);
    ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED_instance = new ComputeExpressionVariableType('ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED', 2);
  }
  var ComputeExpressionVariableType$ALL_TO_NUMBERS_instance;
  function ComputeExpressionVariableType$ALL_TO_NUMBERS_getInstance() {
    ComputeExpressionVariableType_initFields();
    return ComputeExpressionVariableType$ALL_TO_NUMBERS_instance;
  }
  var ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_instance;
  function ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_getInstance() {
    ComputeExpressionVariableType_initFields();
    return ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_instance;
  }
  var ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED_instance;
  function ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED_getInstance() {
    ComputeExpressionVariableType_initFields();
    return ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED_instance;
  }
  ComputeExpressionVariableType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ComputeExpressionVariableType',
    interfaces: [Enum]
  };
  function ComputeExpressionVariableType$values() {
    return [ComputeExpressionVariableType$ALL_TO_NUMBERS_getInstance(), ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_getInstance(), ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED_getInstance()];
  }
  ComputeExpressionVariableType.values = ComputeExpressionVariableType$values;
  function ComputeExpressionVariableType$valueOf(name) {
    switch (name) {
      case 'ALL_TO_NUMBERS':
        return ComputeExpressionVariableType$ALL_TO_NUMBERS_getInstance();
      case 'ALL_TO_NUMBERS_OR_PI_OR_E':
        return ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_getInstance();
      case 'ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED':
        return ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED_getInstance();
      default:throwISE('No enum constant mathhelper.twf.baseoperations.ComputeExpressionVariableType.' + name);
    }
  }
  ComputeExpressionVariableType.valueOf_61zpoe$ = ComputeExpressionVariableType$valueOf;
  var defaultFunctionConfiguration;
  function BaseOperationsDefinitions(epsilon, computeExpressionVariableType) {
    if (epsilon === void 0)
      epsilon = 1.19E-5;
    if (computeExpressionVariableType === void 0)
      computeExpressionVariableType = ComputeExpressionVariableType$ALL_TO_NUMBERS_getInstance();
    this.epsilon = epsilon;
    this.computeExpressionVariableType = computeExpressionVariableType;
    this.functionConfiguration = defaultFunctionConfiguration;
    this.debugMode = false;
    this.baseOperationsDefinitions = listOf_0([new BaseOperationsDefinition('', 0, BaseOperationsDefinitions$baseOperationsDefinitions$lambda(this)), new BaseOperationsDefinition('', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_0(this)), new BaseOperationsDefinition('+', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_1(this)), new BaseOperationsDefinition('*', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_2(this)), new BaseOperationsDefinition('-', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_3(this)), new BaseOperationsDefinition('/', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_4(this)), new BaseOperationsDefinition('^', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_5(this)), new BaseOperationsDefinition('mod', 2, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_6(this)), new BaseOperationsDefinition('S', 4, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_7(this)), new BaseOperationsDefinition('P', 4, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_8(this)), new BaseOperationsDefinition('and', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_9(this)), new BaseOperationsDefinition('or', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_10(this)), new BaseOperationsDefinition('xor', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_11(this)), new BaseOperationsDefinition('alleq', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_12(this)), new BaseOperationsDefinition('nand', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_13(this)), new BaseOperationsDefinition('nor', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_14(this)), new BaseOperationsDefinition('implic', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_15(this)), new BaseOperationsDefinition('set-', -1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_16(this)), new BaseOperationsDefinition('not', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_17(this)), new BaseOperationsDefinition('sin', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_18(this)), new BaseOperationsDefinition('cos', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_19(this)), new BaseOperationsDefinition('sh', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_20(this)), new BaseOperationsDefinition('ch', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_21(this)), new BaseOperationsDefinition('tg', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_22(this)), new BaseOperationsDefinition('th', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_23(this)), new BaseOperationsDefinition('asin', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_24(this)), new BaseOperationsDefinition('acos', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_25(this)), new BaseOperationsDefinition('atg', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_26(this)), new BaseOperationsDefinition('actg', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_27(this)), new BaseOperationsDefinition('exp', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_28(this)), new BaseOperationsDefinition('ln', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_29(this)), new BaseOperationsDefinition('abs', 1, BaseOperationsDefinitions$baseOperationsDefinitions$lambda_30(this))]);
    var $receiver = this.baseOperationsDefinitions;
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
    var destination = LinkedHashMap_init(capacity);
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      destination.put_xwzc9p$(FunctionIdentifier$Companion_getInstance().getIdentifier_bm4lxs$(element.name, element.numberOfArguments), element);
    }
    this.mapNameAndArgsNumberToOperation = destination;
    this.definedFunctionNameNumberOfArgsSet = toSet(this.mapNameAndArgsNumberToOperation.keys);
  }
  BaseOperationsDefinitions.prototype.init_3b06hw$ = function (compiledConfiguration) {
    this.functionConfiguration = compiledConfiguration.functionConfiguration;
    if (compiledConfiguration.debugOutputMessages.expressionProbabilityComparisonFalseDetailsPrintln) {
      this.debugMode = true;
    }
  };
  BaseOperationsDefinitions.prototype.getOperation_bm4lxs$ = function (name, numberOfArguments) {
    var baseOperationsDefinition = this.mapNameAndArgsNumberToOperation.get_11rb$(FunctionIdentifier$Companion_getInstance().getIdentifier_bm4lxs$(name, numberOfArguments));
    if (baseOperationsDefinition == null)
      return this.mapNameAndArgsNumberToOperation.get_11rb$(FunctionIdentifier$Companion_getInstance().getIdentifier_bm4lxs$(name, -1));
    else
      return baseOperationsDefinition;
  };
  BaseOperationsDefinitions.prototype.applyOperationToExpressionNode_em03xr$ = function (node) {
    if (node.value.length === 0) {
      var operation = this.getOperation_bm4lxs$(node.value, node.children.size);
      if (operation != null) {
        return operation.calculatingFunction(node);
      }
    }
    if (node.children.size > 0) {
      var operation_0 = this.getOperation_bm4lxs$(node.value, node.children.size);
      if (operation_0 != null) {
        return operation_0.calculatingFunction(node);
      }
    }
    return node;
  };
  BaseOperationsDefinitions.prototype.simplifyExpressionTree_em03xr$ = function (node) {
    var tmp$;
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      this.simplifyExpressionTree_em03xr$(child);
    }
    return this.applyOperationToExpressionNode_em03xr$(node);
  };
  BaseOperationsDefinitions.prototype.sumN_em03xr$ = function (argsParentNode) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(1).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var low = tmp$;
    tmp$_0 = toDoubleOrNull(argsParentNode.children.get_za3lpa$(2).value);
    if (tmp$_0 == null) {
      return argsParentNode;
    }
    var up = tmp$_0;
    if (up < low) {
      argsParentNode.setVariable_61zpoe$('0');
    }
     else {
      var counterName = argsParentNode.children.get_za3lpa$(0).value;
      var result = 0.0;
      while (low <= up) {
        var expr = argsParentNode.children.get_za3lpa$(3).cloneWithVariableReplacement_y0zsll$(mutableMapOf([new Pair(counterName, low.toString())]));
        tmp$_2 = result;
        tmp$_1 = toDoubleOrNull(this.simplifyExpressionTree_em03xr$(expr).value);
        if (tmp$_1 == null) {
          return argsParentNode;
        }
        result = tmp$_2 + tmp$_1;
        low += 1.0;
      }
      argsParentNode.setVariable_14dthe$(result);
    }
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.prodN_em03xr$ = function (argsParentNode) {
    var tmp$, tmp$_0;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(1).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var low = tmp$;
    tmp$_0 = toDoubleOrNull(argsParentNode.children.get_za3lpa$(2).value);
    if (tmp$_0 == null) {
      return argsParentNode;
    }
    var up = tmp$_0;
    if (up < low) {
      argsParentNode.setVariable_61zpoe$('1');
    }
     else {
      var counterName = argsParentNode.children.get_za3lpa$(0).value;
      var result = 1.0;
      var flagHasVariable = false;
      while (low <= up) {
        var expr = argsParentNode.children.get_za3lpa$(3).cloneWithVariableReplacement_y0zsll$(mutableMapOf([new Pair(counterName, low.toString())]));
        var arg = toDoubleOrNull(this.simplifyExpressionTree_em03xr$(expr).value);
        if (arg == null) {
          flagHasVariable = true;
        }
         else {
          result *= arg;
          if (this.additivelyEqualToZero_0(result)) {
            argsParentNode.setVariable_61zpoe$('0');
            break;
          }
        }
        low += 1.0;
      }
      if (!flagHasVariable)
        argsParentNode.setVariable_14dthe$(result);
    }
    return argsParentNode;
  };
  function BaseOperationsDefinitions$plus$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.plus_em03xr$ = function (argsParentNode) {
    var tmp$, tmp$_0, tmp$_1;
    var startSize = argsParentNode.children.size;
    var result = 0.0;
    var counts = LinkedHashMap_init_0();
    tmp$ = argsParentNode.children.iterator();
    while (tmp$.hasNext()) {
      var argNode = tmp$.next();
      if (!argNode.children.isEmpty())
        continue;
      var argValue = toDoubleOrNull(argNode.getComputeNodeValue_pp5jxl$(this.computeExpressionVariableType));
      if (argValue != null) {
        result += argValue;
        argNode.nodeType = NodeType$EMPTY_getInstance();
      }
       else if (argNode.children.size === 0 && this.computeExpressionVariableType === ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED_getInstance()) {
        var nodeValueStr = argNode.getComputeNodeValue_pp5jxl$(this.computeExpressionVariableType);
        var value = ((tmp$_0 = counts.get_11rb$(nodeValueStr)) != null ? tmp$_0 : 0) + 1 | 0;
        counts.put_xwzc9p$(nodeValueStr, value);
        argNode.nodeType = NodeType$EMPTY_getInstance();
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$plus$lambda);
    tmp$_1 = counts.entries.iterator();
    while (tmp$_1.hasNext()) {
      var tmp$_2 = tmp$_1.next();
      var constant = tmp$_2.key;
      var count = tmp$_2.value;
      if (count > 1) {
        argsParentNode.addChild_em03xr$(stringToExpression(count.toString() + '*' + constant));
      }
       else {
        argsParentNode.addChild_em03xr$(stringToExpression(constant).children.get_za3lpa$(0));
      }
    }
    if (argsParentNode.children.size === 0)
      argsParentNode.setVariable_14dthe$(result);
    else if (this.additivelyEqualToZero_0(result)) {
      if (argsParentNode.children.size === 1)
        argsParentNode.setNode_em03xr$(argsParentNode.children.get_za3lpa$(0));
    }
     else if (startSize > argsParentNode.children.size)
      argsParentNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), result.toString()));
    return argsParentNode;
  };
  function BaseOperationsDefinitions$minus$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.minus_em03xr$ = function (argsParentNode) {
    var tmp$;
    var startSize = argsParentNode.children.size;
    var result = 0.0;
    var first = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).getComputeNodeValue_pp5jxl$(this.computeExpressionVariableType));
    var firstIsNumber = first != null && argsParentNode.children.get_za3lpa$(0).children.size === 0;
    if (firstIsNumber)
      result = ensureNotNull(first);
    if (argsParentNode.children.size === 1) {
      if (firstIsNumber) {
        argsParentNode.setVariable_14dthe$(-result);
      }
      return argsParentNode;
    }
     else {
      tmp$ = argsParentNode.children.size;
      for (var i = 1; i < tmp$; i++) {
        if (!argsParentNode.children.get_za3lpa$(i).children.isEmpty())
          continue;
        var argValue = toDoubleOrNull(argsParentNode.children.get_za3lpa$(i).getComputeNodeValue_pp5jxl$(this.computeExpressionVariableType));
        if (argValue != null) {
          if (firstIsNumber)
            result -= argValue;
          else
            result += argValue;
          argsParentNode.children.get_za3lpa$(i).nodeType = NodeType$EMPTY_getInstance();
        }
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$minus$lambda);
    if (argsParentNode.children.size === 1) {
      if (firstIsNumber)
        argsParentNode.setVariable_14dthe$(result);
      else if (startSize > argsParentNode.children.size)
        argsParentNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(result)));
    }
     else {
      if (firstIsNumber)
        argsParentNode.children.get_za3lpa$(0).setVariable_14dthe$(result);
      else if (!this.additivelyEqualToZero_0(result) && startSize > argsParentNode.children.size)
        argsParentNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(result)));
    }
    return argsParentNode;
  };
  function BaseOperationsDefinitions$and$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.and_em03xr$ = function (argsParentNode) {
    var tmp$;
    var result = 1.0;
    tmp$ = argsParentNode.children.iterator();
    while (tmp$.hasNext()) {
      var argNode = tmp$.next();
      if (!argNode.children.isEmpty())
        continue;
      var argValue = toDoubleOrNull(argNode.value);
      if (argValue != null) {
        result *= argValue;
        argNode.nodeType = NodeType$EMPTY_getInstance();
        if (this.additivelyEqualToZero_0(result)) {
          argsParentNode.setVariable_61zpoe$('0');
          return argsParentNode;
        }
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$and$lambda);
    if (argsParentNode.children.size === 0)
      argsParentNode.setVariable_14dthe$(result);
    else if (this.additivelyEqualTo_0(result, 1.0) && argsParentNode.children.size === 1) {
      argsParentNode.setNode_em03xr$(argsParentNode.children.get_za3lpa$(0));
    }
    return argsParentNode;
  };
  function BaseOperationsDefinitions$nand$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.nand_em03xr$ = function (argsParentNode) {
    var tmp$;
    var nonResult = 1.0;
    tmp$ = argsParentNode.children.iterator();
    while (tmp$.hasNext()) {
      var argNode = tmp$.next();
      if (!argNode.children.isEmpty())
        continue;
      var argValue = toDoubleOrNull(argNode.value);
      if (argValue != null) {
        nonResult *= argValue;
        argNode.nodeType = NodeType$EMPTY_getInstance();
        if (this.additivelyEqualToZero_0(nonResult)) {
          argsParentNode.setVariable_61zpoe$('1');
          return argsParentNode;
        }
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$nand$lambda);
    if (argsParentNode.children.size === 0) {
      argsParentNode.setVariable_14dthe$(this.not_yrwdxr$(nonResult));
    }
     else if (this.additivelyEqualTo_0(nonResult, 1.0) && argsParentNode.children.size === 1) {
      argsParentNode.setFunction_ke2f21$('not', this.functionConfiguration);
    }
    return argsParentNode;
  };
  function BaseOperationsDefinitions$or$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.or_em03xr$ = function (argsParentNode) {
    var tmp$;
    var result = 0.0;
    tmp$ = argsParentNode.children.iterator();
    while (tmp$.hasNext()) {
      var argNode = tmp$.next();
      if (!argNode.children.isEmpty())
        continue;
      var argValue = toDoubleOrNull(argNode.value);
      if (argValue != null) {
        result += argValue;
        argNode.nodeType = NodeType$EMPTY_getInstance();
        if (!this.additivelyEqualToZero_0(result)) {
          argsParentNode.setVariable_61zpoe$('1');
          return argsParentNode;
        }
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$or$lambda);
    if (argsParentNode.children.size === 0)
      argsParentNode.setVariable_14dthe$(result);
    else if (this.additivelyEqualToZero_0(result)) {
      if (argsParentNode.children.size === 1)
        argsParentNode.setNode_em03xr$(argsParentNode.children.get_za3lpa$(0));
    }
    return argsParentNode;
  };
  function BaseOperationsDefinitions$nor$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.nor_em03xr$ = function (argsParentNode) {
    var tmp$;
    var nonResult = 0.0;
    tmp$ = argsParentNode.children.iterator();
    while (tmp$.hasNext()) {
      var argNode = tmp$.next();
      if (!argNode.children.isEmpty())
        continue;
      var argValue = toDoubleOrNull(argNode.value);
      if (argValue != null) {
        nonResult += argValue;
        argNode.nodeType = NodeType$EMPTY_getInstance();
        if (!this.additivelyEqualToZero_0(nonResult)) {
          argsParentNode.setVariable_61zpoe$('0');
          return argsParentNode;
        }
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$nor$lambda);
    if (argsParentNode.children.size === 0) {
      argsParentNode.setVariable_14dthe$(this.not_yrwdxr$(nonResult));
    }
     else if (this.additivelyEqualToZero_0(nonResult) && argsParentNode.children.size === 1) {
      argsParentNode.setFunction_ke2f21$('not', this.functionConfiguration);
    }
    return argsParentNode;
  };
  function BaseOperationsDefinitions$xor$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.xor_em03xr$ = function (argsParentNode) {
    var tmp$;
    var result = 0.0;
    tmp$ = argsParentNode.children.iterator();
    while (tmp$.hasNext()) {
      var argNode = tmp$.next();
      if (!argNode.children.isEmpty())
        continue;
      var argValue = toDoubleOrNull(argNode.value);
      if (argValue != null) {
        result = this.addMod2_38ydlf$(result, argValue);
        argNode.nodeType = NodeType$EMPTY_getInstance();
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$xor$lambda);
    if (argsParentNode.children.size === 0)
      argsParentNode.setVariable_14dthe$(result);
    else if (this.additivelyEqualToZero_0(result)) {
      if (argsParentNode.children.size === 1)
        argsParentNode.setNode_em03xr$(argsParentNode.children.get_za3lpa$(0));
    }
     else {
      argsParentNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(result)));
    }
    return argsParentNode;
  };
  function BaseOperationsDefinitions$alleq$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.alleq_em03xr$ = function (argsParentNode) {
    var tmp$;
    var result = 0.5;
    tmp$ = argsParentNode.children.iterator();
    while (tmp$.hasNext()) {
      var argNode = tmp$.next();
      if (!argNode.children.isEmpty())
        continue;
      var argValue = toDoubleOrNull(argNode.value);
      if (argValue != null && (this.additivelyEqualToZero_0(argValue) || this.additivelyEqualTo_0(argValue, 1.0))) {
        var addArg = this.additivelyEqualToZero_0(argValue) ? 0.0 : 1.0;
        if (result === 0.5) {
          result = addArg;
        }
         else if (!this.additivelyEqualTo_0(result, addArg)) {
          argsParentNode.setVariable_61zpoe$('0');
          return argsParentNode;
        }
        argNode.nodeType = NodeType$EMPTY_getInstance();
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$alleq$lambda);
    if (argsParentNode.children.size === 0)
      argsParentNode.setVariable_61zpoe$('1');
    else if (result !== 0.5) {
      argsParentNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(result)));
    }
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.setMinus_em03xr$ = function (argsParentNode) {
    var tmp$, tmp$_0;
    if (argsParentNode.children.size < 2) {
      throw IllegalArgumentException_init('setMinus has less than 2 args');
    }
    var first_0 = first(argsParentNode.children);
    var firstValue = toDoubleOrNull(first_0.value);
    var hasVariable = first_0.children.size > 0 || firstValue == null;
    if (!hasVariable) {
      if ((firstValue != null ? this.additivelyEqualToZero_0(firstValue) : null) === true) {
        argsParentNode.setVariable_61zpoe$('0');
        return argsParentNode;
      }
       else if ((firstValue != null ? this.additivelyEqualTo_0(firstValue, 1.0) : null) === true && argsParentNode.children.size === 2) {
        argsParentNode.children.removeAt_za3lpa$(0);
        argsParentNode.setFunction_ke2f21$('not', this.functionConfiguration);
        return argsParentNode;
      }
    }
    tmp$ = get_lastIndex(argsParentNode.children);
    for (var i = 1; i <= tmp$; i++) {
      if (argsParentNode.children.get_za3lpa$(i).children.size > 0 || toDoubleOrNull(argsParentNode.children.get_za3lpa$(i).value) == null) {
        hasVariable = true;
      }
      if (((tmp$_0 = toDoubleOrNull(argsParentNode.children.get_za3lpa$(i).value)) != null ? this.additivelyEqualTo_0(tmp$_0, 1.0) : null) === true) {
        argsParentNode.setVariable_61zpoe$('0');
        return argsParentNode;
      }
       else if (first_0.isNodeSubtreeIdentifiersEquals_em03xr$(argsParentNode.children.get_za3lpa$(i))) {
        argsParentNode.setVariable_61zpoe$('0');
        return argsParentNode;
      }
    }
    if (!hasVariable) {
      argsParentNode.setVariable_61zpoe$('1');
    }
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.implic_em03xr$ = function (argsParentNode) {
    var tmp$;
    if (argsParentNode.children.size < 2) {
      throw IllegalArgumentException_init('setMinus has less than 2 args');
    }
    var first_0 = first(argsParentNode.children);
    var firstValue = toDoubleOrNull(first_0.value);
    var hasVariable = first_0.children.size > 0 || firstValue == null;
    if (!hasVariable && argsParentNode.children.size === 2) {
      if ((firstValue != null ? this.additivelyEqualToZero_0(firstValue) : null) === true) {
        argsParentNode.setVariable_61zpoe$('1');
      }
       else if ((firstValue != null ? this.additivelyEqualTo_0(firstValue, 1.0) : null) === true) {
        argsParentNode.setNode_em03xr$(argsParentNode.children.get_za3lpa$(1));
      }
      return argsParentNode;
    }
    var lastNode = first_0;
    var lastValue = firstValue;
    var prevLastNode = first_0;
    var prevLastValue = firstValue;
    var firstNotComputedIndex = 1;
    tmp$ = get_lastIndex(argsParentNode.children);
    for (var i = 1; i <= tmp$; i++) {
      if ((lastValue != null ? this.additivelyEqualToZero_0(lastValue) : null) === true) {
        lastValue = 1.0;
        continue;
      }
      var currentNode = argsParentNode.children.get_za3lpa$(i);
      var currentValue = toDoubleOrNull(currentNode.value);
      if ((lastValue != null ? this.additivelyEqualTo_0(lastValue, 1.0) : null) === true) {
        if (currentValue != null) {
          lastValue = currentValue;
        }
         else {
          lastValue = null;
          lastNode = currentNode;
        }
      }
       else if ((currentValue != null ? this.additivelyEqualTo_0(currentValue, 1.0) : null) === true) {
        lastValue = 1.0;
      }
       else if ((lastNode != null ? lastNode.isNodeSubtreeIdentifiersEquals_em03xr$(currentNode) : null) === true) {
        lastValue = 1.0;
      }
       else {
        firstNotComputedIndex = i;
        prevLastNode = lastNode;
        prevLastValue = lastValue;
        lastValue = null;
        lastNode = null;
      }
    }
    if (lastValue != null) {
      argsParentNode.setVariable_14dthe$(lastValue);
    }
     else if (lastNode != null) {
      argsParentNode.setNode_em03xr$(lastNode);
    }
     else if (firstNotComputedIndex > 1 && (prevLastValue != null || prevLastNode != null)) {
      if (prevLastValue != null) {
        argsParentNode.children.get_za3lpa$(firstNotComputedIndex - 1 | 0).setVariable_14dthe$(prevLastValue);
      }
       else {
        argsParentNode.children.get_za3lpa$(firstNotComputedIndex - 1 | 0).setNode_em03xr$(ensureNotNull(prevLastNode));
      }
      argsParentNode.children = argsParentNode.children.subList_vux9f0$(firstNotComputedIndex - 1 | 0, argsParentNode.children.size);
    }
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.addMod2_38ydlf$ = function ($receiver, arg) {
    if (this.additivelyEqualToZero_0($receiver))
      return arg;
    else
      return this.not_yrwdxr$(arg);
  };
  function BaseOperationsDefinitions$mul$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.mul_em03xr$ = function (argsParentNode) {
    var tmp$, tmp$_0, tmp$_1;
    var startSize = argsParentNode.children.size;
    var result = 1.0;
    var counts = LinkedHashMap_init_0();
    tmp$ = argsParentNode.children.iterator();
    while (tmp$.hasNext()) {
      var argNode = tmp$.next();
      if (!argNode.children.isEmpty())
        continue;
      var argValue = toDoubleOrNull(argNode.getComputeNodeValue_pp5jxl$(this.computeExpressionVariableType));
      if (argValue != null) {
        result *= argValue;
        argNode.nodeType = NodeType$EMPTY_getInstance();
        if (this.additivelyEqualToZero_0(result)) {
          argsParentNode.setVariable_61zpoe$('0');
          return argsParentNode;
        }
      }
       else if (argNode.children.size === 0 && this.computeExpressionVariableType === ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED_getInstance()) {
        var nodeValueStr = argNode.getComputeNodeValue_pp5jxl$(this.computeExpressionVariableType);
        var value = ((tmp$_0 = counts.get_11rb$(nodeValueStr)) != null ? tmp$_0 : 0) + 1 | 0;
        counts.put_xwzc9p$(nodeValueStr, value);
        argNode.nodeType = NodeType$EMPTY_getInstance();
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$mul$lambda);
    tmp$_1 = counts.entries.iterator();
    while (tmp$_1.hasNext()) {
      var tmp$_2 = tmp$_1.next();
      var constant = tmp$_2.key;
      var count = tmp$_2.value;
      if (count > 1) {
        argsParentNode.addChild_em03xr$(stringToExpression(constant + '^' + count));
      }
       else {
        argsParentNode.addChild_em03xr$(stringToExpression(constant).children.get_za3lpa$(0));
      }
    }
    if (argsParentNode.children.size === 0)
      argsParentNode.setVariable_14dthe$(result);
    else if (this.additivelyEqualTo_0(result, 1.0)) {
      if (argsParentNode.children.size === 1)
        argsParentNode.setNode_em03xr$(argsParentNode.children.get_za3lpa$(0));
    }
     else if (startSize > argsParentNode.children.size)
      argsParentNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(result)));
    return argsParentNode;
  };
  function BaseOperationsDefinitions$div$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.div_em03xr$ = function (argsParentNode) {
    var tmp$;
    var startSize = argsParentNode.children.size;
    var result = 1.0;
    var first = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).getComputeNodeValue_pp5jxl$(this.computeExpressionVariableType));
    var firstIsNumber = first != null && argsParentNode.children.get_za3lpa$(0).children.size === 0;
    if (firstIsNumber)
      result = ensureNotNull(first);
    if (argsParentNode.children.size === 1) {
      if (firstIsNumber)
        argsParentNode.setVariable_14dthe$(1 / result);
      return argsParentNode;
    }
     else {
      tmp$ = argsParentNode.children.size;
      for (var i = 1; i < tmp$; i++) {
        if (!argsParentNode.children.get_za3lpa$(i).children.isEmpty())
          continue;
        var argValue = toDoubleOrNull(argsParentNode.children.get_za3lpa$(i).getComputeNodeValue_pp5jxl$(this.computeExpressionVariableType));
        if (argValue != null) {
          if (firstIsNumber)
            result /= argValue;
          else
            result *= argValue;
          argsParentNode.children.get_za3lpa$(i).nodeType = NodeType$EMPTY_getInstance();
        }
      }
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$div$lambda);
    if (argsParentNode.children.size === 1) {
      if (firstIsNumber)
        argsParentNode.setVariable_14dthe$(result);
      else if (startSize > argsParentNode.children.size)
        argsParentNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(result)));
    }
     else {
      if (firstIsNumber)
        argsParentNode.children.get_za3lpa$(0).setVariable_14dthe$(result);
      else if (!this.additivelyEqualTo_0(result, 1.0) && startSize > argsParentNode.children.size)
        argsParentNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), result.toString()));
    }
    return argsParentNode;
  };
  function BaseOperationsDefinitions$pow$lambda(it) {
    return it.nodeType === NodeType$EMPTY_getInstance();
  }
  BaseOperationsDefinitions.prototype.pow_em03xr$ = function (argsParentNode) {
    var startSize = argsParentNode.children.size;
    var result = 1.0;
    for (var i = get_lastIndex(argsParentNode.children); i >= 0; i--) {
      if (!argsParentNode.children.get_za3lpa$(i).children.isEmpty()) {
        break;
      }
      var argValue = toDoubleOrNull(argsParentNode.children.get_za3lpa$(i).value);
      if (argValue != null) {
        var x = result;
        result = Math_0.pow(argValue, x);
        argsParentNode.children.get_za3lpa$(i).nodeType = NodeType$EMPTY_getInstance();
      }
       else if (this.additivelyEqualToZero_0(result)) {
        result = 1.0;
        argsParentNode.children.get_za3lpa$(i).nodeType = NodeType$EMPTY_getInstance();
      }
       else
        break;
    }
    removeAll(argsParentNode.children, BaseOperationsDefinitions$pow$lambda);
    if (argsParentNode.children.size === 0)
      argsParentNode.setVariable_14dthe$(result);
    else if (this.additivelyEqualToZero_0(result)) {
      if (argsParentNode.children.size === 1)
        argsParentNode.setVariable_61zpoe$('1');
    }
     else if (!this.additivelyEqualTo_0(result, 1.0))
      if (startSize > argsParentNode.children.size)
        argsParentNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(result)));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.mod_em03xr$ = function (argsParentNode) {
    var tmp$, tmp$_0;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    var secondArg;
    if (this.additivelyEqualToZero_0(firstArg)) {
      argsParentNode.setVariable_61zpoe$('0');
    }
     else {
      tmp$_0 = toDoubleOrNull(argsParentNode.children.get_za3lpa$(1).value);
      if (tmp$_0 == null) {
        return argsParentNode;
      }
      secondArg = tmp$_0;
      argsParentNode.setVariable_14dthe$(firstArg % secondArg);
    }
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.sin_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.sin(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.cos_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.cos(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.tan_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.tan(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.asin_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.asin(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.acos_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.acos(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.atan_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.atan(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.actan_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    var x = 1.0 / firstArg;
    argsParentNode.setVariable_14dthe$(Math_0.atan(x));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.sinh_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.sinh(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.cosh_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.cosh(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.tanh_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.tanh(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.exp_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.exp(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.ln_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(log(firstArg, math.E));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.abs_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(Math_0.abs(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.not_em03xr$ = function (argsParentNode) {
    var tmp$;
    tmp$ = toDoubleOrNull(argsParentNode.children.get_za3lpa$(0).value);
    if (tmp$ == null) {
      return argsParentNode;
    }
    var firstArg = tmp$;
    argsParentNode.setVariable_14dthe$(this.not_yrwdxr$(firstArg));
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.not_yrwdxr$ = function ($receiver) {
    return this.additivelyEqualToZero_0($receiver) ? 1.0 : 0.0;
  };
  BaseOperationsDefinitions.prototype.brackets_em03xr$ = function (argsParentNode) {
    if (argsParentNode.children.get_za3lpa$(0).children.size === 0) {
      argsParentNode.setVariable_61zpoe$(argsParentNode.children.get_za3lpa$(0).value);
      return argsParentNode;
    }
     else {
      return argsParentNode.children.get_za3lpa$(0);
    }
  };
  BaseOperationsDefinitions.prototype.emptyBrackets_em03xr$ = function (argsParentNode) {
    argsParentNode.setVariable_61zpoe$('0');
    return argsParentNode;
  };
  BaseOperationsDefinitions.prototype.additivelyEqualTo_0 = function ($receiver, number, eps) {
    if (eps === void 0)
      eps = this.epsilon;
    return this.additivelyEqualToZero_0($receiver - number, eps);
  };
  BaseOperationsDefinitions.prototype.additivelyEqualToZero_0 = function ($receiver, eps) {
    if (eps === void 0)
      eps = this.epsilon;
    return rangeTo(-eps, eps).contains_mef7kx$($receiver);
  };
  BaseOperationsDefinitions.prototype.additivelyEqual_yvo9jy$ = function (l, r, eps) {
    if (eps === void 0)
      eps = this.epsilon;
    return l === r || this.additivelyEqualTo_0(l, r, eps);
  };
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.emptyBrackets_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_0(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.brackets_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_1(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.plus_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_2(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.mul_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_3(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.minus_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_4(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.div_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_5(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.pow_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_6(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.mod_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_7(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.sumN_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_8(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.prodN_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_9(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.and_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_10(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.or_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_11(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.xor_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_12(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.alleq_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_13(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.nand_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_14(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.nor_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_15(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.implic_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_16(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.setMinus_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_17(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.not_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_18(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.sin_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_19(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.cos_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_20(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.sinh_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_21(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.cosh_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_22(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.tan_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_23(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.tanh_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_24(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.asin_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_25(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.acos_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_26(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.atan_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_27(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.actan_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_28(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.exp_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_29(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.ln_em03xr$(argsParentNode);
    };
  }
  function BaseOperationsDefinitions$baseOperationsDefinitions$lambda_30(this$BaseOperationsDefinitions) {
    return function (argsParentNode) {
      return this$BaseOperationsDefinitions.abs_em03xr$(argsParentNode);
    };
  }
  BaseOperationsDefinitions.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BaseOperationsDefinitions',
    interfaces: []
  };
  function ComplexBaseOperation() {
    ComplexBaseOperation$Companion_getInstance();
  }
  function ComplexBaseOperation$Companion() {
    ComplexBaseOperation$Companion_instance = this;
  }
  ComplexBaseOperation$Companion.prototype.plus_nq6tdq$ = function (listOfArgs) {
    var tmp$;
    var result = toComplex(0);
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      result.plusAssign_m1n3ex$(arg);
    }
    return result;
  };
  ComplexBaseOperation$Companion.prototype.minus_nq6tdq$ = function (listOfArgs) {
    var tmp$;
    if (listOfArgs.isEmpty()) {
      throw IllegalArgumentException_init('Given list is empty');
    }
    var result = toComplex(0);
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      result.minusAssign_m1n3ex$(arg);
    }
    return result;
  };
  ComplexBaseOperation$Companion.prototype.mul_nq6tdq$ = function (listOfArgs) {
    var tmp$;
    var result = toComplex(1);
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      result.timesAssign_m1n3ex$(arg);
    }
    return result;
  };
  ComplexBaseOperation$Companion.prototype.div_nq6tdq$ = function (listOfArgs) {
    var tmp$;
    if (listOfArgs.isEmpty()) {
      throw IllegalArgumentException_init('Given list is empty');
    }
    var result = listOfArgs.get_za3lpa$(0);
    var isFirstElement = true;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (isFirstElement) {
        isFirstElement = false;
      }
       else {
        result.divAssign_m1n3ex$(arg);
      }
    }
    return result;
  };
  ComplexBaseOperation$Companion.prototype.mod_nq6tdq$ = function (listOfArgs) {
    return toComplex(0);
  };
  ComplexBaseOperation$Companion.prototype.pow_nq6tdq$ = function (listOfArgs) {
    var index = listOfArgs.size - 1 | 0;
    var currentPow = toComplex(1);
    while (index >= 0) {
      currentPow = listOfArgs.get_za3lpa$(index).pow_m1n3ex$(currentPow);
      index = index - 1 | 0;
    }
    return currentPow;
  };
  ComplexBaseOperation$Companion.prototype.and_nq6tdq$ = function (listOfArgs) {
    var tmp$;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (arg.equals_m1n3ex$(toComplex(0))) {
        return toComplex(0);
      }
    }
    return toComplex(1);
  };
  ComplexBaseOperation$Companion.prototype.or_nq6tdq$ = function (listOfArgs) {
    var tmp$;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (!arg.equals_m1n3ex$(toComplex(0))) {
        return toComplex(1);
      }
    }
    return toComplex(0);
  };
  ComplexBaseOperation$Companion.prototype.xor_nq6tdq$ = function (listOfArgs) {
    var tmp$;
    var counter = 0;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (!arg.equals_m1n3ex$(toComplex(0))) {
        counter = counter + 1 | 0;
      }
    }
    return toComplex(counter % 2);
  };
  ComplexBaseOperation$Companion.prototype.alleq_nq6tdq$ = function (listOfArgs) {
    var tmp$;
    if (listOfArgs.isEmpty()) {
      return toComplex(1);
    }
    var firstArg = listOfArgs.get_za3lpa$(0);
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (!arg.equals_m1n3ex$(firstArg)) {
        return toComplex(0);
      }
    }
    return toComplex(1);
  };
  ComplexBaseOperation$Companion.prototype.not_nq6tdq$ = function (listOfArgs) {
    var tmp$;
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('List size is not equals to 1');
    }
     else {
      if (listOfArgs.get_za3lpa$(0).equals_m1n3ex$(toComplex(0))) {
        tmp$ = toComplex(1);
      }
       else {
        tmp$ = toComplex(0);
      }
    }
    return tmp$;
  };
  ComplexBaseOperation$Companion.prototype.sin_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().sin_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.cos_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().cos_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.sinh_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().sinh_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.cosh_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().cosh_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.tan_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().tan_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.tanh_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().tanh_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.asin_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().asin_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.acos_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().acos_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.atan_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().atan_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.actan_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var args = listOf_0([Complex_init(new Real(1.0), new Real(0.0), Form$ALGEBRAIC_getInstance()), listOfArgs.get_za3lpa$(0)]);
    return Complex$Companion_getInstance().atan_m1n3ex$(this.div_nq6tdq$(args));
  };
  ComplexBaseOperation$Companion.prototype.exp_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().exp_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.ln_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().ln_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.prototype.abs_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex_init(Complex$Companion_getInstance().abs_m1n3ex$(listOfArgs.get_za3lpa$(0)), Real_init(0), Form$ALGEBRAIC_getInstance());
  };
  ComplexBaseOperation$Companion.prototype.sqrt_nq6tdq$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    return Complex$Companion_getInstance().sqrt_m1n3ex$(listOfArgs.get_za3lpa$(0));
  };
  ComplexBaseOperation$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ComplexBaseOperation$Companion_instance = null;
  function ComplexBaseOperation$Companion_getInstance() {
    if (ComplexBaseOperation$Companion_instance === null) {
      new ComplexBaseOperation$Companion();
    }
    return ComplexBaseOperation$Companion_instance;
  }
  ComplexBaseOperation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ComplexBaseOperation',
    interfaces: []
  };
  function DoubleBaseOperation() {
    DoubleBaseOperation$Companion_getInstance();
  }
  function DoubleBaseOperation$Companion() {
    DoubleBaseOperation$Companion_instance = this;
  }
  DoubleBaseOperation$Companion.prototype.plus_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    var result = 0.0;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      result += arg;
    }
    return result;
  };
  DoubleBaseOperation$Companion.prototype.minus_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    if (listOfArgs.isEmpty()) {
      throw IllegalArgumentException_init('Given list is empty');
    }
    var result = 0.0;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      result -= arg;
    }
    return result;
  };
  DoubleBaseOperation$Companion.prototype.mul_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    var result = 1.0;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      result *= arg;
    }
    return result;
  };
  DoubleBaseOperation$Companion.prototype.div_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    if (listOfArgs.isEmpty()) {
      throw IllegalArgumentException_init('Given list is empty');
    }
    var result = listOfArgs.get_za3lpa$(0);
    var isFirstElement = true;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (isFirstElement) {
        isFirstElement = false;
      }
       else {
        result /= arg;
      }
    }
    return result;
  };
  DoubleBaseOperation$Companion.prototype.mod_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 2) {
      throw IllegalArgumentException_init('list size not equals 2');
    }
     else {
      return listOfArgs.get_za3lpa$(0) % listOfArgs.get_za3lpa$(1);
    }
  };
  DoubleBaseOperation$Companion.prototype.pow_d3e2cz$ = function (listOfArgs) {
    var index = listOfArgs.size - 1 | 0;
    var currentPow = 1.0;
    while (index >= 0) {
      var $receiver = listOfArgs.get_za3lpa$(index);
      var x = currentPow;
      currentPow = Math_0.pow($receiver, x);
      index = index - 1 | 0;
    }
    return currentPow;
  };
  DoubleBaseOperation$Companion.prototype.and_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (arg === 0.0) {
        return 0.0;
      }
    }
    return 1.0;
  };
  DoubleBaseOperation$Companion.prototype.implic_d3e2cz$ = function (listOfArgs) {
    var tmp$, tmp$_0, tmp$_1;
    if (listOfArgs.size < 2) {
      throw IllegalArgumentException_init('List size less than 2');
    }
     else {
      var last = listOfArgs.get_za3lpa$(0);
      tmp$ = get_lastIndex(listOfArgs);
      for (var i = 1; i <= tmp$; i++) {
        if (BaseOperationsComputation$Companion_getInstance().additivelyEqual_lu1900$(0.0, last)) {
          tmp$_0 = 1.0;
        }
         else {
          tmp$_0 = listOfArgs.get_za3lpa$(i);
        }
        last = tmp$_0;
      }
      tmp$_1 = last;
    }
    return tmp$_1;
  };
  DoubleBaseOperation$Companion.prototype.nand_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    if (BaseOperationsComputation$Companion_getInstance().additivelyEqual_lu1900$(0.0, this.and_d3e2cz$(listOfArgs))) {
      tmp$ = 1.0;
    }
     else {
      tmp$ = 0.0;
    }
    return tmp$;
  };
  DoubleBaseOperation$Companion.prototype.nor_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    if (BaseOperationsComputation$Companion_getInstance().additivelyEqual_lu1900$(0.0, this.or_d3e2cz$(listOfArgs))) {
      tmp$ = 1.0;
    }
     else {
      tmp$ = 0.0;
    }
    return tmp$;
  };
  DoubleBaseOperation$Companion.prototype.setMinus_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    if (listOfArgs.size < 2) {
      throw IllegalArgumentException_init('List size less than 2');
    }
     else {
      var last = listOfArgs.get_za3lpa$(0);
      tmp$ = get_lastIndex(listOfArgs);
      for (var i = 1; i <= tmp$; i++) {
        if (BaseOperationsComputation$Companion_getInstance().additivelyEqual_lu1900$(0.0, last)) {
          return 0.0;
        }
         else if (BaseOperationsComputation$Companion_getInstance().additivelyEqual_lu1900$(listOfArgs.get_za3lpa$(i), last)) {
          return 0.0;
        }
      }
      return last;
    }
  };
  DoubleBaseOperation$Companion.prototype.not_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('List size is not equals to 1');
    }
     else {
      if (BaseOperationsComputation$Companion_getInstance().additivelyEqual_lu1900$(0.0, listOfArgs.get_za3lpa$(0))) {
        tmp$ = 1.0;
      }
       else {
        tmp$ = 0.0;
      }
    }
    return tmp$;
  };
  DoubleBaseOperation$Companion.prototype.or_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (arg !== 0.0) {
        return 1.0;
      }
    }
    return 0.0;
  };
  DoubleBaseOperation$Companion.prototype.xor_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    var counter = 0;
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (arg !== 0.0) {
        counter = counter + 1 | 0;
      }
    }
    return counter % 2;
  };
  DoubleBaseOperation$Companion.prototype.alleq_d3e2cz$ = function (listOfArgs) {
    var tmp$;
    if (listOfArgs.isEmpty()) {
      return 1.0;
    }
    var firstArg = listOfArgs.get_za3lpa$(0);
    tmp$ = listOfArgs.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      if (arg !== firstArg) {
        return 0.0;
      }
    }
    return 1.0;
  };
  DoubleBaseOperation$Companion.prototype.sin_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.sin(x);
  };
  DoubleBaseOperation$Companion.prototype.cos_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.cos(x);
  };
  DoubleBaseOperation$Companion.prototype.sinh_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.sinh(x);
  };
  DoubleBaseOperation$Companion.prototype.cosh_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.cosh(x);
  };
  DoubleBaseOperation$Companion.prototype.tan_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.tan(x);
  };
  DoubleBaseOperation$Companion.prototype.tanh_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.tanh(x);
  };
  DoubleBaseOperation$Companion.prototype.asin_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.asin(x);
  };
  DoubleBaseOperation$Companion.prototype.acos_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.acos(x);
  };
  DoubleBaseOperation$Companion.prototype.atan_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.atan(x);
  };
  DoubleBaseOperation$Companion.prototype.actan_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = 1.0 / listOfArgs.get_za3lpa$(0);
    return Math_0.atan(x);
  };
  DoubleBaseOperation$Companion.prototype.exp_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.exp(x);
  };
  DoubleBaseOperation$Companion.prototype.ln_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.log(x);
  };
  DoubleBaseOperation$Companion.prototype.abs_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.abs(x);
  };
  DoubleBaseOperation$Companion.prototype.sqrt_d3e2cz$ = function (listOfArgs) {
    if (listOfArgs.size !== 1) {
      throw IllegalArgumentException_init('Given list contains not one argument');
    }
    var x = listOfArgs.get_za3lpa$(0);
    return Math_0.sqrt(x);
  };
  DoubleBaseOperation$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DoubleBaseOperation$Companion_instance = null;
  function DoubleBaseOperation$Companion_getInstance() {
    if (DoubleBaseOperation$Companion_instance === null) {
      new DoubleBaseOperation$Companion();
    }
    return DoubleBaseOperation$Companion_instance;
  }
  DoubleBaseOperation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DoubleBaseOperation',
    interfaces: []
  };
  function DomainSegment(leftBorder, leftBorderInc, rightBorder, rightBorderInc) {
    DomainSegment$Companion_getInstance();
    this.leftBorder = leftBorder;
    this.leftBorderInc = leftBorderInc;
    this.rightBorder = rightBorder;
    this.rightBorderInc = rightBorderInc;
  }
  DomainSegment.prototype.contains_14dthe$ = function (point) {
    return (this.leftBorder < point || (this.leftBorderInc && point === this.leftBorder)) && (point < this.rightBorder || (this.rightBorderInc && point === this.rightBorder));
  };
  DomainSegment.prototype.shiftBy_14dthe$ = function (shift) {
    return new DomainSegment(this.leftBorder + shift, this.leftBorderInc, this.rightBorder + shift, this.rightBorderInc);
  };
  DomainSegment.prototype.scaleBy_14dthe$ = function (scale) {
    return new DomainSegment(this.leftBorder * scale, this.leftBorderInc, this.rightBorder * scale, this.rightBorderInc);
  };
  DomainSegment.prototype.generateRandomPoint = function () {
    var from = this.leftBorder;
    if (!this.leftBorderInc) {
      from += 1.0E-9;
    }
    var to = this.rightBorder;
    if (this.rightBorderInc) {
      to += 1.0E-9;
    }
    return random_1(from, to);
  };
  function DomainSegment$Companion() {
    DomainSegment$Companion_instance = this;
  }
  DomainSegment$Companion.prototype.inclusive_lu1900$ = function (left, right) {
    return new DomainSegment(left, true, right, true);
  };
  DomainSegment$Companion.prototype.intersect_1gw2ja$ = function (a, b) {
    var isIntersecting = a.leftBorder <= b.rightBorder && b.leftBorder <= a.rightBorder;
    if (!isIntersecting)
      return null;
    var a_0 = a.leftBorder;
    var b_0 = b.leftBorder;
    var newLeft = Math_0.max(a_0, b_0);
    var a_1 = a.rightBorder;
    var b_1 = b.rightBorder;
    var newRight = Math_0.min(a_1, b_1);
    var leftIncl = newLeft === a.leftBorder ? a.leftBorderInc : b.leftBorderInc;
    var rightIncl = newRight === a.rightBorder ? a.rightBorderInc : b.rightBorderInc;
    return new DomainSegment(newLeft, leftIncl, newRight, rightIncl);
  };
  function DomainSegment$Companion$intersectSegments$lambda(it) {
    return it.leftBorder;
  }
  function DomainSegment$Companion$intersectSegments$lambda_0(it) {
    return it.rightBorder;
  }
  DomainSegment$Companion.prototype.intersectSegments_ej9gks$ = function (a, b) {
    return toSet(sortedWith(union(a, b), compareBy([DomainSegment$Companion$intersectSegments$lambda, DomainSegment$Companion$intersectSegments$lambda_0])));
  };
  DomainSegment$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DomainSegment$Companion_instance = null;
  function DomainSegment$Companion_getInstance() {
    if (DomainSegment$Companion_instance === null) {
      new DomainSegment$Companion();
    }
    return DomainSegment$Companion_instance;
  }
  DomainSegment.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DomainSegment',
    interfaces: []
  };
  DomainSegment.prototype.component1 = function () {
    return this.leftBorder;
  };
  DomainSegment.prototype.component2 = function () {
    return this.leftBorderInc;
  };
  DomainSegment.prototype.component3 = function () {
    return this.rightBorder;
  };
  DomainSegment.prototype.component4 = function () {
    return this.rightBorderInc;
  };
  DomainSegment.prototype.copy_xl1p70$ = function (leftBorder, leftBorderInc, rightBorder, rightBorderInc) {
    return new DomainSegment(leftBorder === void 0 ? this.leftBorder : leftBorder, leftBorderInc === void 0 ? this.leftBorderInc : leftBorderInc, rightBorder === void 0 ? this.rightBorder : rightBorder, rightBorderInc === void 0 ? this.rightBorderInc : rightBorderInc);
  };
  DomainSegment.prototype.toString = function () {
    return 'DomainSegment(leftBorder=' + Kotlin.toString(this.leftBorder) + (', leftBorderInc=' + Kotlin.toString(this.leftBorderInc)) + (', rightBorder=' + Kotlin.toString(this.rightBorder)) + (', rightBorderInc=' + Kotlin.toString(this.rightBorderInc)) + ')';
  };
  DomainSegment.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.leftBorder) | 0;
    result = result * 31 + Kotlin.hashCode(this.leftBorderInc) | 0;
    result = result * 31 + Kotlin.hashCode(this.rightBorder) | 0;
    result = result * 31 + Kotlin.hashCode(this.rightBorderInc) | 0;
    return result;
  };
  DomainSegment.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.leftBorder, other.leftBorder) && Kotlin.equals(this.leftBorderInc, other.leftBorderInc) && Kotlin.equals(this.rightBorder, other.rightBorder) && Kotlin.equals(this.rightBorderInc, other.rightBorderInc)))));
  };
  function DefinitionDomain(points, excludedPoints, segments) {
    DefinitionDomain$Companion_getInstance();
    if (points === void 0) {
      points = LinkedHashSet_init();
    }
    if (excludedPoints === void 0) {
      excludedPoints = LinkedHashSet_init();
    }
    if (segments === void 0) {
      segments = LinkedHashSet_init();
    }
    this.points = points;
    this.excludedPoints = excludedPoints;
    this.segments = segments;
  }
  DefinitionDomain.prototype.isInDomain_14dthe$ = function (point) {
    var tmp$ = !this.excludedPoints.contains_11rb$(point);
    if (tmp$) {
      var tmp$_0 = this.points.contains_11rb$(point);
      if (!tmp$_0) {
        var $receiver = this.segments;
        var any$result;
        any$break: do {
          var tmp$_1;
          if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
            any$result = false;
            break any$break;
          }
          tmp$_1 = $receiver.iterator();
          while (tmp$_1.hasNext()) {
            var element = tmp$_1.next();
            if (element.contains_14dthe$(point)) {
              any$result = true;
              break any$break;
            }
          }
          any$result = false;
        }
         while (false);
        tmp$_0 = any$result;
      }
      tmp$ = tmp$_0;
    }
    return tmp$;
  };
  DefinitionDomain.prototype.generateNewPoint = function () {
    if (this.points.isEmpty() && this.segments.isEmpty()) {
      throw new EmptyDomainException();
    }
    var generated = this.unsafeGenerateNewPoint_0();
    while (this.excludedPoints.contains_11rb$(generated))
      generated = this.unsafeGenerateNewPoint_0();
    return generated;
  };
  DefinitionDomain.prototype.unsafeGenerateNewPoint_0 = function () {
    if (this.points.isEmpty()) {
      return this.generateFromSegments_0();
    }
     else if (this.segments.isEmpty()) {
      return this.generateFromPoints_0();
    }
     else {
      return defaultRandom() < 0.6 ? this.generateFromSegments_0() : this.generateFromPoints_0();
    }
  };
  DefinitionDomain.prototype.generateFromPoints_0 = function () {
    var tmp$;
    var randnum = randomInt(0, this.points.size);
    var got = 0;
    while (got < randnum) {
      tmp$ = this.points.iterator();
      while (tmp$.hasNext()) {
        var p = tmp$.next();
        got = got + 1 | 0;
        if (got > randnum)
          return p;
      }
    }
    throw IllegalStateException_init();
  };
  DefinitionDomain.prototype.generateFromSegments_0 = function () {
    var tmp$;
    var randnum = randomInt(0, this.segments.size);
    var got = 0;
    while (got < randnum) {
      tmp$ = this.segments.iterator();
      while (tmp$.hasNext()) {
        var p = tmp$.next();
        got = got + 1 | 0;
        if (got > randnum)
          return p.generateRandomPoint();
      }
    }
    throw IllegalStateException_init();
  };
  DefinitionDomain.prototype.intersectWith_8hcznf$ = function (other) {
    return new DefinitionDomain(intersect(this.points, other.points), union(this.excludedPoints, other.excludedPoints), DomainSegment$Companion_getInstance().intersectSegments_ej9gks$(this.segments, other.segments));
  };
  DefinitionDomain.prototype.shiftBy_14dthe$ = function (shift) {
    var $receiver = this.points;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item + shift);
    }
    var tmp$_0 = toSet(destination);
    var $receiver_0 = this.excludedPoints;
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_1;
    tmp$_1 = $receiver_0.iterator();
    while (tmp$_1.hasNext()) {
      var item_0 = tmp$_1.next();
      destination_0.add_11rb$(item_0 + shift);
    }
    var tmp$_2 = toSet(destination_0);
    var $receiver_1 = this.segments;
    var destination_1 = ArrayList_init_0(collectionSizeOrDefault($receiver_1, 10));
    var tmp$_3;
    tmp$_3 = $receiver_1.iterator();
    while (tmp$_3.hasNext()) {
      var item_1 = tmp$_3.next();
      destination_1.add_11rb$(item_1.shiftBy_14dthe$(shift));
    }
    return new DefinitionDomain(tmp$_0, tmp$_2, toSet(destination_1));
  };
  DefinitionDomain.prototype.scaleBy_14dthe$ = function (scale) {
    var $receiver = this.points;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item * scale);
    }
    var tmp$_0 = toSet(destination);
    var $receiver_0 = this.excludedPoints;
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_1;
    tmp$_1 = $receiver_0.iterator();
    while (tmp$_1.hasNext()) {
      var item_0 = tmp$_1.next();
      destination_0.add_11rb$(item_0 * scale);
    }
    var tmp$_2 = toSet(destination_0);
    var $receiver_1 = this.segments;
    var destination_1 = ArrayList_init_0(collectionSizeOrDefault($receiver_1, 10));
    var tmp$_3;
    tmp$_3 = $receiver_1.iterator();
    while (tmp$_3.hasNext()) {
      var item_1 = tmp$_3.next();
      destination_1.add_11rb$(item_1.scaleBy_14dthe$(scale));
    }
    return new DefinitionDomain(tmp$_0, tmp$_2, toSet(destination_1));
  };
  DefinitionDomain.prototype.except_yqxtqz$ = function (newPoints) {
    return new DefinitionDomain(this.points, plus_0(toMutableSet_0(newPoints), this.excludedPoints), this.segments);
  };
  function DefinitionDomain$rightMostElement$lambda(a, b) {
    return Math_0.max(a, b);
  }
  DefinitionDomain.prototype.rightMostElement = function () {
    return this.funcOrNull_0(DefinitionDomain$rightMostElement$lambda, this.rightMostPoint_0(), this.rightMostFromSequence_0());
  };
  function DefinitionDomain$leftMostElement$lambda(a, b) {
    return Math_0.min(a, b);
  }
  DefinitionDomain.prototype.leftMostElement = function () {
    return this.funcOrNull_0(DefinitionDomain$leftMostElement$lambda, this.leftMostPoint_0(), this.leftMostFromSequence_0());
  };
  DefinitionDomain.prototype.funcOrNull_0 = function (func, p, r) {
    var tmp$;
    if (p == null && r == null) {
      throw new EmptyDomainException();
    }
     else if (p == null && r != null) {
      tmp$ = r;
    }
     else if (r == null && p != null) {
      tmp$ = p;
    }
     else if (r != null && p != null) {
      tmp$ = func(p, r);
    }
     else {
      throw IllegalStateException_init();
    }
    return tmp$;
  };
  function DefinitionDomain$leftMostPoint$lambda(this$DefinitionDomain) {
    return function (it) {
      return !this$DefinitionDomain.excludedPoints.contains_11rb$(it);
    };
  }
  DefinitionDomain.prototype.leftMostPoint_0 = function () {
    return firstOrNull(filter(asSequence(sorted(this.points)), DefinitionDomain$leftMostPoint$lambda(this)));
  };
  function DefinitionDomain$rightMostPoint$lambda(this$DefinitionDomain) {
    return function (it) {
      return !this$DefinitionDomain.excludedPoints.contains_11rb$(it);
    };
  }
  DefinitionDomain.prototype.rightMostPoint_0 = function () {
    return firstOrNull(filter(asSequence(sortedDescending(this.points)), DefinitionDomain$rightMostPoint$lambda(this)));
  };
  function DefinitionDomain$leftMostFromSequence$lambda(it) {
    return it.leftBorder;
  }
  function DefinitionDomain$leftMostFromSequence$lambda_0(it) {
    return it.rightBorder;
  }
  DefinitionDomain.prototype.leftMostFromSequence_0 = function () {
    var tmp$;
    return (tmp$ = firstOrNull(sortedWith_0(asSequence(this.segments), compareBy([DefinitionDomain$leftMostFromSequence$lambda, DefinitionDomain$leftMostFromSequence$lambda_0])))) != null ? tmp$.leftBorder : null;
  };
  function DefinitionDomain$rightMostFromSequence$lambda(it) {
    return -it.rightBorder;
  }
  function DefinitionDomain$rightMostFromSequence$lambda_0(it) {
    return -it.leftBorder;
  }
  DefinitionDomain.prototype.rightMostFromSequence_0 = function () {
    var tmp$;
    return (tmp$ = firstOrNull(sortedWith_0(asSequence(this.segments), compareBy([DefinitionDomain$rightMostFromSequence$lambda, DefinitionDomain$rightMostFromSequence$lambda_0])))) != null ? tmp$.rightBorder : null;
  };
  DefinitionDomain.prototype.toString = function () {
    return StringBuilder_init_0().append_gw00v9$('DefinitionDomain(points=').append_s8jyv4$(this.points).append_gw00v9$(', excludedPoints=').append_s8jyv4$(this.excludedPoints).append_gw00v9$(', segments=').append_s8jyv4$(this.segments).append_gw00v9$(')').toString();
  };
  DefinitionDomain.prototype.equals = function (other) {
    var tmp$;
    if (this === other)
      return true;
    Kotlin.isType(tmp$ = other, DefinitionDomain) ? tmp$ : throwCCE();
    if (!equals(this.points, other.points))
      return false;
    if (!equals(this.excludedPoints, other.excludedPoints))
      return false;
    if (!equals(this.segments, other.segments))
      return false;
    return true;
  };
  DefinitionDomain.prototype.hashCode = function () {
    var result = hashCode(this.points);
    result = (31 * result | 0) + hashCode(this.excludedPoints) | 0;
    result = (31 * result | 0) + hashCode(this.segments) | 0;
    return result;
  };
  function DefinitionDomain$Companion() {
    DefinitionDomain$Companion_instance = this;
  }
  DefinitionDomain$Companion.prototype.inclusive_lu1900$ = function (left, right) {
    return new DefinitionDomain(void 0, void 0, mutableSetOf([DomainSegment$Companion_getInstance().inclusive_lu1900$(left, right)]));
  };
  DefinitionDomain$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DefinitionDomain$Companion_instance = null;
  function DefinitionDomain$Companion_getInstance() {
    if (DefinitionDomain$Companion_instance === null) {
      new DefinitionDomain$Companion();
    }
    return DefinitionDomain$Companion_instance;
  }
  DefinitionDomain.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DefinitionDomain',
    interfaces: []
  };
  function EmptyDomainException() {
    Throwable.call(this);
    this.message_53znmd$_0 = void 0;
    this.cause_1cfi5v$_0 = null;
    Kotlin.captureStack(Throwable, this);
    this.name = 'EmptyDomainException';
  }
  Object.defineProperty(EmptyDomainException.prototype, 'message', {
    get: function () {
      return this.message_53znmd$_0;
    }
  });
  Object.defineProperty(EmptyDomainException.prototype, 'cause', {
    get: function () {
      return this.cause_1cfi5v$_0;
    }
  });
  EmptyDomainException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EmptyDomainException',
    interfaces: [Throwable]
  };
  function AnalyticallyDefinedDomain(predicates) {
    this.predicates = predicates;
  }
  AnalyticallyDefinedDomain.prototype.isInDomain_14dthe$ = function (point) {
    var $receiver = this.predicates;
    var all$result;
    all$break: do {
      var tmp$;
      if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
        all$result = true;
        break all$break;
      }
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!element(point)) {
          all$result = false;
          break all$break;
        }
      }
      all$result = true;
    }
     while (false);
    return all$result;
  };
  AnalyticallyDefinedDomain.prototype.generateNewPoint = function () {
    throw new NotImplementedError_init();
  };
  AnalyticallyDefinedDomain.prototype.intersectWith_lsoe3e$ = function (other) {
    return new AnalyticallyDefinedDomain(plus(this.predicates, other.predicates));
  };
  AnalyticallyDefinedDomain.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AnalyticallyDefinedDomain',
    interfaces: []
  };
  var DomainAll;
  var DomainNil;
  function MultivariateDefinitionDomain(expression) {
    this.expression = expression;
    var $receiver = this.expression.getVariableNames_ywdfdh$();
    var result = LinkedHashMap_init(coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      result.put_xwzc9p$(element, DomainAll);
    }
    this.variables = toMutableMap(result);
  }
  MultivariateDefinitionDomain.prototype.set_lik5yr$ = function (varname, vardomain) {
    if (this.variables.containsKey_11rb$(varname)) {
      this.variables.put_xwzc9p$(varname, vardomain);
    }
  };
  MultivariateDefinitionDomain.prototype.get_61zpoe$ = function (varname) {
    return this.variables.get_11rb$(varname);
  };
  MultivariateDefinitionDomain.prototype.generateNewPoint = function () {
    var $receiver = this.variables;
    var destination = LinkedHashMap_init(mapCapacity($receiver.size));
    var tmp$;
    tmp$ = $receiver.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      destination.put_xwzc9p$(element.key, element.value.generateNewPoint());
    }
    return destination;
  };
  MultivariateDefinitionDomain.prototype.intersect_sci2rg$ = function (other) {
    var $receiver = union(this.variables.keys, other.variables.keys);
    var result = LinkedHashMap_init(coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      result.put_xwzc9p$(element, ensureNotNull(this.variables.get_11rb$(element)).intersectWith_8hcznf$(ensureNotNull(other.variables.get_11rb$(element))));
    }
    return result;
  };
  MultivariateDefinitionDomain.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MultivariateDefinitionDomain',
    interfaces: []
  };
  function CheckedFactColor(checkedFactBackgroundColor, correctFactColor, unconfirmedFactColor, factNotHelpFactColor, factHelpFactColor, wrongFactColor, wrongTransformationFactColor) {
    if (checkedFactBackgroundColor === void 0)
      checkedFactBackgroundColor = '7F00FF';
    if (correctFactColor === void 0)
      correctFactColor = '007F00';
    if (unconfirmedFactColor === void 0)
      unconfirmedFactColor = 'FF00FF';
    if (factNotHelpFactColor === void 0)
      factNotHelpFactColor = 'FF00FF';
    if (factHelpFactColor === void 0)
      factHelpFactColor = '007F00';
    if (wrongFactColor === void 0)
      wrongFactColor = 'FF0000';
    if (wrongTransformationFactColor === void 0)
      wrongTransformationFactColor = 'FF0000';
    this.checkedFactBackgroundColor = checkedFactBackgroundColor;
    this.correctFactColor = correctFactColor;
    this.unconfirmedFactColor = unconfirmedFactColor;
    this.factNotHelpFactColor = factNotHelpFactColor;
    this.factHelpFactColor = factHelpFactColor;
    this.wrongFactColor = wrongFactColor;
    this.wrongTransformationFactColor = wrongTransformationFactColor;
  }
  CheckedFactColor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CheckedFactColor',
    interfaces: []
  };
  CheckedFactColor.prototype.component1 = function () {
    return this.checkedFactBackgroundColor;
  };
  CheckedFactColor.prototype.component2 = function () {
    return this.correctFactColor;
  };
  CheckedFactColor.prototype.component3 = function () {
    return this.unconfirmedFactColor;
  };
  CheckedFactColor.prototype.component4 = function () {
    return this.factNotHelpFactColor;
  };
  CheckedFactColor.prototype.component5 = function () {
    return this.factHelpFactColor;
  };
  CheckedFactColor.prototype.component6 = function () {
    return this.wrongFactColor;
  };
  CheckedFactColor.prototype.component7 = function () {
    return this.wrongTransformationFactColor;
  };
  CheckedFactColor.prototype.copy_blz5pm$ = function (checkedFactBackgroundColor, correctFactColor, unconfirmedFactColor, factNotHelpFactColor, factHelpFactColor, wrongFactColor, wrongTransformationFactColor) {
    return new CheckedFactColor(checkedFactBackgroundColor === void 0 ? this.checkedFactBackgroundColor : checkedFactBackgroundColor, correctFactColor === void 0 ? this.correctFactColor : correctFactColor, unconfirmedFactColor === void 0 ? this.unconfirmedFactColor : unconfirmedFactColor, factNotHelpFactColor === void 0 ? this.factNotHelpFactColor : factNotHelpFactColor, factHelpFactColor === void 0 ? this.factHelpFactColor : factHelpFactColor, wrongFactColor === void 0 ? this.wrongFactColor : wrongFactColor, wrongTransformationFactColor === void 0 ? this.wrongTransformationFactColor : wrongTransformationFactColor);
  };
  CheckedFactColor.prototype.toString = function () {
    return 'CheckedFactColor(checkedFactBackgroundColor=' + Kotlin.toString(this.checkedFactBackgroundColor) + (', correctFactColor=' + Kotlin.toString(this.correctFactColor)) + (', unconfirmedFactColor=' + Kotlin.toString(this.unconfirmedFactColor)) + (', factNotHelpFactColor=' + Kotlin.toString(this.factNotHelpFactColor)) + (', factHelpFactColor=' + Kotlin.toString(this.factHelpFactColor)) + (', wrongFactColor=' + Kotlin.toString(this.wrongFactColor)) + (', wrongTransformationFactColor=' + Kotlin.toString(this.wrongTransformationFactColor)) + ')';
  };
  CheckedFactColor.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.checkedFactBackgroundColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.correctFactColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.unconfirmedFactColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.factNotHelpFactColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.factHelpFactColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.wrongFactColor) | 0;
    result = result * 31 + Kotlin.hashCode(this.wrongTransformationFactColor) | 0;
    return result;
  };
  CheckedFactColor.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.checkedFactBackgroundColor, other.checkedFactBackgroundColor) && Kotlin.equals(this.correctFactColor, other.correctFactColor) && Kotlin.equals(this.unconfirmedFactColor, other.unconfirmedFactColor) && Kotlin.equals(this.factNotHelpFactColor, other.factNotHelpFactColor) && Kotlin.equals(this.factHelpFactColor, other.factHelpFactColor) && Kotlin.equals(this.wrongFactColor, other.wrongFactColor) && Kotlin.equals(this.wrongTransformationFactColor, other.wrongTransformationFactColor)))));
  };
  function CheckedFactAccentuation(checkedFactColor) {
    if (checkedFactColor === void 0)
      checkedFactColor = new CheckedFactColor();
    this.checkedFactColor = checkedFactColor;
  }
  CheckedFactAccentuation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CheckedFactAccentuation',
    interfaces: []
  };
  CheckedFactAccentuation.prototype.component1 = function () {
    return this.checkedFactColor;
  };
  CheckedFactAccentuation.prototype.copy_fvw0k9$ = function (checkedFactColor) {
    return new CheckedFactAccentuation(checkedFactColor === void 0 ? this.checkedFactColor : checkedFactColor);
  };
  CheckedFactAccentuation.prototype.toString = function () {
    return 'CheckedFactAccentuation(checkedFactColor=' + Kotlin.toString(this.checkedFactColor) + ')';
  };
  CheckedFactAccentuation.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.checkedFactColor) | 0;
    return result;
  };
  CheckedFactAccentuation.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.checkedFactColor, other.checkedFactColor))));
  };
  function CheckingKeyWords() {
    CheckingKeyWords$Companion_getInstance();
  }
  function CheckingKeyWords$Companion() {
    CheckingKeyWords$Companion_instance = this;
    this.notFound = 'NOT_FOUND';
    this.transformationNotFound = 'TRANSFORMATION_NOT_FOUND';
    this.verificationFailed = 'VERIFICATION_FAILED';
    this.isNotExpressionRule = 'CANNOT_BE_APPLIED_TO_EXPRESSIONS';
    this.comparisonTypesConflict = 'COMPARISON_SIGNS_CONFLICT';
    this.expressionChainVerified = 'EXPRESSION_CHAIN_VERIFIED';
    this.factChainVerified = 'FACT_CHAIN_VERIFIED';
    this.transformationVerified = 'TRANSFORMATION_VERIFIED';
    this.transformationFound = 'TRANSFORMATION_FOUND';
    this.comparisonStart = 'COMPARISON_START';
    this.expressionSubstitution = 'EXPRESSION_RULE';
    this.factSubstitution = 'FACT_RULE';
    this.inTaskContext = 'IN_TASK_CONTEXT';
    this.notInTaskContext = 'OUT_OF_TASK_CONTEXT';
    this.taskContextFactUsed = 'TASK_CONTEXT_FACT_USED';
    this.expressionChain = 'EXPRESSION_CHAIN';
    this.expressionComparison = 'EXPRESSION_COMPARISON';
    this.factChain = 'FACT_CHAIN';
    this.rule = 'RULE';
    this.ruleReference = 'RULE_REFERENCE';
    this.mainLineNode = 'CONTEXT';
    this.ruleAddedInContext = 'ADDED';
    this.inFact = 'KNOWN_FACT';
    this.factTransformation = 'FACT_TRANSFORMATION';
    this.expressionTransformation = 'EXPRESSION_TRANSFORMATION';
    this.comparisonWithoutSubstitutions = 'COMPARISON_WITHOUT_SUBSTITUTIONS';
  }
  CheckingKeyWords$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var CheckingKeyWords$Companion_instance = null;
  function CheckingKeyWords$Companion_getInstance() {
    if (CheckingKeyWords$Companion_instance === null) {
      new CheckingKeyWords$Companion();
    }
    return CheckingKeyWords$Companion_instance;
  }
  CheckingKeyWords.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CheckingKeyWords',
    interfaces: []
  };
  function ComparisonType(name, ordinal, string) {
    Enum.call(this);
    this.string = string;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ComparisonType_initFields() {
    ComparisonType_initFields = function () {
    };
    ComparisonType$LEFT_MORE_OR_EQUAL_instance = new ComparisonType('LEFT_MORE_OR_EQUAL', 0, '>=');
    ComparisonType$LEFT_LESS_OR_EQUAL_instance = new ComparisonType('LEFT_LESS_OR_EQUAL', 1, '<=');
    ComparisonType$EQUAL_instance = new ComparisonType('EQUAL', 2, '=');
    ComparisonType$LEFT_MORE_instance = new ComparisonType('LEFT_MORE', 3, '>');
    ComparisonType$LEFT_LESS_instance = new ComparisonType('LEFT_LESS', 4, '<');
  }
  var ComparisonType$LEFT_MORE_OR_EQUAL_instance;
  function ComparisonType$LEFT_MORE_OR_EQUAL_getInstance() {
    ComparisonType_initFields();
    return ComparisonType$LEFT_MORE_OR_EQUAL_instance;
  }
  var ComparisonType$LEFT_LESS_OR_EQUAL_instance;
  function ComparisonType$LEFT_LESS_OR_EQUAL_getInstance() {
    ComparisonType_initFields();
    return ComparisonType$LEFT_LESS_OR_EQUAL_instance;
  }
  var ComparisonType$EQUAL_instance;
  function ComparisonType$EQUAL_getInstance() {
    ComparisonType_initFields();
    return ComparisonType$EQUAL_instance;
  }
  var ComparisonType$LEFT_MORE_instance;
  function ComparisonType$LEFT_MORE_getInstance() {
    ComparisonType_initFields();
    return ComparisonType$LEFT_MORE_instance;
  }
  var ComparisonType$LEFT_LESS_instance;
  function ComparisonType$LEFT_LESS_getInstance() {
    ComparisonType_initFields();
    return ComparisonType$LEFT_LESS_instance;
  }
  ComparisonType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ComparisonType',
    interfaces: [Enum]
  };
  function ComparisonType$values() {
    return [ComparisonType$LEFT_MORE_OR_EQUAL_getInstance(), ComparisonType$LEFT_LESS_OR_EQUAL_getInstance(), ComparisonType$EQUAL_getInstance(), ComparisonType$LEFT_MORE_getInstance(), ComparisonType$LEFT_LESS_getInstance()];
  }
  ComparisonType.values = ComparisonType$values;
  function ComparisonType$valueOf(name) {
    switch (name) {
      case 'LEFT_MORE_OR_EQUAL':
        return ComparisonType$LEFT_MORE_OR_EQUAL_getInstance();
      case 'LEFT_LESS_OR_EQUAL':
        return ComparisonType$LEFT_LESS_OR_EQUAL_getInstance();
      case 'EQUAL':
        return ComparisonType$EQUAL_getInstance();
      case 'LEFT_MORE':
        return ComparisonType$LEFT_MORE_getInstance();
      case 'LEFT_LESS':
        return ComparisonType$LEFT_LESS_getInstance();
      default:throwISE('No enum constant mathhelper.twf.config.ComparisonType.' + name);
    }
  }
  ComparisonType.valueOf_61zpoe$ = ComparisonType$valueOf;
  function reverse_0($receiver) {
    switch ($receiver.name) {
      case 'LEFT_MORE_OR_EQUAL':
        return ComparisonType$LEFT_LESS_OR_EQUAL_getInstance();
      case 'LEFT_LESS_OR_EQUAL':
        return ComparisonType$LEFT_MORE_OR_EQUAL_getInstance();
      case 'LEFT_MORE':
        return ComparisonType$LEFT_LESS_getInstance();
      case 'LEFT_LESS':
        return ComparisonType$LEFT_MORE_getInstance();
      default:return $receiver;
    }
  }
  function strictComparison(comp) {
    return comp === ComparisonType$LEFT_LESS_getInstance() || comp === ComparisonType$LEFT_MORE_getInstance();
  }
  function valueOfComparisonType(value) {
    switch (value) {
      case '>=':
        return ComparisonType$LEFT_MORE_OR_EQUAL_getInstance();
      case '<=':
        return ComparisonType$LEFT_LESS_OR_EQUAL_getInstance();
      case '=':
        return ComparisonType$EQUAL_getInstance();
      case '>':
        return ComparisonType$LEFT_MORE_getInstance();
      case '<':
        return ComparisonType$LEFT_LESS_getInstance();
      default:return ComparisonType$EQUAL_getInstance();
    }
  }
  function valueFromSignString(value) {
    switch (value) {
      case '<mo>=<\/mo>':
        return ComparisonType$EQUAL_getInstance();
      case '<=':
        return ComparisonType$LEFT_LESS_OR_EQUAL_getInstance();
      case '>=':
        return ComparisonType$LEFT_MORE_OR_EQUAL_getInstance();
      case '<':
        return ComparisonType$LEFT_LESS_getInstance();
      case '>':
        return ComparisonType$LEFT_MORE_getInstance();
      case '\\lt':
        return ComparisonType$LEFT_LESS_getInstance();
      case '\\le':
        return ComparisonType$LEFT_LESS_OR_EQUAL_getInstance();
      case '\\gt':
        return ComparisonType$LEFT_MORE_getInstance();
      case '\\ge':
        return ComparisonType$LEFT_MORE_OR_EQUAL_getInstance();
      case '<mo>&#x2265;<\/mo>':
        return ComparisonType$LEFT_MORE_OR_EQUAL_getInstance();
      case '<mo>&#x2A7E;<\/mo>':
        return ComparisonType$LEFT_MORE_OR_EQUAL_getInstance();
      case '<mo>&#x2264;<\/mo>':
        return ComparisonType$LEFT_LESS_OR_EQUAL_getInstance();
      case '<mo>&#x2A7D;<\/mo>':
        return ComparisonType$LEFT_LESS_OR_EQUAL_getInstance();
      case '<mo>&gt;<\/mo>':
        return ComparisonType$LEFT_MORE_getInstance();
      case '<mo>&lt;<\/mo>':
        return ComparisonType$LEFT_LESS_getInstance();
      case '<mo>&gt;<\/mo><mo>=<\/mo>':
        return ComparisonType$LEFT_MORE_OR_EQUAL_getInstance();
      case '<mo>&lt;<\/mo><mo>=<\/mo>':
        return ComparisonType$LEFT_LESS_OR_EQUAL_getInstance();
      default:return ComparisonType$EQUAL_getInstance();
    }
  }
  function getAllComparisonTypeSignStrings(isMathML) {
    if (isMathML) {
      return listOf_0([new SplittingString('='), new SplittingString('<mo>=<\/mo>'), new SplittingString('<mo>&gt;<\/mo><mo>=<\/mo>'), new SplittingString('<mo>&lt;<\/mo><mo>=<\/mo>'), new SplittingString('<mo>&gt;<\/mo>'), new SplittingString('<mo>&lt;<\/mo>'), new SplittingString('<mo>&#x2265;<\/mo>'), new SplittingString('<mo>&#x2A7E;<\/mo>'), new SplittingString('<mo>&#x2264;<\/mo>'), new SplittingString('<mo>&#x2A7D;<\/mo>')]);
    }
     else {
      return listOf_0([new SplittingString('='), new SplittingString('<='), new SplittingString('>='), new SplittingString('<'), new SplittingString('>'), new SplittingString('\\lt'), new SplittingString('\\le', listOf('\\left')), new SplittingString('\\gt'), new SplittingString('\\ge')]);
    }
  }
  function ComparisonSettings(maxTransformationWeight, maxBustCount, maxExpressionTransformationWeight, maxExpressionBustCount, isComparisonWithRules, compareExpressionsWithProbabilityRulesWhenComparingExpressions, compareExpressionsWithProbabilityRulesWhenComparingFacts, compareExpressionsAndFactsWithProbabilityRules, useTestingToCompareFunctionArgumentsInProbabilityComparison, useOldSimpleProbabilityTesting, useTransformationsSortingInExpressionComparison, defaultComparisonType, minNumberOfPointsForEquality, justInDomainsIntersection, allowedPartOfErrorTests, testWithUndefinedResultIncreasingCoef, maxDistBetweenDiffSteps) {
    if (maxTransformationWeight === void 0)
      maxTransformationWeight = 1.0;
    if (maxBustCount === void 0)
      maxBustCount = 4096;
    if (maxExpressionTransformationWeight === void 0)
      maxExpressionTransformationWeight = 1.0;
    if (maxExpressionBustCount === void 0)
      maxExpressionBustCount = 4096;
    if (isComparisonWithRules === void 0)
      isComparisonWithRules = true;
    if (compareExpressionsWithProbabilityRulesWhenComparingExpressions === void 0)
      compareExpressionsWithProbabilityRulesWhenComparingExpressions = true;
    if (compareExpressionsWithProbabilityRulesWhenComparingFacts === void 0)
      compareExpressionsWithProbabilityRulesWhenComparingFacts = true;
    if (compareExpressionsAndFactsWithProbabilityRules === void 0)
      compareExpressionsAndFactsWithProbabilityRules = false;
    if (useTestingToCompareFunctionArgumentsInProbabilityComparison === void 0)
      useTestingToCompareFunctionArgumentsInProbabilityComparison = true;
    if (useOldSimpleProbabilityTesting === void 0)
      useOldSimpleProbabilityTesting = true;
    if (useTransformationsSortingInExpressionComparison === void 0)
      useTransformationsSortingInExpressionComparison = true;
    if (defaultComparisonType === void 0)
      defaultComparisonType = ComparisonType$EQUAL_getInstance();
    if (minNumberOfPointsForEquality === void 0)
      minNumberOfPointsForEquality = 4;
    if (justInDomainsIntersection === void 0)
      justInDomainsIntersection = false;
    if (allowedPartOfErrorTests === void 0)
      allowedPartOfErrorTests = 0.7;
    if (testWithUndefinedResultIncreasingCoef === void 0)
      testWithUndefinedResultIncreasingCoef = 0.67;
    if (maxDistBetweenDiffSteps === void 0)
      maxDistBetweenDiffSteps = 1.0;
    this.maxTransformationWeight = maxTransformationWeight;
    this.maxBustCount = maxBustCount;
    this.maxExpressionTransformationWeight = maxExpressionTransformationWeight;
    this.maxExpressionBustCount = maxExpressionBustCount;
    this.isComparisonWithRules = isComparisonWithRules;
    this.compareExpressionsWithProbabilityRulesWhenComparingExpressions = compareExpressionsWithProbabilityRulesWhenComparingExpressions;
    this.compareExpressionsWithProbabilityRulesWhenComparingFacts = compareExpressionsWithProbabilityRulesWhenComparingFacts;
    this.compareExpressionsAndFactsWithProbabilityRules = compareExpressionsAndFactsWithProbabilityRules;
    this.useTestingToCompareFunctionArgumentsInProbabilityComparison = useTestingToCompareFunctionArgumentsInProbabilityComparison;
    this.useOldSimpleProbabilityTesting = useOldSimpleProbabilityTesting;
    this.useTransformationsSortingInExpressionComparison = useTransformationsSortingInExpressionComparison;
    this.defaultComparisonType = defaultComparisonType;
    this.minNumberOfPointsForEquality = minNumberOfPointsForEquality;
    this.justInDomainsIntersection = justInDomainsIntersection;
    this.allowedPartOfErrorTests = allowedPartOfErrorTests;
    this.testWithUndefinedResultIncreasingCoef = testWithUndefinedResultIncreasingCoef;
    this.maxDistBetweenDiffSteps = maxDistBetweenDiffSteps;
  }
  ComparisonSettings.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ComparisonSettings',
    interfaces: []
  };
  ComparisonSettings.prototype.component1 = function () {
    return this.maxTransformationWeight;
  };
  ComparisonSettings.prototype.component2 = function () {
    return this.maxBustCount;
  };
  ComparisonSettings.prototype.component3 = function () {
    return this.maxExpressionTransformationWeight;
  };
  ComparisonSettings.prototype.component4 = function () {
    return this.maxExpressionBustCount;
  };
  ComparisonSettings.prototype.component5 = function () {
    return this.isComparisonWithRules;
  };
  ComparisonSettings.prototype.component6 = function () {
    return this.compareExpressionsWithProbabilityRulesWhenComparingExpressions;
  };
  ComparisonSettings.prototype.component7 = function () {
    return this.compareExpressionsWithProbabilityRulesWhenComparingFacts;
  };
  ComparisonSettings.prototype.component8 = function () {
    return this.compareExpressionsAndFactsWithProbabilityRules;
  };
  ComparisonSettings.prototype.component9 = function () {
    return this.useTestingToCompareFunctionArgumentsInProbabilityComparison;
  };
  ComparisonSettings.prototype.component10 = function () {
    return this.useOldSimpleProbabilityTesting;
  };
  ComparisonSettings.prototype.component11 = function () {
    return this.useTransformationsSortingInExpressionComparison;
  };
  ComparisonSettings.prototype.component12 = function () {
    return this.defaultComparisonType;
  };
  ComparisonSettings.prototype.component13 = function () {
    return this.minNumberOfPointsForEquality;
  };
  ComparisonSettings.prototype.component14 = function () {
    return this.justInDomainsIntersection;
  };
  ComparisonSettings.prototype.component15 = function () {
    return this.allowedPartOfErrorTests;
  };
  ComparisonSettings.prototype.component16 = function () {
    return this.testWithUndefinedResultIncreasingCoef;
  };
  ComparisonSettings.prototype.component17 = function () {
    return this.maxDistBetweenDiffSteps;
  };
  ComparisonSettings.prototype.copy_nj3mno$ = function (maxTransformationWeight, maxBustCount, maxExpressionTransformationWeight, maxExpressionBustCount, isComparisonWithRules, compareExpressionsWithProbabilityRulesWhenComparingExpressions, compareExpressionsWithProbabilityRulesWhenComparingFacts, compareExpressionsAndFactsWithProbabilityRules, useTestingToCompareFunctionArgumentsInProbabilityComparison, useOldSimpleProbabilityTesting, useTransformationsSortingInExpressionComparison, defaultComparisonType, minNumberOfPointsForEquality, justInDomainsIntersection, allowedPartOfErrorTests, testWithUndefinedResultIncreasingCoef, maxDistBetweenDiffSteps) {
    return new ComparisonSettings(maxTransformationWeight === void 0 ? this.maxTransformationWeight : maxTransformationWeight, maxBustCount === void 0 ? this.maxBustCount : maxBustCount, maxExpressionTransformationWeight === void 0 ? this.maxExpressionTransformationWeight : maxExpressionTransformationWeight, maxExpressionBustCount === void 0 ? this.maxExpressionBustCount : maxExpressionBustCount, isComparisonWithRules === void 0 ? this.isComparisonWithRules : isComparisonWithRules, compareExpressionsWithProbabilityRulesWhenComparingExpressions === void 0 ? this.compareExpressionsWithProbabilityRulesWhenComparingExpressions : compareExpressionsWithProbabilityRulesWhenComparingExpressions, compareExpressionsWithProbabilityRulesWhenComparingFacts === void 0 ? this.compareExpressionsWithProbabilityRulesWhenComparingFacts : compareExpressionsWithProbabilityRulesWhenComparingFacts, compareExpressionsAndFactsWithProbabilityRules === void 0 ? this.compareExpressionsAndFactsWithProbabilityRules : compareExpressionsAndFactsWithProbabilityRules, useTestingToCompareFunctionArgumentsInProbabilityComparison === void 0 ? this.useTestingToCompareFunctionArgumentsInProbabilityComparison : useTestingToCompareFunctionArgumentsInProbabilityComparison, useOldSimpleProbabilityTesting === void 0 ? this.useOldSimpleProbabilityTesting : useOldSimpleProbabilityTesting, useTransformationsSortingInExpressionComparison === void 0 ? this.useTransformationsSortingInExpressionComparison : useTransformationsSortingInExpressionComparison, defaultComparisonType === void 0 ? this.defaultComparisonType : defaultComparisonType, minNumberOfPointsForEquality === void 0 ? this.minNumberOfPointsForEquality : minNumberOfPointsForEquality, justInDomainsIntersection === void 0 ? this.justInDomainsIntersection : justInDomainsIntersection, allowedPartOfErrorTests === void 0 ? this.allowedPartOfErrorTests : allowedPartOfErrorTests, testWithUndefinedResultIncreasingCoef === void 0 ? this.testWithUndefinedResultIncreasingCoef : testWithUndefinedResultIncreasingCoef, maxDistBetweenDiffSteps === void 0 ? this.maxDistBetweenDiffSteps : maxDistBetweenDiffSteps);
  };
  ComparisonSettings.prototype.toString = function () {
    return 'ComparisonSettings(maxTransformationWeight=' + Kotlin.toString(this.maxTransformationWeight) + (', maxBustCount=' + Kotlin.toString(this.maxBustCount)) + (', maxExpressionTransformationWeight=' + Kotlin.toString(this.maxExpressionTransformationWeight)) + (', maxExpressionBustCount=' + Kotlin.toString(this.maxExpressionBustCount)) + (', isComparisonWithRules=' + Kotlin.toString(this.isComparisonWithRules)) + (', compareExpressionsWithProbabilityRulesWhenComparingExpressions=' + Kotlin.toString(this.compareExpressionsWithProbabilityRulesWhenComparingExpressions)) + (', compareExpressionsWithProbabilityRulesWhenComparingFacts=' + Kotlin.toString(this.compareExpressionsWithProbabilityRulesWhenComparingFacts)) + (', compareExpressionsAndFactsWithProbabilityRules=' + Kotlin.toString(this.compareExpressionsAndFactsWithProbabilityRules)) + (', useTestingToCompareFunctionArgumentsInProbabilityComparison=' + Kotlin.toString(this.useTestingToCompareFunctionArgumentsInProbabilityComparison)) + (', useOldSimpleProbabilityTesting=' + Kotlin.toString(this.useOldSimpleProbabilityTesting)) + (', useTransformationsSortingInExpressionComparison=' + Kotlin.toString(this.useTransformationsSortingInExpressionComparison)) + (', defaultComparisonType=' + Kotlin.toString(this.defaultComparisonType)) + (', minNumberOfPointsForEquality=' + Kotlin.toString(this.minNumberOfPointsForEquality)) + (', justInDomainsIntersection=' + Kotlin.toString(this.justInDomainsIntersection)) + (', allowedPartOfErrorTests=' + Kotlin.toString(this.allowedPartOfErrorTests)) + (', testWithUndefinedResultIncreasingCoef=' + Kotlin.toString(this.testWithUndefinedResultIncreasingCoef)) + (', maxDistBetweenDiffSteps=' + Kotlin.toString(this.maxDistBetweenDiffSteps)) + ')';
  };
  ComparisonSettings.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.maxTransformationWeight) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxBustCount) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxExpressionTransformationWeight) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxExpressionBustCount) | 0;
    result = result * 31 + Kotlin.hashCode(this.isComparisonWithRules) | 0;
    result = result * 31 + Kotlin.hashCode(this.compareExpressionsWithProbabilityRulesWhenComparingExpressions) | 0;
    result = result * 31 + Kotlin.hashCode(this.compareExpressionsWithProbabilityRulesWhenComparingFacts) | 0;
    result = result * 31 + Kotlin.hashCode(this.compareExpressionsAndFactsWithProbabilityRules) | 0;
    result = result * 31 + Kotlin.hashCode(this.useTestingToCompareFunctionArgumentsInProbabilityComparison) | 0;
    result = result * 31 + Kotlin.hashCode(this.useOldSimpleProbabilityTesting) | 0;
    result = result * 31 + Kotlin.hashCode(this.useTransformationsSortingInExpressionComparison) | 0;
    result = result * 31 + Kotlin.hashCode(this.defaultComparisonType) | 0;
    result = result * 31 + Kotlin.hashCode(this.minNumberOfPointsForEquality) | 0;
    result = result * 31 + Kotlin.hashCode(this.justInDomainsIntersection) | 0;
    result = result * 31 + Kotlin.hashCode(this.allowedPartOfErrorTests) | 0;
    result = result * 31 + Kotlin.hashCode(this.testWithUndefinedResultIncreasingCoef) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxDistBetweenDiffSteps) | 0;
    return result;
  };
  ComparisonSettings.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.maxTransformationWeight, other.maxTransformationWeight) && Kotlin.equals(this.maxBustCount, other.maxBustCount) && Kotlin.equals(this.maxExpressionTransformationWeight, other.maxExpressionTransformationWeight) && Kotlin.equals(this.maxExpressionBustCount, other.maxExpressionBustCount) && Kotlin.equals(this.isComparisonWithRules, other.isComparisonWithRules) && Kotlin.equals(this.compareExpressionsWithProbabilityRulesWhenComparingExpressions, other.compareExpressionsWithProbabilityRulesWhenComparingExpressions) && Kotlin.equals(this.compareExpressionsWithProbabilityRulesWhenComparingFacts, other.compareExpressionsWithProbabilityRulesWhenComparingFacts) && Kotlin.equals(this.compareExpressionsAndFactsWithProbabilityRules, other.compareExpressionsAndFactsWithProbabilityRules) && Kotlin.equals(this.useTestingToCompareFunctionArgumentsInProbabilityComparison, other.useTestingToCompareFunctionArgumentsInProbabilityComparison) && Kotlin.equals(this.useOldSimpleProbabilityTesting, other.useOldSimpleProbabilityTesting) && Kotlin.equals(this.useTransformationsSortingInExpressionComparison, other.useTransformationsSortingInExpressionComparison) && Kotlin.equals(this.defaultComparisonType, other.defaultComparisonType) && Kotlin.equals(this.minNumberOfPointsForEquality, other.minNumberOfPointsForEquality) && Kotlin.equals(this.justInDomainsIntersection, other.justInDomainsIntersection) && Kotlin.equals(this.allowedPartOfErrorTests, other.allowedPartOfErrorTests) && Kotlin.equals(this.testWithUndefinedResultIncreasingCoef, other.testWithUndefinedResultIncreasingCoef) && Kotlin.equals(this.maxDistBetweenDiffSteps, other.maxDistBetweenDiffSteps)))));
  };
  function GradientDescentComparisonConfiguration(startPointsCount, iterationCount, ternarySearchLeftBorder, ternarySearchRightBorder, ternarySearchIterationCount, ternarySearchAlpha, ternarySearchBeta) {
    if (startPointsCount === void 0)
      startPointsCount = 1;
    if (iterationCount === void 0)
      iterationCount = 20;
    if (ternarySearchLeftBorder === void 0)
      ternarySearchLeftBorder = 1.0E-9;
    if (ternarySearchRightBorder === void 0)
      ternarySearchRightBorder = 1.0E9;
    if (ternarySearchIterationCount === void 0)
      ternarySearchIterationCount = 100;
    if (ternarySearchAlpha === void 0)
      ternarySearchAlpha = 1.57;
    if (ternarySearchBeta === void 0)
      ternarySearchBeta = 1.0;
    this.startPointsCount = startPointsCount;
    this.iterationCount = iterationCount;
    this.ternarySearchLeftBorder = ternarySearchLeftBorder;
    this.ternarySearchRightBorder = ternarySearchRightBorder;
    this.ternarySearchIterationCount = ternarySearchIterationCount;
    this.ternarySearchAlpha = ternarySearchAlpha;
    this.ternarySearchBeta = ternarySearchBeta;
  }
  GradientDescentComparisonConfiguration.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GradientDescentComparisonConfiguration',
    interfaces: []
  };
  GradientDescentComparisonConfiguration.prototype.component1 = function () {
    return this.startPointsCount;
  };
  GradientDescentComparisonConfiguration.prototype.component2 = function () {
    return this.iterationCount;
  };
  GradientDescentComparisonConfiguration.prototype.component3 = function () {
    return this.ternarySearchLeftBorder;
  };
  GradientDescentComparisonConfiguration.prototype.component4 = function () {
    return this.ternarySearchRightBorder;
  };
  GradientDescentComparisonConfiguration.prototype.component5 = function () {
    return this.ternarySearchIterationCount;
  };
  GradientDescentComparisonConfiguration.prototype.component6 = function () {
    return this.ternarySearchAlpha;
  };
  GradientDescentComparisonConfiguration.prototype.component7 = function () {
    return this.ternarySearchBeta;
  };
  GradientDescentComparisonConfiguration.prototype.copy_8k1e3m$ = function (startPointsCount, iterationCount, ternarySearchLeftBorder, ternarySearchRightBorder, ternarySearchIterationCount, ternarySearchAlpha, ternarySearchBeta) {
    return new GradientDescentComparisonConfiguration(startPointsCount === void 0 ? this.startPointsCount : startPointsCount, iterationCount === void 0 ? this.iterationCount : iterationCount, ternarySearchLeftBorder === void 0 ? this.ternarySearchLeftBorder : ternarySearchLeftBorder, ternarySearchRightBorder === void 0 ? this.ternarySearchRightBorder : ternarySearchRightBorder, ternarySearchIterationCount === void 0 ? this.ternarySearchIterationCount : ternarySearchIterationCount, ternarySearchAlpha === void 0 ? this.ternarySearchAlpha : ternarySearchAlpha, ternarySearchBeta === void 0 ? this.ternarySearchBeta : ternarySearchBeta);
  };
  GradientDescentComparisonConfiguration.prototype.toString = function () {
    return 'GradientDescentComparisonConfiguration(startPointsCount=' + Kotlin.toString(this.startPointsCount) + (', iterationCount=' + Kotlin.toString(this.iterationCount)) + (', ternarySearchLeftBorder=' + Kotlin.toString(this.ternarySearchLeftBorder)) + (', ternarySearchRightBorder=' + Kotlin.toString(this.ternarySearchRightBorder)) + (', ternarySearchIterationCount=' + Kotlin.toString(this.ternarySearchIterationCount)) + (', ternarySearchAlpha=' + Kotlin.toString(this.ternarySearchAlpha)) + (', ternarySearchBeta=' + Kotlin.toString(this.ternarySearchBeta)) + ')';
  };
  GradientDescentComparisonConfiguration.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.startPointsCount) | 0;
    result = result * 31 + Kotlin.hashCode(this.iterationCount) | 0;
    result = result * 31 + Kotlin.hashCode(this.ternarySearchLeftBorder) | 0;
    result = result * 31 + Kotlin.hashCode(this.ternarySearchRightBorder) | 0;
    result = result * 31 + Kotlin.hashCode(this.ternarySearchIterationCount) | 0;
    result = result * 31 + Kotlin.hashCode(this.ternarySearchAlpha) | 0;
    result = result * 31 + Kotlin.hashCode(this.ternarySearchBeta) | 0;
    return result;
  };
  GradientDescentComparisonConfiguration.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.startPointsCount, other.startPointsCount) && Kotlin.equals(this.iterationCount, other.iterationCount) && Kotlin.equals(this.ternarySearchLeftBorder, other.ternarySearchLeftBorder) && Kotlin.equals(this.ternarySearchRightBorder, other.ternarySearchRightBorder) && Kotlin.equals(this.ternarySearchIterationCount, other.ternarySearchIterationCount) && Kotlin.equals(this.ternarySearchAlpha, other.ternarySearchAlpha) && Kotlin.equals(this.ternarySearchBeta, other.ternarySearchBeta)))));
  };
  function DebugOutputMessages(expressionProbabilityComparisonFalseDetailsPrintln) {
    if (expressionProbabilityComparisonFalseDetailsPrintln === void 0)
      expressionProbabilityComparisonFalseDetailsPrintln = false;
    this.expressionProbabilityComparisonFalseDetailsPrintln = expressionProbabilityComparisonFalseDetailsPrintln;
  }
  DebugOutputMessages.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DebugOutputMessages',
    interfaces: []
  };
  DebugOutputMessages.prototype.component1 = function () {
    return this.expressionProbabilityComparisonFalseDetailsPrintln;
  };
  DebugOutputMessages.prototype.copy_6taknv$ = function (expressionProbabilityComparisonFalseDetailsPrintln) {
    return new DebugOutputMessages(expressionProbabilityComparisonFalseDetailsPrintln === void 0 ? this.expressionProbabilityComparisonFalseDetailsPrintln : expressionProbabilityComparisonFalseDetailsPrintln);
  };
  DebugOutputMessages.prototype.toString = function () {
    return 'DebugOutputMessages(expressionProbabilityComparisonFalseDetailsPrintln=' + Kotlin.toString(this.expressionProbabilityComparisonFalseDetailsPrintln) + ')';
  };
  DebugOutputMessages.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.expressionProbabilityComparisonFalseDetailsPrintln) | 0;
    return result;
  };
  DebugOutputMessages.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.expressionProbabilityComparisonFalseDetailsPrintln, other.expressionProbabilityComparisonFalseDetailsPrintln))));
  };
  function CompiledConfiguration(variableConfiguration, functionConfiguration, comparisonSettings, checkedFactAccentuation, factsLogicConfiguration, gradientDescentComparisonConfiguration, additionalParamsMap, simpleComputationRuleCodesCandidates, simpleComputationRuleParams, debugOutputMessages, subjectType, verificationOnlyMode, similarityMetric) {
    if (variableConfiguration === void 0)
      variableConfiguration = new VariableConfiguration();
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration(setOf_0(['', 'subfactorial']));
    if (comparisonSettings === void 0)
      comparisonSettings = new ComparisonSettings();
    if (checkedFactAccentuation === void 0)
      checkedFactAccentuation = new CheckedFactAccentuation();
    if (factsLogicConfiguration === void 0)
      factsLogicConfiguration = new FactsLogicConfiguration();
    if (gradientDescentComparisonConfiguration === void 0)
      gradientDescentComparisonConfiguration = new GradientDescentComparisonConfiguration();
    if (additionalParamsMap === void 0) {
      additionalParamsMap = emptyMap();
    }
    if (simpleComputationRuleCodesCandidates === void 0) {
      simpleComputationRuleCodesCandidates = emptySet();
    }
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = new SimpleComputationRuleParams(simpleComputationRuleCodesCandidates, true);
    if (debugOutputMessages === void 0)
      debugOutputMessages = new DebugOutputMessages();
    if (subjectType === void 0)
      subjectType = '';
    if (verificationOnlyMode === void 0)
      verificationOnlyMode = false;
    if (similarityMetric === void 0)
      similarityMetric = new LambdaExpressionSimilarityMetric(CompiledConfiguration_init$lambda);
    this.variableConfiguration = variableConfiguration;
    this.functionConfiguration = functionConfiguration;
    this.comparisonSettings = comparisonSettings;
    this.checkedFactAccentuation = checkedFactAccentuation;
    this.factsLogicConfiguration = factsLogicConfiguration;
    this.gradientDescentComparisonConfiguration = gradientDescentComparisonConfiguration;
    this.additionalParamsMap = additionalParamsMap;
    this.simpleComputationRuleCodesCandidates = simpleComputationRuleCodesCandidates;
    this.simpleComputationRuleParams = simpleComputationRuleParams;
    this.debugOutputMessages = debugOutputMessages;
    this.subjectType = subjectType;
    this.verificationOnlyMode = verificationOnlyMode;
    this.similarityMetric = similarityMetric;
    var $receiver = this.variableConfiguration.variableImmediateReplacementRules;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(new Pair(item.left, item.right));
    }
    this.compiledImmediateVariableReplacements = mapOf_0(copyToArray(destination).slice());
    this.compiledExpressionTreeTransformationRules = ArrayList_init();
    this.compiledExpressionSimpleAdditionalTreeTransformationRules = ArrayList_init();
    this.expressionTreeAutogeneratedTransformationRuleIdentifiers = LinkedHashMap_init_0();
    this.compiledFactTreeTransformationRules = ArrayList_init();
    this.compiledImmediateTreeTransformationRules = ArrayList_init();
    this.compiledFunctionDefinitions = ArrayList_init();
    this.notNeedRulesfunctionNameNumberOfArgsSet = LinkedHashSet_init();
    this.definedFunctionNameNumberOfArgsSet = LinkedHashSet_init();
    this.noTransformationDefinedFunctionNameNumberOfArgsSet = LinkedHashSet_init();
    this.configurationErrors = ArrayList_init();
    this.factComparator = null;
    var tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    this.factComparator = new FactComparator();
    this.factComparator.init_9elrwz$(this);
    if (this.debugOutputMessages.expressionProbabilityComparisonFalseDetailsPrintln) {
      this.factComparator.expressionComparator.debugMode = true;
    }
    var tmp$_4;
    tmp$_4 = this.functionConfiguration.notChangesOnVariablesInComparisonFunction.iterator();
    while (tmp$_4.hasNext()) {
      var element = tmp$_4.next();
      this.definedFunctionNameNumberOfArgsSet.add_11rb$(element.getIdentifier());
      if (!element.needRules) {
        this.notNeedRulesfunctionNameNumberOfArgsSet.add_11rb$(element.getIdentifier());
      }
    }
    var tmp$_5;
    tmp$_5 = this.functionConfiguration.notChangesOnVariablesInComparisonFunctionWithoutTransformations.iterator();
    while (tmp$_5.hasNext()) {
      var element_0 = tmp$_5.next();
      this.noTransformationDefinedFunctionNameNumberOfArgsSet.add_11rb$(element_0.getIdentifier());
    }
    var compiledSubstitutions = LinkedHashMap_init_0();
    tmp$_0 = this.functionConfiguration.functionDefinitions.iterator();
    while (tmp$_0.hasNext()) {
      var functionDefinition = tmp$_0.next();
      var leftTree = this.parseStringExpression_ivxn3r$(functionDefinition.definitionLeftExpression, true);
      var rightTree = this.parseStringExpression_ivxn3r$(functionDefinition.definitionRightExpression, true);
      if (leftTree != null && rightTree != null) {
        if (leftTree.children.isEmpty() || rightTree.children.isEmpty()) {
          this.configurationErrors.add_11rb$(new ConfigurationError('function definition rule is empty', 'TreeTransformationRule', "values: '" + functionDefinition.definitionLeftExpression + "' and '" + functionDefinition.definitionRightExpression + "'", -1));
        }
         else {
          leftTree.variableReplacement_y0zsll$(this.compiledImmediateVariableReplacements);
          rightTree.variableReplacement_y0zsll$(this.compiledImmediateVariableReplacements);
          applyAllFunctionSubstitutions(rightTree, compiledSubstitutions);
          var newSubstitution = new ExpressionSubstitution(leftTree, rightTree);
          this.compiledFunctionDefinitions.add_11rb$(newSubstitution);
          var definitionIdentifier = leftTree.children.get_za3lpa$(0).value + '_' + toString(leftTree.children.get_za3lpa$(0).children.size);
          compiledSubstitutions.put_xwzc9p$(definitionIdentifier, newSubstitution);
        }
      }
    }
    tmp$_1 = this.functionConfiguration.treeTransformationRules.iterator();
    while (tmp$_1.hasNext()) {
      var treeTransformationRule = tmp$_1.next();
      var leftTree_0 = this.parseStringExpression_ivxn3r$(treeTransformationRule.definitionLeftExpression, true);
      var rightTree_0 = this.parseStringExpression_ivxn3r$(treeTransformationRule.definitionRightExpression, true);
      if (leftTree_0 != null && rightTree_0 != null) {
        leftTree_0.variableReplacement_y0zsll$(this.compiledImmediateVariableReplacements);
        rightTree_0.variableReplacement_y0zsll$(this.compiledImmediateVariableReplacements);
        var newSubstitution_0 = new ExpressionSubstitution(leftTree_0, rightTree_0, treeTransformationRule.weight);
        if (treeTransformationRule.isImmediate)
          this.compiledImmediateTreeTransformationRules.add_11rb$(newSubstitution_0);
        else {
          this.compiledExpressionTreeTransformationRules.add_11rb$(newSubstitution_0);
          if (newSubstitution_0.simpleAdditional) {
            this.compiledExpressionSimpleAdditionalTreeTransformationRules.add_11rb$(newSubstitution_0);
          }
        }
      }
    }
    tmp$_2 = this.functionConfiguration.taskContextTreeTransformationRules.iterator();
    while (tmp$_2.hasNext()) {
      var treeTransformationRule_0 = tmp$_2.next();
      var leftTree_1 = this.parseStringExpression_ivxn3r$(treeTransformationRule_0.definitionLeftExpression, true);
      var rightTree_1 = this.parseStringExpression_ivxn3r$(treeTransformationRule_0.definitionRightExpression, true);
      if (leftTree_1 != null && rightTree_1 != null) {
        leftTree_1.variableReplacement_y0zsll$(this.compiledImmediateVariableReplacements);
        rightTree_1.variableReplacement_y0zsll$(this.compiledImmediateVariableReplacements);
        var newSubstitution_1 = new ExpressionSubstitution(leftTree_1, rightTree_1, treeTransformationRule_0.weight, true);
        if (treeTransformationRule_0.isImmediate)
          this.compiledImmediateTreeTransformationRules.add_11rb$(newSubstitution_1);
        else {
          this.compiledExpressionTreeTransformationRules.add_11rb$(newSubstitution_1);
          if (newSubstitution_1.simpleAdditional) {
            this.compiledExpressionSimpleAdditionalTreeTransformationRules.add_11rb$(newSubstitution_1);
          }
        }
      }
    }
    tmp$_3 = this.factsLogicConfiguration.factsTransformationRules.iterator();
    while (tmp$_3.hasNext()) {
      var factTransformation = tmp$_3.next();
      var leftTree_2 = parseFromFactIdentifier(factTransformation.definitionLeftFactTree, void 0, this.functionConfiguration);
      var rightTree_2 = parseFromFactIdentifier(factTransformation.definitionRightFactTree, void 0, this.functionConfiguration);
      if (leftTree_2 != null && rightTree_2 != null) {
        leftTree_2.variableReplacement_y0zsll$(this.compiledImmediateVariableReplacements);
        rightTree_2.variableReplacement_y0zsll$(this.compiledImmediateVariableReplacements);
        this.compiledFactTreeTransformationRules.add_11rb$(new FactSubstitution(leftTree_2, rightTree_2, factTransformation.weight, void 0, factTransformation.direction, void 0, this.factComparator));
        if (!factTransformation.isOneDirection) {
          this.compiledFactTreeTransformationRules.add_11rb$(new FactSubstitution(rightTree_2, leftTree_2, factTransformation.weight, void 0, factTransformation.direction, void 0, this.factComparator));
        }
      }
    }
    this.setInfoFromAdditionalParams_zb9t93$(this.additionalParamsMap);
  }
  CompiledConfiguration.prototype.parseStringExpression_ivxn3r$ = function (expression, nameForRuleDesignationsPossible) {
    if (nameForRuleDesignationsPossible === void 0)
      nameForRuleDesignationsPossible = false;
    var expressionTreeParser = new ExpressionTreeParser(expression, nameForRuleDesignationsPossible, this.functionConfiguration, this.compiledImmediateVariableReplacements);
    var error = expressionTreeParser.parse();
    if (error != null) {
      this.configurationErrors.add_11rb$(new ConfigurationError(error.description, 'TreeTransformationRule', expression, error.position));
      return null;
    }
     else {
      return expressionTreeParser.root;
    }
  };
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda() {
    return 'additional params handing';
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_0(closure$simpleComputationRuleParamsMaxCalcComplexity) {
    return function () {
      return 'simpleComputationRuleParams.maxCalcComplexity: ' + toString(closure$simpleComputationRuleParamsMaxCalcComplexity);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_1(closure$simpleComputationRuleParamsMaxTenPowIterations) {
    return function () {
      return 'simpleComputationRuleParams.maxTenPowIterations: ' + toString(closure$simpleComputationRuleParamsMaxTenPowIterations);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_2(closure$simpleComputationRuleParamsMaxPlusArgRounded) {
    return function () {
      return 'simpleComputationRuleParams.maxPlusArgRounded: ' + toString(closure$simpleComputationRuleParamsMaxPlusArgRounded);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_3(closure$simpleComputationRuleParamsMaxMulArgRounded) {
    return function () {
      return 'simpleComputationRuleParams.maxMulArgRounded: ' + toString(closure$simpleComputationRuleParamsMaxMulArgRounded);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_4(closure$simpleComputationRuleParamsMaxDivBaseRounded) {
    return function () {
      return 'simpleComputationRuleParams.maxDivBaseRounded: ' + toString(closure$simpleComputationRuleParamsMaxDivBaseRounded);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_5(closure$simpleComputationRuleParamsMaxPowBaseRounded) {
    return function () {
      return 'simpleComputationRuleParams.maxPowBaseRounded: ' + toString(closure$simpleComputationRuleParamsMaxPowBaseRounded);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_6(closure$simpleComputationRuleParamsMaxPowDegRounded) {
    return function () {
      return 'simpleComputationRuleParams.maxPowDegRounded: ' + toString(closure$simpleComputationRuleParamsMaxPowDegRounded);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_7(closure$simpleComputationRuleParamsMaxLogBaseRounded) {
    return function () {
      return 'simpleComputationRuleParams.maxLogBaseRounded: ' + toString(closure$simpleComputationRuleParamsMaxLogBaseRounded);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_8(closure$simpleComputationRuleParamsMaxResRounded) {
    return function () {
      return 'simpleComputationRuleParams.maxResRounded: ' + toString(closure$simpleComputationRuleParamsMaxResRounded);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_9(closure$maxExpressionTransformationWeight) {
    return function () {
      return 'comparisonSettings.maxExpressionTransformationWeight: ' + toString(closure$maxExpressionTransformationWeight);
    };
  }
  function CompiledConfiguration$setInfoFromAdditionalParams$lambda_10(closure$maxDistBetweenDiffSteps) {
    return function () {
      return 'comparisonSettings.maxDistBetweenDiffSteps: ' + toString(closure$maxDistBetweenDiffSteps);
    };
  }
  CompiledConfiguration.prototype.setInfoFromAdditionalParams_zb9t93$ = function (additionalParamsMap) {
    if (additionalParamsMap === void 0)
      additionalParamsMap = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20;
    log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda, void 0, 1);
    var tmp$_21 = additionalParamsMap != null;
    if (tmp$_21) {
      tmp$_21 = !additionalParamsMap.isEmpty();
    }
    if (tmp$_21) {
      var simpleComputationRuleParamsMaxCalcComplexity = (tmp$_0 = (tmp$ = additionalParamsMap.get_11rb$('simpleComputationRuleParamsMaxCalcComplexity')) == null || typeof tmp$ === 'string' ? tmp$ : throwCCE()) != null ? toIntOrNull(tmp$_0) : null;
      if (simpleComputationRuleParamsMaxCalcComplexity != null) {
        this.simpleComputationRuleParams.maxCalcComplexity = simpleComputationRuleParamsMaxCalcComplexity;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_0(simpleComputationRuleParamsMaxCalcComplexity), void 0, 2);
      }
      var simpleComputationRuleParamsMaxTenPowIterations = (tmp$_2 = (tmp$_1 = additionalParamsMap.get_11rb$('simpleComputationRuleParamsMaxTenPowIterations')) == null || typeof tmp$_1 === 'string' ? tmp$_1 : throwCCE()) != null ? toIntOrNull(tmp$_2) : null;
      if (simpleComputationRuleParamsMaxTenPowIterations != null) {
        this.simpleComputationRuleParams.maxTenPowIterations = simpleComputationRuleParamsMaxTenPowIterations;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_1(simpleComputationRuleParamsMaxTenPowIterations), void 0, 2);
      }
      var simpleComputationRuleParamsMaxPlusArgRounded = (tmp$_4 = (tmp$_3 = additionalParamsMap.get_11rb$('simpleComputationRuleParamsMaxPlusArgRounded')) == null || typeof tmp$_3 === 'string' ? tmp$_3 : throwCCE()) != null ? toIntOrNull(tmp$_4) : null;
      if (simpleComputationRuleParamsMaxPlusArgRounded != null) {
        this.simpleComputationRuleParams.maxPlusArgRounded = simpleComputationRuleParamsMaxPlusArgRounded;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_2(simpleComputationRuleParamsMaxPlusArgRounded), void 0, 2);
      }
      var simpleComputationRuleParamsMaxMulArgRounded = (tmp$_6 = (tmp$_5 = additionalParamsMap.get_11rb$('simpleComputationRuleParamsMaxMulArgRounded')) == null || typeof tmp$_5 === 'string' ? tmp$_5 : throwCCE()) != null ? toIntOrNull(tmp$_6) : null;
      if (simpleComputationRuleParamsMaxMulArgRounded != null) {
        this.simpleComputationRuleParams.maxMulArgRounded = simpleComputationRuleParamsMaxMulArgRounded;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_3(simpleComputationRuleParamsMaxMulArgRounded), void 0, 2);
      }
      var simpleComputationRuleParamsMaxDivBaseRounded = (tmp$_8 = (tmp$_7 = additionalParamsMap.get_11rb$('simpleComputationRuleParamsMaxDivBaseRounded')) == null || typeof tmp$_7 === 'string' ? tmp$_7 : throwCCE()) != null ? toIntOrNull(tmp$_8) : null;
      if (simpleComputationRuleParamsMaxDivBaseRounded != null) {
        this.simpleComputationRuleParams.maxDivBaseRounded = simpleComputationRuleParamsMaxDivBaseRounded;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_4(simpleComputationRuleParamsMaxDivBaseRounded), void 0, 2);
      }
      var simpleComputationRuleParamsMaxPowBaseRounded = (tmp$_10 = (tmp$_9 = additionalParamsMap.get_11rb$('simpleComputationRuleParamsMaxPowBaseRounded')) == null || typeof tmp$_9 === 'string' ? tmp$_9 : throwCCE()) != null ? toIntOrNull(tmp$_10) : null;
      if (simpleComputationRuleParamsMaxPowBaseRounded != null) {
        this.simpleComputationRuleParams.maxPowBaseRounded = simpleComputationRuleParamsMaxPowBaseRounded;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_5(simpleComputationRuleParamsMaxPowBaseRounded), void 0, 2);
      }
      var simpleComputationRuleParamsMaxPowDegRounded = (tmp$_12 = (tmp$_11 = additionalParamsMap.get_11rb$('simpleComputationRuleParamsMaxPowDegRounded')) == null || typeof tmp$_11 === 'string' ? tmp$_11 : throwCCE()) != null ? toIntOrNull(tmp$_12) : null;
      if (simpleComputationRuleParamsMaxPowDegRounded != null) {
        this.simpleComputationRuleParams.maxPowDegRounded = simpleComputationRuleParamsMaxPowDegRounded;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_6(simpleComputationRuleParamsMaxPowDegRounded), void 0, 2);
      }
      var simpleComputationRuleParamsMaxLogBaseRounded = (tmp$_14 = (tmp$_13 = additionalParamsMap.get_11rb$('simpleComputationRuleParamsMaxLogBaseRounded')) == null || typeof tmp$_13 === 'string' ? tmp$_13 : throwCCE()) != null ? toIntOrNull(tmp$_14) : null;
      if (simpleComputationRuleParamsMaxLogBaseRounded != null) {
        this.simpleComputationRuleParams.maxLogBaseRounded = simpleComputationRuleParamsMaxLogBaseRounded;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_7(simpleComputationRuleParamsMaxLogBaseRounded), void 0, 2);
      }
      var simpleComputationRuleParamsMaxResRounded = (tmp$_16 = (tmp$_15 = additionalParamsMap.get_11rb$('simpleComputationRuleParamsMaxResRounded')) == null || typeof tmp$_15 === 'string' ? tmp$_15 : throwCCE()) != null ? toIntOrNull(tmp$_16) : null;
      if (simpleComputationRuleParamsMaxResRounded != null) {
        this.simpleComputationRuleParams.maxResRounded = simpleComputationRuleParamsMaxResRounded;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_8(simpleComputationRuleParamsMaxResRounded), void 0, 2);
      }
      var maxExpressionTransformationWeight = (tmp$_18 = (tmp$_17 = additionalParamsMap.get_11rb$('maxExpressionTransformationWeightString')) == null || typeof tmp$_17 === 'string' ? tmp$_17 : throwCCE()) != null ? toDoubleOrNull(tmp$_18) : null;
      if (maxExpressionTransformationWeight != null) {
        this.comparisonSettings.maxExpressionTransformationWeight = maxExpressionTransformationWeight;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_9(maxExpressionTransformationWeight), void 0, 2);
      }
      var maxDistBetweenDiffSteps = (tmp$_20 = (tmp$_19 = additionalParamsMap.get_11rb$('maxDistBetweenDiffStepsString')) == null || typeof tmp$_19 === 'string' ? tmp$_19 : throwCCE()) != null ? toDoubleOrNull(tmp$_20) : null;
      if (maxDistBetweenDiffSteps != null) {
        this.comparisonSettings.maxDistBetweenDiffSteps = maxDistBetweenDiffSteps;
        log_1.addMessage_cte53e$(CompiledConfiguration$setInfoFromAdditionalParams$lambda_10(maxDistBetweenDiffSteps), void 0, 2);
      }
    }
  };
  CompiledConfiguration.prototype.checkAndAddNewVariableReplacement_6moki$ = function (variableName, variableValue, expression) {
    var tmp$, tmp$_0, tmp$_1;
    var variableNameSet = setOf(variableName);
    if (expression.containsVariables_ywdfdh$(variableNameSet)) {
      return new GeneralError('in expression', 'EXISTING_VARIABLE');
    }
    if (variableValue.containsVariables_ywdfdh$(variableNameSet)) {
      return new GeneralError('in variable value', 'EXISTING_VARIABLE');
    }
    var $receiver = this.compiledExpressionTreeTransformationRules;
    var destination = ArrayList_init();
    var tmp$_2;
    tmp$_2 = $receiver.iterator();
    while (tmp$_2.hasNext()) {
      var element = tmp$_2.next();
      if (element.basedOnTaskContext)
        destination.add_11rb$(element);
    }
    var any$result;
    any$break: do {
      var tmp$_3;
      if (Kotlin.isType(destination, Collection) && destination.isEmpty()) {
        any$result = false;
        break any$break;
      }
      tmp$_3 = destination.iterator();
      while (tmp$_3.hasNext()) {
        var element_0 = tmp$_3.next();
        if (element_0.left.containsVariables_ywdfdh$(variableNameSet) || element_0.right.containsVariables_ywdfdh$(variableNameSet)) {
          any$result = true;
          break any$break;
        }
      }
      any$result = false;
    }
     while (false);
    if (any$result) {
      return new GeneralError('in task context rules', 'EXISTING_VARIABLE');
    }
    if (((tmp$ = firstOrNull_0(variableName)) != null ? isLetter(unboxChar(tmp$)) : null) !== true) {
      return new GeneralError((tmp$_1 = (tmp$_0 = firstOrNull_0(variableName)) != null ? String.fromCharCode(unboxChar(tmp$_0)) : null) != null ? tmp$_1 : '', 'INCORRECT_VARIABLE_NAME');
    }
    if (this.factComparator.expressionComparator.fastProbabilityCheckOnZero_em03xr$(variableValue)) {
      return new GeneralError('', 'VARIABLE_VALUE_IS_ZERO');
    }
    var $receiver_0 = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    $receiver_0.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), variableName));
    var left = $receiver_0;
    var right = variableValue.clone();
    var rightAfterImmediateSubstitutions = right.clone();
    applyAllImmediateSubstitutions(rightAfterImmediateSubstitutions, this);
    this.compiledImmediateTreeTransformationRules.add_11rb$(new ExpressionSubstitution(left, rightAfterImmediateSubstitutions, void 0, true));
    this.compiledExpressionTreeTransformationRules.add_11rb$(new ExpressionSubstitution(left, right, void 0, true));
    this.compiledExpressionTreeTransformationRules.add_11rb$(new ExpressionSubstitution(right, left, void 0, true));
    return null;
  };
  CompiledConfiguration.prototype.createExpressionFunctionNode_twmih4$ = function (function_0, numberOfArgs, children) {
    if (children === void 0) {
      children = emptyList();
    }
    var $receiver = new ExpressionNode(NodeType$FUNCTION_getInstance(), function_0, void 0, void 0, void 0, void 0, this.functionConfiguration.fastFindStringDefinitionByNameAndNumberOfArguments_bm4lxs$(function_0, numberOfArgs));
    var tmp$;
    tmp$ = children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      $receiver.addChild_em03xr$(child);
    }
    return $receiver;
  };
  CompiledConfiguration.prototype.createExpressionVariableNode_14dthe$ = function (value) {
    if (value >= 0) {
      return new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(value));
    }
     else {
      var plusNode = this.createExpressionFunctionNode_twmih4$('+', -1);
      plusNode.addChild_em03xr$(this.createExpressionFunctionNode_twmih4$('-', -1));
      last(plusNode.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(-value)));
      return plusNode;
    }
  };
  CompiledConfiguration.prototype.createExpressionVariableNode_61zpoe$ = function (value) {
    return new ExpressionNode(NodeType$VARIABLE_getInstance(), value);
  };
  function CompiledConfiguration_init$lambda(f, r) {
    return r.getContainedFunctions().size;
  }
  CompiledConfiguration.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CompiledConfiguration',
    interfaces: []
  };
  function ErrorLevel(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ErrorLevel_initFields() {
    ErrorLevel_initFields = function () {
    };
    ErrorLevel$INFO_instance = new ErrorLevel('INFO', 0);
    ErrorLevel$WARNING_instance = new ErrorLevel('WARNING', 1);
    ErrorLevel$ERROR_instance = new ErrorLevel('ERROR', 2);
    ErrorLevel$FATAL_ERROR_instance = new ErrorLevel('FATAL_ERROR', 3);
  }
  var ErrorLevel$INFO_instance;
  function ErrorLevel$INFO_getInstance() {
    ErrorLevel_initFields();
    return ErrorLevel$INFO_instance;
  }
  var ErrorLevel$WARNING_instance;
  function ErrorLevel$WARNING_getInstance() {
    ErrorLevel_initFields();
    return ErrorLevel$WARNING_instance;
  }
  var ErrorLevel$ERROR_instance;
  function ErrorLevel$ERROR_getInstance() {
    ErrorLevel_initFields();
    return ErrorLevel$ERROR_instance;
  }
  var ErrorLevel$FATAL_ERROR_instance;
  function ErrorLevel$FATAL_ERROR_getInstance() {
    ErrorLevel_initFields();
    return ErrorLevel$FATAL_ERROR_instance;
  }
  ErrorLevel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ErrorLevel',
    interfaces: [Enum]
  };
  function ErrorLevel$values() {
    return [ErrorLevel$INFO_getInstance(), ErrorLevel$WARNING_getInstance(), ErrorLevel$ERROR_getInstance(), ErrorLevel$FATAL_ERROR_getInstance()];
  }
  ErrorLevel.values = ErrorLevel$values;
  function ErrorLevel$valueOf(name) {
    switch (name) {
      case 'INFO':
        return ErrorLevel$INFO_getInstance();
      case 'WARNING':
        return ErrorLevel$WARNING_getInstance();
      case 'ERROR':
        return ErrorLevel$ERROR_getInstance();
      case 'FATAL_ERROR':
        return ErrorLevel$FATAL_ERROR_getInstance();
      default:throwISE('No enum constant mathhelper.twf.config.ErrorLevel.' + name);
    }
  }
  ErrorLevel.valueOf_61zpoe$ = ErrorLevel$valueOf;
  function ConfigurationError(description, objectType, objectValue, positionInObject, errorLevel) {
    if (errorLevel === void 0)
      errorLevel = ErrorLevel$ERROR_getInstance();
    this.description = description;
    this.objectType = objectType;
    this.objectValue = objectValue;
    this.positionInObject = positionInObject;
    this.errorLevel = errorLevel;
  }
  ConfigurationError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ConfigurationError',
    interfaces: []
  };
  ConfigurationError.prototype.component1 = function () {
    return this.description;
  };
  ConfigurationError.prototype.component2 = function () {
    return this.objectType;
  };
  ConfigurationError.prototype.component3 = function () {
    return this.objectValue;
  };
  ConfigurationError.prototype.component4 = function () {
    return this.positionInObject;
  };
  ConfigurationError.prototype.component5 = function () {
    return this.errorLevel;
  };
  ConfigurationError.prototype.copy_1co75x$ = function (description, objectType, objectValue, positionInObject, errorLevel) {
    return new ConfigurationError(description === void 0 ? this.description : description, objectType === void 0 ? this.objectType : objectType, objectValue === void 0 ? this.objectValue : objectValue, positionInObject === void 0 ? this.positionInObject : positionInObject, errorLevel === void 0 ? this.errorLevel : errorLevel);
  };
  ConfigurationError.prototype.toString = function () {
    return 'ConfigurationError(description=' + Kotlin.toString(this.description) + (', objectType=' + Kotlin.toString(this.objectType)) + (', objectValue=' + Kotlin.toString(this.objectValue)) + (', positionInObject=' + Kotlin.toString(this.positionInObject)) + (', errorLevel=' + Kotlin.toString(this.errorLevel)) + ')';
  };
  ConfigurationError.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.description) | 0;
    result = result * 31 + Kotlin.hashCode(this.objectType) | 0;
    result = result * 31 + Kotlin.hashCode(this.objectValue) | 0;
    result = result * 31 + Kotlin.hashCode(this.positionInObject) | 0;
    result = result * 31 + Kotlin.hashCode(this.errorLevel) | 0;
    return result;
  };
  ConfigurationError.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.description, other.description) && Kotlin.equals(this.objectType, other.objectType) && Kotlin.equals(this.objectValue, other.objectValue) && Kotlin.equals(this.positionInObject, other.positionInObject) && Kotlin.equals(this.errorLevel, other.errorLevel)))));
  };
  function FactTransformationRule(definitionLeftFactTree, definitionRightFactTree, immediate, weight, direction, isOneDirection) {
    if (immediate === void 0)
      immediate = false;
    if (weight === void 0)
      weight = 1.0;
    if (direction === void 0)
      direction = SubstitutionDirection$ALL_TO_ALL_getInstance();
    if (isOneDirection === void 0)
      isOneDirection = false;
    this.definitionLeftFactTree = definitionLeftFactTree;
    this.definitionRightFactTree = definitionRightFactTree;
    this.immediate = immediate;
    this.weight = weight;
    this.direction = direction;
    this.isOneDirection = isOneDirection;
  }
  FactTransformationRule.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FactTransformationRule',
    interfaces: []
  };
  FactTransformationRule.prototype.component1 = function () {
    return this.definitionLeftFactTree;
  };
  FactTransformationRule.prototype.component2 = function () {
    return this.definitionRightFactTree;
  };
  FactTransformationRule.prototype.component3 = function () {
    return this.immediate;
  };
  FactTransformationRule.prototype.component4 = function () {
    return this.weight;
  };
  FactTransformationRule.prototype.component5 = function () {
    return this.direction;
  };
  FactTransformationRule.prototype.component6 = function () {
    return this.isOneDirection;
  };
  FactTransformationRule.prototype.copy_vuyeds$ = function (definitionLeftFactTree, definitionRightFactTree, immediate, weight, direction, isOneDirection) {
    return new FactTransformationRule(definitionLeftFactTree === void 0 ? this.definitionLeftFactTree : definitionLeftFactTree, definitionRightFactTree === void 0 ? this.definitionRightFactTree : definitionRightFactTree, immediate === void 0 ? this.immediate : immediate, weight === void 0 ? this.weight : weight, direction === void 0 ? this.direction : direction, isOneDirection === void 0 ? this.isOneDirection : isOneDirection);
  };
  FactTransformationRule.prototype.toString = function () {
    return 'FactTransformationRule(definitionLeftFactTree=' + Kotlin.toString(this.definitionLeftFactTree) + (', definitionRightFactTree=' + Kotlin.toString(this.definitionRightFactTree)) + (', immediate=' + Kotlin.toString(this.immediate)) + (', weight=' + Kotlin.toString(this.weight)) + (', direction=' + Kotlin.toString(this.direction)) + (', isOneDirection=' + Kotlin.toString(this.isOneDirection)) + ')';
  };
  FactTransformationRule.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.definitionLeftFactTree) | 0;
    result = result * 31 + Kotlin.hashCode(this.definitionRightFactTree) | 0;
    result = result * 31 + Kotlin.hashCode(this.immediate) | 0;
    result = result * 31 + Kotlin.hashCode(this.weight) | 0;
    result = result * 31 + Kotlin.hashCode(this.direction) | 0;
    result = result * 31 + Kotlin.hashCode(this.isOneDirection) | 0;
    return result;
  };
  FactTransformationRule.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.definitionLeftFactTree, other.definitionLeftFactTree) && Kotlin.equals(this.definitionRightFactTree, other.definitionRightFactTree) && Kotlin.equals(this.immediate, other.immediate) && Kotlin.equals(this.weight, other.weight) && Kotlin.equals(this.direction, other.direction) && Kotlin.equals(this.isOneDirection, other.isOneDirection)))));
  };
  function FactsLogicConfiguration() {
    this.signsPointersOnNotEndedExpression = listOf_0(['+', '-', '*', '/', '^', '%', '&', '|', ',', '&#xD7;', '&#xF7;', '&#x2265;', '&#x2264;', '=', '&gt;', '&lt;', '&#x2A7E;', '&#x2A7D;', '&#x2261;']);
    this.alwaysLetTwoPartsComparisonsAsExpressionComparisons = true;
    this.factsTransformationRules = mutableListOf([new FactTransformationRule('a+c;ec;>;ec;b+c', 'a;ec;>;ec;b', void 0, void 0, void 0, true), new FactTransformationRule('a+c;ec;>=;ec;b+c', 'a;ec;>=;ec;b', void 0, void 0, void 0, true), new FactTransformationRule('a+c;ec;=;ec;b+c', 'a;ec;=;ec;b', void 0, void 0, void 0, true), new FactTransformationRule('AND_NODE(a*c;ec;=;ec;b*c;mn;c;ec;>;ec;0)', 'AND_NODE(a;ec;=;ec;b)', void 0, void 0, void 0, true), new FactTransformationRule('AND_NODE(a/c;ec;=;ec;b/c;mn;c;ec;>;ec;0)', 'AND_NODE(a;ec;=;ec;b)', void 0, void 0, void 0, true), new FactTransformationRule('AND_NODE(OR_NODE(a;mn;b);mn;c)', 'OR_NODE(AND_NODE(a;mn;c);mn;AND_NODE(b;mn;c))'), new FactTransformationRule('OR_NODE(AND_NODE(a;mn;b);mn;c)', 'AND_NODE(OR_NODE(a;mn;c);mn;OR_NODE(b;mn;c))')]);
  }
  FactsLogicConfiguration.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FactsLogicConfiguration',
    interfaces: []
  };
  function Comparator$ObjectLiteral(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareByDescending$lambda = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(b), selector(a));
      };
    };
  });
  function StringDefinitionType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function StringDefinitionType_initFields() {
    StringDefinitionType_initFields = function () {
    };
    StringDefinitionType$BINARY_OPERATION_instance = new StringDefinitionType('BINARY_OPERATION', 0);
    StringDefinitionType$UNARY_LEFT_OPERATION_instance = new StringDefinitionType('UNARY_LEFT_OPERATION', 1);
    StringDefinitionType$UNARY_RIGHT_OPERATION_instance = new StringDefinitionType('UNARY_RIGHT_OPERATION', 2);
    StringDefinitionType$FUNCTION_instance = new StringDefinitionType('FUNCTION', 3);
  }
  var StringDefinitionType$BINARY_OPERATION_instance;
  function StringDefinitionType$BINARY_OPERATION_getInstance() {
    StringDefinitionType_initFields();
    return StringDefinitionType$BINARY_OPERATION_instance;
  }
  var StringDefinitionType$UNARY_LEFT_OPERATION_instance;
  function StringDefinitionType$UNARY_LEFT_OPERATION_getInstance() {
    StringDefinitionType_initFields();
    return StringDefinitionType$UNARY_LEFT_OPERATION_instance;
  }
  var StringDefinitionType$UNARY_RIGHT_OPERATION_instance;
  function StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance() {
    StringDefinitionType_initFields();
    return StringDefinitionType$UNARY_RIGHT_OPERATION_instance;
  }
  var StringDefinitionType$FUNCTION_instance;
  function StringDefinitionType$FUNCTION_getInstance() {
    StringDefinitionType_initFields();
    return StringDefinitionType$FUNCTION_instance;
  }
  StringDefinitionType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StringDefinitionType',
    interfaces: [Enum]
  };
  function StringDefinitionType$values() {
    return [StringDefinitionType$BINARY_OPERATION_getInstance(), StringDefinitionType$UNARY_LEFT_OPERATION_getInstance(), StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance(), StringDefinitionType$FUNCTION_getInstance()];
  }
  StringDefinitionType.values = StringDefinitionType$values;
  function StringDefinitionType$valueOf(name) {
    switch (name) {
      case 'BINARY_OPERATION':
        return StringDefinitionType$BINARY_OPERATION_getInstance();
      case 'UNARY_LEFT_OPERATION':
        return StringDefinitionType$UNARY_LEFT_OPERATION_getInstance();
      case 'UNARY_RIGHT_OPERATION':
        return StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance();
      case 'FUNCTION':
        return StringDefinitionType$FUNCTION_getInstance();
      default:throwISE('No enum constant mathhelper.twf.config.StringDefinitionType.' + name);
    }
  }
  StringDefinitionType.valueOf_61zpoe$ = StringDefinitionType$valueOf;
  function FunctionIdentifier(name, numberOfArguments, needRules) {
    FunctionIdentifier$Companion_getInstance();
    if (needRules === void 0)
      needRules = false;
    this.name = name;
    this.numberOfArguments = numberOfArguments;
    this.needRules = needRules;
  }
  function FunctionIdentifier$Companion() {
    FunctionIdentifier$Companion_instance = this;
  }
  FunctionIdentifier$Companion.prototype.getIdentifier_bm4lxs$ = function (name, numberOfArguments) {
    return name + '_' + numberOfArguments;
  };
  FunctionIdentifier$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var FunctionIdentifier$Companion_instance = null;
  function FunctionIdentifier$Companion_getInstance() {
    if (FunctionIdentifier$Companion_instance === null) {
      new FunctionIdentifier$Companion();
    }
    return FunctionIdentifier$Companion_instance;
  }
  FunctionIdentifier.prototype.getIdentifier = function () {
    return FunctionIdentifier$Companion_getInstance().getIdentifier_bm4lxs$(this.name, this.numberOfArguments);
  };
  FunctionIdentifier.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FunctionIdentifier',
    interfaces: []
  };
  FunctionIdentifier.prototype.component1 = function () {
    return this.name;
  };
  FunctionIdentifier.prototype.component2 = function () {
    return this.numberOfArguments;
  };
  FunctionIdentifier.prototype.component3 = function () {
    return this.needRules;
  };
  FunctionIdentifier.prototype.copy_37lk95$ = function (name, numberOfArguments, needRules) {
    return new FunctionIdentifier(name === void 0 ? this.name : name, numberOfArguments === void 0 ? this.numberOfArguments : numberOfArguments, needRules === void 0 ? this.needRules : needRules);
  };
  FunctionIdentifier.prototype.toString = function () {
    return 'FunctionIdentifier(name=' + Kotlin.toString(this.name) + (', numberOfArguments=' + Kotlin.toString(this.numberOfArguments)) + (', needRules=' + Kotlin.toString(this.needRules)) + ')';
  };
  FunctionIdentifier.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.numberOfArguments) | 0;
    result = result * 31 + Kotlin.hashCode(this.needRules) | 0;
    return result;
  };
  FunctionIdentifier.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.numberOfArguments, other.numberOfArguments) && Kotlin.equals(this.needRules, other.needRules)))));
  };
  function FunctionProperties(function_0, mainFunction, priority, numberOfArguments, isCommutativeWithNullWeight, mainFunctionIsCommutativeWithNullWeight, numberOfDefinitionArguments, isNameForRuleDesignations, plainTextRepresentation, unicodeRepresentation, texRepresentation, defaultStringDefinitionType, texStringDefinitionType, notObligateMainFunction, minNumberOfPointsForEquality, fieldAddZero, fieldMulZero, isCommutativeWithNullWeightPartSelectable) {
    if (isCommutativeWithNullWeight === void 0)
      isCommutativeWithNullWeight = false;
    if (mainFunctionIsCommutativeWithNullWeight === void 0)
      mainFunctionIsCommutativeWithNullWeight = false;
    if (numberOfDefinitionArguments === void 0)
      numberOfDefinitionArguments = 0;
    if (isNameForRuleDesignations === void 0)
      isNameForRuleDesignations = false;
    if (plainTextRepresentation === void 0)
      plainTextRepresentation = function_0;
    if (unicodeRepresentation === void 0)
      unicodeRepresentation = plainTextRepresentation;
    if (texRepresentation === void 0)
      texRepresentation = plainTextRepresentation;
    if (defaultStringDefinitionType === void 0)
      defaultStringDefinitionType = StringDefinitionType$FUNCTION_getInstance();
    if (texStringDefinitionType === void 0)
      texStringDefinitionType = defaultStringDefinitionType;
    if (notObligateMainFunction === void 0)
      notObligateMainFunction = null;
    if (minNumberOfPointsForEquality === void 0)
      minNumberOfPointsForEquality = 2;
    if (fieldAddZero === void 0)
      fieldAddZero = null;
    if (fieldMulZero === void 0)
      fieldMulZero = null;
    if (isCommutativeWithNullWeightPartSelectable === void 0)
      isCommutativeWithNullWeightPartSelectable = isCommutativeWithNullWeight;
    this.function = function_0;
    this.mainFunction = mainFunction;
    this.priority = priority;
    this.numberOfArguments = numberOfArguments;
    this.isCommutativeWithNullWeight = isCommutativeWithNullWeight;
    this.mainFunctionIsCommutativeWithNullWeight = mainFunctionIsCommutativeWithNullWeight;
    this.numberOfDefinitionArguments = numberOfDefinitionArguments;
    this.isNameForRuleDesignations = isNameForRuleDesignations;
    this.plainTextRepresentation = plainTextRepresentation;
    this.unicodeRepresentation = unicodeRepresentation;
    this.texRepresentation = texRepresentation;
    this.defaultStringDefinitionType = defaultStringDefinitionType;
    this.texStringDefinitionType = texStringDefinitionType;
    this.notObligateMainFunction_0 = notObligateMainFunction;
    this.minNumberOfPointsForEquality = minNumberOfPointsForEquality;
    this.fieldAddZero = fieldAddZero;
    this.fieldMulZero = fieldMulZero;
    this.isCommutativeWithNullWeightPartSelectable = isCommutativeWithNullWeightPartSelectable;
  }
  FunctionProperties.prototype.notObligateMainFunction = function () {
    var tmp$;
    return (tmp$ = this.notObligateMainFunction_0) != null ? tmp$ : this.mainFunction;
  };
  FunctionProperties.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FunctionProperties',
    interfaces: []
  };
  FunctionProperties.prototype.component1 = function () {
    return this.function;
  };
  FunctionProperties.prototype.component2 = function () {
    return this.mainFunction;
  };
  FunctionProperties.prototype.component3 = function () {
    return this.priority;
  };
  FunctionProperties.prototype.component4 = function () {
    return this.numberOfArguments;
  };
  FunctionProperties.prototype.component5 = function () {
    return this.isCommutativeWithNullWeight;
  };
  FunctionProperties.prototype.component6 = function () {
    return this.mainFunctionIsCommutativeWithNullWeight;
  };
  FunctionProperties.prototype.component7 = function () {
    return this.numberOfDefinitionArguments;
  };
  FunctionProperties.prototype.component8 = function () {
    return this.isNameForRuleDesignations;
  };
  FunctionProperties.prototype.component9 = function () {
    return this.plainTextRepresentation;
  };
  FunctionProperties.prototype.component10 = function () {
    return this.unicodeRepresentation;
  };
  FunctionProperties.prototype.component11 = function () {
    return this.texRepresentation;
  };
  FunctionProperties.prototype.component12 = function () {
    return this.defaultStringDefinitionType;
  };
  FunctionProperties.prototype.component13 = function () {
    return this.texStringDefinitionType;
  };
  FunctionProperties.prototype.component14_0 = function () {
    return this.notObligateMainFunction_0;
  };
  FunctionProperties.prototype.component15 = function () {
    return this.minNumberOfPointsForEquality;
  };
  FunctionProperties.prototype.component16 = function () {
    return this.fieldAddZero;
  };
  FunctionProperties.prototype.component17 = function () {
    return this.fieldMulZero;
  };
  FunctionProperties.prototype.component18 = function () {
    return this.isCommutativeWithNullWeightPartSelectable;
  };
  FunctionProperties.prototype.copy_vsgbqt$ = function (function_0, mainFunction, priority, numberOfArguments, isCommutativeWithNullWeight, mainFunctionIsCommutativeWithNullWeight, numberOfDefinitionArguments, isNameForRuleDesignations, plainTextRepresentation, unicodeRepresentation, texRepresentation, defaultStringDefinitionType, texStringDefinitionType, notObligateMainFunction, minNumberOfPointsForEquality, fieldAddZero, fieldMulZero, isCommutativeWithNullWeightPartSelectable) {
    return new FunctionProperties(function_0 === void 0 ? this.function : function_0, mainFunction === void 0 ? this.mainFunction : mainFunction, priority === void 0 ? this.priority : priority, numberOfArguments === void 0 ? this.numberOfArguments : numberOfArguments, isCommutativeWithNullWeight === void 0 ? this.isCommutativeWithNullWeight : isCommutativeWithNullWeight, mainFunctionIsCommutativeWithNullWeight === void 0 ? this.mainFunctionIsCommutativeWithNullWeight : mainFunctionIsCommutativeWithNullWeight, numberOfDefinitionArguments === void 0 ? this.numberOfDefinitionArguments : numberOfDefinitionArguments, isNameForRuleDesignations === void 0 ? this.isNameForRuleDesignations : isNameForRuleDesignations, plainTextRepresentation === void 0 ? this.plainTextRepresentation : plainTextRepresentation, unicodeRepresentation === void 0 ? this.unicodeRepresentation : unicodeRepresentation, texRepresentation === void 0 ? this.texRepresentation : texRepresentation, defaultStringDefinitionType === void 0 ? this.defaultStringDefinitionType : defaultStringDefinitionType, texStringDefinitionType === void 0 ? this.texStringDefinitionType : texStringDefinitionType, notObligateMainFunction === void 0 ? this.notObligateMainFunction_0 : notObligateMainFunction, minNumberOfPointsForEquality === void 0 ? this.minNumberOfPointsForEquality : minNumberOfPointsForEquality, fieldAddZero === void 0 ? this.fieldAddZero : fieldAddZero, fieldMulZero === void 0 ? this.fieldMulZero : fieldMulZero, isCommutativeWithNullWeightPartSelectable === void 0 ? this.isCommutativeWithNullWeightPartSelectable : isCommutativeWithNullWeightPartSelectable);
  };
  FunctionProperties.prototype.toString = function () {
    return 'FunctionProperties(function=' + Kotlin.toString(this.function) + (', mainFunction=' + Kotlin.toString(this.mainFunction)) + (', priority=' + Kotlin.toString(this.priority)) + (', numberOfArguments=' + Kotlin.toString(this.numberOfArguments)) + (', isCommutativeWithNullWeight=' + Kotlin.toString(this.isCommutativeWithNullWeight)) + (', mainFunctionIsCommutativeWithNullWeight=' + Kotlin.toString(this.mainFunctionIsCommutativeWithNullWeight)) + (', numberOfDefinitionArguments=' + Kotlin.toString(this.numberOfDefinitionArguments)) + (', isNameForRuleDesignations=' + Kotlin.toString(this.isNameForRuleDesignations)) + (', plainTextRepresentation=' + Kotlin.toString(this.plainTextRepresentation)) + (', unicodeRepresentation=' + Kotlin.toString(this.unicodeRepresentation)) + (', texRepresentation=' + Kotlin.toString(this.texRepresentation)) + (', defaultStringDefinitionType=' + Kotlin.toString(this.defaultStringDefinitionType)) + (', texStringDefinitionType=' + Kotlin.toString(this.texStringDefinitionType)) + (', notObligateMainFunction=' + Kotlin.toString(this.notObligateMainFunction_0)) + (', minNumberOfPointsForEquality=' + Kotlin.toString(this.minNumberOfPointsForEquality)) + (', fieldAddZero=' + Kotlin.toString(this.fieldAddZero)) + (', fieldMulZero=' + Kotlin.toString(this.fieldMulZero)) + (', isCommutativeWithNullWeightPartSelectable=' + Kotlin.toString(this.isCommutativeWithNullWeightPartSelectable)) + ')';
  };
  FunctionProperties.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.function) | 0;
    result = result * 31 + Kotlin.hashCode(this.mainFunction) | 0;
    result = result * 31 + Kotlin.hashCode(this.priority) | 0;
    result = result * 31 + Kotlin.hashCode(this.numberOfArguments) | 0;
    result = result * 31 + Kotlin.hashCode(this.isCommutativeWithNullWeight) | 0;
    result = result * 31 + Kotlin.hashCode(this.mainFunctionIsCommutativeWithNullWeight) | 0;
    result = result * 31 + Kotlin.hashCode(this.numberOfDefinitionArguments) | 0;
    result = result * 31 + Kotlin.hashCode(this.isNameForRuleDesignations) | 0;
    result = result * 31 + Kotlin.hashCode(this.plainTextRepresentation) | 0;
    result = result * 31 + Kotlin.hashCode(this.unicodeRepresentation) | 0;
    result = result * 31 + Kotlin.hashCode(this.texRepresentation) | 0;
    result = result * 31 + Kotlin.hashCode(this.defaultStringDefinitionType) | 0;
    result = result * 31 + Kotlin.hashCode(this.texStringDefinitionType) | 0;
    result = result * 31 + Kotlin.hashCode(this.notObligateMainFunction_0) | 0;
    result = result * 31 + Kotlin.hashCode(this.minNumberOfPointsForEquality) | 0;
    result = result * 31 + Kotlin.hashCode(this.fieldAddZero) | 0;
    result = result * 31 + Kotlin.hashCode(this.fieldMulZero) | 0;
    result = result * 31 + Kotlin.hashCode(this.isCommutativeWithNullWeightPartSelectable) | 0;
    return result;
  };
  FunctionProperties.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.function, other.function) && Kotlin.equals(this.mainFunction, other.mainFunction) && Kotlin.equals(this.priority, other.priority) && Kotlin.equals(this.numberOfArguments, other.numberOfArguments) && Kotlin.equals(this.isCommutativeWithNullWeight, other.isCommutativeWithNullWeight) && Kotlin.equals(this.mainFunctionIsCommutativeWithNullWeight, other.mainFunctionIsCommutativeWithNullWeight) && Kotlin.equals(this.numberOfDefinitionArguments, other.numberOfDefinitionArguments) && Kotlin.equals(this.isNameForRuleDesignations, other.isNameForRuleDesignations) && Kotlin.equals(this.plainTextRepresentation, other.plainTextRepresentation) && Kotlin.equals(this.unicodeRepresentation, other.unicodeRepresentation) && Kotlin.equals(this.texRepresentation, other.texRepresentation) && Kotlin.equals(this.defaultStringDefinitionType, other.defaultStringDefinitionType) && Kotlin.equals(this.texStringDefinitionType, other.texStringDefinitionType) && Kotlin.equals(this.notObligateMainFunction_0, other.notObligateMainFunction_0) && Kotlin.equals(this.minNumberOfPointsForEquality, other.minNumberOfPointsForEquality) && Kotlin.equals(this.fieldAddZero, other.fieldAddZero) && Kotlin.equals(this.fieldMulZero, other.fieldMulZero) && Kotlin.equals(this.isCommutativeWithNullWeightPartSelectable, other.isCommutativeWithNullWeightPartSelectable)))));
  };
  function FunctionStringDefinition(function_0, definitionType, definition, subAsLast, filter, definitionArgumentsCount, underlinedAsLast, powSeparatedAsPow) {
    if (subAsLast === void 0)
      subAsLast = false;
    if (filter === void 0)
      filter = '';
    if (definitionArgumentsCount === void 0)
      definitionArgumentsCount = -1;
    if (underlinedAsLast === void 0)
      underlinedAsLast = false;
    if (powSeparatedAsPow === void 0)
      powSeparatedAsPow = false;
    this.function = function_0;
    this.definitionType = definitionType;
    this.definition = definition;
    this.subAsLast = subAsLast;
    this.filter = filter;
    this.definitionArgumentsCount = definitionArgumentsCount;
    this.underlinedAsLast = underlinedAsLast;
    this.powSeparatedAsPow = powSeparatedAsPow;
  }
  FunctionStringDefinition.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FunctionStringDefinition',
    interfaces: []
  };
  FunctionStringDefinition.prototype.component1 = function () {
    return this.function;
  };
  FunctionStringDefinition.prototype.component2 = function () {
    return this.definitionType;
  };
  FunctionStringDefinition.prototype.component3 = function () {
    return this.definition;
  };
  FunctionStringDefinition.prototype.component4 = function () {
    return this.subAsLast;
  };
  FunctionStringDefinition.prototype.component5 = function () {
    return this.filter;
  };
  FunctionStringDefinition.prototype.component6 = function () {
    return this.definitionArgumentsCount;
  };
  FunctionStringDefinition.prototype.component7 = function () {
    return this.underlinedAsLast;
  };
  FunctionStringDefinition.prototype.component8 = function () {
    return this.powSeparatedAsPow;
  };
  FunctionStringDefinition.prototype.copy_a7cq3q$ = function (function_0, definitionType, definition, subAsLast, filter, definitionArgumentsCount, underlinedAsLast, powSeparatedAsPow) {
    return new FunctionStringDefinition(function_0 === void 0 ? this.function : function_0, definitionType === void 0 ? this.definitionType : definitionType, definition === void 0 ? this.definition : definition, subAsLast === void 0 ? this.subAsLast : subAsLast, filter === void 0 ? this.filter : filter, definitionArgumentsCount === void 0 ? this.definitionArgumentsCount : definitionArgumentsCount, underlinedAsLast === void 0 ? this.underlinedAsLast : underlinedAsLast, powSeparatedAsPow === void 0 ? this.powSeparatedAsPow : powSeparatedAsPow);
  };
  FunctionStringDefinition.prototype.toString = function () {
    return 'FunctionStringDefinition(function=' + Kotlin.toString(this.function) + (', definitionType=' + Kotlin.toString(this.definitionType)) + (', definition=' + Kotlin.toString(this.definition)) + (', subAsLast=' + Kotlin.toString(this.subAsLast)) + (', filter=' + Kotlin.toString(this.filter)) + (', definitionArgumentsCount=' + Kotlin.toString(this.definitionArgumentsCount)) + (', underlinedAsLast=' + Kotlin.toString(this.underlinedAsLast)) + (', powSeparatedAsPow=' + Kotlin.toString(this.powSeparatedAsPow)) + ')';
  };
  FunctionStringDefinition.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.function) | 0;
    result = result * 31 + Kotlin.hashCode(this.definitionType) | 0;
    result = result * 31 + Kotlin.hashCode(this.definition) | 0;
    result = result * 31 + Kotlin.hashCode(this.subAsLast) | 0;
    result = result * 31 + Kotlin.hashCode(this.filter) | 0;
    result = result * 31 + Kotlin.hashCode(this.definitionArgumentsCount) | 0;
    result = result * 31 + Kotlin.hashCode(this.underlinedAsLast) | 0;
    result = result * 31 + Kotlin.hashCode(this.powSeparatedAsPow) | 0;
    return result;
  };
  FunctionStringDefinition.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.function, other.function) && Kotlin.equals(this.definitionType, other.definitionType) && Kotlin.equals(this.definition, other.definition) && Kotlin.equals(this.subAsLast, other.subAsLast) && Kotlin.equals(this.filter, other.filter) && Kotlin.equals(this.definitionArgumentsCount, other.definitionArgumentsCount) && Kotlin.equals(this.underlinedAsLast, other.underlinedAsLast) && Kotlin.equals(this.powSeparatedAsPow, other.powSeparatedAsPow)))));
  };
  function FunctionDefinition(definitionLeftExpression, definitionRightExpression) {
    this.definitionLeftExpression = definitionLeftExpression;
    this.definitionRightExpression = definitionRightExpression;
  }
  FunctionDefinition.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FunctionDefinition',
    interfaces: []
  };
  FunctionDefinition.prototype.component1 = function () {
    return this.definitionLeftExpression;
  };
  FunctionDefinition.prototype.component2 = function () {
    return this.definitionRightExpression;
  };
  FunctionDefinition.prototype.copy_puj7f4$ = function (definitionLeftExpression, definitionRightExpression) {
    return new FunctionDefinition(definitionLeftExpression === void 0 ? this.definitionLeftExpression : definitionLeftExpression, definitionRightExpression === void 0 ? this.definitionRightExpression : definitionRightExpression);
  };
  FunctionDefinition.prototype.toString = function () {
    return 'FunctionDefinition(definitionLeftExpression=' + Kotlin.toString(this.definitionLeftExpression) + (', definitionRightExpression=' + Kotlin.toString(this.definitionRightExpression)) + ')';
  };
  FunctionDefinition.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.definitionLeftExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.definitionRightExpression) | 0;
    return result;
  };
  FunctionDefinition.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.definitionLeftExpression, other.definitionLeftExpression) && Kotlin.equals(this.definitionRightExpression, other.definitionRightExpression)))));
  };
  function TreeTransformationRule(definitionLeftExpression, definitionRightExpression, isImmediate, weight) {
    if (isImmediate === void 0)
      isImmediate = false;
    if (weight === void 0)
      weight = 1.0;
    this.definitionLeftExpression = definitionLeftExpression;
    this.definitionRightExpression = definitionRightExpression;
    this.isImmediate = isImmediate;
    this.weight = weight;
  }
  TreeTransformationRule.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TreeTransformationRule',
    interfaces: []
  };
  TreeTransformationRule.prototype.component1 = function () {
    return this.definitionLeftExpression;
  };
  TreeTransformationRule.prototype.component2 = function () {
    return this.definitionRightExpression;
  };
  TreeTransformationRule.prototype.component3 = function () {
    return this.isImmediate;
  };
  TreeTransformationRule.prototype.component4 = function () {
    return this.weight;
  };
  TreeTransformationRule.prototype.copy_m9kltj$ = function (definitionLeftExpression, definitionRightExpression, isImmediate, weight) {
    return new TreeTransformationRule(definitionLeftExpression === void 0 ? this.definitionLeftExpression : definitionLeftExpression, definitionRightExpression === void 0 ? this.definitionRightExpression : definitionRightExpression, isImmediate === void 0 ? this.isImmediate : isImmediate, weight === void 0 ? this.weight : weight);
  };
  TreeTransformationRule.prototype.toString = function () {
    return 'TreeTransformationRule(definitionLeftExpression=' + Kotlin.toString(this.definitionLeftExpression) + (', definitionRightExpression=' + Kotlin.toString(this.definitionRightExpression)) + (', isImmediate=' + Kotlin.toString(this.isImmediate)) + (', weight=' + Kotlin.toString(this.weight)) + ')';
  };
  TreeTransformationRule.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.definitionLeftExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.definitionRightExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.isImmediate) | 0;
    result = result * 31 + Kotlin.hashCode(this.weight) | 0;
    return result;
  };
  TreeTransformationRule.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.definitionLeftExpression, other.definitionLeftExpression) && Kotlin.equals(this.definitionRightExpression, other.definitionRightExpression) && Kotlin.equals(this.isImmediate, other.isImmediate) && Kotlin.equals(this.weight, other.weight)))));
  };
  function FunctionConfiguration(scopeFilter, notChangesOnVariablesInComparisonFunctionFilter) {
    if (scopeFilter === void 0)
      scopeFilter = setOf('');
    if (notChangesOnVariablesInComparisonFunctionFilter === void 0) {
      notChangesOnVariablesInComparisonFunctionFilter = emptySet();
    }
    this.scopeFilter = scopeFilter;
    this.notChangesOnVariablesInComparisonFunctionFilter = notChangesOnVariablesInComparisonFunctionFilter;
    var $receiver = mutableListOf([new FunctionIdentifier('', 0), new FunctionIdentifier('', 1), new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1), new FunctionIdentifier('^', -1), new FunctionIdentifier('mod', 2), new FunctionIdentifier('S', 4, true), new FunctionIdentifier('P', 4, true), new FunctionIdentifier('and', -1), new FunctionIdentifier('or', -1), new FunctionIdentifier('xor', -1), new FunctionIdentifier('alleq', -1), new FunctionIdentifier('not', 1), new FunctionIdentifier('implic', -1), new FunctionIdentifier('set-', -1), new FunctionIdentifier('nand', -1), new FunctionIdentifier('nor', -1), new FunctionIdentifier('sin', 1), new FunctionIdentifier('cos', 1), new FunctionIdentifier('sh', 1), new FunctionIdentifier('ch', 1), new FunctionIdentifier('th', 1), new FunctionIdentifier('tg', 1), new FunctionIdentifier('asin', 1), new FunctionIdentifier('acos', 1), new FunctionIdentifier('atg', 1), new FunctionIdentifier('exp', 1), new FunctionIdentifier('ln', 1), new FunctionIdentifier('abs', 1), new FunctionIdentifier('compconj', 1)]);
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (equals(element.name, '') || this.notChangesOnVariablesInComparisonFunctionFilter.isEmpty() || this.notChangesOnVariablesInComparisonFunctionFilter.contains_11rb$(element.name))
        destination.add_11rb$(element);
    }
    this.notChangesOnVariablesInComparisonFunction = destination;
    this.notChangesOnVariablesInComparisonFunctionWithoutTransformations = this.notChangesOnVariablesInComparisonFunction;
    this.functionDefinitions = mutableListOf([new FunctionDefinition('n!', 'P(i, 1, n, i)'), new FunctionDefinition('U(m,n)', 'm^n'), new FunctionDefinition('A(m,n)', 'm! / (m - n)!'), new FunctionDefinition('P(n)', 'n!'), new FunctionDefinition('C(m,n)', 'm! / (m - n)! / n!'), new FunctionDefinition('V(m,n)', '(m + n - 1)! / (m - 1)! / n!'), new FunctionDefinition('S1(n,k)', 'S(i,0,k,(-1)^(k-i) * i^n * k! / (k - i)! / i!)'), new FunctionDefinition('S2(n,k)', 'S1(n,k) / n!'), new FunctionDefinition('B(m)', 'S(n,0,m,S2(m,n))'), new FunctionDefinition('F(n)', '5^(-0.5) * (((1 + 5^0.5)/2)^(n+1) - ((1 - 5^0.5)/2)^(n+1))'), new FunctionDefinition('C(n)', '(2*n)! / (n!)^2 / (n+1)'), new FunctionDefinition('sec(x)', '1 / cos(x)'), new FunctionDefinition('csc(x)', '1 / sin(x)'), new FunctionDefinition('sech(x)', '1 / ch(x)'), new FunctionDefinition('csch(x)', '1 / sh(x)'), new FunctionDefinition('ctg(x)', '1 / tg(x)'), new FunctionDefinition('actg(x)', 'atg(1/x)'), new FunctionDefinition('cth(x)', '1 / th(x)'), new FunctionDefinition('log(a,b)', 'ln(a) / ln(b)')]);
    this.treeTransformationRules = mutableListOf([new TreeTransformationRule('S(i, a, a, f(i))', 'f(a)'), new TreeTransformationRule('S(i, a, b, f(i))', 'S(i, a, b-1, f(i)) + f(b)'), new TreeTransformationRule('S(i, a, b, f(i))', 'S(i, a+1, b, f(i)) + f(a)'), new TreeTransformationRule('S(i, a, c, f(i)) + S(i, c+1, b, f(i))', 'S(i, a, b, f(i))'), new TreeTransformationRule('P(i, a, a, f(i))', 'f(a)'), new TreeTransformationRule('P(i, a, b, f(i))', 'P(i, a, b-1, f(i)) * f(b)'), new TreeTransformationRule('P(i, a, b, f(i))', 'P(i, a+1, b, f(i)) * f(a)'), new TreeTransformationRule('P(i, a, c, f(i)) * P(i, c+1, b, f(i))', 'P(i, a, b, f(i))'), new TreeTransformationRule('U(m,n)', 'm^n'), new TreeTransformationRule('A(m,n)', 'm! / (m - n)!'), new TreeTransformationRule('P(n)', 'n!'), new TreeTransformationRule('P(n)', 'A(n,n)'), new TreeTransformationRule('C(m,n)', 'm! / (m - n)! / n!'), new TreeTransformationRule('V(m,n)', '(m + n - 1)! / (m - 1)! / n!'), new TreeTransformationRule('V(m,n)', 'C(m + n - 1, n)'), new TreeTransformationRule('S1(n,k)', 'S(i,0,k,(-1)^(k-i) * i^n * k! / (k - i)! / i!)'), new TreeTransformationRule('S2(n,k)', 'S1(n,k) / n!'), new TreeTransformationRule('S2(n,k)', 'S2(m-1,n-1) + n*S2(m-1,n)'), new TreeTransformationRule('B(m)', 'S(n,0,m,S2(m,n))'), new TreeTransformationRule('F(n)', '5^(-0.5) * (((1 + 5^0.5)/2)^(n+1) - ((1 - 5^0.5)/2)^(n+1))'), new TreeTransformationRule('F(n)', 'F(n-1) + F(n-2)'), new TreeTransformationRule('C(n)', '(2*n)! / (n!)^2 / (n+1)'), new TreeTransformationRule('sqrt(x)', 'x^0.5', true), new TreeTransformationRule('root(x,p)', 'x^(1/p)', true), new TreeTransformationRule('n!', 'P(i,1,n,i)', true), new TreeTransformationRule('d(expr)', 'd(expr,x)', true)]);
    this.taskContextTreeTransformationRules = ArrayList_init();
    this.functionProperties = mutableListOf([new FunctionProperties('+', '+', 1.0, -1, true, void 0, void 0, void 0, void 0, void 0, void 0, StringDefinitionType$BINARY_OPERATION_getInstance(), void 0, void 0, void 0, '0'), new FunctionProperties('-', '+', 1.0, -1, void 0, true, void 0, void 0, void 0, void 0, void 0, StringDefinitionType$UNARY_LEFT_OPERATION_getInstance(), void 0, '+'), new FunctionProperties('*', '*', 2.0, -1, true, true, void 0, void 0, void 0, void 0, '\\cdot', StringDefinitionType$BINARY_OPERATION_getInstance(), void 0, void 0, void 0, '1', '0'), new FunctionProperties('/', '/', 1.9, -1, void 0, true, void 0, void 0, void 0, void 0, '\\frac', StringDefinitionType$BINARY_OPERATION_getInstance(), void 0, '*'), new FunctionProperties('^', '^', 3.0, -1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, StringDefinitionType$BINARY_OPERATION_getInstance()), new FunctionProperties('S', 'S', 5.0, 4, void 0, void 0, 1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 2147483647), new FunctionProperties('P', 'P', 5.0, 4, void 0, void 0, 1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 2147483647), new FunctionProperties('sin', 'sin', 5.0, 1), new FunctionProperties('cos', 'cos', 5.0, 1), new FunctionProperties('sh', 'sh', 5.0, 1), new FunctionProperties('ch', 'ch', 5.0, 1), new FunctionProperties('sec', 'sec', 5.0, 1), new FunctionProperties('csc', 'csc', 5.0, 1), new FunctionProperties('tg', 'tg', 5.0, 1), new FunctionProperties('ctg', 'ctg', 5.0, 1), new FunctionProperties('th', 'th', 5.0, 1), new FunctionProperties('cth', 'cth', 5.0, 1), new FunctionProperties('sech', 'sech', 5.0, 1), new FunctionProperties('csch', 'csch', 5.0, 1), new FunctionProperties('asin', 'asin', 5.0, 1), new FunctionProperties('acos', 'acos', 5.0, 1), new FunctionProperties('atg', 'atg', 5.0, 1), new FunctionProperties('actg', 'actg', 5.0, 1), new FunctionProperties('exp', 'exp', 5.0, 1), new FunctionProperties('ln', 'ln', 5.0, 1), new FunctionProperties('abs', 'abs', 5.0, 1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 2147483647), new FunctionProperties('compconj', 'compconj', 5.0, 1), new FunctionProperties('log', 'log', 5.0, 2, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, StringDefinitionType$BINARY_OPERATION_getInstance()), new FunctionProperties('mod', 'mod', 5.0, 2), new FunctionProperties('and', 'and', 0.7, -1, true, true, void 0, void 0, '&', '\u2227', '\\land', StringDefinitionType$BINARY_OPERATION_getInstance(), void 0, void 0, void 0, '1', '0'), new FunctionProperties('or', 'or', 0.6, -1, true, true, void 0, void 0, '|', '\u2228', '\\lor', StringDefinitionType$BINARY_OPERATION_getInstance(), void 0, void 0, void 0, '0', '1'), new FunctionProperties('xor', 'xor', 0.6, -1, true, true, void 0, void 0, '^', '\u2295', '\\oplus', StringDefinitionType$BINARY_OPERATION_getInstance(), void 0, void 0, void 0, '0'), new FunctionProperties('alleq', 'alleq', 0.4, -1, true, true, void 0, void 0, '==', '\u2261', '\\equiv', StringDefinitionType$BINARY_OPERATION_getInstance(), void 0, void 0, void 0, void 0, void 0, false), new FunctionProperties('nand', 'nand', 0.4, -1, true, true, void 0, void 0, '\u2191', '\u2191', '\u2191', StringDefinitionType$BINARY_OPERATION_getInstance(), void 0, void 0, void 0, void 0, void 0, false), new FunctionProperties('nor', 'nor', 0.4, -1, true, true, void 0, void 0, '\u2193', '\u2193', '\u2193', StringDefinitionType$BINARY_OPERATION_getInstance(), void 0, void 0, void 0, void 0, void 0, false), new FunctionProperties('not', 'not', 5.0, 1, void 0, void 0, void 0, void 0, '!', '\xAC', '\\neg', StringDefinitionType$UNARY_LEFT_OPERATION_getInstance()), new FunctionProperties('implic', 'implic', 0.5, -1, void 0, void 0, void 0, void 0, '->', '\u2192', '\\implies', StringDefinitionType$BINARY_OPERATION_getInstance()), new FunctionProperties('set-', 'set-', 0.5, -1, void 0, void 0, void 0, void 0, '\\', '\u2216', '\\setminus', StringDefinitionType$BINARY_OPERATION_getInstance()), new FunctionProperties('sqrt', 'sqrt', 5.0, 1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, StringDefinitionType$BINARY_OPERATION_getInstance()), new FunctionProperties('root', 'root', 5.0, 2), new FunctionProperties('mfenced', 'mfenced', 5.0, 1), new FunctionProperties('U', 'U', 5.0, 2), new FunctionProperties('P', 'P', 5.0, 1), new FunctionProperties('A', 'A', 5.0, 2), new FunctionProperties('C', 'C', 5.0, 2), new FunctionProperties('V', 'V', 5.0, 2), new FunctionProperties('B', 'B', 5.0, 1), new FunctionProperties('S1', 'S1', 5.0, 2), new FunctionProperties('S2', 'S2', 5.0, 2), new FunctionProperties('F', 'F', 5.0, 1), new FunctionProperties('C', 'C', 5.0, 1), new FunctionProperties('factorial', 'factorial', 4.0, 1, void 0, void 0, void 0, void 0, '!', void 0, void 0, StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance()), new FunctionProperties('double_factorial', 'factorial', 4.0, 1, void 0, void 0, void 0, void 0, '!!', void 0, void 0, StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance()), new FunctionProperties('subfactorial', 'subfactorial', 4.0, 1, void 0, void 0, void 0, void 0, '!', void 0, void 0, StringDefinitionType$UNARY_LEFT_OPERATION_getInstance()), new FunctionProperties('partial_differential', 'partial_differential', 0.5, 1), new FunctionProperties('d', 'd', 0.5, 2), new FunctionProperties('d', 'd', 0.5, 1), new FunctionProperties('f', 'f', 0.5, 1, void 0, void 0, void 0, true), new FunctionProperties('g', 'g', 0.5, 1, void 0, void 0, void 0, true)]);
    this.boolFunctions = setOf_0(['and', 'or', 'not', 'alleq', 'xor', 'implic', 'set-', 'nand', 'nor']);
    var $receiver_0 = this.functionProperties;
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver_0, 10)), 16);
    var destination_0 = LinkedHashMap_init(capacity);
    var tmp$_0;
    tmp$_0 = $receiver_0.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      destination_0.put_xwzc9p$(element_0.function + '_' + toString(element_0.numberOfArguments), element_0);
    }
    this.functionPropertiesByName = destination_0;
    this.stringDefinitions = mutableListOf([new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('+_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '+'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('+_-1')), StringDefinitionType$FUNCTION_getInstance(), '+'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('+_-1')), StringDefinitionType$FUNCTION_getInstance(), 'add'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('-_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '-'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('-_-1')), StringDefinitionType$FUNCTION_getInstance(), '-'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('-_-1')), StringDefinitionType$FUNCTION_getInstance(), 'sub'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('factorial_1')), StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance(), '!'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('double_factorial_1')), StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance(), '!!'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('subfactorial_1')), StringDefinitionType$UNARY_LEFT_OPERATION_getInstance(), '!', void 0, 'subfactorial'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('factorial_1')), StringDefinitionType$FUNCTION_getInstance(), 'factorial'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('double_factorial_1')), StringDefinitionType$FUNCTION_getInstance(), 'double_factorial'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('subfactorial_1')), StringDefinitionType$FUNCTION_getInstance(), 'subfactorial'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('*_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '*'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('*_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '&#xD7'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('*_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '&#xB7'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('*_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\cdot'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('*_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\times'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('*_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\ast'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('*_-1')), StringDefinitionType$FUNCTION_getInstance(), '*'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('*_-1')), StringDefinitionType$FUNCTION_getInstance(), 'mul'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('/_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '/'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('/_-1')), StringDefinitionType$FUNCTION_getInstance(), '/'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('/_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\div'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('/_-1')), StringDefinitionType$FUNCTION_getInstance(), 'div'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('/_-1')), StringDefinitionType$FUNCTION_getInstance(), 'mfrac'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('/_-1')), StringDefinitionType$FUNCTION_getInstance(), '\\frac', void 0, void 0, 2), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('^_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '^'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('^_-1')), StringDefinitionType$FUNCTION_getInstance(), '^'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('^_-1')), StringDefinitionType$FUNCTION_getInstance(), 'pow'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('^_-1')), StringDefinitionType$FUNCTION_getInstance(), 'msup'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('mod_2')), StringDefinitionType$FUNCTION_getInstance(), 'mod'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('and_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '&amp'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('and_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '&'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('and_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\cap'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('and_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\wedge'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('and_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\land'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('and_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\u2227'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('or_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '|'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('or_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\cup'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('or_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\vee'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('or_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\lor'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('or_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\u2228'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('and_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '/\\', void 0, 'setTheory'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('or_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\/'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('and_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '&#x2227'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('or_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '&#x2228'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('xor_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '^', void 0, 'setTheory'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('xor_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '&#x2295'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('xor_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\oplus'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('xor_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\u2295'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('alleq_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '&#x2261'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('alleq_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\equiv'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('alleq_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\u2261'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('not_1')), StringDefinitionType$UNARY_LEFT_OPERATION_getInstance(), '&#xAC'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('not_1')), StringDefinitionType$UNARY_LEFT_OPERATION_getInstance(), '\\neg'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('not_1')), StringDefinitionType$UNARY_LEFT_OPERATION_getInstance(), '\xAC'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('not_1')), StringDefinitionType$UNARY_LEFT_OPERATION_getInstance(), '!', void 0, 'setTheory'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('implic_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '&#x2192'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('implic_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '->'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('implic_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '-<\/mo><mo>&gt;'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('implic_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\rightarrow'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('implic_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\Rightarrow'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('implic_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\to'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('implic_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\implies'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('implic_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\u2192'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('set-_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\\\'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('set-_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\\setminus'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('set-_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\u2216'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('nand_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\u2191'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('nor_-1')), StringDefinitionType$BINARY_OPERATION_getInstance(), '\u2193'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('and_-1')), StringDefinitionType$FUNCTION_getInstance(), 'and'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('or_-1')), StringDefinitionType$FUNCTION_getInstance(), 'or'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('xor_-1')), StringDefinitionType$FUNCTION_getInstance(), 'xor'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('alleq_-1')), StringDefinitionType$FUNCTION_getInstance(), 'alleq'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('nand_-1')), StringDefinitionType$FUNCTION_getInstance(), 'nand'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('nor_-1')), StringDefinitionType$FUNCTION_getInstance(), 'nor'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('not_1')), StringDefinitionType$FUNCTION_getInstance(), 'not'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('implic_-1')), StringDefinitionType$FUNCTION_getInstance(), 'implic'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('set-_-1')), StringDefinitionType$FUNCTION_getInstance(), 'setsub'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('partial_differential_1')), StringDefinitionType$UNARY_LEFT_OPERATION_getInstance(), '&#x2202'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('d_1')), StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance(), "'"), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('d_2')), StringDefinitionType$FUNCTION_getInstance(), "msubsup'"), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('d_1')), StringDefinitionType$FUNCTION_getInstance(), 'd'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('d_2')), StringDefinitionType$FUNCTION_getInstance(), 'd'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('d_1')), StringDefinitionType$FUNCTION_getInstance(), 'diff'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('d_2')), StringDefinitionType$FUNCTION_getInstance(), 'diff'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('S_4')), StringDefinitionType$FUNCTION_getInstance(), 'munderover&#x2211'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('P_4')), StringDefinitionType$FUNCTION_getInstance(), 'munderover&#x220F'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('S_4')), StringDefinitionType$FUNCTION_getInstance(), 'S'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('P_4')), StringDefinitionType$FUNCTION_getInstance(), 'P'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('S_4')), StringDefinitionType$FUNCTION_getInstance(), '\\sum', void 0, void 0, 4), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('P_4')), StringDefinitionType$FUNCTION_getInstance(), '\\prod', void 0, void 0, 4), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('sin_1')), StringDefinitionType$FUNCTION_getInstance(), 'sin', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('cos_1')), StringDefinitionType$FUNCTION_getInstance(), 'cos', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('tg_1')), StringDefinitionType$FUNCTION_getInstance(), 'tg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('ctg_1')), StringDefinitionType$FUNCTION_getInstance(), 'ctg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('tg_1')), StringDefinitionType$FUNCTION_getInstance(), 'tan', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('ctg_1')), StringDefinitionType$FUNCTION_getInstance(), 'cot', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('sin_1')), StringDefinitionType$FUNCTION_getInstance(), '\\sin', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('cos_1')), StringDefinitionType$FUNCTION_getInstance(), '\\cos', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('tg_1')), StringDefinitionType$FUNCTION_getInstance(), '\\tan', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('ctg_1')), StringDefinitionType$FUNCTION_getInstance(), '\\cot', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('asin_1')), StringDefinitionType$FUNCTION_getInstance(), 'asin', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('acos_1')), StringDefinitionType$FUNCTION_getInstance(), 'acos', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('atg_1')), StringDefinitionType$FUNCTION_getInstance(), 'atg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('atg_1')), StringDefinitionType$FUNCTION_getInstance(), 'atan', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('actg_1')), StringDefinitionType$FUNCTION_getInstance(), 'actg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('asin_1')), StringDefinitionType$FUNCTION_getInstance(), 'arcsin', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('acos_1')), StringDefinitionType$FUNCTION_getInstance(), 'arccos', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('atg_1')), StringDefinitionType$FUNCTION_getInstance(), 'arctg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('actg_1')), StringDefinitionType$FUNCTION_getInstance(), 'arcctg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('asin_1')), StringDefinitionType$FUNCTION_getInstance(), '\\asin', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('acos_1')), StringDefinitionType$FUNCTION_getInstance(), '\\acos', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('atg_1')), StringDefinitionType$FUNCTION_getInstance(), '\\atg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('atg_1')), StringDefinitionType$FUNCTION_getInstance(), '\\atan', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('actg_1')), StringDefinitionType$FUNCTION_getInstance(), '\\actg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('asin_1')), StringDefinitionType$FUNCTION_getInstance(), '\\arcsin', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('acos_1')), StringDefinitionType$FUNCTION_getInstance(), '\\arccos', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('atg_1')), StringDefinitionType$FUNCTION_getInstance(), '\\arctg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('actg_1')), StringDefinitionType$FUNCTION_getInstance(), '\\arcctg', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('sh_1')), StringDefinitionType$FUNCTION_getInstance(), 'sh', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('ch_1')), StringDefinitionType$FUNCTION_getInstance(), 'ch', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('th_1')), StringDefinitionType$FUNCTION_getInstance(), 'th', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('cth_1')), StringDefinitionType$FUNCTION_getInstance(), 'cth', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('sec_1')), StringDefinitionType$FUNCTION_getInstance(), 'sec', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('sec_1')), StringDefinitionType$FUNCTION_getInstance(), '\\sec', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('csc_1')), StringDefinitionType$FUNCTION_getInstance(), 'cosec', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('csc_1')), StringDefinitionType$FUNCTION_getInstance(), 'csc', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('csc_1')), StringDefinitionType$FUNCTION_getInstance(), '\\csc', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('sech_1')), StringDefinitionType$FUNCTION_getInstance(), 'sech', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('csch_1')), StringDefinitionType$FUNCTION_getInstance(), 'csch', void 0, void 0, 1, void 0, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('exp_1')), StringDefinitionType$FUNCTION_getInstance(), 'exp'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('exp_1')), StringDefinitionType$FUNCTION_getInstance(), '\\exp', void 0, void 0, 1), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('ln_1')), StringDefinitionType$FUNCTION_getInstance(), 'ln'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('ln_1')), StringDefinitionType$FUNCTION_getInstance(), '\\ln', void 0, void 0, 1), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('ln_1')), StringDefinitionType$FUNCTION_getInstance(), 'log'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('log_2')), StringDefinitionType$FUNCTION_getInstance(), 'log'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('log_2')), StringDefinitionType$FUNCTION_getInstance(), '{log}', true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('log_2')), StringDefinitionType$FUNCTION_getInstance(), '\\log', void 0, void 0, 2, true, true), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('abs_1')), StringDefinitionType$FUNCTION_getInstance(), 'abs'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('abs_1')), StringDefinitionType$FUNCTION_getInstance(), 'mfenced_|__|'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('compconj_1')), StringDefinitionType$FUNCTION_getInstance(), 'compconj'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('compconj_1')), StringDefinitionType$FUNCTION_getInstance(), '\\compconj'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('sqrt_1')), StringDefinitionType$FUNCTION_getInstance(), 'msqrt'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('root_2')), StringDefinitionType$FUNCTION_getInstance(), 'mroot'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('sqrt_1')), StringDefinitionType$FUNCTION_getInstance(), 'sqrt'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('sqrt_1')), StringDefinitionType$FUNCTION_getInstance(), '\\sqrt', void 0, void 0, 1), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('root_2')), StringDefinitionType$FUNCTION_getInstance(), 'root'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('mfenced_1')), StringDefinitionType$FUNCTION_getInstance(), 'mfenced'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('U_2')), StringDefinitionType$FUNCTION_getInstance(), 'U'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('P_1')), StringDefinitionType$FUNCTION_getInstance(), 'P'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('A_2')), StringDefinitionType$FUNCTION_getInstance(), 'A'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('C_2')), StringDefinitionType$FUNCTION_getInstance(), 'C'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('V_2')), StringDefinitionType$FUNCTION_getInstance(), 'V'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('B_1')), StringDefinitionType$FUNCTION_getInstance(), 'B'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('S1_2')), StringDefinitionType$FUNCTION_getInstance(), 'S1'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('S2_2')), StringDefinitionType$FUNCTION_getInstance(), 'S2'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('F_1')), StringDefinitionType$FUNCTION_getInstance(), 'F'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('C_1')), StringDefinitionType$FUNCTION_getInstance(), 'C'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('f_1')), StringDefinitionType$FUNCTION_getInstance(), 'f'), new FunctionStringDefinition(ensureNotNull(this.functionPropertiesByName.get_11rb$('g_1')), StringDefinitionType$FUNCTION_getInstance(), 'g')]);
    var $receiver_1 = this.stringDefinitions;
    var destination_1 = ArrayList_init();
    var tmp$_1;
    tmp$_1 = $receiver_1.iterator();
    while (tmp$_1.hasNext()) {
      var element_1 = tmp$_1.next();
      if (element_1.definitionType === StringDefinitionType$FUNCTION_getInstance() && element_1.definition.length > 1 && startsWith(element_1.definition, '\\'))
        destination_1.add_11rb$(element_1);
    }
    var destination_2 = ArrayList_init_0(collectionSizeOrDefault(destination_1, 10));
    var tmp$_2;
    tmp$_2 = destination_1.iterator();
    while (tmp$_2.hasNext()) {
      var item = tmp$_2.next();
      destination_2.add_11rb$(new Pair(item.definition, item));
    }
    this.slashToSpaceFunctionDefinitions = sortedWith(destination_2, new Comparator$ObjectLiteral(compareByDescending$lambda(FunctionConfiguration$slashToSpaceFunctionDefinitions$lambda)));
    this.slashToSpaceFunctionDefinitionsMap = toMap(this.slashToSpaceFunctionDefinitions);
    var $receiver_2 = this.stringDefinitions;
    var destination_3 = ArrayList_init();
    var tmp$_3;
    tmp$_3 = $receiver_2.iterator();
    while (tmp$_3.hasNext()) {
      var element_2 = tmp$_3.next();
      if (element_2.definitionType !== StringDefinitionType$FUNCTION_getInstance() && element_2.definition.length > 1 && startsWith(element_2.definition, '\\'))
        destination_3.add_11rb$(element_2);
    }
    var destination_4 = ArrayList_init_0(collectionSizeOrDefault(destination_3, 10));
    var tmp$_4;
    tmp$_4 = destination_3.iterator();
    while (tmp$_4.hasNext()) {
      var item_0 = tmp$_4.next();
      destination_4.add_11rb$(new Pair(item_0.definition, item_0.definitionType));
    }
    this.slashToSpaceDefinitions = sortedWith(destination_4, new Comparator$ObjectLiteral(compareByDescending$lambda(FunctionConfiguration$slashToSpaceDefinitions$lambda)));
    var $receiver_3 = this.stringDefinitions;
    var destination_5 = ArrayList_init();
    var tmp$_5;
    tmp$_5 = $receiver_3.iterator();
    while (tmp$_5.hasNext()) {
      var element_3 = tmp$_5.next();
      if (element_3.definitionType === StringDefinitionType$FUNCTION_getInstance())
        destination_5.add_11rb$(element_3);
    }
    var capacity_0 = coerceAtLeast(mapCapacity(collectionSizeOrDefault(destination_5, 10)), 16);
    var destination_6 = LinkedHashMap_init(capacity_0);
    var tmp$_6;
    tmp$_6 = destination_5.iterator();
    while (tmp$_6.hasNext()) {
      var element_4 = tmp$_6.next();
      destination_6.put_xwzc9p$(FunctionIdentifier$Companion_getInstance().getIdentifier_bm4lxs$(element_4.definition, element_4.function.numberOfArguments), element_4);
    }
    this.functionStringDefinitionByIdentifier = destination_6;
    var $receiver_4 = this.stringDefinitions;
    var destination_7 = LinkedHashMap_init_0();
    var tmp$_7;
    tmp$_7 = $receiver_4.iterator();
    while (tmp$_7.hasNext()) {
      var element_5 = tmp$_7.next();
      var key = element_5.definition;
      var tmp$_0_0;
      var value = destination_7.get_11rb$(key);
      if (value == null) {
        var answer = ArrayList_init();
        destination_7.put_xwzc9p$(key, answer);
        tmp$_0_0 = answer;
      }
       else {
        tmp$_0_0 = value;
      }
      var list = tmp$_0_0;
      list.add_11rb$(element_5);
    }
    this.stringDefinitionByName = destination_7;
    var $receiver_5 = this.stringDefinitions;
    var destination_8 = LinkedHashMap_init_0();
    var tmp$_8;
    tmp$_8 = $receiver_5.iterator();
    while (tmp$_8.hasNext()) {
      var element_6 = tmp$_8.next();
      var key_0 = element_6.function.function;
      var tmp$_0_1;
      var value_0 = destination_8.get_11rb$(key_0);
      if (value_0 == null) {
        var answer_0 = ArrayList_init();
        destination_8.put_xwzc9p$(key_0, answer_0);
        tmp$_0_1 = answer_0;
      }
       else {
        tmp$_0_1 = value_0;
      }
      var list_0 = tmp$_0_1;
      list_0.add_11rb$(element_6);
    }
    this.stringDefinitionByFunctionName = destination_8;
    var $receiver_6 = this.stringDefinitions;
    var destination_9 = ArrayList_init();
    var tmp$_9;
    tmp$_9 = $receiver_6.iterator();
    while (tmp$_9.hasNext()) {
      var element_7 = tmp$_9.next();
      if (element_7.definitionType === StringDefinitionType$UNARY_LEFT_OPERATION_getInstance() && element_7.definition.length > 1)
        destination_9.add_11rb$(element_7);
    }
    var destination_10 = ArrayList_init_0(collectionSizeOrDefault(destination_9, 10));
    var tmp$_10;
    tmp$_10 = destination_9.iterator();
    while (tmp$_10.hasNext()) {
      var item_1 = tmp$_10.next();
      destination_10.add_11rb$(item_1.definition);
    }
    this.leftUnarySignsDefinitionsLongerOneSymbol = sorted(destination_10);
    var $receiver_7 = this.stringDefinitions;
    var destination_11 = ArrayList_init();
    var tmp$_11;
    tmp$_11 = $receiver_7.iterator();
    while (tmp$_11.hasNext()) {
      var element_8 = tmp$_11.next();
      if (element_8.definitionType === StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance() && element_8.definition.length > 1)
        destination_11.add_11rb$(element_8);
    }
    var destination_12 = ArrayList_init_0(collectionSizeOrDefault(destination_11, 10));
    var tmp$_12;
    tmp$_12 = destination_11.iterator();
    while (tmp$_12.hasNext()) {
      var item_2 = tmp$_12.next();
      destination_12.add_11rb$(item_2.definition);
    }
    this.rightUnarySignsDefinitionsLongerOneSymbol = sorted(destination_12);
  }
  FunctionConfiguration.prototype.hasUpAnd = function () {
    return this.scopeFilter.contains_11rb$('setTheory');
  };
  FunctionConfiguration.prototype.fastFindStringDefinitionByNameAndNumberOfArguments_bm4lxs$ = function (name, numberOfArguments) {
    var tmp$, tmp$_0;
    tmp$ = this.stringDefinitionByFunctionName.get_11rb$(name);
    if (tmp$ == null) {
      return null;
    }
    var actualStringDefinitions = tmp$;
    var tmp$_1;
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$_2;
      tmp$_2 = actualStringDefinitions.iterator();
      while (tmp$_2.hasNext()) {
        var element = tmp$_2.next();
        if (numberOfArguments === element.function.numberOfArguments) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }
      }
      firstOrNull$result = null;
    }
     while (false);
    if ((tmp$_0 = firstOrNull$result) != null)
      tmp$_1 = tmp$_0;
    else {
      var firstOrNull$result_0;
      firstOrNull$break: do {
        var tmp$_3;
        tmp$_3 = actualStringDefinitions.iterator();
        while (tmp$_3.hasNext()) {
          var element_0 = tmp$_3.next();
          if (element_0.function.numberOfArguments === -1) {
            firstOrNull$result_0 = element_0;
            break firstOrNull$break;
          }
        }
        firstOrNull$result_0 = null;
      }
       while (false);
      tmp$_1 = firstOrNull$result_0;
    }
    return tmp$_1;
  };
  FunctionConfiguration.prototype.fastFindByNameAndNumberOfArguments_bm4lxs$ = function (name, numberOfArguments) {
    var tmp$;
    return (tmp$ = this.functionStringDefinitionByIdentifier.get_11rb$(FunctionIdentifier$Companion_getInstance().getIdentifier_bm4lxs$(name, numberOfArguments))) != null ? tmp$ : this.functionStringDefinitionByIdentifier.get_11rb$(FunctionIdentifier$Companion_getInstance().getIdentifier_bm4lxs$(name, -1));
  };
  FunctionConfiguration.prototype.findFunctionStringDefinition_3y6sv6$ = function (name, type, numberOfArguments, nameIsPossible, subAsLast, filter) {
    if (nameIsPossible === void 0)
      nameIsPossible = false;
    if (subAsLast === void 0)
      subAsLast = false;
    if (filter === void 0)
      filter = this.scopeFilter;
    var tmp$, tmp$_0;
    var result = null;
    tmp$ = this.stringDefinitionByName.get_11rb$(name);
    if (tmp$ == null) {
      return result;
    }
    var actualStringDefinitions = tmp$;
    var destination = ArrayList_init();
    var tmp$_1;
    tmp$_1 = actualStringDefinitions.iterator();
    while (tmp$_1.hasNext()) {
      var element = tmp$_1.next();
      if (isBlank(element.filter) || filter.contains_11rb$(element.filter))
        destination.add_11rb$(element);
    }
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var stringDefinition = tmp$_0.next();
      if (stringDefinition.definitionType === type && subAsLast === stringDefinition.subAsLast && (nameIsPossible || !stringDefinition.function.isNameForRuleDesignations))
        if (stringDefinition.function.numberOfArguments === -1 || stringDefinition.function.numberOfArguments === numberOfArguments || (subAsLast && stringDefinition.function.numberOfArguments === 2) || (stringDefinition.powSeparatedAsPow && (stringDefinition.function.numberOfArguments + 1 | 0) === numberOfArguments)) {
          if (!isBlank(stringDefinition.filter)) {
            return stringDefinition;
          }
           else if (result == null || equals(result.filter, '')) {
            result = stringDefinition;
          }
        }
    }
    return result;
  };
  FunctionConfiguration.prototype.isPrefixOfUnarySignLongerOneSymbol_opqyph$ = function (value, type) {
    if (type === StringDefinitionType$UNARY_LEFT_OPERATION_getInstance()) {
      return this.valueIsPrefixInSortedList_0(value, this.leftUnarySignsDefinitionsLongerOneSymbol);
    }
     else {
      return this.valueIsPrefixInSortedList_0(value, this.rightUnarySignsDefinitionsLongerOneSymbol);
    }
  };
  FunctionConfiguration.prototype.valueIsPrefixInSortedList_0 = function (value, list) {
    var tmp$, tmp$_0;
    var index = binarySearch(list, value);
    tmp$ = get_lastIndex(list);
    if (0 <= index && index <= tmp$) {
      return true;
    }
     else {
      var insertionIndex = -(index + 1 | 0) | 0;
      tmp$_0 = get_lastIndex(list);
      return 0 <= insertionIndex && insertionIndex <= tmp$_0 && startsWith(list.get_za3lpa$(insertionIndex), value);
    }
  };
  function FunctionConfiguration$slashToSpaceFunctionDefinitions$lambda(it) {
    return it.first.length;
  }
  function FunctionConfiguration$slashToSpaceDefinitions$lambda(it) {
    return it.first.length;
  }
  FunctionConfiguration.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FunctionConfiguration',
    interfaces: []
  };
  var notChangesOnVariablesInComparisonFunctionJsonName;
  var notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName;
  var defaultOtherCheckSolutionData;
  var namespaceCodeAndCodeDivider;
  var taskSetCodeAndCodeDivider;
  function concatNamespaceAndCode(namespaceCode, code) {
    return namespaceCode + namespaceCodeAndCodeDivider + code;
  }
  function RuleITR(code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, leftStructureString, rightStructureString, priority, isExtending, matchJumbledAndNested, simpleAdditional, basedOnTaskContext, normalizationType, weight, difficultyInTaskAutoGeneration, weightInTaskAutoGeneration, useWhenPostprocessGeneratedExpression, tagsForTaskGenerator) {
    if (code === void 0)
      code = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (leftStructureString === void 0)
      leftStructureString = null;
    if (rightStructureString === void 0)
      rightStructureString = null;
    if (priority === void 0)
      priority = null;
    if (isExtending === void 0)
      isExtending = null;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = null;
    if (simpleAdditional === void 0)
      simpleAdditional = null;
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = null;
    if (normalizationType === void 0)
      normalizationType = null;
    if (weight === void 0)
      weight = null;
    if (difficultyInTaskAutoGeneration === void 0)
      difficultyInTaskAutoGeneration = 1.0;
    if (weightInTaskAutoGeneration === void 0)
      weightInTaskAutoGeneration = 1.0;
    if (useWhenPostprocessGeneratedExpression === void 0)
      useWhenPostprocessGeneratedExpression = false;
    if (tagsForTaskGenerator === void 0) {
      tagsForTaskGenerator = emptyList();
    }
    this.code = code;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionShortEn = descriptionShortEn;
    this.descriptionShortRu = descriptionShortRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.leftStructureString = leftStructureString;
    this.rightStructureString = rightStructureString;
    this.priority = priority;
    this.isExtending = isExtending;
    this.matchJumbledAndNested = matchJumbledAndNested;
    this.simpleAdditional = simpleAdditional;
    this.basedOnTaskContext = basedOnTaskContext;
    this.normalizationType = normalizationType;
    this.weight = weight;
    this.difficultyInTaskAutoGeneration = difficultyInTaskAutoGeneration;
    this.weightInTaskAutoGeneration = weightInTaskAutoGeneration;
    this.useWhenPostprocessGeneratedExpression = useWhenPostprocessGeneratedExpression;
    this.tagsForTaskGenerator = tagsForTaskGenerator;
    var tmp$, tmp$_0;
    var $receiver = this.code;
    var tmp$_1 = $receiver == null || isBlank($receiver);
    if (tmp$_1) {
      tmp$_1 = ((tmp$ = this.leftStructureString) != null ? !isBlank(tmp$) : null) === true;
    }
    var tmp$_2 = tmp$_1;
    if (tmp$_2) {
      tmp$_2 = ((tmp$_0 = this.rightStructureString) != null ? !isBlank(tmp$_0) : null) === true;
    }
    if (tmp$_2) {
      this.code = toString(this.leftStructureString) + '__to__' + toString(this.rightStructureString);
    }
  }
  RuleITR.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RuleITR',
    interfaces: []
  };
  RuleITR.prototype.component1 = function () {
    return this.code;
  };
  RuleITR.prototype.component2 = function () {
    return this.nameEn;
  };
  RuleITR.prototype.component3 = function () {
    return this.nameRu;
  };
  RuleITR.prototype.component4 = function () {
    return this.descriptionShortEn;
  };
  RuleITR.prototype.component5 = function () {
    return this.descriptionShortRu;
  };
  RuleITR.prototype.component6 = function () {
    return this.descriptionEn;
  };
  RuleITR.prototype.component7 = function () {
    return this.descriptionRu;
  };
  RuleITR.prototype.component8 = function () {
    return this.leftStructureString;
  };
  RuleITR.prototype.component9 = function () {
    return this.rightStructureString;
  };
  RuleITR.prototype.component10 = function () {
    return this.priority;
  };
  RuleITR.prototype.component11 = function () {
    return this.isExtending;
  };
  RuleITR.prototype.component12 = function () {
    return this.matchJumbledAndNested;
  };
  RuleITR.prototype.component13 = function () {
    return this.simpleAdditional;
  };
  RuleITR.prototype.component14 = function () {
    return this.basedOnTaskContext;
  };
  RuleITR.prototype.component15 = function () {
    return this.normalizationType;
  };
  RuleITR.prototype.component16 = function () {
    return this.weight;
  };
  RuleITR.prototype.component17 = function () {
    return this.difficultyInTaskAutoGeneration;
  };
  RuleITR.prototype.component18 = function () {
    return this.weightInTaskAutoGeneration;
  };
  RuleITR.prototype.component19 = function () {
    return this.useWhenPostprocessGeneratedExpression;
  };
  RuleITR.prototype.component20 = function () {
    return this.tagsForTaskGenerator;
  };
  RuleITR.prototype.copy_wic270$ = function (code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, leftStructureString, rightStructureString, priority, isExtending, matchJumbledAndNested, simpleAdditional, basedOnTaskContext, normalizationType, weight, difficultyInTaskAutoGeneration, weightInTaskAutoGeneration, useWhenPostprocessGeneratedExpression, tagsForTaskGenerator) {
    return new RuleITR(code === void 0 ? this.code : code, nameEn === void 0 ? this.nameEn : nameEn, nameRu === void 0 ? this.nameRu : nameRu, descriptionShortEn === void 0 ? this.descriptionShortEn : descriptionShortEn, descriptionShortRu === void 0 ? this.descriptionShortRu : descriptionShortRu, descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, leftStructureString === void 0 ? this.leftStructureString : leftStructureString, rightStructureString === void 0 ? this.rightStructureString : rightStructureString, priority === void 0 ? this.priority : priority, isExtending === void 0 ? this.isExtending : isExtending, matchJumbledAndNested === void 0 ? this.matchJumbledAndNested : matchJumbledAndNested, simpleAdditional === void 0 ? this.simpleAdditional : simpleAdditional, basedOnTaskContext === void 0 ? this.basedOnTaskContext : basedOnTaskContext, normalizationType === void 0 ? this.normalizationType : normalizationType, weight === void 0 ? this.weight : weight, difficultyInTaskAutoGeneration === void 0 ? this.difficultyInTaskAutoGeneration : difficultyInTaskAutoGeneration, weightInTaskAutoGeneration === void 0 ? this.weightInTaskAutoGeneration : weightInTaskAutoGeneration, useWhenPostprocessGeneratedExpression === void 0 ? this.useWhenPostprocessGeneratedExpression : useWhenPostprocessGeneratedExpression, tagsForTaskGenerator === void 0 ? this.tagsForTaskGenerator : tagsForTaskGenerator);
  };
  RuleITR.prototype.toString = function () {
    return 'RuleITR(code=' + Kotlin.toString(this.code) + (', nameEn=' + Kotlin.toString(this.nameEn)) + (', nameRu=' + Kotlin.toString(this.nameRu)) + (', descriptionShortEn=' + Kotlin.toString(this.descriptionShortEn)) + (', descriptionShortRu=' + Kotlin.toString(this.descriptionShortRu)) + (', descriptionEn=' + Kotlin.toString(this.descriptionEn)) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', leftStructureString=' + Kotlin.toString(this.leftStructureString)) + (', rightStructureString=' + Kotlin.toString(this.rightStructureString)) + (', priority=' + Kotlin.toString(this.priority)) + (', isExtending=' + Kotlin.toString(this.isExtending)) + (', matchJumbledAndNested=' + Kotlin.toString(this.matchJumbledAndNested)) + (', simpleAdditional=' + Kotlin.toString(this.simpleAdditional)) + (', basedOnTaskContext=' + Kotlin.toString(this.basedOnTaskContext)) + (', normalizationType=' + Kotlin.toString(this.normalizationType)) + (', weight=' + Kotlin.toString(this.weight)) + (', difficultyInTaskAutoGeneration=' + Kotlin.toString(this.difficultyInTaskAutoGeneration)) + (', weightInTaskAutoGeneration=' + Kotlin.toString(this.weightInTaskAutoGeneration)) + (', useWhenPostprocessGeneratedExpression=' + Kotlin.toString(this.useWhenPostprocessGeneratedExpression)) + (', tagsForTaskGenerator=' + Kotlin.toString(this.tagsForTaskGenerator)) + ')';
  };
  RuleITR.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.leftStructureString) | 0;
    result = result * 31 + Kotlin.hashCode(this.rightStructureString) | 0;
    result = result * 31 + Kotlin.hashCode(this.priority) | 0;
    result = result * 31 + Kotlin.hashCode(this.isExtending) | 0;
    result = result * 31 + Kotlin.hashCode(this.matchJumbledAndNested) | 0;
    result = result * 31 + Kotlin.hashCode(this.simpleAdditional) | 0;
    result = result * 31 + Kotlin.hashCode(this.basedOnTaskContext) | 0;
    result = result * 31 + Kotlin.hashCode(this.normalizationType) | 0;
    result = result * 31 + Kotlin.hashCode(this.weight) | 0;
    result = result * 31 + Kotlin.hashCode(this.difficultyInTaskAutoGeneration) | 0;
    result = result * 31 + Kotlin.hashCode(this.weightInTaskAutoGeneration) | 0;
    result = result * 31 + Kotlin.hashCode(this.useWhenPostprocessGeneratedExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.tagsForTaskGenerator) | 0;
    return result;
  };
  RuleITR.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.code, other.code) && Kotlin.equals(this.nameEn, other.nameEn) && Kotlin.equals(this.nameRu, other.nameRu) && Kotlin.equals(this.descriptionShortEn, other.descriptionShortEn) && Kotlin.equals(this.descriptionShortRu, other.descriptionShortRu) && Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.leftStructureString, other.leftStructureString) && Kotlin.equals(this.rightStructureString, other.rightStructureString) && Kotlin.equals(this.priority, other.priority) && Kotlin.equals(this.isExtending, other.isExtending) && Kotlin.equals(this.matchJumbledAndNested, other.matchJumbledAndNested) && Kotlin.equals(this.simpleAdditional, other.simpleAdditional) && Kotlin.equals(this.basedOnTaskContext, other.basedOnTaskContext) && Kotlin.equals(this.normalizationType, other.normalizationType) && Kotlin.equals(this.weight, other.weight) && Kotlin.equals(this.difficultyInTaskAutoGeneration, other.difficultyInTaskAutoGeneration) && Kotlin.equals(this.weightInTaskAutoGeneration, other.weightInTaskAutoGeneration) && Kotlin.equals(this.useWhenPostprocessGeneratedExpression, other.useWhenPostprocessGeneratedExpression) && Kotlin.equals(this.tagsForTaskGenerator, other.tagsForTaskGenerator)))));
  };
  function SolutionsStepITR(stepExpression, substitution, selectedPlacesNodeIds, stepId, prevStepId) {
    this.stepExpression = stepExpression;
    this.substitution = substitution;
    this.selectedPlacesNodeIds = selectedPlacesNodeIds;
    this.stepId = stepId;
    this.prevStepId = prevStepId;
  }
  SolutionsStepITR.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SolutionsStepITR',
    interfaces: []
  };
  SolutionsStepITR.prototype.component1 = function () {
    return this.stepExpression;
  };
  SolutionsStepITR.prototype.component2 = function () {
    return this.substitution;
  };
  SolutionsStepITR.prototype.component3 = function () {
    return this.selectedPlacesNodeIds;
  };
  SolutionsStepITR.prototype.component4 = function () {
    return this.stepId;
  };
  SolutionsStepITR.prototype.component5 = function () {
    return this.prevStepId;
  };
  SolutionsStepITR.prototype.copy_x48ucd$ = function (stepExpression, substitution, selectedPlacesNodeIds, stepId, prevStepId) {
    return new SolutionsStepITR(stepExpression === void 0 ? this.stepExpression : stepExpression, substitution === void 0 ? this.substitution : substitution, selectedPlacesNodeIds === void 0 ? this.selectedPlacesNodeIds : selectedPlacesNodeIds, stepId === void 0 ? this.stepId : stepId, prevStepId === void 0 ? this.prevStepId : prevStepId);
  };
  SolutionsStepITR.prototype.toString = function () {
    return 'SolutionsStepITR(stepExpression=' + Kotlin.toString(this.stepExpression) + (', substitution=' + Kotlin.toString(this.substitution)) + (', selectedPlacesNodeIds=' + Kotlin.toString(this.selectedPlacesNodeIds)) + (', stepId=' + Kotlin.toString(this.stepId)) + (', prevStepId=' + Kotlin.toString(this.prevStepId)) + ')';
  };
  SolutionsStepITR.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.stepExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.substitution) | 0;
    result = result * 31 + Kotlin.hashCode(this.selectedPlacesNodeIds) | 0;
    result = result * 31 + Kotlin.hashCode(this.stepId) | 0;
    result = result * 31 + Kotlin.hashCode(this.prevStepId) | 0;
    return result;
  };
  SolutionsStepITR.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.stepExpression, other.stepExpression) && Kotlin.equals(this.substitution, other.substitution) && Kotlin.equals(this.selectedPlacesNodeIds, other.selectedPlacesNodeIds) && Kotlin.equals(this.stepId, other.stepId) && Kotlin.equals(this.prevStepId, other.prevStepId)))));
  };
  function HintITR(textEn, textRu, showPattern, text) {
    if (textEn === void 0)
      textEn = '';
    if (textRu === void 0)
      textRu = '';
    if (showPattern === void 0)
      showPattern = null;
    if (text === void 0)
      text = null;
    this.textEn = textEn;
    this.textRu = textRu;
    this.showPattern = showPattern;
    if (text != null) {
      if (isBlank(this.textEn)) {
        this.textEn = text;
      }
      if (isBlank(this.textRu)) {
        this.textRu = text;
      }
    }
    var tmp$ = !isBlank(this.textEn);
    if (tmp$) {
      tmp$ = !isBlank(this.textRu);
    }
    if (!tmp$) {
      throw IllegalArgumentException_init("textEn='" + this.textEn + "' textRu='" + this.textRu + "'");
    }
  }
  HintITR.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HintITR',
    interfaces: []
  };
  function InterestingFact(textEn, textRu, showCondition) {
    this.textEn = textEn;
    this.textRu = textRu;
    this.showCondition = showCondition;
  }
  InterestingFact.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InterestingFact',
    interfaces: []
  };
  InterestingFact.prototype.component1 = function () {
    return this.textEn;
  };
  InterestingFact.prototype.component2 = function () {
    return this.textRu;
  };
  InterestingFact.prototype.component3 = function () {
    return this.showCondition;
  };
  InterestingFact.prototype.copy_6hosri$ = function (textEn, textRu, showCondition) {
    return new InterestingFact(textEn === void 0 ? this.textEn : textEn, textRu === void 0 ? this.textRu : textRu, showCondition === void 0 ? this.showCondition : showCondition);
  };
  InterestingFact.prototype.toString = function () {
    return 'InterestingFact(textEn=' + Kotlin.toString(this.textEn) + (', textRu=' + Kotlin.toString(this.textRu)) + (', showCondition=' + Kotlin.toString(this.showCondition)) + ')';
  };
  InterestingFact.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.textEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.textRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.showCondition) | 0;
    return result;
  };
  InterestingFact.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.textEn, other.textEn) && Kotlin.equals(this.textRu, other.textRu) && Kotlin.equals(this.showCondition, other.showCondition)))));
  };
  function TaskITR(taskCreationType, code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, originalExpressionStructureString, originalExpressionTex, originalExpressionPlainText, goalType, goalExpressionStructureString, goalExpressionTex, goalExpressionPlainText, goalPattern, goalNumberProperty, otherGoalData, rulePacks, rules, stepsNumber, time, difficulty, targetDifficulty, solutionPlainText, solutionsStepsTree, hints, otherCheckSolutionData, countOfAutoGeneratedTasks, otherAutoGenerationData, interestingFacts, otherAwardData, nextRecommendedTasks, otherData, comment, domainConditionDescription, domainConditionDescriptionEn, domainConditionDescriptionRu, expressionTaskIntermediateData) {
    if (taskCreationType === void 0)
      taskCreationType = null;
    if (code === void 0)
      code = null;
    if (version === void 0)
      version = 0;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = 'standard_math';
    if (tags === void 0) {
      tags = LinkedHashSet_init();
    }
    if (originalExpressionStructureString === void 0)
      originalExpressionStructureString = null;
    if (originalExpressionTex === void 0)
      originalExpressionTex = originalExpressionStructureString != null ? structureStringToTexString(originalExpressionStructureString) : null;
    if (originalExpressionPlainText === void 0)
      originalExpressionPlainText = originalExpressionStructureString != null ? structureStringToString(originalExpressionStructureString) : null;
    if (goalType === void 0)
      goalType = null;
    if (goalExpressionStructureString === void 0)
      goalExpressionStructureString = null;
    if (goalExpressionTex === void 0)
      goalExpressionTex = goalExpressionStructureString != null ? structureStringToTexString(goalExpressionStructureString) : null;
    if (goalExpressionPlainText === void 0)
      goalExpressionPlainText = goalExpressionStructureString != null ? structureStringToString(goalExpressionStructureString) : null;
    if (goalPattern === void 0)
      goalPattern = null;
    if (goalNumberProperty === void 0)
      goalNumberProperty = null;
    if (otherGoalData === void 0)
      otherGoalData = null;
    if (rulePacks === void 0)
      rulePacks = null;
    if (rules === void 0)
      rules = null;
    if (stepsNumber === void 0)
      stepsNumber = null;
    if (time === void 0)
      time = null;
    if (targetDifficulty === void 0)
      targetDifficulty = 0.0;
    if (solutionPlainText === void 0)
      solutionPlainText = null;
    if (solutionsStepsTree === void 0)
      solutionsStepsTree = null;
    if (hints === void 0)
      hints = null;
    if (otherCheckSolutionData === void 0)
      otherCheckSolutionData = null;
    if (countOfAutoGeneratedTasks === void 0)
      countOfAutoGeneratedTasks = null;
    if (otherAutoGenerationData === void 0)
      otherAutoGenerationData = null;
    if (interestingFacts === void 0)
      interestingFacts = null;
    if (otherAwardData === void 0)
      otherAwardData = null;
    if (nextRecommendedTasks === void 0)
      nextRecommendedTasks = null;
    if (otherData === void 0)
      otherData = null;
    if (comment === void 0)
      comment = null;
    if (domainConditionDescription === void 0)
      domainConditionDescription = null;
    if (domainConditionDescriptionEn === void 0)
      domainConditionDescriptionEn = null;
    if (domainConditionDescriptionRu === void 0)
      domainConditionDescriptionRu = null;
    if (expressionTaskIntermediateData === void 0)
      expressionTaskIntermediateData = new ExpressionTaskIntermediateData();
    this.taskCreationType = taskCreationType;
    this.code = code;
    this.version = version;
    this.namespaceCode = namespaceCode;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionShortEn = descriptionShortEn;
    this.descriptionShortRu = descriptionShortRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.subjectType = subjectType;
    this.tags = tags;
    this.originalExpressionStructureString = originalExpressionStructureString;
    this.originalExpressionTex = originalExpressionTex;
    this.originalExpressionPlainText = originalExpressionPlainText;
    this.goalType = goalType;
    this.goalExpressionStructureString = goalExpressionStructureString;
    this.goalExpressionTex = goalExpressionTex;
    this.goalExpressionPlainText = goalExpressionPlainText;
    this.goalPattern = goalPattern;
    this.goalNumberProperty = goalNumberProperty;
    this.otherGoalData = otherGoalData;
    this.rulePacks = rulePacks;
    this.rules = rules;
    this.stepsNumber = stepsNumber;
    this.time = time;
    this.difficulty = difficulty;
    this.targetDifficulty = targetDifficulty;
    this.solutionPlainText = solutionPlainText;
    this.solutionsStepsTree = solutionsStepsTree;
    this.hints = hints;
    this.otherCheckSolutionData = otherCheckSolutionData;
    this.countOfAutoGeneratedTasks = countOfAutoGeneratedTasks;
    this.otherAutoGenerationData = otherAutoGenerationData;
    this.interestingFacts = interestingFacts;
    this.otherAwardData = otherAwardData;
    this.nextRecommendedTasks = nextRecommendedTasks;
    this.otherData = otherData;
    this.comment = comment;
    this.domainConditionDescription = domainConditionDescription;
    this.domainConditionDescriptionEn = domainConditionDescriptionEn;
    this.domainConditionDescriptionRu = domainConditionDescriptionRu;
    this.expressionTaskIntermediateData = expressionTaskIntermediateData;
    var tmp$, tmp$_0;
    var expressionStructureConditionConstructor = new ExpressionStructureConditionConstructor(new CompiledConfiguration(void 0, new FunctionConfiguration()));
    var tmp$_1 = equals(this.goalType, 'computation');
    if (tmp$_1) {
      var $receiver = this.goalPattern;
      tmp$_1 = $receiver == null || isBlank($receiver);
    }
    if (tmp$_1) {
      this.goalPattern = '+:0-1(-:1):?:?R';
    }
    if (this.goalType == null) {
      if (this.goalExpressionStructureString != null) {
        this.goalType = 'expression';
      }
       else if (this.goalPattern != null) {
        if (contains_0(ensureNotNull(this.goalPattern), 82) || contains_0(ensureNotNull(this.goalPattern), 78) || contains_0(ensureNotNull(this.goalPattern), 90)) {
          this.goalType = 'computation';
        }
         else if (expressionStructureConditionConstructor.parse_61zpoe$(ensureNotNull(this.goalPattern)).treeVariables.isNotEmpty()) {
          this.goalType = 'express';
        }
         else {
          this.goalType = 'simplification';
        }
      }
    }
    if (this.originalExpressionStructureString != null) {
      tmp$ = structureStringToExpression(this.originalExpressionStructureString);
    }
     else
      tmp$ = new ExpressionNode(NodeType$EMPTY_getInstance(), '');
    var originalExpression = tmp$;
    if (this.goalExpressionStructureString != null) {
      tmp$_0 = structureStringToExpression(this.goalExpressionStructureString);
    }
     else
      tmp$_0 = new ExpressionNode(NodeType$EMPTY_getInstance(), '');
    var goalExpression = tmp$_0;
    switch (this.goalType) {
      case 'expression':
        if (this.nameRu == null) {
          if (this.tags.contains_11rb$(TaskTagCode$RESOLUTION_getInstance().code)) {
            this.nameRu = '\u041C\u0435\u0442\u043E\u0434 \u0420\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439';
          }
           else {
            this.nameRu = '\u0414\u043E\u043A\u0430\u0437\u0430\u0442\u0435\u043B\u044C\u0441\u0442\u0432\u043E';
          }
        }

        if (this.nameEn == null) {
          if (this.tags.contains_11rb$(TaskTagCode$RESOLUTION_getInstance().code)) {
            this.nameEn = 'Resolution Method';
          }
           else {
            this.nameEn = 'Proof';
          }
        }

        if (this.descriptionShortRu == null) {
          if (this.tags.contains_11rb$(TaskTagCode$RESOLUTION_getInstance().code)) {
            this.descriptionShortRu = '\u0414\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043C\u0435\u0442\u043E\u0434\u043E\u043C \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439';
          }
           else {
            this.descriptionShortRu = '\u0421\u0432\u0435\u0441\u0442\u0438 \u043A';
          }
          this.addTaskRulePacksToDescriptionShortRu_0(this.rules);
        }

        if (this.descriptionShortEn == null) {
          if (this.tags.contains_11rb$(TaskTagCode$RESOLUTION_getInstance().code)) {
            this.descriptionShortEn = 'Prove by Resolution Method';
          }
           else {
            this.descriptionShortEn = 'Relate to';
          }
          this.addTaskRulePacksToDescriptionShortEn_0(this.rules);
        }

        if (this.descriptionRu == null) {
          this.descriptionRu = '\u0414\u043E\u043A\u0430\u0437\u0430\u0442\u044C ' + (this.tags.contains_11rb$(TaskTagCode$RESOLUTION_getInstance().code) ? '\u043C\u0435\u0442\u043E\u0434\u043E\u043C \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439' : '') + " '" + expressionToString(originalExpression) + ' = ' + expressionToString(goalExpression) + "'";
          this.addTaskRulePacksToDescriptionRu_0(this.rules);
        }

        if (this.descriptionEn == null) {
          this.descriptionEn = 'Prove ' + (this.tags.contains_11rb$(TaskTagCode$RESOLUTION_getInstance().code) ? 'by Resolution Method' : '') + " '" + expressionToString(originalExpression) + ' = ' + expressionToString(goalExpression) + "'";
          this.addTaskRulePacksToDescriptionEn_0(this.rules);
        }

        break;
      case 'computation':
        if (this.nameRu == null) {
          this.nameRu = '\u0412\u044B\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u0435';
        }

        if (this.nameEn == null) {
          this.nameEn = 'Computation';
        }

        if (this.descriptionShortRu == null) {
          this.descriptionShortRu = '\u0412\u044B\u0447\u0438\u0441\u043B\u0438\u0442\u044C';
          this.addTaskRulePacksToDescriptionShortRu_0(this.rules);
        }

        if (this.descriptionShortEn == null) {
          this.descriptionShortEn = 'Compute';
          this.addTaskRulePacksToDescriptionShortEn_0(this.rules);
        }

        if (this.descriptionRu == null) {
          this.descriptionRu = "\u0412\u044B\u0447\u0438\u0441\u043B\u0438\u0442\u044C '" + expressionToString(originalExpression) + "'";
          this.addTaskRulePacksToDescriptionRu_0(this.rules);
        }

        if (this.descriptionEn == null) {
          this.descriptionEn = "Compute '" + expressionToString(originalExpression) + "'";
          this.addTaskRulePacksToDescriptionEn_0(this.rules);
        }

        break;
      case 'express':
        if (this.nameRu == null) {
          this.nameRu = '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435';
        }

        if (this.nameEn == null) {
          this.nameEn = 'Transformation';
        }

        var patternTreeVariables = expressionStructureConditionConstructor.parse_61zpoe$(ensureNotNull(this.goalPattern)).treeVariables;
        if (this.descriptionShortRu == null) {
          this.descriptionShortRu = "\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C '" + expressionToString(originalExpression) + "'";
          if (!patternTreeVariables.treePermittedVariables.isEmpty()) {
            this.descriptionShortRu = this.descriptionShortRu + (' \u0447\u0435\u0440\u0435\u0437 ' + joinToString(patternTreeVariables.treePermittedVariables, ', ', void 0, void 0, void 0, void 0, TaskITR_init$lambda));
          }
          if (!patternTreeVariables.treeForbiddenVariables.isEmpty()) {
            this.descriptionShortRu = this.descriptionShortRu + (' \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044F ' + joinToString(patternTreeVariables.treeForbiddenVariables, ', ', void 0, void 0, void 0, void 0, TaskITR_init$lambda_0));
          }
          this.addTaskRulePacksToDescriptionShortRu_0(this.rules);
        }

        if (this.descriptionShortEn == null) {
          this.descriptionShortEn = "Express '" + expressionToString(originalExpression) + "'";
          if (!patternTreeVariables.treePermittedVariables.isEmpty()) {
            this.descriptionShortEn = this.descriptionShortEn + (' using ' + joinToString(patternTreeVariables.treePermittedVariables, ', ', void 0, void 0, void 0, void 0, TaskITR_init$lambda_1));
          }
          if (!patternTreeVariables.treeForbiddenVariables.isEmpty()) {
            this.descriptionShortEn = this.descriptionShortEn + (' without ' + joinToString(patternTreeVariables.treeForbiddenVariables, ', ', void 0, void 0, void 0, void 0, TaskITR_init$lambda_2));
          }
          this.addTaskRulePacksToDescriptionShortEn_0(this.rules);
        }

        if (this.descriptionRu == null) {
          this.descriptionRu = "\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C '" + expressionToString(originalExpression) + "'";
          if (!patternTreeVariables.treePermittedVariables.isEmpty()) {
            this.descriptionRu = this.descriptionRu + (' \u0447\u0435\u0440\u0435\u0437 ' + joinToString(patternTreeVariables.treePermittedVariables, ', ', void 0, void 0, void 0, void 0, TaskITR_init$lambda_3));
          }
          if (!patternTreeVariables.treeForbiddenVariables.isEmpty()) {
            this.descriptionRu = this.descriptionRu + (' \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044F ' + joinToString(patternTreeVariables.treeForbiddenVariables, ', ', void 0, void 0, void 0, void 0, TaskITR_init$lambda_4));
          }
          this.addTaskRulePacksToDescriptionRu_0(this.rules);
        }

        if (this.descriptionEn == null) {
          this.descriptionEn = "Express '" + expressionToString(originalExpression) + "'";
          if (!patternTreeVariables.treePermittedVariables.isEmpty()) {
            this.descriptionEn = this.descriptionEn + (' using ' + joinToString(patternTreeVariables.treePermittedVariables, ', ', void 0, void 0, void 0, void 0, TaskITR_init$lambda_5));
          }
          if (!patternTreeVariables.treeForbiddenVariables.isEmpty()) {
            this.descriptionEn = this.descriptionEn + (' without ' + joinToString(patternTreeVariables.treeForbiddenVariables, ', ', void 0, void 0, void 0, void 0, TaskITR_init$lambda_6));
          }
          this.addTaskRulePacksToDescriptionEn_0(this.rules);
        }

        break;
      case 'simplification':
        if (this.nameRu == null) {
          this.nameRu = '\u0423\u043F\u0440\u043E\u0449\u0435\u043D\u0438\u0435';
        }

        if (this.nameEn == null) {
          this.nameEn = 'Simplification';
        }

        if (this.descriptionShortRu == null) {
          this.descriptionShortRu = '\u0423\u043F\u0440\u043E\u0441\u0442\u0438\u0442\u044C';
          this.addTaskRulePacksToDescriptionShortRu_0(this.rules);
        }

        if (this.descriptionShortEn == null) {
          this.descriptionShortEn = 'Simplify';
          this.addTaskRulePacksToDescriptionShortEn_0(this.rules);
        }

        if (this.descriptionRu == null) {
          this.descriptionRu = "\u0423\u043F\u0440\u043E\u0441\u0442\u0438\u0442\u044C '" + expressionToString(originalExpression) + "'";
          this.addTaskRulePacksToDescriptionRu_0(this.rules);
        }

        if (this.descriptionEn == null) {
          this.descriptionEn = "Simplify '" + expressionToString(originalExpression) + "'";
          this.addTaskRulePacksToDescriptionEn_0(this.rules);
        }

        break;
      case 'CNF':
      case 'DNF':
        var goalTypeRu = equals(this.goalType, 'CNF') ? '\u041A\u041D\u0424' : '\u0414\u041D\u0424';
        if (this.nameRu == null) {
          this.nameRu = (this.goalNumberProperty != null ? toString(this.goalNumberProperty) + '-' : '') + goalTypeRu;
        }

        if (this.nameEn == null) {
          this.nameEn = (this.goalNumberProperty != null ? toString(this.goalNumberProperty) + '-' : '') + this.goalType;
        }

        if (this.descriptionShortRu == null) {
          this.descriptionShortRu = '\u0421\u0432\u0435\u0441\u0442\u0438 \u043A ' + toString(this.nameRu);
          this.addTaskRulePacksToDescriptionShortRu_0(this.rules);
        }

        if (this.descriptionShortEn == null) {
          this.descriptionShortEn = 'Relate to ' + toString(this.nameEn);
          this.addTaskRulePacksToDescriptionShortEn_0(this.rules);
        }

        if (this.descriptionRu == null) {
          this.descriptionRu = "\u0421\u0432\u0435\u0441\u0442\u0438 '" + expressionToString(originalExpression) + "' \u043A " + toString(this.nameRu);
          this.addTaskRulePacksToDescriptionRu_0(this.rules);
        }

        if (this.descriptionEn == null) {
          this.descriptionEn = "Relate '" + expressionToString(originalExpression) + "' to " + toString(this.nameEn);
          this.addTaskRulePacksToDescriptionEn_0(this.rules);
        }

        break;
    }
    var $receiver_0 = this.domainConditionDescription;
    if (!($receiver_0 == null || isBlank($receiver_0))) {
      this.descriptionShortEn = this.descriptionShortEn + (' if ' + toString(this.domainConditionDescription));
      this.descriptionEn = this.descriptionEn + (' if ' + toString(this.domainConditionDescription));
      this.descriptionShortRu = this.descriptionShortRu + (', \u0435\u0441\u043B\u0438 ' + toString(this.domainConditionDescriptionRu));
      this.descriptionRu = this.descriptionRu + (', \u0435\u0441\u043B\u0438 ' + toString(this.domainConditionDescriptionRu));
    }
     else {
      var $receiver_1 = this.domainConditionDescriptionEn;
      if (!($receiver_1 == null || isBlank($receiver_1))) {
        this.descriptionShortEn = this.descriptionShortEn + (' ' + toString(this.domainConditionDescriptionEn));
        this.descriptionEn = this.descriptionEn + (' ' + toString(this.domainConditionDescriptionEn));
      }
      var $receiver_2 = this.domainConditionDescriptionRu;
      if (!($receiver_2 == null || isBlank($receiver_2))) {
        this.descriptionShortRu = this.descriptionShortRu + (' ' + toString(this.domainConditionDescriptionRu));
        this.descriptionRu = this.descriptionRu + (' ' + toString(this.domainConditionDescriptionRu));
      }
    }
    this.enrichTags();
  }
  function TaskITR$addTaskRulePacksToDescriptionRu$lambda(it) {
    return "'" + structureStringToString(ensureNotNull(it.leftStructureString)) + ' = ' + structureStringToString(ensureNotNull(it.rightStructureString)) + "'";
  }
  TaskITR.prototype.addTaskRulePacksToDescriptionRu_0 = function (rules) {
    if ((rules != null ? !rules.isEmpty() : null) === true) {
      this.descriptionRu = this.descriptionRu + (', \u0435\u0441\u043B\u0438 ' + joinToString(rules, ' \u0438 ', void 0, void 0, void 0, void 0, TaskITR$addTaskRulePacksToDescriptionRu$lambda));
    }
  };
  function TaskITR$addTaskRulePacksToDescriptionEn$lambda(it) {
    return "'" + structureStringToString(ensureNotNull(it.leftStructureString)) + ' = ' + structureStringToString(ensureNotNull(it.rightStructureString)) + "'";
  }
  TaskITR.prototype.addTaskRulePacksToDescriptionEn_0 = function (rules) {
    if ((rules != null ? !rules.isEmpty() : null) === true) {
      this.descriptionEn = this.descriptionEn + (' if ' + joinToString(rules, ' and ', void 0, void 0, void 0, void 0, TaskITR$addTaskRulePacksToDescriptionEn$lambda));
    }
  };
  function TaskITR$addTaskRulePacksToDescriptionShortRu$lambda(it) {
    return "'" + structureStringToString(ensureNotNull(it.leftStructureString)) + ' = ' + structureStringToString(ensureNotNull(it.rightStructureString)) + "'";
  }
  TaskITR.prototype.addTaskRulePacksToDescriptionShortRu_0 = function (rules) {
    if ((rules != null ? !rules.isEmpty() : null) === true) {
      this.descriptionShortRu = this.descriptionShortRu + (', \u0435\u0441\u043B\u0438 ' + joinToString(rules, ' \u0438 ', void 0, void 0, void 0, void 0, TaskITR$addTaskRulePacksToDescriptionShortRu$lambda));
    }
  };
  function TaskITR$addTaskRulePacksToDescriptionShortEn$lambda(it) {
    return "'" + structureStringToString(ensureNotNull(it.leftStructureString)) + ' = ' + structureStringToString(ensureNotNull(it.rightStructureString)) + "'";
  }
  TaskITR.prototype.addTaskRulePacksToDescriptionShortEn_0 = function (rules) {
    if ((rules != null ? !rules.isEmpty() : null) === true) {
      this.descriptionShortEn = this.descriptionShortEn + (' if ' + joinToString(rules, ' and ', void 0, void 0, void 0, void 0, TaskITR$addTaskRulePacksToDescriptionShortEn$lambda));
    }
  };
  TaskITR.prototype.enrichTags = function () {
    var tmp$, tmp$_0;
    switch (this.goalType) {
      case 'expression':
        this.tags.add_11rb$(TaskTagCode$PROOF_getInstance().code);
        break;
      case 'custom':
        switch (this.goalPattern) {
          case '?:0:?:?N':
          case '?:0:?:?R':
            this.tags.add_11rb$(TaskTagCode$COMPUTATION_getInstance().code);
            break;
        }

        break;
      default:if (this.goalType != null)
          this.tags.add_11rb$(ensureNotNull(this.goalType));
        break;
    }
    if (this.originalExpressionStructureString != null) {
      tmp$ = structureStringToExpression(this.originalExpressionStructureString);
    }
     else
      tmp$ = new ExpressionNode(NodeType$EMPTY_getInstance(), '');
    var originalExpression = tmp$;
    if (this.goalExpressionStructureString != null) {
      tmp$_0 = structureStringToExpression(this.goalExpressionStructureString);
    }
     else
      tmp$_0 = new ExpressionNode(NodeType$EMPTY_getInstance(), '');
    var goalExpression = tmp$_0;
    this.tags.addAll_brywnq$(originalExpression.getContainedFunctions());
    this.tags.addAll_brywnq$(goalExpression.getContainedFunctions());
    if (this.tags.contains_11rb$('sin') || this.tags.contains_11rb$('cos') || this.tags.contains_11rb$('tg') || this.tags.contains_11rb$('ctg')) {
      this.tags.add_11rb$(TaskTagCode$TRIGONOMETRY_getInstance().code);
    }
    if (this.tags.contains_11rb$('asin') || this.tags.contains_11rb$('acos') || this.tags.contains_11rb$('atg') || this.tags.contains_11rb$('actg')) {
      this.tags.add_11rb$(TaskTagCode$TRIGONOMETRY_getInstance().code);
      this.tags.add_11rb$(TaskTagCode$INVERSE_TRIGONOMETRY_getInstance().code);
    }
    if (this.tags.contains_11rb$('ln') || this.tags.contains_11rb$('log')) {
      this.tags.add_11rb$(TaskTagCode$LOGARITHM_getInstance().code);
    }
    this.tags.remove_11rb$('+');
    this.tags.remove_11rb$('-');
    this.tags.remove_11rb$('*');
    this.tags.remove_11rb$('/');
  };
  TaskITR.prototype.cloneBesidesMaps_61zpoe$ = function (newNamespaceCode) {
    var tmp$, tmp$_0;
    tmp$ = concatNamespaceAndCode(newNamespaceCode, this.code);
    var tmp$_1;
    if ((tmp$_0 = this.rulePacks) != null) {
      var destination = ArrayList_init_0(collectionSizeOrDefault(tmp$_0, 10));
      var tmp$_2;
      tmp$_2 = tmp$_0.iterator();
      while (tmp$_2.hasNext()) {
        var item = tmp$_2.next();
        destination.add_11rb$(item.copy_rkkr90$(newNamespaceCode, concatNamespaceAndCode(newNamespaceCode, item.rulePackCode)));
      }
      tmp$_1 = destination;
    }
     else
      tmp$_1 = null;
    return this.copy_eb9u9i$(void 0, tmp$, void 0, newNamespaceCode, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, tmp$_1);
  };
  function TaskITR_init$lambda(it) {
    return it.variableName;
  }
  function TaskITR_init$lambda_0(it) {
    return it.variableName;
  }
  function TaskITR_init$lambda_1(it) {
    return it.variableName;
  }
  function TaskITR_init$lambda_2(it) {
    return it.variableName;
  }
  function TaskITR_init$lambda_3(it) {
    return it.variableName;
  }
  function TaskITR_init$lambda_4(it) {
    return it.variableName;
  }
  function TaskITR_init$lambda_5(it) {
    return it.variableName;
  }
  function TaskITR_init$lambda_6(it) {
    return it.variableName;
  }
  TaskITR.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TaskITR',
    interfaces: []
  };
  TaskITR.prototype.component1 = function () {
    return this.taskCreationType;
  };
  TaskITR.prototype.component2 = function () {
    return this.code;
  };
  TaskITR.prototype.component3 = function () {
    return this.version;
  };
  TaskITR.prototype.component4 = function () {
    return this.namespaceCode;
  };
  TaskITR.prototype.component5 = function () {
    return this.nameEn;
  };
  TaskITR.prototype.component6 = function () {
    return this.nameRu;
  };
  TaskITR.prototype.component7 = function () {
    return this.descriptionShortEn;
  };
  TaskITR.prototype.component8 = function () {
    return this.descriptionShortRu;
  };
  TaskITR.prototype.component9 = function () {
    return this.descriptionEn;
  };
  TaskITR.prototype.component10 = function () {
    return this.descriptionRu;
  };
  TaskITR.prototype.component11 = function () {
    return this.subjectType;
  };
  TaskITR.prototype.component12 = function () {
    return this.tags;
  };
  TaskITR.prototype.component13 = function () {
    return this.originalExpressionStructureString;
  };
  TaskITR.prototype.component14 = function () {
    return this.originalExpressionTex;
  };
  TaskITR.prototype.component15 = function () {
    return this.originalExpressionPlainText;
  };
  TaskITR.prototype.component16 = function () {
    return this.goalType;
  };
  TaskITR.prototype.component17 = function () {
    return this.goalExpressionStructureString;
  };
  TaskITR.prototype.component18 = function () {
    return this.goalExpressionTex;
  };
  TaskITR.prototype.component19 = function () {
    return this.goalExpressionPlainText;
  };
  TaskITR.prototype.component20 = function () {
    return this.goalPattern;
  };
  TaskITR.prototype.component21 = function () {
    return this.goalNumberProperty;
  };
  TaskITR.prototype.component22 = function () {
    return this.otherGoalData;
  };
  TaskITR.prototype.component23 = function () {
    return this.rulePacks;
  };
  TaskITR.prototype.component24 = function () {
    return this.rules;
  };
  TaskITR.prototype.component25 = function () {
    return this.stepsNumber;
  };
  TaskITR.prototype.component26 = function () {
    return this.time;
  };
  TaskITR.prototype.component27 = function () {
    return this.difficulty;
  };
  TaskITR.prototype.component28 = function () {
    return this.targetDifficulty;
  };
  TaskITR.prototype.component29 = function () {
    return this.solutionPlainText;
  };
  TaskITR.prototype.component30 = function () {
    return this.solutionsStepsTree;
  };
  TaskITR.prototype.component31 = function () {
    return this.hints;
  };
  TaskITR.prototype.component32 = function () {
    return this.otherCheckSolutionData;
  };
  TaskITR.prototype.component33 = function () {
    return this.countOfAutoGeneratedTasks;
  };
  TaskITR.prototype.component34 = function () {
    return this.otherAutoGenerationData;
  };
  TaskITR.prototype.component35 = function () {
    return this.interestingFacts;
  };
  TaskITR.prototype.component36 = function () {
    return this.otherAwardData;
  };
  TaskITR.prototype.component37 = function () {
    return this.nextRecommendedTasks;
  };
  TaskITR.prototype.component38 = function () {
    return this.otherData;
  };
  TaskITR.prototype.component39 = function () {
    return this.comment;
  };
  TaskITR.prototype.component40 = function () {
    return this.domainConditionDescription;
  };
  TaskITR.prototype.component41 = function () {
    return this.domainConditionDescriptionEn;
  };
  TaskITR.prototype.component42 = function () {
    return this.domainConditionDescriptionRu;
  };
  TaskITR.prototype.component43 = function () {
    return this.expressionTaskIntermediateData;
  };
  TaskITR.prototype.copy_eb9u9i$ = function (taskCreationType, code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, originalExpressionStructureString, originalExpressionTex, originalExpressionPlainText, goalType, goalExpressionStructureString, goalExpressionTex, goalExpressionPlainText, goalPattern, goalNumberProperty, otherGoalData, rulePacks, rules, stepsNumber, time, difficulty, targetDifficulty, solutionPlainText, solutionsStepsTree, hints, otherCheckSolutionData, countOfAutoGeneratedTasks, otherAutoGenerationData, interestingFacts, otherAwardData, nextRecommendedTasks, otherData, comment, domainConditionDescription, domainConditionDescriptionEn, domainConditionDescriptionRu, expressionTaskIntermediateData) {
    return new TaskITR(taskCreationType === void 0 ? this.taskCreationType : taskCreationType, code === void 0 ? this.code : code, version === void 0 ? this.version : version, namespaceCode === void 0 ? this.namespaceCode : namespaceCode, nameEn === void 0 ? this.nameEn : nameEn, nameRu === void 0 ? this.nameRu : nameRu, descriptionShortEn === void 0 ? this.descriptionShortEn : descriptionShortEn, descriptionShortRu === void 0 ? this.descriptionShortRu : descriptionShortRu, descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, subjectType === void 0 ? this.subjectType : subjectType, tags === void 0 ? this.tags : tags, originalExpressionStructureString === void 0 ? this.originalExpressionStructureString : originalExpressionStructureString, originalExpressionTex === void 0 ? this.originalExpressionTex : originalExpressionTex, originalExpressionPlainText === void 0 ? this.originalExpressionPlainText : originalExpressionPlainText, goalType === void 0 ? this.goalType : goalType, goalExpressionStructureString === void 0 ? this.goalExpressionStructureString : goalExpressionStructureString, goalExpressionTex === void 0 ? this.goalExpressionTex : goalExpressionTex, goalExpressionPlainText === void 0 ? this.goalExpressionPlainText : goalExpressionPlainText, goalPattern === void 0 ? this.goalPattern : goalPattern, goalNumberProperty === void 0 ? this.goalNumberProperty : goalNumberProperty, otherGoalData === void 0 ? this.otherGoalData : otherGoalData, rulePacks === void 0 ? this.rulePacks : rulePacks, rules === void 0 ? this.rules : rules, stepsNumber === void 0 ? this.stepsNumber : stepsNumber, time === void 0 ? this.time : time, difficulty === void 0 ? this.difficulty : difficulty, targetDifficulty === void 0 ? this.targetDifficulty : targetDifficulty, solutionPlainText === void 0 ? this.solutionPlainText : solutionPlainText, solutionsStepsTree === void 0 ? this.solutionsStepsTree : solutionsStepsTree, hints === void 0 ? this.hints : hints, otherCheckSolutionData === void 0 ? this.otherCheckSolutionData : otherCheckSolutionData, countOfAutoGeneratedTasks === void 0 ? this.countOfAutoGeneratedTasks : countOfAutoGeneratedTasks, otherAutoGenerationData === void 0 ? this.otherAutoGenerationData : otherAutoGenerationData, interestingFacts === void 0 ? this.interestingFacts : interestingFacts, otherAwardData === void 0 ? this.otherAwardData : otherAwardData, nextRecommendedTasks === void 0 ? this.nextRecommendedTasks : nextRecommendedTasks, otherData === void 0 ? this.otherData : otherData, comment === void 0 ? this.comment : comment, domainConditionDescription === void 0 ? this.domainConditionDescription : domainConditionDescription, domainConditionDescriptionEn === void 0 ? this.domainConditionDescriptionEn : domainConditionDescriptionEn, domainConditionDescriptionRu === void 0 ? this.domainConditionDescriptionRu : domainConditionDescriptionRu, expressionTaskIntermediateData === void 0 ? this.expressionTaskIntermediateData : expressionTaskIntermediateData);
  };
  TaskITR.prototype.toString = function () {
    return 'TaskITR(taskCreationType=' + Kotlin.toString(this.taskCreationType) + (', code=' + Kotlin.toString(this.code)) + (', version=' + Kotlin.toString(this.version)) + (', namespaceCode=' + Kotlin.toString(this.namespaceCode)) + (', nameEn=' + Kotlin.toString(this.nameEn)) + (', nameRu=' + Kotlin.toString(this.nameRu)) + (', descriptionShortEn=' + Kotlin.toString(this.descriptionShortEn)) + (', descriptionShortRu=' + Kotlin.toString(this.descriptionShortRu)) + (', descriptionEn=' + Kotlin.toString(this.descriptionEn)) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', subjectType=' + Kotlin.toString(this.subjectType)) + (', tags=' + Kotlin.toString(this.tags)) + (', originalExpressionStructureString=' + Kotlin.toString(this.originalExpressionStructureString)) + (', originalExpressionTex=' + Kotlin.toString(this.originalExpressionTex)) + (', originalExpressionPlainText=' + Kotlin.toString(this.originalExpressionPlainText)) + (', goalType=' + Kotlin.toString(this.goalType)) + (', goalExpressionStructureString=' + Kotlin.toString(this.goalExpressionStructureString)) + (', goalExpressionTex=' + Kotlin.toString(this.goalExpressionTex)) + (', goalExpressionPlainText=' + Kotlin.toString(this.goalExpressionPlainText)) + (', goalPattern=' + Kotlin.toString(this.goalPattern)) + (', goalNumberProperty=' + Kotlin.toString(this.goalNumberProperty)) + (', otherGoalData=' + Kotlin.toString(this.otherGoalData)) + (', rulePacks=' + Kotlin.toString(this.rulePacks)) + (', rules=' + Kotlin.toString(this.rules)) + (', stepsNumber=' + Kotlin.toString(this.stepsNumber)) + (', time=' + Kotlin.toString(this.time)) + (', difficulty=' + Kotlin.toString(this.difficulty)) + (', targetDifficulty=' + Kotlin.toString(this.targetDifficulty)) + (', solutionPlainText=' + Kotlin.toString(this.solutionPlainText)) + (', solutionsStepsTree=' + Kotlin.toString(this.solutionsStepsTree)) + (', hints=' + Kotlin.toString(this.hints)) + (', otherCheckSolutionData=' + Kotlin.toString(this.otherCheckSolutionData)) + (', countOfAutoGeneratedTasks=' + Kotlin.toString(this.countOfAutoGeneratedTasks)) + (', otherAutoGenerationData=' + Kotlin.toString(this.otherAutoGenerationData)) + (', interestingFacts=' + Kotlin.toString(this.interestingFacts)) + (', otherAwardData=' + Kotlin.toString(this.otherAwardData)) + (', nextRecommendedTasks=' + Kotlin.toString(this.nextRecommendedTasks)) + (', otherData=' + Kotlin.toString(this.otherData)) + (', comment=' + Kotlin.toString(this.comment)) + (', domainConditionDescription=' + Kotlin.toString(this.domainConditionDescription)) + (', domainConditionDescriptionEn=' + Kotlin.toString(this.domainConditionDescriptionEn)) + (', domainConditionDescriptionRu=' + Kotlin.toString(this.domainConditionDescriptionRu)) + (', expressionTaskIntermediateData=' + Kotlin.toString(this.expressionTaskIntermediateData)) + ')';
  };
  TaskITR.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.taskCreationType) | 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.version) | 0;
    result = result * 31 + Kotlin.hashCode(this.namespaceCode) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.subjectType) | 0;
    result = result * 31 + Kotlin.hashCode(this.tags) | 0;
    result = result * 31 + Kotlin.hashCode(this.originalExpressionStructureString) | 0;
    result = result * 31 + Kotlin.hashCode(this.originalExpressionTex) | 0;
    result = result * 31 + Kotlin.hashCode(this.originalExpressionPlainText) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalType) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalExpressionStructureString) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalExpressionTex) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalExpressionPlainText) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalPattern) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalNumberProperty) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherGoalData) | 0;
    result = result * 31 + Kotlin.hashCode(this.rulePacks) | 0;
    result = result * 31 + Kotlin.hashCode(this.rules) | 0;
    result = result * 31 + Kotlin.hashCode(this.stepsNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.difficulty) | 0;
    result = result * 31 + Kotlin.hashCode(this.targetDifficulty) | 0;
    result = result * 31 + Kotlin.hashCode(this.solutionPlainText) | 0;
    result = result * 31 + Kotlin.hashCode(this.solutionsStepsTree) | 0;
    result = result * 31 + Kotlin.hashCode(this.hints) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherCheckSolutionData) | 0;
    result = result * 31 + Kotlin.hashCode(this.countOfAutoGeneratedTasks) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherAutoGenerationData) | 0;
    result = result * 31 + Kotlin.hashCode(this.interestingFacts) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherAwardData) | 0;
    result = result * 31 + Kotlin.hashCode(this.nextRecommendedTasks) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherData) | 0;
    result = result * 31 + Kotlin.hashCode(this.comment) | 0;
    result = result * 31 + Kotlin.hashCode(this.domainConditionDescription) | 0;
    result = result * 31 + Kotlin.hashCode(this.domainConditionDescriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.domainConditionDescriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.expressionTaskIntermediateData) | 0;
    return result;
  };
  TaskITR.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.taskCreationType, other.taskCreationType) && Kotlin.equals(this.code, other.code) && Kotlin.equals(this.version, other.version) && Kotlin.equals(this.namespaceCode, other.namespaceCode) && Kotlin.equals(this.nameEn, other.nameEn) && Kotlin.equals(this.nameRu, other.nameRu) && Kotlin.equals(this.descriptionShortEn, other.descriptionShortEn) && Kotlin.equals(this.descriptionShortRu, other.descriptionShortRu) && Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.subjectType, other.subjectType) && Kotlin.equals(this.tags, other.tags) && Kotlin.equals(this.originalExpressionStructureString, other.originalExpressionStructureString) && Kotlin.equals(this.originalExpressionTex, other.originalExpressionTex) && Kotlin.equals(this.originalExpressionPlainText, other.originalExpressionPlainText) && Kotlin.equals(this.goalType, other.goalType) && Kotlin.equals(this.goalExpressionStructureString, other.goalExpressionStructureString) && Kotlin.equals(this.goalExpressionTex, other.goalExpressionTex) && Kotlin.equals(this.goalExpressionPlainText, other.goalExpressionPlainText) && Kotlin.equals(this.goalPattern, other.goalPattern) && Kotlin.equals(this.goalNumberProperty, other.goalNumberProperty) && Kotlin.equals(this.otherGoalData, other.otherGoalData) && Kotlin.equals(this.rulePacks, other.rulePacks) && Kotlin.equals(this.rules, other.rules) && Kotlin.equals(this.stepsNumber, other.stepsNumber) && Kotlin.equals(this.time, other.time) && Kotlin.equals(this.difficulty, other.difficulty) && Kotlin.equals(this.targetDifficulty, other.targetDifficulty) && Kotlin.equals(this.solutionPlainText, other.solutionPlainText) && Kotlin.equals(this.solutionsStepsTree, other.solutionsStepsTree) && Kotlin.equals(this.hints, other.hints) && Kotlin.equals(this.otherCheckSolutionData, other.otherCheckSolutionData) && Kotlin.equals(this.countOfAutoGeneratedTasks, other.countOfAutoGeneratedTasks) && Kotlin.equals(this.otherAutoGenerationData, other.otherAutoGenerationData) && Kotlin.equals(this.interestingFacts, other.interestingFacts) && Kotlin.equals(this.otherAwardData, other.otherAwardData) && Kotlin.equals(this.nextRecommendedTasks, other.nextRecommendedTasks) && Kotlin.equals(this.otherData, other.otherData) && Kotlin.equals(this.comment, other.comment) && Kotlin.equals(this.domainConditionDescription, other.domainConditionDescription) && Kotlin.equals(this.domainConditionDescriptionEn, other.domainConditionDescriptionEn) && Kotlin.equals(this.domainConditionDescriptionRu, other.domainConditionDescriptionRu) && Kotlin.equals(this.expressionTaskIntermediateData, other.expressionTaskIntermediateData)))));
  };
  function TaskSetITR(code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, recommendedByCommunity, otherData, tasks) {
    if (code === void 0)
      code = null;
    if (version === void 0)
      version = 0;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = 'standard_math';
    if (tags === void 0) {
      tags = LinkedHashSet_init();
    }
    if (recommendedByCommunity === void 0)
      recommendedByCommunity = null;
    if (otherData === void 0)
      otherData = null;
    if (tasks === void 0)
      tasks = null;
    this.code = code;
    this.version = version;
    this.namespaceCode = namespaceCode;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionShortEn = descriptionShortEn;
    this.descriptionShortRu = descriptionShortRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.subjectType = subjectType;
    this.tags = tags;
    this.recommendedByCommunity = recommendedByCommunity;
    this.otherData = otherData;
    this.tasks = tasks;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.tasks != null) {
      tmp$ = get_lastIndex(this.tasks);
      for (var i = 0; i <= tmp$; i++) {
        var $receiver = this.tasks.get_za3lpa$(i).code;
        if ($receiver == null || isBlank($receiver)) {
          this.tasks.get_za3lpa$(i).code = this.code + taskSetCodeAndCodeDivider + ((i + 1 | 0).toString() + '_' + ((tmp$_1 = (tmp$_0 = this.tasks.get_za3lpa$(i).nameEn) != null ? toCustomCodeSuffixPart(tmp$_0) : null) != null ? tmp$_1 : 'x'));
        }
        if (((tmp$_2 = this.tasks.get_za3lpa$(i).nameRu) != null ? startsWith(tmp$_2, '\u0423\u0440\u043E\u0432\u0435\u043D\u044C') : null) === false) {
          this.tasks.get_za3lpa$(i).nameRu = '\u0423\u0440\u043E\u0432\u0435\u043D\u044C ' + (i + 1 | 0) + ' ' + toString(this.tasks.get_za3lpa$(i).nameRu);
        }
        if (((tmp$_3 = this.tasks.get_za3lpa$(i).nameEn) != null ? startsWith(tmp$_3, 'Level') : null) === false) {
          this.tasks.get_za3lpa$(i).nameEn = 'Level ' + (i + 1 | 0) + ' ' + toString(this.tasks.get_za3lpa$(i).nameEn);
        }
      }
    }
  }
  TaskSetITR.prototype.cloneBesidesMaps_61zpoe$ = function (newNamespaceCode) {
    var tmp$, tmp$_0;
    tmp$ = concatNamespaceAndCode(newNamespaceCode, this.code);
    var tmp$_1;
    if ((tmp$_0 = this.tasks) != null) {
      var destination = ArrayList_init_0(collectionSizeOrDefault(tmp$_0, 10));
      var tmp$_2;
      tmp$_2 = tmp$_0.iterator();
      while (tmp$_2.hasNext()) {
        var item = tmp$_2.next();
        destination.add_11rb$(item.cloneBesidesMaps_61zpoe$(newNamespaceCode));
      }
      tmp$_1 = destination;
    }
     else
      tmp$_1 = null;
    return this.copy_si2cfw$(tmp$, void 0, newNamespaceCode, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, tmp$_1);
  };
  TaskSetITR.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TaskSetITR',
    interfaces: []
  };
  TaskSetITR.prototype.component1 = function () {
    return this.code;
  };
  TaskSetITR.prototype.component2 = function () {
    return this.version;
  };
  TaskSetITR.prototype.component3 = function () {
    return this.namespaceCode;
  };
  TaskSetITR.prototype.component4 = function () {
    return this.nameEn;
  };
  TaskSetITR.prototype.component5 = function () {
    return this.nameRu;
  };
  TaskSetITR.prototype.component6 = function () {
    return this.descriptionShortEn;
  };
  TaskSetITR.prototype.component7 = function () {
    return this.descriptionShortRu;
  };
  TaskSetITR.prototype.component8 = function () {
    return this.descriptionEn;
  };
  TaskSetITR.prototype.component9 = function () {
    return this.descriptionRu;
  };
  TaskSetITR.prototype.component10 = function () {
    return this.subjectType;
  };
  TaskSetITR.prototype.component11 = function () {
    return this.tags;
  };
  TaskSetITR.prototype.component12 = function () {
    return this.recommendedByCommunity;
  };
  TaskSetITR.prototype.component13 = function () {
    return this.otherData;
  };
  TaskSetITR.prototype.component14 = function () {
    return this.tasks;
  };
  TaskSetITR.prototype.copy_si2cfw$ = function (code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, recommendedByCommunity, otherData, tasks) {
    return new TaskSetITR(code === void 0 ? this.code : code, version === void 0 ? this.version : version, namespaceCode === void 0 ? this.namespaceCode : namespaceCode, nameEn === void 0 ? this.nameEn : nameEn, nameRu === void 0 ? this.nameRu : nameRu, descriptionShortEn === void 0 ? this.descriptionShortEn : descriptionShortEn, descriptionShortRu === void 0 ? this.descriptionShortRu : descriptionShortRu, descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, subjectType === void 0 ? this.subjectType : subjectType, tags === void 0 ? this.tags : tags, recommendedByCommunity === void 0 ? this.recommendedByCommunity : recommendedByCommunity, otherData === void 0 ? this.otherData : otherData, tasks === void 0 ? this.tasks : tasks);
  };
  TaskSetITR.prototype.toString = function () {
    return 'TaskSetITR(code=' + Kotlin.toString(this.code) + (', version=' + Kotlin.toString(this.version)) + (', namespaceCode=' + Kotlin.toString(this.namespaceCode)) + (', nameEn=' + Kotlin.toString(this.nameEn)) + (', nameRu=' + Kotlin.toString(this.nameRu)) + (', descriptionShortEn=' + Kotlin.toString(this.descriptionShortEn)) + (', descriptionShortRu=' + Kotlin.toString(this.descriptionShortRu)) + (', descriptionEn=' + Kotlin.toString(this.descriptionEn)) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', subjectType=' + Kotlin.toString(this.subjectType)) + (', tags=' + Kotlin.toString(this.tags)) + (', recommendedByCommunity=' + Kotlin.toString(this.recommendedByCommunity)) + (', otherData=' + Kotlin.toString(this.otherData)) + (', tasks=' + Kotlin.toString(this.tasks)) + ')';
  };
  TaskSetITR.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.version) | 0;
    result = result * 31 + Kotlin.hashCode(this.namespaceCode) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.subjectType) | 0;
    result = result * 31 + Kotlin.hashCode(this.tags) | 0;
    result = result * 31 + Kotlin.hashCode(this.recommendedByCommunity) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherData) | 0;
    result = result * 31 + Kotlin.hashCode(this.tasks) | 0;
    return result;
  };
  TaskSetITR.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.code, other.code) && Kotlin.equals(this.version, other.version) && Kotlin.equals(this.namespaceCode, other.namespaceCode) && Kotlin.equals(this.nameEn, other.nameEn) && Kotlin.equals(this.nameRu, other.nameRu) && Kotlin.equals(this.descriptionShortEn, other.descriptionShortEn) && Kotlin.equals(this.descriptionShortRu, other.descriptionShortRu) && Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.subjectType, other.subjectType) && Kotlin.equals(this.tags, other.tags) && Kotlin.equals(this.recommendedByCommunity, other.recommendedByCommunity) && Kotlin.equals(this.otherData, other.otherData) && Kotlin.equals(this.tasks, other.tasks)))));
  };
  function RulePackLinkITR(namespaceCode, rulePackCode) {
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (rulePackCode === void 0)
      rulePackCode = null;
    this.namespaceCode = namespaceCode;
    this.rulePackCode = rulePackCode;
  }
  RulePackLinkITR.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RulePackLinkITR',
    interfaces: []
  };
  RulePackLinkITR.prototype.component1 = function () {
    return this.namespaceCode;
  };
  RulePackLinkITR.prototype.component2 = function () {
    return this.rulePackCode;
  };
  RulePackLinkITR.prototype.copy_rkkr90$ = function (namespaceCode, rulePackCode) {
    return new RulePackLinkITR(namespaceCode === void 0 ? this.namespaceCode : namespaceCode, rulePackCode === void 0 ? this.rulePackCode : rulePackCode);
  };
  RulePackLinkITR.prototype.toString = function () {
    return 'RulePackLinkITR(namespaceCode=' + Kotlin.toString(this.namespaceCode) + (', rulePackCode=' + Kotlin.toString(this.rulePackCode)) + ')';
  };
  RulePackLinkITR.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.namespaceCode) | 0;
    result = result * 31 + Kotlin.hashCode(this.rulePackCode) | 0;
    return result;
  };
  RulePackLinkITR.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.namespaceCode, other.namespaceCode) && Kotlin.equals(this.rulePackCode, other.rulePackCode)))));
  };
  function RulePackITR(code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, rulePacks, rules, otherCheckSolutionData, otherAutoGenerationData, otherData) {
    if (code === void 0)
      code = null;
    if (version === void 0)
      version = 0;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = 'standard_math';
    if (rulePacks === void 0)
      rulePacks = null;
    if (rules === void 0)
      rules = null;
    if (otherCheckSolutionData === void 0)
      otherCheckSolutionData = null;
    if (otherAutoGenerationData === void 0)
      otherAutoGenerationData = null;
    if (otherData === void 0)
      otherData = null;
    this.code = code;
    this.version = version;
    this.namespaceCode = namespaceCode;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionShortEn = descriptionShortEn;
    this.descriptionShortRu = descriptionShortRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.subjectType = subjectType;
    this.rulePacks = rulePacks;
    this.rules = rules;
    this.otherCheckSolutionData = otherCheckSolutionData;
    this.otherAutoGenerationData = otherAutoGenerationData;
    this.otherData = otherData;
  }
  RulePackITR.prototype.cloneBesidesMaps_61zpoe$ = function (newNamespaceCode) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = concatNamespaceAndCode(newNamespaceCode, this.code);
    var tmp$_3;
    if ((tmp$_0 = this.rulePacks) != null) {
      var destination = ArrayList_init_0(collectionSizeOrDefault(tmp$_0, 10));
      var tmp$_4;
      tmp$_4 = tmp$_0.iterator();
      while (tmp$_4.hasNext()) {
        var item = tmp$_4.next();
        destination.add_11rb$(item.copy_rkkr90$(newNamespaceCode, concatNamespaceAndCode(newNamespaceCode, item.rulePackCode)));
      }
      tmp$_3 = destination;
    }
     else
      tmp$_3 = null;
    tmp$_1 = tmp$_3;
    var tmp$_5;
    if ((tmp$_2 = this.rules) != null) {
      var destination_0 = ArrayList_init_0(collectionSizeOrDefault(tmp$_2, 10));
      var tmp$_6;
      tmp$_6 = tmp$_2.iterator();
      while (tmp$_6.hasNext()) {
        var item_0 = tmp$_6.next();
        destination_0.add_11rb$(item_0.copy_wic270$());
      }
      tmp$_5 = destination_0;
    }
     else
      tmp$_5 = null;
    return this.copy_65vnc2$(tmp$, void 0, newNamespaceCode, void 0, void 0, void 0, void 0, void 0, void 0, void 0, tmp$_1, tmp$_5);
  };
  RulePackITR.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RulePackITR',
    interfaces: []
  };
  RulePackITR.prototype.component1 = function () {
    return this.code;
  };
  RulePackITR.prototype.component2 = function () {
    return this.version;
  };
  RulePackITR.prototype.component3 = function () {
    return this.namespaceCode;
  };
  RulePackITR.prototype.component4 = function () {
    return this.nameEn;
  };
  RulePackITR.prototype.component5 = function () {
    return this.nameRu;
  };
  RulePackITR.prototype.component6 = function () {
    return this.descriptionShortEn;
  };
  RulePackITR.prototype.component7 = function () {
    return this.descriptionShortRu;
  };
  RulePackITR.prototype.component8 = function () {
    return this.descriptionEn;
  };
  RulePackITR.prototype.component9 = function () {
    return this.descriptionRu;
  };
  RulePackITR.prototype.component10 = function () {
    return this.subjectType;
  };
  RulePackITR.prototype.component11 = function () {
    return this.rulePacks;
  };
  RulePackITR.prototype.component12 = function () {
    return this.rules;
  };
  RulePackITR.prototype.component13 = function () {
    return this.otherCheckSolutionData;
  };
  RulePackITR.prototype.component14 = function () {
    return this.otherAutoGenerationData;
  };
  RulePackITR.prototype.component15 = function () {
    return this.otherData;
  };
  RulePackITR.prototype.copy_65vnc2$ = function (code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, rulePacks, rules, otherCheckSolutionData, otherAutoGenerationData, otherData) {
    return new RulePackITR(code === void 0 ? this.code : code, version === void 0 ? this.version : version, namespaceCode === void 0 ? this.namespaceCode : namespaceCode, nameEn === void 0 ? this.nameEn : nameEn, nameRu === void 0 ? this.nameRu : nameRu, descriptionShortEn === void 0 ? this.descriptionShortEn : descriptionShortEn, descriptionShortRu === void 0 ? this.descriptionShortRu : descriptionShortRu, descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, subjectType === void 0 ? this.subjectType : subjectType, rulePacks === void 0 ? this.rulePacks : rulePacks, rules === void 0 ? this.rules : rules, otherCheckSolutionData === void 0 ? this.otherCheckSolutionData : otherCheckSolutionData, otherAutoGenerationData === void 0 ? this.otherAutoGenerationData : otherAutoGenerationData, otherData === void 0 ? this.otherData : otherData);
  };
  RulePackITR.prototype.toString = function () {
    return 'RulePackITR(code=' + Kotlin.toString(this.code) + (', version=' + Kotlin.toString(this.version)) + (', namespaceCode=' + Kotlin.toString(this.namespaceCode)) + (', nameEn=' + Kotlin.toString(this.nameEn)) + (', nameRu=' + Kotlin.toString(this.nameRu)) + (', descriptionShortEn=' + Kotlin.toString(this.descriptionShortEn)) + (', descriptionShortRu=' + Kotlin.toString(this.descriptionShortRu)) + (', descriptionEn=' + Kotlin.toString(this.descriptionEn)) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', subjectType=' + Kotlin.toString(this.subjectType)) + (', rulePacks=' + Kotlin.toString(this.rulePacks)) + (', rules=' + Kotlin.toString(this.rules)) + (', otherCheckSolutionData=' + Kotlin.toString(this.otherCheckSolutionData)) + (', otherAutoGenerationData=' + Kotlin.toString(this.otherAutoGenerationData)) + (', otherData=' + Kotlin.toString(this.otherData)) + ')';
  };
  RulePackITR.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.version) | 0;
    result = result * 31 + Kotlin.hashCode(this.namespaceCode) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.subjectType) | 0;
    result = result * 31 + Kotlin.hashCode(this.rulePacks) | 0;
    result = result * 31 + Kotlin.hashCode(this.rules) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherCheckSolutionData) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherAutoGenerationData) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherData) | 0;
    return result;
  };
  RulePackITR.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.code, other.code) && Kotlin.equals(this.version, other.version) && Kotlin.equals(this.namespaceCode, other.namespaceCode) && Kotlin.equals(this.nameEn, other.nameEn) && Kotlin.equals(this.nameRu, other.nameRu) && Kotlin.equals(this.descriptionShortEn, other.descriptionShortEn) && Kotlin.equals(this.descriptionShortRu, other.descriptionShortRu) && Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.subjectType, other.subjectType) && Kotlin.equals(this.rulePacks, other.rulePacks) && Kotlin.equals(this.rules, other.rules) && Kotlin.equals(this.otherCheckSolutionData, other.otherCheckSolutionData) && Kotlin.equals(this.otherAutoGenerationData, other.otherAutoGenerationData) && Kotlin.equals(this.otherData, other.otherData)))));
  };
  function GameITR(taskSet, rulePacks) {
    this.taskSet = taskSet;
    this.rulePacks = rulePacks;
  }
  GameITR.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GameITR',
    interfaces: []
  };
  GameITR.prototype.component1 = function () {
    return this.taskSet;
  };
  GameITR.prototype.component2 = function () {
    return this.rulePacks;
  };
  GameITR.prototype.copy_xpljsf$ = function (taskSet, rulePacks) {
    return new GameITR(taskSet === void 0 ? this.taskSet : taskSet, rulePacks === void 0 ? this.rulePacks : rulePacks);
  };
  GameITR.prototype.toString = function () {
    return 'GameITR(taskSet=' + Kotlin.toString(this.taskSet) + (', rulePacks=' + Kotlin.toString(this.rulePacks)) + ')';
  };
  GameITR.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.taskSet) | 0;
    result = result * 31 + Kotlin.hashCode(this.rulePacks) | 0;
    return result;
  };
  GameITR.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.taskSet, other.taskSet) && Kotlin.equals(this.rulePacks, other.rulePacks)))));
  };
  function VariableReplacementRule(left, right) {
    this.left = left;
    this.right = right;
  }
  VariableReplacementRule.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VariableReplacementRule',
    interfaces: []
  };
  VariableReplacementRule.prototype.component1 = function () {
    return this.left;
  };
  VariableReplacementRule.prototype.component2 = function () {
    return this.right;
  };
  VariableReplacementRule.prototype.copy_puj7f4$ = function (left, right) {
    return new VariableReplacementRule(left === void 0 ? this.left : left, right === void 0 ? this.right : right);
  };
  VariableReplacementRule.prototype.toString = function () {
    return 'VariableReplacementRule(left=' + Kotlin.toString(this.left) + (', right=' + Kotlin.toString(this.right)) + ')';
  };
  VariableReplacementRule.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.left) | 0;
    result = result * 31 + Kotlin.hashCode(this.right) | 0;
    return result;
  };
  VariableReplacementRule.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.left, other.left) && Kotlin.equals(this.right, other.right)))));
  };
  var PI_STRING;
  var PI_STRING_ASCII;
  var PI_STRING_UNICODE;
  var PI_STRING_TEX;
  var E_STRING;
  var E_STRING_UNICODE;
  var PI_STRING_USUAL;
  var E_STRING_USUAL;
  function VariableConfiguration() {
    this.variableImmediateReplacementRules = listOf_0([new VariableReplacementRule('e', E_STRING), new VariableReplacementRule('pi', PI_STRING), new VariableReplacementRule('\u03C0', PI_STRING), new VariableReplacementRule('&#x3C0', PI_STRING), new VariableReplacementRule('&#x3C0;', PI_STRING)]);
    var $receiver = this.variableImmediateReplacementRules;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(new Pair(item.left, item.right));
    }
    this.variableImmediateReplacementMap = toMap(destination);
  }
  VariableConfiguration.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VariableConfiguration',
    interfaces: []
  };
  function ExpressionFrontInput(expression, format) {
    this.expression = expression;
    this.format = format;
  }
  ExpressionFrontInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionFrontInput',
    interfaces: []
  };
  ExpressionFrontInput.prototype.component1 = function () {
    return this.expression;
  };
  ExpressionFrontInput.prototype.component2 = function () {
    return this.format;
  };
  ExpressionFrontInput.prototype.copy_puj7f4$ = function (expression, format) {
    return new ExpressionFrontInput(expression === void 0 ? this.expression : expression, format === void 0 ? this.format : format);
  };
  ExpressionFrontInput.prototype.toString = function () {
    return 'ExpressionFrontInput(expression=' + Kotlin.toString(this.expression) + (', format=' + Kotlin.toString(this.format)) + ')';
  };
  ExpressionFrontInput.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.expression) | 0;
    result = result * 31 + Kotlin.hashCode(this.format) | 0;
    return result;
  };
  ExpressionFrontInput.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.expression, other.expression) && Kotlin.equals(this.format, other.format)))));
  };
  function toStructureStructureString($receiver, subjectType) {
    var tmp$, tmp$_0;
    switch (subjectType) {
      case 'logic':
      case 'set':
        tmp$ = 'setTheory';
        break;
      default:tmp$ = '';
        break;
    }
    var scope = tmp$;
    switch ($receiver.format) {
      case 'STRUCTURE_STRING':
        tmp$_0 = $receiver.expression;
        break;
      case 'TEX':
        var expressionNode = stringToExpression($receiver.expression, scope);
        tmp$_0 = expressionToStructureString(expressionNode);
        break;
      case 'PLAIN_TEXT':
        var expressionNode_0 = stringToExpression($receiver.expression, scope, true);
        tmp$_0 = expressionToStructureString(expressionNode_0);
        break;
      default:tmp$_0 = $receiver.expression;
        break;
    }
    return tmp$_0;
  }
  function RuleFrontInput(code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, left, right, priority, isExtending, matchJumbledAndNested, simpleAdditional, basedOnTaskContext, normalizationType, weight) {
    if (code === void 0)
      code = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (left === void 0)
      left = null;
    if (right === void 0)
      right = null;
    if (priority === void 0)
      priority = null;
    if (isExtending === void 0)
      isExtending = null;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = null;
    if (simpleAdditional === void 0)
      simpleAdditional = null;
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = null;
    if (normalizationType === void 0)
      normalizationType = null;
    if (weight === void 0)
      weight = null;
    this.code = code;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionShortEn = descriptionShortEn;
    this.descriptionShortRu = descriptionShortRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.left = left;
    this.right = right;
    this.priority = priority;
    this.isExtending = isExtending;
    this.matchJumbledAndNested = matchJumbledAndNested;
    this.simpleAdditional = simpleAdditional;
    this.basedOnTaskContext = basedOnTaskContext;
    this.normalizationType = normalizationType;
    this.weight = weight;
  }
  RuleFrontInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RuleFrontInput',
    interfaces: []
  };
  RuleFrontInput.prototype.component1 = function () {
    return this.code;
  };
  RuleFrontInput.prototype.component2 = function () {
    return this.nameEn;
  };
  RuleFrontInput.prototype.component3 = function () {
    return this.nameRu;
  };
  RuleFrontInput.prototype.component4 = function () {
    return this.descriptionShortEn;
  };
  RuleFrontInput.prototype.component5 = function () {
    return this.descriptionShortRu;
  };
  RuleFrontInput.prototype.component6 = function () {
    return this.descriptionEn;
  };
  RuleFrontInput.prototype.component7 = function () {
    return this.descriptionRu;
  };
  RuleFrontInput.prototype.component8 = function () {
    return this.left;
  };
  RuleFrontInput.prototype.component9 = function () {
    return this.right;
  };
  RuleFrontInput.prototype.component10 = function () {
    return this.priority;
  };
  RuleFrontInput.prototype.component11 = function () {
    return this.isExtending;
  };
  RuleFrontInput.prototype.component12 = function () {
    return this.matchJumbledAndNested;
  };
  RuleFrontInput.prototype.component13 = function () {
    return this.simpleAdditional;
  };
  RuleFrontInput.prototype.component14 = function () {
    return this.basedOnTaskContext;
  };
  RuleFrontInput.prototype.component15 = function () {
    return this.normalizationType;
  };
  RuleFrontInput.prototype.component16 = function () {
    return this.weight;
  };
  RuleFrontInput.prototype.copy_7lmduo$ = function (code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, left, right, priority, isExtending, matchJumbledAndNested, simpleAdditional, basedOnTaskContext, normalizationType, weight) {
    return new RuleFrontInput(code === void 0 ? this.code : code, nameEn === void 0 ? this.nameEn : nameEn, nameRu === void 0 ? this.nameRu : nameRu, descriptionShortEn === void 0 ? this.descriptionShortEn : descriptionShortEn, descriptionShortRu === void 0 ? this.descriptionShortRu : descriptionShortRu, descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, left === void 0 ? this.left : left, right === void 0 ? this.right : right, priority === void 0 ? this.priority : priority, isExtending === void 0 ? this.isExtending : isExtending, matchJumbledAndNested === void 0 ? this.matchJumbledAndNested : matchJumbledAndNested, simpleAdditional === void 0 ? this.simpleAdditional : simpleAdditional, basedOnTaskContext === void 0 ? this.basedOnTaskContext : basedOnTaskContext, normalizationType === void 0 ? this.normalizationType : normalizationType, weight === void 0 ? this.weight : weight);
  };
  RuleFrontInput.prototype.toString = function () {
    return 'RuleFrontInput(code=' + Kotlin.toString(this.code) + (', nameEn=' + Kotlin.toString(this.nameEn)) + (', nameRu=' + Kotlin.toString(this.nameRu)) + (', descriptionShortEn=' + Kotlin.toString(this.descriptionShortEn)) + (', descriptionShortRu=' + Kotlin.toString(this.descriptionShortRu)) + (', descriptionEn=' + Kotlin.toString(this.descriptionEn)) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', left=' + Kotlin.toString(this.left)) + (', right=' + Kotlin.toString(this.right)) + (', priority=' + Kotlin.toString(this.priority)) + (', isExtending=' + Kotlin.toString(this.isExtending)) + (', matchJumbledAndNested=' + Kotlin.toString(this.matchJumbledAndNested)) + (', simpleAdditional=' + Kotlin.toString(this.simpleAdditional)) + (', basedOnTaskContext=' + Kotlin.toString(this.basedOnTaskContext)) + (', normalizationType=' + Kotlin.toString(this.normalizationType)) + (', weight=' + Kotlin.toString(this.weight)) + ')';
  };
  RuleFrontInput.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.left) | 0;
    result = result * 31 + Kotlin.hashCode(this.right) | 0;
    result = result * 31 + Kotlin.hashCode(this.priority) | 0;
    result = result * 31 + Kotlin.hashCode(this.isExtending) | 0;
    result = result * 31 + Kotlin.hashCode(this.matchJumbledAndNested) | 0;
    result = result * 31 + Kotlin.hashCode(this.simpleAdditional) | 0;
    result = result * 31 + Kotlin.hashCode(this.basedOnTaskContext) | 0;
    result = result * 31 + Kotlin.hashCode(this.normalizationType) | 0;
    result = result * 31 + Kotlin.hashCode(this.weight) | 0;
    return result;
  };
  RuleFrontInput.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.code, other.code) && Kotlin.equals(this.nameEn, other.nameEn) && Kotlin.equals(this.nameRu, other.nameRu) && Kotlin.equals(this.descriptionShortEn, other.descriptionShortEn) && Kotlin.equals(this.descriptionShortRu, other.descriptionShortRu) && Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.left, other.left) && Kotlin.equals(this.right, other.right) && Kotlin.equals(this.priority, other.priority) && Kotlin.equals(this.isExtending, other.isExtending) && Kotlin.equals(this.matchJumbledAndNested, other.matchJumbledAndNested) && Kotlin.equals(this.simpleAdditional, other.simpleAdditional) && Kotlin.equals(this.basedOnTaskContext, other.basedOnTaskContext) && Kotlin.equals(this.normalizationType, other.normalizationType) && Kotlin.equals(this.weight, other.weight)))));
  };
  function toRuleFrontInput($receiver) {
    var $receiver_0 = $receiver.leftStructureString;
    var $receiver_1 = $receiver.rightStructureString;
    return new RuleFrontInput($receiver.code, $receiver.nameEn, $receiver.nameRu, $receiver.descriptionShortEn, $receiver.descriptionShortRu, $receiver.descriptionEn, $receiver.descriptionRu, $receiver_0 == null || isBlank($receiver_0) ? null : new ExpressionFrontInput($receiver.leftStructureString, 'STRUCTURE_STRING'), $receiver_1 == null || isBlank($receiver_1) ? null : new ExpressionFrontInput($receiver.rightStructureString, 'STRUCTURE_STRING'), $receiver.priority, $receiver.isExtending, $receiver.matchJumbledAndNested, $receiver.simpleAdditional, $receiver.basedOnTaskContext, $receiver.normalizationType, $receiver.weight);
  }
  function TaskFrontInput(taskCreationType, code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, originalExpression, goalType, goalExpression, goalPattern, otherGoalData, rulePacks, rules, stepsNumber, time, difficulty, solution, solutionsStepsTree, interestingFacts, nextRecommendedTasks, hints, otherCheckSolutionData, countOfAutoGeneratedTasks, otherAutoGenerationData, otherAwardData, otherData) {
    if (taskCreationType === void 0)
      taskCreationType = 'manual';
    if (code === void 0)
      code = null;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = null;
    if (tags === void 0)
      tags = null;
    if (originalExpression === void 0)
      originalExpression = null;
    if (goalType === void 0)
      goalType = null;
    if (goalExpression === void 0)
      goalExpression = null;
    if (goalPattern === void 0)
      goalPattern = null;
    if (otherGoalData === void 0)
      otherGoalData = null;
    if (rulePacks === void 0)
      rulePacks = null;
    if (rules === void 0) {
      rules = emptyList();
    }
    if (stepsNumber === void 0)
      stepsNumber = null;
    if (time === void 0)
      time = null;
    if (solution === void 0)
      solution = null;
    if (solutionsStepsTree === void 0)
      solutionsStepsTree = null;
    if (interestingFacts === void 0)
      interestingFacts = null;
    if (nextRecommendedTasks === void 0)
      nextRecommendedTasks = null;
    if (hints === void 0)
      hints = null;
    if (otherCheckSolutionData === void 0)
      otherCheckSolutionData = null;
    if (countOfAutoGeneratedTasks === void 0)
      countOfAutoGeneratedTasks = 0;
    if (otherAutoGenerationData === void 0)
      otherAutoGenerationData = null;
    if (otherAwardData === void 0)
      otherAwardData = null;
    if (otherData === void 0)
      otherData = null;
    this.taskCreationType = taskCreationType;
    this.code = code;
    this.namespaceCode = namespaceCode;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionShortEn = descriptionShortEn;
    this.descriptionShortRu = descriptionShortRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.subjectType = subjectType;
    this.tags = tags;
    this.originalExpression = originalExpression;
    this.goalType = goalType;
    this.goalExpression = goalExpression;
    this.goalPattern = goalPattern;
    this.otherGoalData = otherGoalData;
    this.rulePacks = rulePacks;
    this.rules = rules;
    this.stepsNumber = stepsNumber;
    this.time = time;
    this.difficulty = difficulty;
    this.solution = solution;
    this.solutionsStepsTree = solutionsStepsTree;
    this.interestingFacts = interestingFacts;
    this.nextRecommendedTasks = nextRecommendedTasks;
    this.hints = hints;
    this.otherCheckSolutionData = otherCheckSolutionData;
    this.countOfAutoGeneratedTasks = countOfAutoGeneratedTasks;
    this.otherAutoGenerationData = otherAutoGenerationData;
    this.otherAwardData = otherAwardData;
    this.otherData = otherData;
  }
  TaskFrontInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TaskFrontInput',
    interfaces: []
  };
  TaskFrontInput.prototype.component1 = function () {
    return this.taskCreationType;
  };
  TaskFrontInput.prototype.component2 = function () {
    return this.code;
  };
  TaskFrontInput.prototype.component3 = function () {
    return this.namespaceCode;
  };
  TaskFrontInput.prototype.component4 = function () {
    return this.nameEn;
  };
  TaskFrontInput.prototype.component5 = function () {
    return this.nameRu;
  };
  TaskFrontInput.prototype.component6 = function () {
    return this.descriptionShortEn;
  };
  TaskFrontInput.prototype.component7 = function () {
    return this.descriptionShortRu;
  };
  TaskFrontInput.prototype.component8 = function () {
    return this.descriptionEn;
  };
  TaskFrontInput.prototype.component9 = function () {
    return this.descriptionRu;
  };
  TaskFrontInput.prototype.component10 = function () {
    return this.subjectType;
  };
  TaskFrontInput.prototype.component11 = function () {
    return this.tags;
  };
  TaskFrontInput.prototype.component12 = function () {
    return this.originalExpression;
  };
  TaskFrontInput.prototype.component13 = function () {
    return this.goalType;
  };
  TaskFrontInput.prototype.component14 = function () {
    return this.goalExpression;
  };
  TaskFrontInput.prototype.component15 = function () {
    return this.goalPattern;
  };
  TaskFrontInput.prototype.component16 = function () {
    return this.otherGoalData;
  };
  TaskFrontInput.prototype.component17 = function () {
    return this.rulePacks;
  };
  TaskFrontInput.prototype.component18 = function () {
    return this.rules;
  };
  TaskFrontInput.prototype.component19 = function () {
    return this.stepsNumber;
  };
  TaskFrontInput.prototype.component20 = function () {
    return this.time;
  };
  TaskFrontInput.prototype.component21 = function () {
    return this.difficulty;
  };
  TaskFrontInput.prototype.component22 = function () {
    return this.solution;
  };
  TaskFrontInput.prototype.component23 = function () {
    return this.solutionsStepsTree;
  };
  TaskFrontInput.prototype.component24 = function () {
    return this.interestingFacts;
  };
  TaskFrontInput.prototype.component25 = function () {
    return this.nextRecommendedTasks;
  };
  TaskFrontInput.prototype.component26 = function () {
    return this.hints;
  };
  TaskFrontInput.prototype.component27 = function () {
    return this.otherCheckSolutionData;
  };
  TaskFrontInput.prototype.component28 = function () {
    return this.countOfAutoGeneratedTasks;
  };
  TaskFrontInput.prototype.component29 = function () {
    return this.otherAutoGenerationData;
  };
  TaskFrontInput.prototype.component30 = function () {
    return this.otherAwardData;
  };
  TaskFrontInput.prototype.component31 = function () {
    return this.otherData;
  };
  TaskFrontInput.prototype.copy_uc19r5$ = function (taskCreationType, code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, originalExpression, goalType, goalExpression, goalPattern, otherGoalData, rulePacks, rules, stepsNumber, time, difficulty, solution, solutionsStepsTree, interestingFacts, nextRecommendedTasks, hints, otherCheckSolutionData, countOfAutoGeneratedTasks, otherAutoGenerationData, otherAwardData, otherData) {
    return new TaskFrontInput(taskCreationType === void 0 ? this.taskCreationType : taskCreationType, code === void 0 ? this.code : code, namespaceCode === void 0 ? this.namespaceCode : namespaceCode, nameEn === void 0 ? this.nameEn : nameEn, nameRu === void 0 ? this.nameRu : nameRu, descriptionShortEn === void 0 ? this.descriptionShortEn : descriptionShortEn, descriptionShortRu === void 0 ? this.descriptionShortRu : descriptionShortRu, descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, subjectType === void 0 ? this.subjectType : subjectType, tags === void 0 ? this.tags : tags, originalExpression === void 0 ? this.originalExpression : originalExpression, goalType === void 0 ? this.goalType : goalType, goalExpression === void 0 ? this.goalExpression : goalExpression, goalPattern === void 0 ? this.goalPattern : goalPattern, otherGoalData === void 0 ? this.otherGoalData : otherGoalData, rulePacks === void 0 ? this.rulePacks : rulePacks, rules === void 0 ? this.rules : rules, stepsNumber === void 0 ? this.stepsNumber : stepsNumber, time === void 0 ? this.time : time, difficulty === void 0 ? this.difficulty : difficulty, solution === void 0 ? this.solution : solution, solutionsStepsTree === void 0 ? this.solutionsStepsTree : solutionsStepsTree, interestingFacts === void 0 ? this.interestingFacts : interestingFacts, nextRecommendedTasks === void 0 ? this.nextRecommendedTasks : nextRecommendedTasks, hints === void 0 ? this.hints : hints, otherCheckSolutionData === void 0 ? this.otherCheckSolutionData : otherCheckSolutionData, countOfAutoGeneratedTasks === void 0 ? this.countOfAutoGeneratedTasks : countOfAutoGeneratedTasks, otherAutoGenerationData === void 0 ? this.otherAutoGenerationData : otherAutoGenerationData, otherAwardData === void 0 ? this.otherAwardData : otherAwardData, otherData === void 0 ? this.otherData : otherData);
  };
  TaskFrontInput.prototype.toString = function () {
    return 'TaskFrontInput(taskCreationType=' + Kotlin.toString(this.taskCreationType) + (', code=' + Kotlin.toString(this.code)) + (', namespaceCode=' + Kotlin.toString(this.namespaceCode)) + (', nameEn=' + Kotlin.toString(this.nameEn)) + (', nameRu=' + Kotlin.toString(this.nameRu)) + (', descriptionShortEn=' + Kotlin.toString(this.descriptionShortEn)) + (', descriptionShortRu=' + Kotlin.toString(this.descriptionShortRu)) + (', descriptionEn=' + Kotlin.toString(this.descriptionEn)) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', subjectType=' + Kotlin.toString(this.subjectType)) + (', tags=' + Kotlin.toString(this.tags)) + (', originalExpression=' + Kotlin.toString(this.originalExpression)) + (', goalType=' + Kotlin.toString(this.goalType)) + (', goalExpression=' + Kotlin.toString(this.goalExpression)) + (', goalPattern=' + Kotlin.toString(this.goalPattern)) + (', otherGoalData=' + Kotlin.toString(this.otherGoalData)) + (', rulePacks=' + Kotlin.toString(this.rulePacks)) + (', rules=' + Kotlin.toString(this.rules)) + (', stepsNumber=' + Kotlin.toString(this.stepsNumber)) + (', time=' + Kotlin.toString(this.time)) + (', difficulty=' + Kotlin.toString(this.difficulty)) + (', solution=' + Kotlin.toString(this.solution)) + (', solutionsStepsTree=' + Kotlin.toString(this.solutionsStepsTree)) + (', interestingFacts=' + Kotlin.toString(this.interestingFacts)) + (', nextRecommendedTasks=' + Kotlin.toString(this.nextRecommendedTasks)) + (', hints=' + Kotlin.toString(this.hints)) + (', otherCheckSolutionData=' + Kotlin.toString(this.otherCheckSolutionData)) + (', countOfAutoGeneratedTasks=' + Kotlin.toString(this.countOfAutoGeneratedTasks)) + (', otherAutoGenerationData=' + Kotlin.toString(this.otherAutoGenerationData)) + (', otherAwardData=' + Kotlin.toString(this.otherAwardData)) + (', otherData=' + Kotlin.toString(this.otherData)) + ')';
  };
  TaskFrontInput.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.taskCreationType) | 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.namespaceCode) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.subjectType) | 0;
    result = result * 31 + Kotlin.hashCode(this.tags) | 0;
    result = result * 31 + Kotlin.hashCode(this.originalExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalType) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalPattern) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherGoalData) | 0;
    result = result * 31 + Kotlin.hashCode(this.rulePacks) | 0;
    result = result * 31 + Kotlin.hashCode(this.rules) | 0;
    result = result * 31 + Kotlin.hashCode(this.stepsNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.difficulty) | 0;
    result = result * 31 + Kotlin.hashCode(this.solution) | 0;
    result = result * 31 + Kotlin.hashCode(this.solutionsStepsTree) | 0;
    result = result * 31 + Kotlin.hashCode(this.interestingFacts) | 0;
    result = result * 31 + Kotlin.hashCode(this.nextRecommendedTasks) | 0;
    result = result * 31 + Kotlin.hashCode(this.hints) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherCheckSolutionData) | 0;
    result = result * 31 + Kotlin.hashCode(this.countOfAutoGeneratedTasks) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherAutoGenerationData) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherAwardData) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherData) | 0;
    return result;
  };
  TaskFrontInput.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.taskCreationType, other.taskCreationType) && Kotlin.equals(this.code, other.code) && Kotlin.equals(this.namespaceCode, other.namespaceCode) && Kotlin.equals(this.nameEn, other.nameEn) && Kotlin.equals(this.nameRu, other.nameRu) && Kotlin.equals(this.descriptionShortEn, other.descriptionShortEn) && Kotlin.equals(this.descriptionShortRu, other.descriptionShortRu) && Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.subjectType, other.subjectType) && Kotlin.equals(this.tags, other.tags) && Kotlin.equals(this.originalExpression, other.originalExpression) && Kotlin.equals(this.goalType, other.goalType) && Kotlin.equals(this.goalExpression, other.goalExpression) && Kotlin.equals(this.goalPattern, other.goalPattern) && Kotlin.equals(this.otherGoalData, other.otherGoalData) && Kotlin.equals(this.rulePacks, other.rulePacks) && Kotlin.equals(this.rules, other.rules) && Kotlin.equals(this.stepsNumber, other.stepsNumber) && Kotlin.equals(this.time, other.time) && Kotlin.equals(this.difficulty, other.difficulty) && Kotlin.equals(this.solution, other.solution) && Kotlin.equals(this.solutionsStepsTree, other.solutionsStepsTree) && Kotlin.equals(this.interestingFacts, other.interestingFacts) && Kotlin.equals(this.nextRecommendedTasks, other.nextRecommendedTasks) && Kotlin.equals(this.hints, other.hints) && Kotlin.equals(this.otherCheckSolutionData, other.otherCheckSolutionData) && Kotlin.equals(this.countOfAutoGeneratedTasks, other.countOfAutoGeneratedTasks) && Kotlin.equals(this.otherAutoGenerationData, other.otherAutoGenerationData) && Kotlin.equals(this.otherAwardData, other.otherAwardData) && Kotlin.equals(this.otherData, other.otherData)))));
  };
  function toTaskFrontInput($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19;
    tmp$_0 = (tmp$ = $receiver.taskCreationType) != null ? tmp$ : 'manual';
    tmp$_1 = $receiver.code;
    tmp$_2 = $receiver.namespaceCode;
    tmp$_3 = $receiver.nameEn;
    tmp$_4 = $receiver.nameRu;
    tmp$_5 = $receiver.descriptionShortEn;
    tmp$_6 = $receiver.descriptionShortRu;
    tmp$_7 = $receiver.descriptionEn;
    tmp$_8 = $receiver.descriptionRu;
    tmp$_9 = $receiver.subjectType;
    tmp$_10 = $receiver.tags;
    var $receiver_0 = $receiver.originalExpressionStructureString;
    tmp$_11 = $receiver_0 == null || isBlank($receiver_0) ? null : new ExpressionFrontInput($receiver.originalExpressionStructureString, 'STRUCTURE_STRING');
    tmp$_12 = $receiver.goalType;
    var $receiver_1 = $receiver.goalExpressionStructureString;
    tmp$_13 = $receiver_1 == null || isBlank($receiver_1) ? null : new ExpressionFrontInput($receiver.goalExpressionStructureString, 'STRUCTURE_STRING');
    tmp$_14 = $receiver.goalPattern;
    tmp$_15 = $receiver.otherGoalData;
    var tmp$_20;
    if ((tmp$_16 = $receiver.rulePacks) != null) {
      var destination = ArrayList_init_0(collectionSizeOrDefault(tmp$_16, 10));
      var tmp$_21;
      tmp$_21 = tmp$_16.iterator();
      while (tmp$_21.hasNext()) {
        var item = tmp$_21.next();
        destination.add_11rb$(toRulePackLinkFrontInput(item));
      }
      tmp$_20 = destination;
    }
     else
      tmp$_20 = null;
    tmp$_17 = tmp$_20;
    var tmp$_22;
    if ((tmp$_18 = $receiver.rules) != null) {
      var destination_0 = ArrayList_init_0(collectionSizeOrDefault(tmp$_18, 10));
      var tmp$_23;
      tmp$_23 = tmp$_18.iterator();
      while (tmp$_23.hasNext()) {
        var item_0 = tmp$_23.next();
        destination_0.add_11rb$(toRuleFrontInput(item_0));
      }
      tmp$_22 = destination_0;
    }
     else
      tmp$_22 = null;
    var $receiver_2 = $receiver.solutionPlainText;
    return new TaskFrontInput(tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_17, (tmp$_19 = tmp$_22) != null ? tmp$_19 : emptyList(), $receiver.stepsNumber, $receiver.time, $receiver.difficulty, $receiver_2 == null || isBlank($receiver_2) ? null : new ExpressionFrontInput(ensureNotNull($receiver.solutionPlainText), 'PLAIN_TEXT'), $receiver.solutionsStepsTree, $receiver.interestingFacts, $receiver.nextRecommendedTasks, $receiver.hints, $receiver.otherCheckSolutionData, $receiver.countOfAutoGeneratedTasks, $receiver.otherAutoGenerationData, $receiver.otherAwardData, $receiver.otherData);
  }
  function TaskSetFrontInput(code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, recommendedByCommunity, otherData, tasks) {
    if (code === void 0)
      code = null;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = 'standard_math';
    if (tags === void 0)
      tags = null;
    if (recommendedByCommunity === void 0)
      recommendedByCommunity = null;
    if (otherData === void 0)
      otherData = null;
    if (tasks === void 0)
      tasks = null;
    this.code = code;
    this.namespaceCode = namespaceCode;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionShortEn = descriptionShortEn;
    this.descriptionShortRu = descriptionShortRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.subjectType = subjectType;
    this.tags = tags;
    this.recommendedByCommunity = recommendedByCommunity;
    this.otherData = otherData;
    this.tasks = tasks;
  }
  TaskSetFrontInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TaskSetFrontInput',
    interfaces: []
  };
  TaskSetFrontInput.prototype.component1 = function () {
    return this.code;
  };
  TaskSetFrontInput.prototype.component2 = function () {
    return this.namespaceCode;
  };
  TaskSetFrontInput.prototype.component3 = function () {
    return this.nameEn;
  };
  TaskSetFrontInput.prototype.component4 = function () {
    return this.nameRu;
  };
  TaskSetFrontInput.prototype.component5 = function () {
    return this.descriptionShortEn;
  };
  TaskSetFrontInput.prototype.component6 = function () {
    return this.descriptionShortRu;
  };
  TaskSetFrontInput.prototype.component7 = function () {
    return this.descriptionEn;
  };
  TaskSetFrontInput.prototype.component8 = function () {
    return this.descriptionRu;
  };
  TaskSetFrontInput.prototype.component9 = function () {
    return this.subjectType;
  };
  TaskSetFrontInput.prototype.component10 = function () {
    return this.tags;
  };
  TaskSetFrontInput.prototype.component11 = function () {
    return this.recommendedByCommunity;
  };
  TaskSetFrontInput.prototype.component12 = function () {
    return this.otherData;
  };
  TaskSetFrontInput.prototype.component13 = function () {
    return this.tasks;
  };
  TaskSetFrontInput.prototype.copy_p5zi1w$ = function (code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, recommendedByCommunity, otherData, tasks) {
    return new TaskSetFrontInput(code === void 0 ? this.code : code, namespaceCode === void 0 ? this.namespaceCode : namespaceCode, nameEn === void 0 ? this.nameEn : nameEn, nameRu === void 0 ? this.nameRu : nameRu, descriptionShortEn === void 0 ? this.descriptionShortEn : descriptionShortEn, descriptionShortRu === void 0 ? this.descriptionShortRu : descriptionShortRu, descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, subjectType === void 0 ? this.subjectType : subjectType, tags === void 0 ? this.tags : tags, recommendedByCommunity === void 0 ? this.recommendedByCommunity : recommendedByCommunity, otherData === void 0 ? this.otherData : otherData, tasks === void 0 ? this.tasks : tasks);
  };
  TaskSetFrontInput.prototype.toString = function () {
    return 'TaskSetFrontInput(code=' + Kotlin.toString(this.code) + (', namespaceCode=' + Kotlin.toString(this.namespaceCode)) + (', nameEn=' + Kotlin.toString(this.nameEn)) + (', nameRu=' + Kotlin.toString(this.nameRu)) + (', descriptionShortEn=' + Kotlin.toString(this.descriptionShortEn)) + (', descriptionShortRu=' + Kotlin.toString(this.descriptionShortRu)) + (', descriptionEn=' + Kotlin.toString(this.descriptionEn)) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', subjectType=' + Kotlin.toString(this.subjectType)) + (', tags=' + Kotlin.toString(this.tags)) + (', recommendedByCommunity=' + Kotlin.toString(this.recommendedByCommunity)) + (', otherData=' + Kotlin.toString(this.otherData)) + (', tasks=' + Kotlin.toString(this.tasks)) + ')';
  };
  TaskSetFrontInput.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.namespaceCode) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.subjectType) | 0;
    result = result * 31 + Kotlin.hashCode(this.tags) | 0;
    result = result * 31 + Kotlin.hashCode(this.recommendedByCommunity) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherData) | 0;
    result = result * 31 + Kotlin.hashCode(this.tasks) | 0;
    return result;
  };
  TaskSetFrontInput.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.code, other.code) && Kotlin.equals(this.namespaceCode, other.namespaceCode) && Kotlin.equals(this.nameEn, other.nameEn) && Kotlin.equals(this.nameRu, other.nameRu) && Kotlin.equals(this.descriptionShortEn, other.descriptionShortEn) && Kotlin.equals(this.descriptionShortRu, other.descriptionShortRu) && Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.subjectType, other.subjectType) && Kotlin.equals(this.tags, other.tags) && Kotlin.equals(this.recommendedByCommunity, other.recommendedByCommunity) && Kotlin.equals(this.otherData, other.otherData) && Kotlin.equals(this.tasks, other.tasks)))));
  };
  function toTaskSetFrontInput($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11;
    tmp$ = $receiver.code;
    tmp$_0 = $receiver.namespaceCode;
    tmp$_1 = $receiver.nameEn;
    tmp$_2 = $receiver.nameRu;
    tmp$_3 = $receiver.descriptionShortEn;
    tmp$_4 = $receiver.descriptionShortRu;
    tmp$_5 = $receiver.descriptionEn;
    tmp$_6 = $receiver.descriptionRu;
    tmp$_7 = $receiver.subjectType;
    tmp$_8 = $receiver.tags;
    tmp$_9 = $receiver.recommendedByCommunity;
    tmp$_10 = $receiver.otherData;
    var tmp$_12;
    if ((tmp$_11 = $receiver.tasks) != null) {
      var destination = ArrayList_init_0(collectionSizeOrDefault(tmp$_11, 10));
      var tmp$_13;
      tmp$_13 = tmp$_11.iterator();
      while (tmp$_13.hasNext()) {
        var item = tmp$_13.next();
        destination.add_11rb$(toTaskFrontInput(item));
      }
      tmp$_12 = destination;
    }
     else
      tmp$_12 = null;
    return new TaskSetFrontInput(tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_12);
  }
  function RulePackLinkFrontInput(namespaceCode, rulePackCode) {
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (rulePackCode === void 0)
      rulePackCode = null;
    this.namespaceCode = namespaceCode;
    this.rulePackCode = rulePackCode;
  }
  RulePackLinkFrontInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RulePackLinkFrontInput',
    interfaces: []
  };
  RulePackLinkFrontInput.prototype.component1 = function () {
    return this.namespaceCode;
  };
  RulePackLinkFrontInput.prototype.component2 = function () {
    return this.rulePackCode;
  };
  RulePackLinkFrontInput.prototype.copy_rkkr90$ = function (namespaceCode, rulePackCode) {
    return new RulePackLinkFrontInput(namespaceCode === void 0 ? this.namespaceCode : namespaceCode, rulePackCode === void 0 ? this.rulePackCode : rulePackCode);
  };
  RulePackLinkFrontInput.prototype.toString = function () {
    return 'RulePackLinkFrontInput(namespaceCode=' + Kotlin.toString(this.namespaceCode) + (', rulePackCode=' + Kotlin.toString(this.rulePackCode)) + ')';
  };
  RulePackLinkFrontInput.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.namespaceCode) | 0;
    result = result * 31 + Kotlin.hashCode(this.rulePackCode) | 0;
    return result;
  };
  RulePackLinkFrontInput.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.namespaceCode, other.namespaceCode) && Kotlin.equals(this.rulePackCode, other.rulePackCode)))));
  };
  function toRulePackLinkFrontInput($receiver) {
    return ensureNotNull($receiver.rulePackCode);
  }
  function RulePackFrontInput(code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, rulePacks, rules, otherCheckSolutionData, otherAutoGenerationData, otherData) {
    if (code === void 0)
      code = null;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = 'standard_math';
    if (rulePacks === void 0)
      rulePacks = null;
    if (rules === void 0) {
      rules = emptyList();
    }
    if (otherCheckSolutionData === void 0)
      otherCheckSolutionData = null;
    if (otherAutoGenerationData === void 0)
      otherAutoGenerationData = null;
    if (otherData === void 0)
      otherData = null;
    this.code = code;
    this.namespaceCode = namespaceCode;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionShortEn = descriptionShortEn;
    this.descriptionShortRu = descriptionShortRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.subjectType = subjectType;
    this.rulePacks = rulePacks;
    this.rules = rules;
    this.otherCheckSolutionData = otherCheckSolutionData;
    this.otherAutoGenerationData = otherAutoGenerationData;
    this.otherData = otherData;
  }
  RulePackFrontInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RulePackFrontInput',
    interfaces: []
  };
  RulePackFrontInput.prototype.component1 = function () {
    return this.code;
  };
  RulePackFrontInput.prototype.component2 = function () {
    return this.namespaceCode;
  };
  RulePackFrontInput.prototype.component3 = function () {
    return this.nameEn;
  };
  RulePackFrontInput.prototype.component4 = function () {
    return this.nameRu;
  };
  RulePackFrontInput.prototype.component5 = function () {
    return this.descriptionShortEn;
  };
  RulePackFrontInput.prototype.component6 = function () {
    return this.descriptionShortRu;
  };
  RulePackFrontInput.prototype.component7 = function () {
    return this.descriptionEn;
  };
  RulePackFrontInput.prototype.component8 = function () {
    return this.descriptionRu;
  };
  RulePackFrontInput.prototype.component9 = function () {
    return this.subjectType;
  };
  RulePackFrontInput.prototype.component10 = function () {
    return this.rulePacks;
  };
  RulePackFrontInput.prototype.component11 = function () {
    return this.rules;
  };
  RulePackFrontInput.prototype.component12 = function () {
    return this.otherCheckSolutionData;
  };
  RulePackFrontInput.prototype.component13 = function () {
    return this.otherAutoGenerationData;
  };
  RulePackFrontInput.prototype.component14 = function () {
    return this.otherData;
  };
  RulePackFrontInput.prototype.copy_y4z6q7$ = function (code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, rulePacks, rules, otherCheckSolutionData, otherAutoGenerationData, otherData) {
    return new RulePackFrontInput(code === void 0 ? this.code : code, namespaceCode === void 0 ? this.namespaceCode : namespaceCode, nameEn === void 0 ? this.nameEn : nameEn, nameRu === void 0 ? this.nameRu : nameRu, descriptionShortEn === void 0 ? this.descriptionShortEn : descriptionShortEn, descriptionShortRu === void 0 ? this.descriptionShortRu : descriptionShortRu, descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, subjectType === void 0 ? this.subjectType : subjectType, rulePacks === void 0 ? this.rulePacks : rulePacks, rules === void 0 ? this.rules : rules, otherCheckSolutionData === void 0 ? this.otherCheckSolutionData : otherCheckSolutionData, otherAutoGenerationData === void 0 ? this.otherAutoGenerationData : otherAutoGenerationData, otherData === void 0 ? this.otherData : otherData);
  };
  RulePackFrontInput.prototype.toString = function () {
    return 'RulePackFrontInput(code=' + Kotlin.toString(this.code) + (', namespaceCode=' + Kotlin.toString(this.namespaceCode)) + (', nameEn=' + Kotlin.toString(this.nameEn)) + (', nameRu=' + Kotlin.toString(this.nameRu)) + (', descriptionShortEn=' + Kotlin.toString(this.descriptionShortEn)) + (', descriptionShortRu=' + Kotlin.toString(this.descriptionShortRu)) + (', descriptionEn=' + Kotlin.toString(this.descriptionEn)) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', subjectType=' + Kotlin.toString(this.subjectType)) + (', rulePacks=' + Kotlin.toString(this.rulePacks)) + (', rules=' + Kotlin.toString(this.rules)) + (', otherCheckSolutionData=' + Kotlin.toString(this.otherCheckSolutionData)) + (', otherAutoGenerationData=' + Kotlin.toString(this.otherAutoGenerationData)) + (', otherData=' + Kotlin.toString(this.otherData)) + ')';
  };
  RulePackFrontInput.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.namespaceCode) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.subjectType) | 0;
    result = result * 31 + Kotlin.hashCode(this.rulePacks) | 0;
    result = result * 31 + Kotlin.hashCode(this.rules) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherCheckSolutionData) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherAutoGenerationData) | 0;
    result = result * 31 + Kotlin.hashCode(this.otherData) | 0;
    return result;
  };
  RulePackFrontInput.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.code, other.code) && Kotlin.equals(this.namespaceCode, other.namespaceCode) && Kotlin.equals(this.nameEn, other.nameEn) && Kotlin.equals(this.nameRu, other.nameRu) && Kotlin.equals(this.descriptionShortEn, other.descriptionShortEn) && Kotlin.equals(this.descriptionShortRu, other.descriptionShortRu) && Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.subjectType, other.subjectType) && Kotlin.equals(this.rulePacks, other.rulePacks) && Kotlin.equals(this.rules, other.rules) && Kotlin.equals(this.otherCheckSolutionData, other.otherCheckSolutionData) && Kotlin.equals(this.otherAutoGenerationData, other.otherAutoGenerationData) && Kotlin.equals(this.otherData, other.otherData)))));
  };
  function toRulePackFrontInput($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11;
    tmp$ = $receiver.code;
    tmp$_0 = $receiver.namespaceCode;
    tmp$_1 = $receiver.nameEn;
    tmp$_2 = $receiver.nameRu;
    tmp$_3 = $receiver.descriptionShortEn;
    tmp$_4 = $receiver.descriptionShortRu;
    tmp$_5 = $receiver.descriptionEn;
    tmp$_6 = $receiver.descriptionRu;
    tmp$_7 = $receiver.subjectType;
    var tmp$_12;
    if ((tmp$_8 = $receiver.rulePacks) != null) {
      var destination = ArrayList_init_0(collectionSizeOrDefault(tmp$_8, 10));
      var tmp$_13;
      tmp$_13 = tmp$_8.iterator();
      while (tmp$_13.hasNext()) {
        var item = tmp$_13.next();
        destination.add_11rb$(toRulePackLinkFrontInput(item));
      }
      tmp$_12 = destination;
    }
     else
      tmp$_12 = null;
    tmp$_9 = tmp$_12;
    var tmp$_14;
    if ((tmp$_10 = $receiver.rules) != null) {
      var destination_0 = ArrayList_init_0(collectionSizeOrDefault(tmp$_10, 10));
      var tmp$_15;
      tmp$_15 = tmp$_10.iterator();
      while (tmp$_15.hasNext()) {
        var item_0 = tmp$_15.next();
        destination_0.add_11rb$(toRuleFrontInput(item_0));
      }
      tmp$_14 = destination_0;
    }
     else
      tmp$_14 = null;
    return new RulePackFrontInput(tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_9, (tmp$_11 = tmp$_14) != null ? tmp$_11 : emptyList(), $receiver.otherCheckSolutionData, $receiver.otherAutoGenerationData, $receiver.otherData);
  }
  function GameFrontInput(taskSet, rulePacks) {
    this.taskSet = taskSet;
    this.rulePacks = rulePacks;
  }
  GameFrontInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GameFrontInput',
    interfaces: []
  };
  GameFrontInput.prototype.component1 = function () {
    return this.taskSet;
  };
  GameFrontInput.prototype.component2 = function () {
    return this.rulePacks;
  };
  GameFrontInput.prototype.copy_igl09p$ = function (taskSet, rulePacks) {
    return new GameFrontInput(taskSet === void 0 ? this.taskSet : taskSet, rulePacks === void 0 ? this.rulePacks : rulePacks);
  };
  GameFrontInput.prototype.toString = function () {
    return 'GameFrontInput(taskSet=' + Kotlin.toString(this.taskSet) + (', rulePacks=' + Kotlin.toString(this.rulePacks)) + ')';
  };
  GameFrontInput.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.taskSet) | 0;
    result = result * 31 + Kotlin.hashCode(this.rulePacks) | 0;
    return result;
  };
  GameFrontInput.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.taskSet, other.taskSet) && Kotlin.equals(this.rulePacks, other.rulePacks)))));
  };
  function ModifiedLogicRulePacks() {
    ModifiedLogicRulePacks$Companion_getInstance();
  }
  function ModifiedLogicRulePacks$Companion() {
    ModifiedLogicRulePacks$Companion_instance = this;
    this.defaultLogicRulePacks = listOf_0([new RulePackITR('LogicBase', void 0, void 0, 'Basic Boolean Logic', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B \u0431\u0443\u043B\u0435\u0432\u043E\u0439 \u043B\u043E\u0433\u0438\u043A\u0438', "Basic operations, it's definitions and properties", '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438, \u0438\u0445 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0438 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F', 'logic', void 0, listOf_0([new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(and(A;B)))', '(or(not(A);not(B)))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(or(not(A);not(B)))', '(not(and(A;B)))', 10, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(or(A;B)))', '(and(not(A);not(B)))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(and(not(A);not(B)))', '(not(or(A;B)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(not(a)))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(not(not(a)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;a))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;a))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;b))', '(and(b;a))', 40, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;b))', '(or(b;a))', 40, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;1))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;0))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;not(A)))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(not(A);A))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A)))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;1))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(1;A))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;1))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(1;A))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;0))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(0;A))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;0))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(0;A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(0))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(1))', '(0)', 5, false, false, false, false), new RuleITR('SimpleComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('ZeroComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('ParentBracketsExpansion', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false), new RuleITR('ArgumentsSwap', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('ArgumentsPermutation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('OpeningBrackets', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false), new RuleITR('ArgumentsPermutationInOriginalOrder', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 41, false, false, false, false), new RuleITR('ReduceArithmetic', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false), new RuleITR('TwoSidesArithmeticReduce', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(not(A);B))', '(implic(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(B;not(A)))', '(implic(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(A;B))', '(or(not(A);B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(0;A))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(A;1))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(A;0))', '(not(A))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(1;A))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(implic(1;A))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(A;B))', '(or(and(not(A);B);and(A;not(B))))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(not(A);B);and(A;not(B))))', '(xor(A;B))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(A;B))', '(or(and(A;B);and(not(A);not(B))))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(A;B);and(not(A);not(B))))', '(alleq(A;B))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(A;0))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(A;1))', '(not(A))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(0;A))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(1;A))', '(not(A))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(0;A))', '(not(A))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(A;1))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(A;0))', '(not(A))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(1;A))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(xor(A;0))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(alleq(1;A))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(A))', '(xor(A;1))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(A))', '(alleq(0;A))', 91, true, false, false, false)])), new RulePackITR('RelativeComplement', void 0, void 0, 'Relative Complement', '\u041B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'Definition and basic properties', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Relative Complement', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F, \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(B)))', '(set-(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(B);A))', '(set-(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;B))', '(and(A;not(B)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;B))', '(not(implic(A;B)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(implic(A;B)))', '(set-(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(A;B))', '(not(set-(A;B)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(set-(A;B)))', '(implic(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;0))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;1))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(0;A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(1;A))', '(not(A))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(set-(A;0))', 91, true, false, false, false)])), new RulePackITR('LogicNotAnd', void 0, void 0, 'Negation of Conjunction', '\u041E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u0438 (\u0428\u0442\u0440\u0438\u0445 \u0428\u0435\u0444\u0444\u0435\u0440\u0430)', 'Definition and basic properties', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Negation of Conjunction', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u0438', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nand(A;B))', '(not(and(A;B)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(and(A;B)))', '(nand(A;B))', 35, false, false, false, false)])), new RulePackITR('LogicNotOr', void 0, void 0, 'Negation of Disjunction', '\u041E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u0438 (\u0421\u0442\u0440\u0435\u043B\u043A\u0430 \u041F\u0438\u0440\u0441\u0430)', 'Definition and basic properties', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Negation of Disjunction', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u0438', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nor(A;B))', '(not(or(A;B)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(or(A;B)))', '(nor(A;B))', 35, false, false, false, false)])), new RulePackITR('LogicAbsorptionLaw', void 0, void 0, 'Absorption Law', '\u0417\u0430\u043A\u043E\u043D \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u044F', 'Law and basic properties in Boolean Algebra', '\u0417\u0430\u043A\u043E\u043D \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u0432 \u0431\u0443\u043B\u0435\u0432\u043E\u0439 \u0430\u043B\u0433\u0435\u0431\u0440\u0435', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(A;B)))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;and(A;B)))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(B;A)))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;and(B;A)))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;B);A))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(A;B);A))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(B;A);A))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(B;A);A))', '(A)', 6, false, false, false, false), new RuleITR('SetComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false)])), new RulePackITR('LogicResolution', void 0, void 0, 'Resolution', '\u041C\u0435\u0442\u043E\u0434 \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439', 'Rules for proof by Resolution method', '\u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0434\u043E\u043A\u0430\u0437\u0430\u0442\u0435\u043B\u044C\u0441\u0442\u0432 \u043C\u0435\u0442\u043E\u0434\u043E\u043C \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A)))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A)))', '(and(X;or(A;X);not(A)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X)))', '(and(X;not(A);or(A;X)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A))', '(and(X;or(not(A);X);A))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X)))', '(and(X;A;or(not(A);X)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y)))', '(and(or(X;Y);or(A;X);or(not(A);Y)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y)))', '(and(or(X;Y);or(not(A);X);or(A;Y)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C))', '(and(X;or(A;X);not(A);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C))', '(and(X;not(A);or(A;X);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C))', '(and(X;or(not(A);X);A;C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C))', '(and(X;A;or(not(A);X);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C))', '(and(or(X;Y);or(A;X);or(not(A);Y);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C))', '(and(or(X;Y);or(not(A);X);or(A;Y);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D))', '(and(X;or(A;X);not(A);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D))', '(and(X;not(A);or(A;X);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D))', '(and(X;or(not(A);X);A;C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D))', '(and(X;A;or(not(A);X);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E))', '(and(X;or(A;X);not(A);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E))', '(and(X;not(A);or(A;X);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E))', '(and(X;or(not(A);X);A;C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E))', '(and(X;A;or(not(A);X);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E;F))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E;F))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E;F))', '(and(X;or(A;X);not(A);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E;F))', '(and(X;not(A);or(A;X);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E;F))', '(and(X;or(not(A);X);A;C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E;F))', '(and(X;A;or(not(A);X);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E;F))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E;F))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E;F;G))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E;F;G))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E;F;G))', '(and(X;or(A;X);not(A);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E;F;G))', '(and(X;not(A);or(A;X);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E;F;G))', '(and(X;or(not(A);X);A;C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E;F;G))', '(and(X;A;or(not(A);X);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E;F;G))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E;F;G))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E;F;G;H))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E;F;G;H))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E;F;G;H))', '(and(X;or(A;X);not(A);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E;F;G;H))', '(and(X;not(A);or(A;X);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E;F;G;H))', '(and(X;or(not(A);X);A;C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E;F;G;H))', '(and(X;A;or(not(A);X);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E;F;G;H))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E;F;G;H))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E;F;G;H;I))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E;F;G;H;I))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E;F;G;H;I))', '(and(X;or(A;X);not(A);C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E;F;G;H;I))', '(and(X;not(A);or(A;X);C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E;F;G;H;I))', '(and(X;or(not(A);X);A;C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E;F;G;H;I))', '(and(X;A;or(not(A);X);C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E;F;G;H;I))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E;F;G;H;I))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H;I))', 10, false, false, false, false)])), new RulePackITR('LogicSimplification', void 0, void 0, 'Logic Simplifications', '\u0423\u043F\u0440\u043E\u0449\u0435\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', 'Rules for trivial simplifications in logic', '\u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0443\u043F\u0440\u043E\u0449\u0435\u043D\u0438\u044F \u0431\u0435\u0441\u0441\u043C\u044B\u0441\u043B\u0435\u043D\u043D\u044B\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a))', '(a)', 5, false, false, false, false)])), new RulePackITR('LogicNewVariables', void 0, void 0, 'New variables introduction in logic', '\u0412\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u043D\u043E\u0432\u044B\u0445 \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445 \u0432 \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0445', void 0, void 0, 'Introduction of new variables in logic expressions', '\u041F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0432\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u043D\u043E\u0432\u044B\u0445 \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445 \u0432 \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u044F', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(or(not(z);z))', 50, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(and(not(z);z))', 50, false, false, false, false)])), new RulePackITR('LogicAbsorptionLawReverse', void 0, void 0, 'Absorption Law Reverse', '\u041E\u0431\u0440\u0430\u0442\u043D\u044B\u0435 \u0417\u0430\u043A\u043E\u043D \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u044F', 'Reverse rules to absorption law for new variables', '\u041E\u0431\u0440\u0430\u0442\u043D\u044B\u0435 \u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u043A \u0437\u0430\u043A\u043E\u043D\u0443 \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u044F \u0434\u043B\u044F \u0432\u043E\u043E\u0434\u0430 \u043D\u043E\u0432\u044B\u0445 \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;or(a;z)))', 50, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;and(a;z)))', 50, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;or(z;a)))', 50, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;and(z;a)))', 50, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(or(a;z);a))', 50, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(and(a;z);a))', 50, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(or(z;a);a))', 50, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(and(z;a);a))', 50, false, false, false, false)]))]);
  }
  ModifiedLogicRulePacks$Companion.prototype.get = function () {
    return this.defaultLogicRulePacks;
  };
  ModifiedLogicRulePacks$Companion.prototype.map = function () {
    var $receiver = this.get();
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
    var destination = LinkedHashMap_init(capacity);
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      destination.put_xwzc9p$(ensureNotNull(element.code), element);
    }
    return destination;
  };
  ModifiedLogicRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ModifiedLogicRulePacks$Companion_instance = null;
  function ModifiedLogicRulePacks$Companion_getInstance() {
    if (ModifiedLogicRulePacks$Companion_instance === null) {
      new ModifiedLogicRulePacks$Companion();
    }
    return ModifiedLogicRulePacks$Companion_instance;
  }
  ModifiedLogicRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ModifiedLogicRulePacks',
    interfaces: []
  };
  function NewWeightsLogicRulePack() {
    NewWeightsLogicRulePack$Companion_getInstance();
  }
  function NewWeightsLogicRulePack$Companion() {
    NewWeightsLogicRulePack$Companion_instance = this;
    this.newWeightsLogicRulePack = listOf_0([new RulePackITR('LogicBaseOrAndNot', void 0, void 0, 'Basic Boolean Logic: Or, And, Not', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B \u0431\u0443\u043B\u0435\u0432\u043E\u0439 \u043B\u043E\u0433\u0438\u043A\u0438', "Basic operations, it's definitions and properties", '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438, \u0438\u0445 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0438 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F', 'logic', void 0, listOf_0([new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(and(A;B)))', '(or(not(A);not(B)))', 15, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(or(not(A);not(B)))', '(not(and(A;B)))', 10, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(or(A;B)))', '(and(not(A);not(B)))', 15, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(and(not(A);not(B)))', '(not(or(A;B)))', 10, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(not(a)))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(not(not(a)))', 90, true, false, false, false, void 0, void 0, void 0, 25.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;a))', 90, true, false, false, false, void 0, void 0, void 0, 25.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;a))', 90, true, false, false, false, void 0, void 0, void 0, 25.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;b))', '(and(b;a))', 40, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;b))', '(or(b;a))', 40, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;1))', 90, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;0))', 90, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;not(A)))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(not(A);A))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;1))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(1;A))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;1))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(1;A))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;0))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(0;A))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(0;A))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(0))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(1))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('SimpleComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('ZeroComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('ParentBracketsExpansion', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false, void 0, void 0, void 0, 30.0), new RuleITR('ArgumentsSwap', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false, void 0, void 0, void 0, 25.0), new RuleITR('ArgumentsPermutation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false, void 0, void 0, void 0, 25.0), new RuleITR('OpeningBrackets', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false, void 0, void 0, void 0, 30.0), new RuleITR('ArgumentsPermutationInOriginalOrder', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 41, false, false, false, false, void 0, void 0, void 0, 25.0), new RuleITR('ReduceArithmetic', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false, void 0, void 0, void 0, 40.0), new RuleITR('TwoSidesArithmeticReduce', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false, void 0, void 0, void 0, 40.0)])), new RulePackITR('LogicBaseImplicXorAlleq', void 0, void 0, 'Basic Boolean Logic: Or, And, Not', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B \u0431\u0443\u043B\u0435\u0432\u043E\u0439 \u043B\u043E\u0433\u0438\u043A\u0438', "Basic operations, it's definitions and properties", '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438, \u0438\u0445 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0438 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F', 'logic', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(not(A);B))', '(implic(A;B))', 35, false, false, false, false, void 0, void 0, void 0, 70.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(B;not(A)))', '(implic(A;B))', 35, false, false, false, false, void 0, void 0, void 0, 70.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(A;B))', '(or(not(A);B))', 35, false, false, false, false, void 0, void 0, void 0, 70.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(0;A))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(A;1))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(A;0))', '(not(A))', 5, false, false, false, false, void 0, void 0, void 0, 80.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(1;A))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 80.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(implic(1;A))', 91, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(A;B))', '(or(and(not(A);B);and(A;not(B))))', 30, true, false, false, false, void 0, void 0, void 0, 70.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(not(A);B);and(A;not(B))))', '(xor(A;B))', 30, true, false, false, false, void 0, void 0, void 0, 70.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(A;B))', '(or(and(A;B);and(not(A);not(B))))', 30, true, false, false, false, void 0, void 0, void 0, 70.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(A;B);and(not(A);not(B))))', '(alleq(A;B))', 30, true, false, false, false, void 0, void 0, void 0, 70.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(A;0))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(A;1))', '(not(A))', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(0;A))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(1;A))', '(not(A))', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(0;A))', '(not(A))', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(A;1))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(A;0))', '(not(A))', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(1;A))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(xor(A;0))', 91, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(alleq(1;A))', 91, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(A))', '(xor(A;1))', 91, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(A))', '(alleq(0;A))', 91, true, false, false, false, void 0, void 0, void 0, 2.0)])), new RulePackITR('RelativeComplement', void 0, void 0, 'Relative Complement', '\u041B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'Definition and basic properties', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Relative Complement', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F, \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(B)))', '(set-(A;B))', 35, true, false, false, false, void 0, void 0, void 0, 85.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(B);A))', '(set-(A;B))', 35, true, false, false, false, void 0, void 0, void 0, 85.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;B))', '(and(A;not(B)))', 35, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;B))', '(not(implic(A;B)))', 35, true, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(implic(A;B)))', '(set-(A;B))', 35, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(A;B))', '(not(set-(A;B)))', 35, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(set-(A;B)))', '(implic(A;B))', 35, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;0))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 85.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;1))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 8.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(0;A))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 8.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(1;A))', '(not(A))', 5, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(set-(A;0))', 91, true, false, false, false, void 0, void 0, void 0, 40.0)])), new RulePackITR('LogicNotAnd', void 0, void 0, 'Negation of Conjunction', '\u041E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u0438 (\u0428\u0442\u0440\u0438\u0445 \u0428\u0435\u0444\u0444\u0435\u0440\u0430)', 'Definition and basic properties', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Negation of Conjunction', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u0438', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nand(A;B))', '(not(and(A;B)))', 35, false, false, false, false, void 0, void 0, void 0, 70.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(and(A;B)))', '(nand(A;B))', 35, false, false, false, false, void 0, void 0, void 0, 70.0)])), new RulePackITR('LogicNotOr', void 0, void 0, 'Negation of Disjunction', '\u041E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u0438 (\u0421\u0442\u0440\u0435\u043B\u043A\u0430 \u041F\u0438\u0440\u0441\u0430)', 'Definition and basic properties', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Negation of Disjunction', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u0438', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nor(A;B))', '(not(or(A;B)))', 35, false, false, false, false, void 0, void 0, void 0, 70.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(or(A;B)))', '(nor(A;B))', 35, false, false, false, false, void 0, void 0, void 0, 70.0)])), new RulePackITR('LogicAbsorptionLaw', void 0, void 0, 'Absorption Law', '\u0417\u0430\u043A\u043E\u043D \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u044F', 'Law and basic properties in Boolean Algebra', '\u0417\u0430\u043A\u043E\u043D \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u0432 \u0431\u0443\u043B\u0435\u0432\u043E\u0439 \u0430\u043B\u0433\u0435\u0431\u0440\u0435', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(A;B)))', '(A)', 6, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;and(A;B)))', '(A)', 6, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(B;A)))', '(A)', 6, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;and(B;A)))', '(A)', 6, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;B);A))', '(A)', 6, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(A;B);A))', '(A)', 6, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(B;A);A))', '(A)', 6, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(B;A);A))', '(A)', 6, false, false, false, false, void 0, void 0, void 0, 90.0), new RuleITR('SetComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false, void 0, void 0, void 0, 7.0)])), new RulePackITR('LogicResolution', void 0, void 0, 'Resolution', '\u041C\u0435\u0442\u043E\u0434 \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439', 'Rules for proof by Resolution method', '\u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0434\u043E\u043A\u0430\u0437\u0430\u0442\u0435\u043B\u044C\u0441\u0442\u0432 \u043C\u0435\u0442\u043E\u0434\u043E\u043C \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 40.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 40.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A)))', '(and(X;or(A;X);not(A)))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X)))', '(and(X;not(A);or(A;X)))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A))', '(and(X;or(not(A);X);A))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X)))', '(and(X;A;or(not(A);X)))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y)))', '(and(or(X;Y);or(A;X);or(not(A);Y)))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y)))', '(and(or(X;Y);or(not(A);X);or(A;Y)))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C))', '(and(X;or(A;X);not(A);C))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C))', '(and(X;not(A);or(A;X);C))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C))', '(and(X;or(not(A);X);A;C))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C))', '(and(X;A;or(not(A);X);C))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C))', '(and(or(X;Y);or(A;X);or(not(A);Y);C))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C))', '(and(or(X;Y);or(not(A);X);or(A;Y);C))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D))', '(and(X;or(A;X);not(A);C;D))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D))', '(and(X;not(A);or(A;X);C;D))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D))', '(and(X;or(not(A);X);A;C;D))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D))', '(and(X;A;or(not(A);X);C;D))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E))', '(and(X;or(A;X);not(A);C;D;E))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E))', '(and(X;not(A);or(A;X);C;D;E))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E))', '(and(X;or(not(A);X);A;C;D;E))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E))', '(and(X;A;or(not(A);X);C;D;E))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E;F))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E;F))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E;F))', '(and(X;or(A;X);not(A);C;D;E;F))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E;F))', '(and(X;not(A);or(A;X);C;D;E;F))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E;F))', '(and(X;or(not(A);X);A;C;D;E;F))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E;F))', '(and(X;A;or(not(A);X);C;D;E;F))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E;F))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E;F))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E;F;G))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E;F;G))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E;F;G))', '(and(X;or(A;X);not(A);C;D;E;F;G))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E;F;G))', '(and(X;not(A);or(A;X);C;D;E;F;G))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E;F;G))', '(and(X;or(not(A);X);A;C;D;E;F;G))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E;F;G))', '(and(X;A;or(not(A);X);C;D;E;F;G))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E;F;G))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E;F;G))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E;F;G;H))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E;F;G;H))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E;F;G;H))', '(and(X;or(A;X);not(A);C;D;E;F;G;H))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E;F;G;H))', '(and(X;not(A);or(A;X);C;D;E;F;G;H))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E;F;G;H))', '(and(X;or(not(A);X);A;C;D;E;F;G;H))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E;F;G;H))', '(and(X;A;or(not(A);X);C;D;E;F;G;H))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E;F;G;H))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E;F;G;H))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A;C;D;E;F;G;H;I))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A);C;D;E;F;G;H;I))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 60.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);not(A);C;D;E;F;G;H;I))', '(and(X;or(A;X);not(A);C;D;E;F;G;H;I))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);or(A;X);C;D;E;F;G;H;I))', '(and(X;not(A);or(A;X);C;D;E;F;G;H;I))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);A;C;D;E;F;G;H;I))', '(and(X;or(not(A);X);A;C;D;E;F;G;H;I))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(not(A);X);C;D;E;F;G;H;I))', '(and(X;A;or(not(A);X);C;D;E;F;G;H;I))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;X);or(not(A);Y);C;D;E;F;G;H;I))', '(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H;I))', 10, true, false, false, false, void 0, void 0, void 0, 75.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(A);X);or(A;Y);C;D;E;F;G;H;I))', '(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H;I))', 10, true, false, false, false, void 0, void 0, void 0, 75.0)])), new RulePackITR('LogicSimplification', void 0, void 0, 'Logic Simplifications', '\u0423\u043F\u0440\u043E\u0449\u0435\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', 'Rules for trivial simplifications in logic', '\u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0443\u043F\u0440\u043E\u0449\u0435\u043D\u0438\u044F \u0431\u0435\u0441\u0441\u043C\u044B\u0441\u043B\u0435\u043D\u043D\u044B\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 1.0)])), new RulePackITR('LogicNewVariables', void 0, void 0, 'New variables introduction in logic', '\u0412\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u043D\u043E\u0432\u044B\u0445 \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445 \u0432 \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0445', void 0, void 0, 'Introduction of new variables in logic expressions', '\u041F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0432\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u043D\u043E\u0432\u044B\u0445 \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445 \u0432 \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u044F', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(or(not(z);z))', 50, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(and(not(z);z))', 50, false, false, false, false, void 0, void 0, void 0, 50.0)])), new RulePackITR('LogicAbsorptionLawReverse', void 0, void 0, 'Absorption Law Reverse', '\u041E\u0431\u0440\u0430\u0442\u043D\u044B\u0435 \u0417\u0430\u043A\u043E\u043D \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u044F', 'Reverse rules to absorption law for new variables', '\u041E\u0431\u0440\u0430\u0442\u043D\u044B\u0435 \u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u043A \u0437\u0430\u043A\u043E\u043D\u0443 \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u044F \u0434\u043B\u044F \u0432\u043E\u043E\u0434\u0430 \u043D\u043E\u0432\u044B\u0445 \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;or(a;z)))', 50, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;and(a;z)))', 50, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;or(z;a)))', 50, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;and(z;a)))', 50, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(or(a;z);a))', 50, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(and(a;z);a))', 50, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(or(z;a);a))', 50, false, false, false, false, void 0, void 0, void 0, 50.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(and(z;a);a))', 50, false, false, false, false, void 0, void 0, void 0, 50.0)]))]);
  }
  NewWeightsLogicRulePack$Companion.prototype.get = function () {
    return this.newWeightsLogicRulePack;
  };
  NewWeightsLogicRulePack$Companion.prototype.map = function () {
    var $receiver = this.get();
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
    var destination = LinkedHashMap_init(capacity);
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      destination.put_xwzc9p$(ensureNotNull(element.code), element);
    }
    return destination;
  };
  NewWeightsLogicRulePack$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var NewWeightsLogicRulePack$Companion_instance = null;
  function NewWeightsLogicRulePack$Companion_getInstance() {
    if (NewWeightsLogicRulePack$Companion_instance === null) {
      new NewWeightsLogicRulePack$Companion();
    }
    return NewWeightsLogicRulePack$Companion_instance;
  }
  NewWeightsLogicRulePack.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NewWeightsLogicRulePack',
    interfaces: []
  };
  function ReportType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ReportType_initFields() {
    ReportType_initFields = function () {
    };
    ReportType$RESULT_ONLY_instance = new ReportType('RESULT_ONLY', 0);
    ReportType$RESULT_WITH_POSTPROCESSING_instance = new ReportType('RESULT_WITH_POSTPROCESSING', 1);
    ReportType$RESULT_WITH_SUBSTITUTIONS_instance = new ReportType('RESULT_WITH_SUBSTITUTIONS', 2);
    ReportType$RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS_instance = new ReportType('RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS', 3);
  }
  var ReportType$RESULT_ONLY_instance;
  function ReportType$RESULT_ONLY_getInstance() {
    ReportType_initFields();
    return ReportType$RESULT_ONLY_instance;
  }
  var ReportType$RESULT_WITH_POSTPROCESSING_instance;
  function ReportType$RESULT_WITH_POSTPROCESSING_getInstance() {
    ReportType_initFields();
    return ReportType$RESULT_WITH_POSTPROCESSING_instance;
  }
  var ReportType$RESULT_WITH_SUBSTITUTIONS_instance;
  function ReportType$RESULT_WITH_SUBSTITUTIONS_getInstance() {
    ReportType_initFields();
    return ReportType$RESULT_WITH_SUBSTITUTIONS_instance;
  }
  var ReportType$RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS_instance;
  function ReportType$RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS_getInstance() {
    ReportType_initFields();
    return ReportType$RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS_instance;
  }
  ReportType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ReportType',
    interfaces: [Enum]
  };
  function ReportType$values() {
    return [ReportType$RESULT_ONLY_getInstance(), ReportType$RESULT_WITH_POSTPROCESSING_getInstance(), ReportType$RESULT_WITH_SUBSTITUTIONS_getInstance(), ReportType$RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS_getInstance()];
  }
  ReportType.values = ReportType$values;
  function ReportType$valueOf(name) {
    switch (name) {
      case 'RESULT_ONLY':
        return ReportType$RESULT_ONLY_getInstance();
      case 'RESULT_WITH_POSTPROCESSING':
        return ReportType$RESULT_WITH_POSTPROCESSING_getInstance();
      case 'RESULT_WITH_SUBSTITUTIONS':
        return ReportType$RESULT_WITH_SUBSTITUTIONS_getInstance();
      case 'RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS':
        return ReportType$RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS_getInstance();
      default:throwISE('No enum constant mathhelper.twf.defaultcontent.defaultrulepacks.autogeneration.ReportType.' + name);
    }
  }
  ReportType.valueOf_61zpoe$ = ReportType$valueOf;
  function RulePackProvider() {
    RulePackProvider$Companion_getInstance();
  }
  function RulePackProvider$Companion() {
    RulePackProvider$Companion_instance = this;
  }
  RulePackProvider$Companion.prototype.concatenate_0 = function (lists) {
    return flatten(listOf_0(lists.slice()));
  };
  RulePackProvider$Companion.prototype.getDefaultMathPacks = function () {
    var codes = listOf_0(['ArithmeticPositiveAddition', 'ArithmeticAddition', 'ArithmeticMultiplication', 'ArithmeticDivision', 'ArithmeticExponentiation', 'ShortMultiplication']);
    var $receiver = DefaultStandardMathRulePacks$Companion_getInstance().get();
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (contains(codes, element.code))
        destination.add_11rb$(element);
    }
    return destination;
  };
  RulePackProvider$Companion.prototype.getTrigonometricPacks = function () {
    return TrigonometricRulePacks$Companion_getInstance().get();
  };
  RulePackProvider$Companion.prototype.getBasicTrigonometricSubstitutions = function () {
    return this.concatenate_0([this.getDefaultMathPacks(), this.getTrigonometricPacks()]);
  };
  RulePackProvider$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var RulePackProvider$Companion_instance = null;
  function RulePackProvider$Companion_getInstance() {
    if (RulePackProvider$Companion_instance === null) {
      new RulePackProvider$Companion();
    }
    return RulePackProvider$Companion_instance;
  }
  RulePackProvider.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RulePackProvider',
    interfaces: []
  };
  function RuleTag(name, ordinal, code, readyForUseInProduction) {
    if (readyForUseInProduction === void 0)
      readyForUseInProduction = true;
    Enum.call(this);
    this.code = code;
    this.readyForUseInProduction = readyForUseInProduction;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function RuleTag_initFields() {
    RuleTag_initFields = function () {
    };
    RuleTag$BASIC_MATH_instance = new RuleTag('BASIC_MATH', 0, '\u0411\u0430\u0437\u043E\u0432\u044B\u0435 \u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u043C\u0430\u0442\u0435\u043C\u0430\u0442\u0438\u043A\u0438');
    RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_instance = new RuleTag('TRIGONOMETRY_FUNCTIONS_DEFINITION', 1, '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0445 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 (sin, cos, tg, ctg), \u0438\u0445 \u0447\u0451\u0442\u043D\u043E\u0441\u0442\u044C/\u043D\u0435\u0447\u0451\u0442\u043D\u043E\u0441\u0442\u044C');
    RuleTag$TRIGONOMETRY_STANDARD_ANGLES_instance = new RuleTag('TRIGONOMETRY_STANDARD_ANGLES', 2, '\u0421\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0435 \u0443\u0433\u043B\u044B \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u0442\u0430\u0431\u043B\u0438\u0446\u044B');
    RuleTag$TRIGONOMETRY_BASIC_IDENTITY_instance = new RuleTag('TRIGONOMETRY_BASIC_IDENTITY', 3, '\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0442\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u043E');
    RuleTag$TRIGONOMETRY_PERIODIC_instance = new RuleTag('TRIGONOMETRY_PERIODIC', 4, '\u041F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439');
    RuleTag$TRIGONOMETRY_SHIFTING_instance = new RuleTag('TRIGONOMETRY_SHIFTING', 5, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F');
    RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_instance = new RuleTag('TRIGONOMETRY_INVERSE_FUNCTIONS', 6, '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435');
    RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_instance = new RuleTag('TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES', 7, '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430');
    RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_instance = new RuleTag('TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED', 8, '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u043F\u0440\u043E\u0434\u0432\u0438\u043D\u0443\u0442\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430');
    RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_instance = new RuleTag('TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES', 9, '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0435 \u0443\u0433\u043B\u044B \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u0442\u0430\u0431\u043B\u0438\u0446\u044B');
    RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_instance = new RuleTag('TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES', 10, '\u0421\u0443\u043C\u043C\u0430 \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u043E\u0432 - sin, cos');
    RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_instance = new RuleTag('TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES', 11, '\u0421\u0443\u043C\u043C\u0430 \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u043E\u0432 - tg, ctg');
    RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_instance = new RuleTag('TRIGONOMETRY_DOUBLE_ANGLES', 12, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430');
    RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_instance = new RuleTag('TRIGONOMETRY_TRIPLE_ANGLES', 13, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0442\u0440\u043E\u0439\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430');
    RuleTag$TRIGONOMETRY_HALF_ANGLES_instance = new RuleTag('TRIGONOMETRY_HALF_ANGLES', 14, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u043E\u043B\u043E\u0432\u0438\u043D\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430');
    RuleTag$TRIGONOMETRY_MULTI_ANGLES_instance = new RuleTag('TRIGONOMETRY_MULTI_ANGLES', 15, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430 \u043A\u0440\u0430\u0442\u043D\u043E\u0441\u0442\u0438 \u0431\u043E\u043B\u0435\u0435 3');
    RuleTag$TRIGONOMETRY_POWER_REDUCING_instance = new RuleTag('TRIGONOMETRY_POWER_REDUCING', 16, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u043E\u043D\u0438\u0436\u0435\u043D\u0438\u044F \u0441\u0442\u0435\u043F\u0435\u043D\u0438');
    RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_instance = new RuleTag('TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS', 17, '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435 \u0441\u0443\u043C\u043C\u044B/\u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u0432 \u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435');
    RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_instance = new RuleTag('TRIGONOMETRY_AUXILIARY_ARGUMENT', 18, '\u0424\u043E\u0440\u043C\u0443\u043B\u0430 \u0432\u0441\u043F\u043E\u043C\u043E\u0433\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430', false);
    RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_instance = new RuleTag('TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION', 19, '\u0423\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u0430\u044F \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0430');
    RuleTag$TRIGONOMETRY_EULER_FORMULAS_instance = new RuleTag('TRIGONOMETRY_EULER_FORMULAS', 20, '\u041F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u0432 \u043A\u043E\u043C\u043F\u043B\u0435\u043A\u0441\u043D\u043E\u0439 \u0444\u043E\u0440\u043C\u0435', false);
    RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_instance = new RuleTag('TRIGONOMETRY_HYPERBOLIC_FUNCTIONS', 21, '\u0413\u0438\u043F\u0435\u0440\u0431\u043E\u043B\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0438', false);
  }
  var RuleTag$BASIC_MATH_instance;
  function RuleTag$BASIC_MATH_getInstance() {
    RuleTag_initFields();
    return RuleTag$BASIC_MATH_instance;
  }
  var RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_instance;
  function RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_instance;
  }
  var RuleTag$TRIGONOMETRY_STANDARD_ANGLES_instance;
  function RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_STANDARD_ANGLES_instance;
  }
  var RuleTag$TRIGONOMETRY_BASIC_IDENTITY_instance;
  function RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_BASIC_IDENTITY_instance;
  }
  var RuleTag$TRIGONOMETRY_PERIODIC_instance;
  function RuleTag$TRIGONOMETRY_PERIODIC_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_PERIODIC_instance;
  }
  var RuleTag$TRIGONOMETRY_SHIFTING_instance;
  function RuleTag$TRIGONOMETRY_SHIFTING_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_SHIFTING_instance;
  }
  var RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_instance;
  function RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_instance;
  }
  var RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_instance;
  function RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_instance;
  }
  var RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_instance;
  function RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_instance;
  }
  var RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_instance;
  function RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_instance;
  }
  var RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_instance;
  function RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_instance;
  }
  var RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_instance;
  function RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_instance;
  }
  var RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_instance;
  function RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_instance;
  }
  var RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_instance;
  function RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_instance;
  }
  var RuleTag$TRIGONOMETRY_HALF_ANGLES_instance;
  function RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_HALF_ANGLES_instance;
  }
  var RuleTag$TRIGONOMETRY_MULTI_ANGLES_instance;
  function RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_MULTI_ANGLES_instance;
  }
  var RuleTag$TRIGONOMETRY_POWER_REDUCING_instance;
  function RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_POWER_REDUCING_instance;
  }
  var RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_instance;
  function RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_instance;
  }
  var RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_instance;
  function RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_instance;
  }
  var RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_instance;
  function RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_instance;
  }
  var RuleTag$TRIGONOMETRY_EULER_FORMULAS_instance;
  function RuleTag$TRIGONOMETRY_EULER_FORMULAS_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_EULER_FORMULAS_instance;
  }
  var RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_instance;
  function RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_getInstance() {
    RuleTag_initFields();
    return RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_instance;
  }
  RuleTag.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RuleTag',
    interfaces: [Enum]
  };
  function RuleTag$values() {
    return [RuleTag$BASIC_MATH_getInstance(), RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance(), RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance(), RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance(), RuleTag$TRIGONOMETRY_PERIODIC_getInstance(), RuleTag$TRIGONOMETRY_SHIFTING_getInstance(), RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance(), RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance(), RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance(), RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance(), RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance(), RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance(), RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance(), RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance(), RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance(), RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance(), RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance(), RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance(), RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_getInstance(), RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance(), RuleTag$TRIGONOMETRY_EULER_FORMULAS_getInstance(), RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_getInstance()];
  }
  RuleTag.values = RuleTag$values;
  function RuleTag$valueOf(name) {
    switch (name) {
      case 'BASIC_MATH':
        return RuleTag$BASIC_MATH_getInstance();
      case 'TRIGONOMETRY_FUNCTIONS_DEFINITION':
        return RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance();
      case 'TRIGONOMETRY_STANDARD_ANGLES':
        return RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance();
      case 'TRIGONOMETRY_BASIC_IDENTITY':
        return RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance();
      case 'TRIGONOMETRY_PERIODIC':
        return RuleTag$TRIGONOMETRY_PERIODIC_getInstance();
      case 'TRIGONOMETRY_SHIFTING':
        return RuleTag$TRIGONOMETRY_SHIFTING_getInstance();
      case 'TRIGONOMETRY_INVERSE_FUNCTIONS':
        return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance();
      case 'TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES':
        return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance();
      case 'TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED':
        return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance();
      case 'TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES':
        return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance();
      case 'TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES':
        return RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance();
      case 'TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES':
        return RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance();
      case 'TRIGONOMETRY_DOUBLE_ANGLES':
        return RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance();
      case 'TRIGONOMETRY_TRIPLE_ANGLES':
        return RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance();
      case 'TRIGONOMETRY_HALF_ANGLES':
        return RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance();
      case 'TRIGONOMETRY_MULTI_ANGLES':
        return RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance();
      case 'TRIGONOMETRY_POWER_REDUCING':
        return RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance();
      case 'TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS':
        return RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance();
      case 'TRIGONOMETRY_AUXILIARY_ARGUMENT':
        return RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_getInstance();
      case 'TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION':
        return RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance();
      case 'TRIGONOMETRY_EULER_FORMULAS':
        return RuleTag$TRIGONOMETRY_EULER_FORMULAS_getInstance();
      case 'TRIGONOMETRY_HYPERBOLIC_FUNCTIONS':
        return RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_getInstance();
      default:throwISE('No enum constant mathhelper.twf.defaultcontent.defaultrulepacks.autogeneration.RuleTag.' + name);
    }
  }
  RuleTag.valueOf_61zpoe$ = RuleTag$valueOf;
  function TaskSpecificLogicRulePacks() {
    TaskSpecificLogicRulePacks$Companion_getInstance();
  }
  function TaskSpecificLogicRulePacks$Companion() {
    TaskSpecificLogicRulePacks$Companion_instance = this;
    this.deMorganLogicRulePack = listOf(new RulePackITR('LogicBaseOrAndNot', void 0, void 0, 'Basic Boolean Logic: Or, And, Not', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B \u0431\u0443\u043B\u0435\u0432\u043E\u0439 \u043B\u043E\u0433\u0438\u043A\u0438', "Basic operations, it's definitions and properties", '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438, \u0438\u0445 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0438 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F', 'logic', void 0, listOf_0([new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(and(A;B)))', '(or(not(A);not(B)))', 15, false, false, false, false, void 0, void 0, void 0, 100.0), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(or(not(A);not(B)))', '(not(and(A;B)))', 10, false, false, false, false, void 0, void 0, void 0, 100.0), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(or(A;B)))', '(and(not(A);not(B)))', 15, false, false, false, false, void 0, void 0, void 0, 100.0), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(and(not(A);not(B)))', '(not(or(A;B)))', 10, false, false, false, false, void 0, void 0, void 0, 100.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(not(a)))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(not(not(a)))', 90, true, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;a))', 90, true, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;a))', 90, true, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;b))', '(and(b;a))', 40, true, false, false, false, void 0, void 0, void 0, 3.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;b))', '(or(b;a))', 40, true, false, false, false, void 0, void 0, void 0, 3.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;1))', 90, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;0))', 90, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;not(A)))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(not(A);A))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;1))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(1;A))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;1))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 3.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(1;A))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 3.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;0))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 3.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(0;A))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 3.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(0;A))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(0))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 3.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(1))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 3.0), new RuleITR('SimpleComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('ZeroComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('ParentBracketsExpansion', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false, void 0, void 0, void 0, 4.0), new RuleITR('ArgumentsSwap', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false, void 0, void 0, void 0, 4.0), new RuleITR('ArgumentsPermutation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false, void 0, void 0, void 0, 4.0), new RuleITR('OpeningBrackets', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false, void 0, void 0, void 0, 4.0), new RuleITR('ArgumentsPermutationInOriginalOrder', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 41, false, false, false, false, void 0, void 0, void 0, 4.0), new RuleITR('ReduceArithmetic', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false, void 0, void 0, void 0, 4.0), new RuleITR('TwoSidesArithmeticReduce', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false, void 0, void 0, void 0, 4.0)])));
  }
  TaskSpecificLogicRulePacks$Companion.prototype.get = function () {
    return this.deMorganLogicRulePack;
  };
  TaskSpecificLogicRulePacks$Companion.prototype.map = function () {
    var $receiver = this.get();
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
    var destination = LinkedHashMap_init(capacity);
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      destination.put_xwzc9p$(ensureNotNull(element.code), element);
    }
    return destination;
  };
  TaskSpecificLogicRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TaskSpecificLogicRulePacks$Companion_instance = null;
  function TaskSpecificLogicRulePacks$Companion_getInstance() {
    if (TaskSpecificLogicRulePacks$Companion_instance === null) {
      new TaskSpecificLogicRulePacks$Companion();
    }
    return TaskSpecificLogicRulePacks$Companion_instance;
  }
  TaskSpecificLogicRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TaskSpecificLogicRulePacks',
    interfaces: []
  };
  function TexReportUtils() {
    TexReportUtils$Companion_getInstance();
  }
  function TexReportUtils$Companion() {
    TexReportUtils$Companion_instance = this;
  }
  TexReportUtils$Companion.prototype.renderToTex_4lks0b$ = function (tasks, reportType) {
    switch (reportType.name) {
      case 'RESULT_ONLY':
        return this.resultOnlyReport_0(tasks);
      case 'RESULT_WITH_POSTPROCESSING':
        return this.resultWithPostProcessingReport_0(tasks);
      case 'RESULT_WITH_SUBSTITUTIONS':
        return this.resultWithSubstitutionsReport_wv2sjc$(tasks);
      case 'RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS':
        return this.fullReport_wv2sjc$(tasks);
      default:return Kotlin.noWhenBranchMatched();
    }
  };
  TexReportUtils$Companion.prototype.addDollars_0 = function (str) {
    return (new StringBuilder('$')).append_gw00v9$(str).append_gw00v9$('$').toString();
  };
  TexReportUtils$Companion.prototype.makeReplacements_0 = function (report) {
    var result = replace(report, '\u03C0', '\\pi');
    result = replace(result, 'ctg', 'cot');
    result = replace(result, 'tg', 'tan');
    return result;
  };
  TexReportUtils$Companion.prototype.resultWithPostProcessingReport_0 = function (tasks) {
    var reportBuilder = StringBuilder_init_0();
    for (var i = 0; i !== tasks.size; ++i) {
      var task = tasks.get_za3lpa$(i);
      var intermediateExpression1 = task.expressionTaskIntermediateData.expressionBeforePostprocessPhase1.toString();
      var intermediateExpression2 = task.expressionTaskIntermediateData.expressionBeforePostprocessPhase2.toString();
      reportBuilder.append_gw00v9$((i + 1 | 0).toString() + ')' + '\n' + '\n');
      reportBuilder.append_gw00v9$('original task: ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(task.originalExpressionTex) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('generated task (before postprocessing phase 1): ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(structureStringToTexString(intermediateExpression1)) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('generated task (before postprocessing phase 2): ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(structureStringToTexString(intermediateExpression2)) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('generated task (after \\ \\ postprocessing): ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(task.goalExpressionTex) + '}' + '\n' + '\n');
    }
    var report = reportBuilder.toString();
    report = this.makeReplacements_0(report);
    return report;
  };
  TexReportUtils$Companion.prototype.fullReport_wv2sjc$ = function (tasks) {
    var reportBuilder = StringBuilder_init_0();
    for (var i = 0; i !== tasks.size; ++i) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
      var task = tasks.get_za3lpa$(i);
      var appliedPostprocessSubstitutions = task.expressionTaskIntermediateData.appliedPostprocessSubstitutions;
      var steps = Kotlin.isType(tmp$_1 = (tmp$_0 = (tmp$ = task.solutionsStepsTree) != null ? tmp$.values : null) != null ? first_0(tmp$_0) : null, List) ? tmp$_1 : throwCCE();
      var expressionChain = (tmp$_3 = (tmp$_2 = task.solutionPlainText) != null ? split(tmp$_2, [' = ']) : null) != null ? tmp$_3 : ArrayList_init();
      var expressionChainTex = ArrayList_init();
      var j = 0;
      for (var tmp$_5 = steps.iterator(); tmp$_5.hasNext(); ++j) {
        var step = tmp$_5.next();
        var tmp$_6;
        var expressionState = expressionChain.get_za3lpa$(j);
        var structureString = ExpressionUtils$Companion_getInstance().stringToGeneratedExpression_61zpoe$(expressionState).expressionNode.identifier;
        var rule = step.substitution.code;
        var color = step.substitution.isExtending ? 'red' : 'orange';
        var lastStepId = (tmp$_6 = appliedPostprocessSubstitutions.get_11rb$(step.substitution.code)) != null ? tmp$_6 : 2147483647;
        if (step.stepId >= lastStepId) {
          color = 'green';
        }
        expressionChainTex.add_11rb$('\\' + 'textcolor{' + color + '}{' + ('[' + this.ruleToTex_61zpoe$(rule) + ']') + '}' + ' = ' + '\\textcolor{black}{' + structureStringToTexString(structureString) + '}' + ' = ' + '\\newline');
      }
      if ((tmp$_4 = task.goalExpressionTex) != null) {
        expressionChainTex.add_11rb$(tmp$_4);
      }
      var solution = joinToString(expressionChainTex, '$ \\newline = $', '\\texttt{$', '$}');
      reportBuilder.append_gw00v9$((i + 1 | 0).toString() + ')' + '\n' + '\n');
      reportBuilder.append_gw00v9$('original task: ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(task.originalExpressionTex) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('generated task: ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(task.goalExpressionTex) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('original task structure string: ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(task.originalExpressionStructureString) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('generated task structure string: ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(task.goalExpressionStructureString) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('solution: ');
      reportBuilder.append_gw00v9$(solution + '\n' + '\n');
    }
    var report = reportBuilder.toString();
    report = this.makeReplacements_0(report);
    return report;
  };
  TexReportUtils$Companion.prototype.resultOnlyReport_0 = function (tasks) {
    var reportBuilder = StringBuilder_init_0();
    if (tasks.isEmpty()) {
      return reportBuilder.toString();
    }
    reportBuilder.append_gw00v9$('\n\n original task: ');
    reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(tasks.get_za3lpa$(0).originalExpressionTex) + '}' + '\n' + '\n');
    reportBuilder.append_gw00v9$('\\bigskip');
    for (var i = 0; i !== tasks.size; ++i) {
      var task = tasks.get_za3lpa$(i);
      reportBuilder.append_gw00v9$((i + 1 | 0).toString() + ') ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(task.goalExpressionTex) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('\\bigskip');
    }
    var report = reportBuilder.toString();
    report = this.makeReplacements_0(report);
    return report;
  };
  TexReportUtils$Companion.prototype.resultWithSubstitutionsReport_wv2sjc$ = function (tasks) {
    var reportBuilder = StringBuilder_init_0();
    for (var i = 0; i !== tasks.size; ++i) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      var task = tasks.get_za3lpa$(i);
      var appliedPostprocessSubstitutions = task.expressionTaskIntermediateData.appliedPostprocessSubstitutions;
      var steps = Kotlin.isType(tmp$_1 = (tmp$_0 = (tmp$ = task.solutionsStepsTree) != null ? tmp$.values : null) != null ? first_0(tmp$_0) : null, List) ? tmp$_1 : throwCCE();
      var rulesTex = ArrayList_init();
      tmp$_2 = steps.iterator();
      while (tmp$_2.hasNext()) {
        var step = tmp$_2.next();
        var rule = step.substitution.code;
        var color = step.substitution.isExtending ? 'red' : 'orange';
        var lastStepId = (tmp$_3 = appliedPostprocessSubstitutions.get_11rb$(step.substitution.code)) != null ? tmp$_3 : 2147483647;
        if (step.stepId >= lastStepId) {
          color = 'green';
        }
        rulesTex.add_11rb$('\\' + 'textcolor{' + color + '}{' + this.ruleToTex_61zpoe$(rule) + '}');
      }
      reportBuilder.append_gw00v9$((i + 1 | 0).toString() + ')' + '\n' + '\n');
      reportBuilder.append_gw00v9$('original task: ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(task.originalExpressionTex) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('generated task: ');
      reportBuilder.append_gw00v9$('\\' + 'textcolor{blue}{' + this.addDollars_0(task.goalExpressionTex) + '}' + '\n' + '\n');
      reportBuilder.append_gw00v9$('applied substitutions: ' + joinToString(rulesTex, '$;\\ $', '\\texttt{$', '$} \\newline'));
    }
    var report = reportBuilder.toString();
    report = this.makeReplacements_0(report);
    return report;
  };
  TexReportUtils$Companion.prototype.ruleToTex_61zpoe$ = function (rule) {
    var tmp$;
    if (!contains_1(rule, '__to__')) {
      if (contains_1(rule, 'sophisticatedPostprocessing')) {
        split(rule, ['sophisticatedPostprocessing']).get_za3lpa$(0);
      }
      tmp$ = rule;
    }
     else {
      var parts = split(rule, ['__to__']);
      var left = parts.get_za3lpa$(0);
      var right = parts.get_za3lpa$(1);
      tmp$ = structureStringToTexString(left) + ' \\rightarrow ' + structureStringToTexString(right);
    }
    var ruleTex = tmp$;
    return ruleTex;
  };
  TexReportUtils$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TexReportUtils$Companion_instance = null;
  function TexReportUtils$Companion_getInstance() {
    if (TexReportUtils$Companion_instance === null) {
      new TexReportUtils$Companion();
    }
    return TexReportUtils$Companion_instance;
  }
  TexReportUtils.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TexReportUtils',
    interfaces: []
  };
  function TrigonometricRulePacks() {
    TrigonometricRulePacks$Companion_getInstance();
  }
  function TrigonometricRulePacks$Companion() {
    TrigonometricRulePacks$Companion_instance = this;
    this.trigonometricRulePacks = listOf_0([new RulePackITR('ObviousIdentities', void 0, void 0, 'Obvious identities', '\u041F\u0440\u043E\u0441\u0442\u044B\u0435 \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u044F, \u043D\u043E \u043F\u043E\u043C\u043E\u0433\u0430\u044E\u0449\u0438\u0435 \u0433\u0435\u043D\u0435\u0440\u0430\u0442\u043E\u0440\u0443 \u0437\u0430\u0434\u0430\u0447', 'Obvious identities', '\u041F\u0440\u043E\u0441\u0442\u044B\u0435 \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u044F, \u043D\u043E \u043F\u043E\u043C\u043E\u0433\u0430\u044E\u0449\u0438\u0435 \u0433\u0435\u043D\u0435\u0440\u0430\u0442\u043E\u0440\u0443 \u0437\u0430\u0434\u0430\u0447', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(2)', '(+(1;1))', 89, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(1;+(-(1))))', 89, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(+(-(1));1))', 89, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(/(a;b);2))', '(/(^(a;2);^(b;2)))', 89, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(*(+(a;b);c)))', '(tg(+(*(a;c);*(b;c))))', 85, true, true, false, false, 'SORTED', void 0, 0.0, 1000.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(*(+(a;b);c)))', '(ctg(+(*(a;c);*(b;c))))', 85, true, true, false, false, 'SORTED', void 0, 0.0, 1000.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(+(a;b);c)))', '(cos(+(*(a;c);*(b;c))))', 85, true, true, false, false, 'SORTED', void 0, 0.0, 1000.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(+(a;b);c)))', '(sin(+(*(a;c);*(b;c))))', 85, true, true, false, false, 'SORTED', void 0, 0.0, 1000.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0()))])), new RulePackITR('BasicFunctionsDefinitionAndParity', void 0, void 0, 'Sin, Cos, Tg, Ctg Definitions', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 sin(x), cos(x), tg(x), ctg(x), \u0438\u0445 \u0447\u0451\u0442\u043D\u043E\u0441\u0442\u044C/\u043D\u0435\u0447\u0451\u0442\u043D\u043E\u0441\u0442\u044C', 'Definition of sin(x), cos(x), tg(x), ctg(x); parity', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 sin(x), cos(x), tg(x), ctg(x), \u0438\u0445 \u0447\u0451\u0442\u043D\u043E\u0441\u0442\u044C/\u043D\u0435\u0447\u0451\u0442\u043D\u043E\u0441\u0442\u044C', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(tg(a);ctg(a)))', '(1)', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(ctg(a);tg(a)))', '(1)', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(tg(x);ctg(x)))', 5, false, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(ctg(x);tg(x)))', 5, false, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(sin(a);cos(a)))', '(tg(a))', 25, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(/(sin(a);cos(a)))', 25, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(cos(a);sin(a)))', '(ctg(a))', 25, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(/(cos(a);sin(a)))', 25, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;ctg(a)))', '(tg(a))', 25, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(/(1;ctg(a)))', 25, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;tg(a)))', '(ctg(a))', 25, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(/(1;tg(a)))', 25, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(-(a))))', '(+(-(sin(a))))', 25, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(sin(a))))', '(sin(+(-(a))))', 25, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(sin(+(-(a))))))', 25, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(-(a))))', '(cos(a))', 25, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(cos(+(-(a))))', 25, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(-(a))))', '(+(-(tg(a))))', 25, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(tg(a))))', '(tg(+(-(a))))', 25, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(+(-(tg(+(-(a))))))', 25, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(-(a))))', '(+(-(ctg(a))))', 25, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(ctg(a))))', '(ctg(+(-(a))))', 25, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(+(-(ctg(+(-(a))))))', 25, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(*(sin(a);ctg(a)))', 85, true, true, false, false, 'SORTED', void 0, void 0, 1.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(/(sin(a);tg(a)))', 85, true, true, false, false, 'SORTED', void 0, void 0, 1.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(/(cos(a);ctg(a)))', 85, true, true, false, false, 'SORTED', void 0, void 0, 1.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(*(cos(a);tg(a)))', 85, true, true, false, false, 'SORTED', void 0, void 0, 1.0, void 0, listOf(RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0()))])), new RulePackITR('BasicTrigonometryTable', void 0, void 0, 'Trigonometry table', '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0442\u0430\u0431\u043B\u0438\u0446\u0430', 'Trigonometry table - basic angles (pi/3, pi/4, pi/2, ...)', '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0442\u0430\u0431\u043B\u0438\u0446\u0430 - \u0431\u0430\u0437\u043E\u0432\u044B\u0435 \u0443\u0433\u043B\u044B (pi/3, pi/4, pi/2, ...)', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(sin(0))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(0))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(cos(0))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(tg(0))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(\u03C0;6)))', '(/(1;2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0.5)', '(sin(/(\u03C0;6)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(\u03C0;6)))', '(/(^(3;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(3;0.5);2))', '(cos(/(\u03C0;6)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(\u03C0;6)))', '(/(^(3;/(1;2));3))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(3;0.5);3))', '(tg(/(\u03C0;6)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(\u03C0;6)))', '(^(3;/(1;2)))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(3;/(1;2)))', '(ctg(/(\u03C0;6)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(\u03C0;4)))', '(/(^(2;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(2;0.5);2))', '(sin(/(\u03C0;4)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(2)', '(*(4;^(sin(/(\u03C0;4));2)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(2;^(sin(/(\u03C0;4));2)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(\u03C0;4)))', '(/(^(2;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(2;0.5);2))', '(cos(/(\u03C0;4)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(2)', '(*(4;^(cos(/(\u03C0;4));2)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(2;^(cos(/(\u03C0;4));2)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(\u03C0;4)))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(tg(/(\u03C0;4)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(\u03C0;4)))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(ctg(/(\u03C0;4)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(\u03C0;3)))', '(/(^(3;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(3;0.5);2))', '(sin(/(\u03C0;3)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(\u03C0;3)))', '(/(1;2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0.5)', '(cos(/(\u03C0;3)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(\u03C0;3)))', '(^(3;/(1;2)))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(3;/(1;2)))', '(tg(/(\u03C0;3)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(\u03C0;3)))', '(/(^(3;/(1;2));3))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(3;/(1;2));3))', '(ctg(/(\u03C0;3)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(\u03C0;2)))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(sin(/(\u03C0;2)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(\u03C0;2)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(cos(/(\u03C0;2)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(\u03C0;2)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(ctg(/(\u03C0;2)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(*(2;\u03C0);3)))', '(/(^(3;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(3;0.5);2))', '(sin(/(*(2;\u03C0);3)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(*(2;\u03C0);3)))', '(+(-(/(1;2))))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(0.5)))', '(cos(/(*(2;\u03C0);3)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(*(2;\u03C0);3)))', '(+(-(^(3;/(1;2)))))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(^(3;/(1;2)))))', '(tg(/(*(2;\u03C0);3)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(*(2;\u03C0);3)))', '(+(-(/(^(3;/(1;2));3))))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(/(^(3;/(1;2));3))))', '(ctg(/(*(2;\u03C0);3)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(*(3;\u03C0);4)))', '(/(^(2;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(2;0.5);2))', '(sin(/(*(3;\u03C0);4)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(*(3;\u03C0);4)))', '(+(-(/(^(2;/(1;2));2))))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(/(^(2;/(1;2));2))))', '(cos(/(*(3;\u03C0);4)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(*(3;\u03C0);4)))', '(+(-(1)))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(1)))', '(tg(/(*(3;\u03C0);4)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(*(3;\u03C0);4)))', '(+(-(1)))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(1)))', '(ctg(/(*(3;\u03C0);4)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(*(5;\u03C0);6)))', '(/(1;2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0.5)', '(sin(/(*(5;\u03C0);6)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(2;sin(/(*(5;\u03C0);6))))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(*(5;\u03C0);6)))', '(+(-(/(^(3;/(1;2));2))))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(/(^(3;/(1;2));2))))', '(cos(/(*(5;\u03C0);6)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(*(5;\u03C0);6)))', '(+(-(/(^(3;/(1;2));3))))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(/(^(3;/(1;2));3))))', '(tg(/(*(5;\u03C0);6)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(*(5;\u03C0);6)))', '(+(-(^(3;/(1;2)))))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(^(3;/(1;2)))))', '(ctg(/(*(5;\u03C0);6)))', 13, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(\u03C0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(sin(\u03C0))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(\u03C0))', '(+(-(1)))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(1)))', '(cos(\u03C0))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(\u03C0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(tg(\u03C0))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(*(3;\u03C0);2)))', '(+(-(1)))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(1)))', '(sin(/(*(3;\u03C0);2)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(*(3;\u03C0);2)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(cos(/(*(3;\u03C0);2)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(*(3;\u03C0);2)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(ctg(/(*(3;\u03C0);2)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(2;\u03C0)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(sin(*(2;\u03C0)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;\u03C0)))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(cos(*(2;\u03C0)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(*(2;\u03C0)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(tg(*(2;\u03C0)))', 89, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(sin(/(\u03C0;6));cos(/(\u03C0;3))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(sin(/(\u03C0;6));cos(/(\u03C0;3))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(sin(+(/(\u03C0;3);/(\u03C0;6))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(sin(+(/(*(2;\u03C0);3);+(-(/(\u03C0;6))))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(2;sin(/(\u03C0;6))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(2;cos(/(\u03C0;3))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(cos(+(/(\u03C0;3);/(\u03C0;6))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(cos(+(/(*(2;\u03C0);3);+(-(/(\u03C0;6))))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0()))])), new RulePackITR('BasicTrigonometricDefinitionsIdentity', void 0, void 0, 'Basic Trigonometric Identity', '\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0442\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u043E', 'Basic Trigonometric Identity', '\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0442\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u043E', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(sin(a);2);^(cos(a);2)))', '(1)', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(^(sin(x);2);^(cos(x);2)))', 5, false, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(cos(a);2);^(sin(a);2)))', '(1)', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(^(cos(x);2);^(sin(x);2)))', 5, false, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;-(^(sin(a);2))))', '(^(cos(a);2))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;-(^(cos(a);2))))', '(^(sin(a);2))', 25, false, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(cos(a);2))', '(+(1;-(^(sin(a);2))))', 25, true, true, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(^(+(1;-(^(sin(a);2)));0.5))', 25, true, true, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(sin(a);2))', '(+(1;-(^(cos(a);2))))', 25, true, true, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(^(+(1;-(^(cos(a);2)));0.5))', 25, true, true, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;^(cos(a);2)))', '(+(1;^(tg(a);2)))', 25, true, true, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;^(tg(a);2)))', '(/(1;^(cos(a);2)))', 25, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;^(sin(a);2)))', '(+(1;^(ctg(a);2)))', 25, true, true, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;^(ctg(a);2)))', '(/(1;^(sin(a);2)))', 25, false, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;+(1;^(tg(a);2))))', '(^(cos(a);2))', 25, false, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(cos(a);2))', '(/(1;+(1;^(tg(a);2))))', 25, true, true, false, false, 'SORTED', void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;+(1;^(ctg(a);2))))', '(^(sin(a);2))', 25, false, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(sin(a);2))', '(/(1;+(1;^(ctg(a);2))))', 25, true, true, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(ctg(a);2))', '(+(/(1;^(sin(a);2));+(-(1))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(tg(a);2))', '(+(/(1;^(cos(a);2));+(-(1))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(^(cos(x);2);+(1;^(tg(x);2))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(^(sin(x);2);+(1;^(ctg(x);2))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(/(1;^(cos(x);2));+(-(^(tg(x);2)))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(/(1;^(sin(x);2));+(-(^(ctg(x);2)))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(^(sin(x);2);^(cos(x);2);+(-(1))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(*(^(tg(x);2);^(ctg(x);2));+(-(1))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(1;^(tg(x);2);+(-(/(1;^(cos(x);2))))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(1;^(ctg(x);2);+(-(/(1;^(sin(x);2))))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(^(sin(x);2);+(1;^(ctg(x);2))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0()))])), new RulePackITR('TrigonometryPeriods', void 0, void 0, 'Trigonometry periods', '\u041F\u0435\u0440\u0438\u043E\u0434\u044B', 'Periods of basic trigonometry functions', '\u041F\u0435\u0440\u0438\u043E\u0434\u044B \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0445 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;*(2;\u03C0))))', '(sin(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;-(*(2;\u03C0)))))', '(sin(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(sin(+(a;*(2;\u03C0))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 10.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;*(2;\u03C0))))', '(cos(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;-(*(2;\u03C0)))))', '(cos(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(cos(+(a;*(2;\u03C0))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 10.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;\u03C0)))', '(tg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;-(\u03C0))))', '(tg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(tg(+(a;\u03C0)))', 80, true, true, false, false, 'SORTED', void 0, void 0, 10.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;\u03C0)))', '(ctg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;-(\u03C0))))', '(ctg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(ctg(+(a;\u03C0)))', 80, true, true, false, false, 'SORTED', void 0, void 0, 10.0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;*(2;\u03C0;k))))', '(sin(a))', 30, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;*(2;\u03C0;k))))', '(cos(a))', 30, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0()))])), new RulePackITR('TrigonometryShiftingFormulas', void 0, void 0, 'Trigonometry shifting formulas', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F', 'Trigonometry shifting formulas', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;\u03C0)))', '(+(-(sin(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;-(\u03C0))))', '(+(-(sin(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(sin(+(a;\u03C0)))))', 85, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(sin(+(a;\u03C0)))))', 80, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;\u03C0)))', '(+(-(cos(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;-(\u03C0))))', '(+(-(cos(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(cos(+(a;\u03C0)))))', 85, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(cos(+(a;\u03C0)))))', 80, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;\u03C0)))', '(tg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;-(\u03C0))))', '(tg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(tg(+(a;\u03C0)))', 85, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;\u03C0)))', '(ctg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;-(\u03C0))))', '(ctg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(ctg(+(a;\u03C0)))', 85, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(\u03C0;a)))', '(+(-(sin(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(\u03C0;-(a))))', '(sin(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(sin(+(\u03C0;a)))))', 85, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(sin(+(\u03C0;a)))))', 80, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(\u03C0;a)))', '(+(-(cos(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(\u03C0;-(a))))', '(+(-(cos(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(cos(+(\u03C0;a)))))', 85, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(\u03C0;a)))', '(tg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(\u03C0;-(a))))', '(+(-(tg(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(tg(+(\u03C0;a)))', 85, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(\u03C0;a)))', '(ctg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(\u03C0;-(a))))', '(+(-(ctg(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(ctg(+(\u03C0;a)))', 85, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;-(/(\u03C0;2)))))', '(+(-(cos(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;/(\u03C0;2))))', '(cos(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(sin(+(a;-(/(\u03C0;2)))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(sin(+(a;/(\u03C0;2))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;-(/(\u03C0;2)))))', '(sin(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;/(\u03C0;2))))', '(+(-(sin(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(cos(+(a;-(/(\u03C0;2)))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(cos(+(a;/(\u03C0;2))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;-(/(\u03C0;2)))))', '(+(-(ctg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;/(\u03C0;2))))', '(+(-(ctg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;-(/(\u03C0;2)))))', '(+(-(tg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;/(\u03C0;2))))', '(+(-(tg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(+(-(tg(+(a;-(/(\u03C0;2)))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(+(-(tg(+(a;/(\u03C0;2))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(+(-(ctg(+(a;-(/(\u03C0;2)))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(+(-(ctg(+(a;/(\u03C0;2))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(/(\u03C0;2);-(a))))', '(cos(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(/(\u03C0;2);a)))', '(cos(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(sin(+(/(\u03C0;2);-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(sin(+(/(\u03C0;2);a)))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(/(\u03C0;2);-(a))))', '(sin(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(/(\u03C0;2);a)))', '(+(-(sin(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(cos(+(/(\u03C0;2);-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(cos(+(/(\u03C0;2);a)))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(/(\u03C0;2);-(a))))', '(ctg(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(/(\u03C0;2);a)))', '(+(-(ctg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(/(\u03C0;2);-(a))))', '(tg(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(/(\u03C0;2);a)))', '(+(-(tg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(tg(+(/(\u03C0;2);-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(+(-(tg(+(/(\u03C0;2);a)))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(ctg(+(/(\u03C0;2);-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(+(-(ctg(+(/(\u03C0;2);a)))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(/(*(3;\u03C0);2);-(a))))', '(+(-(cos(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(/(*(3;\u03C0);2);a)))', '(+(-(cos(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(sin(+(/(*(3;\u03C0);2);-(a))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(sin(+(/(*(3;\u03C0);2);a)))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(/(*(3;\u03C0);2);-(a))))', '(+(-(sin(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(/(*(3;\u03C0);2);a)))', '(sin(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(cos(+(/(*(3;\u03C0);2);-(a))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(cos(+(/(*(3;\u03C0);2);a)))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(/(*(3;\u03C0);2);-(a))))', '(ctg(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(/(*(3;\u03C0);2);a)))', '(+(-(ctg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(/(*(3;\u03C0);2);-(a))))', '(tg(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(/(*(3;\u03C0);2);a)))', '(+(-(tg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(tg(+(/(*(3;\u03C0);2);-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(+(-(tg(+(/(*(3;\u03C0);2);a)))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(ctg(+(/(*(3;\u03C0);2);-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(+(-(ctg(+(/(*(3;\u03C0);2);a)))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;-(/(*(3;\u03C0);2)))))', '(cos(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;/(*(3;\u03C0);2))))', '(+(-(cos(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(sin(+(a;-(/(*(3;\u03C0);2)))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(sin(+(a;/(*(3;\u03C0);2))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;-(/(*(3;\u03C0);2)))))', '(+(-(sin(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;/(*(3;\u03C0);2))))', '(sin(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(cos(+(a;-(/(*(3;\u03C0);2)))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(cos(+(a;/(*(3;\u03C0);2))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;-(/(*(3;\u03C0);2)))))', '(+(-(ctg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;/(*(3;\u03C0);2))))', '(+(-(ctg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;-(/(*(3;\u03C0);2)))))', '(+(-(tg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;/(*(3;\u03C0);2))))', '(+(-(tg(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(+(-(tg(+(a;-(/(*(3;\u03C0);2)))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(+(-(tg(+(a;/(*(3;\u03C0);2))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(+(-(ctg(+(a;-(/(*(3;\u03C0);2)))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(+(-(ctg(+(a;/(*(3;\u03C0);2))))))', 14, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0()))])), new RulePackITR('TrigonometryArcFunctions', void 0, void 0, 'Trigonometry arcfunctions', '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438', 'Trigonometry arcfunctions', '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u044C', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(asin(sin(a)))', '(a)', 30, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(asin(sin(a)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(acos(cos(a)))', '(a)', 30, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(acos(cos(a)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(atg(tg(a)))', '(a)', 30, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(atg(tg(a)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(actg(ctg(a)))', '(a)', 30, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(actg(ctg(a)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(asin(a)))', '(a)', 30, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(sin(asin(a)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(acos(a)))', '(a)', 30, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(cos(acos(a)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(atg(a)))', '(a)', 30, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(tg(atg(a)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(actg(a)))', '(a)', 30, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(ctg(actg(a)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0()))])), new RulePackITR('TrigonometryArcFunctionsProperties', void 0, void 0, 'Trigonometry arcfunctions properties', '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Trigonometry arcfunctions properties', '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;2))', '(+(asin(x);acos(x)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;2))', '(+(atg(x);actg(x)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(2;+(asin(x);acos(x))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(2;+(atg(x);actg(x))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(asin(a))', '(+(/(\u03C0;2);+(-(acos(a)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(acos(a))', '(+(/(\u03C0;2);+(-(asin(a)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(atg(a))', '(+(/(\u03C0;2);+(-(actg(a)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(actg(a))', '(+(/(\u03C0;2);+(-(atg(a)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(asin(+(-(a))))', '(+(-(asin(a))))', 30, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(asin(a))))', '(asin(+(-(a))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(asin(x);asin(+(-(x)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(acos(+(-(a))))', '(+(\u03C0;-(acos(a))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(\u03C0;-(acos(a))))', '(acos(+(-(a))))', 30, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(+(acos(x);acos(+(-(x)))))', 30, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(atg(+(-(a))))', '(+(-(atg(a))))', 30, false, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(atg(a))))', '(atg(+(-(a))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(atg(a))', '(actg(/(1;a)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(actg(+(-(a))))', '(+(\u03C0;-(actg(a))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(actg(a))', '(+(/(\u03C0;2);-(atg(a))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0()))])), new RulePackITR('TrigonometryArcFunctionsAdvanced', void 0, void 0, 'Trigonometry arcfunctions advanced', '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u043F\u0440\u043E\u0434\u0432\u0438\u043D\u0443\u0442\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Trigonometry arcfunctions advanced', '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u043F\u0440\u043E\u0434\u0432\u0438\u043D\u0443\u0442\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(acos(a)))', '(^(+(1;-(^(a;2)));/(1;2)))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(asin(a)))', '(^(+(1;-(^(a;2)));/(1;2)))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(atg(a)))', '(/(a;^(+(1;^(a;2));/(1;2))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(atg(a)))', '(/(1;^(+(1;^(a;2));/(1;2))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(actg(a)))', '(/(1;^(+(1;^(a;2));/(1;2))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(actg(a)))', '(/(a;^(+(1;^(a;2));/(1;2))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(asin(a)))', '(/(^(+(1;-(^(a;2)));/(1;2));a))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(asin(a))', '(atg(/(a;^(+(1;-(^(a;2)));0.5))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(acos(a))', '(actg(/(a;^(+(1;-(^(a;2)));0.5))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(acos(a))', '(*(2;asin(^(/(+(1;-(a));2);0.5))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(acos(a))', '(*(2;acos(^(/(+(1;a);2);0.5))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(acos(a))', '(*(2;atg(^(/(+(1;-(a));+(1;a));0.5))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(atg(a))', '(asin(/(a;^(+(1;^(a;2));0.5))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(actg(a))', '(acos(/(a;^(+(1;^(a;2));0.5))))', 30, true, false, false, false, void 0, void 0, 3.0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0()))])), new RulePackITR('TrigonometryArcFunctionsStandardSAngles', void 0, void 0, 'Trigonometry arcfunctions of standard angles', '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0445 \u0443\u0433\u043B\u043E\u0432', 'Trigonometry arcfunctions', '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0445 \u0443\u0433\u043B\u043E\u0432 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u0442\u0430\u0431\u043B\u0438\u0446\u044B', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;2))', '(+(-(asin(+(-(1))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(2;+(-(asin(+(-(1)))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(acos(+(-(1))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;4))', '(+(-(atg(+(-(1))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(4;+(-(atg(+(-(1)))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(3;\u03C0);4))', '(actg(+(-(1))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(3;\u03C0))', '(*(4;actg(+(-(1)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;3))', '(+(-(asin(+(-(/(^(3;0.5);2)))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(3;+(-(asin(+(-(/(^(3;0.5);2))))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(5;\u03C0);6))', '(acos(+(-(/(^(3;0.5);2)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(5;\u03C0))', '(*(6;acos(+(-(/(^(3;0.5);2))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;4))', '(+(-(asin(+(-(/(^(2;0.5);2)))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(4;+(-(asin(+(-(/(^(2;0.5);2))))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(3;\u03C0);4))', '(acos(+(-(/(^(2;0.5);2)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(3;\u03C0))', '(*(4;acos(+(-(/(^(2;0.5);2))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;6))', '(+(-(asin(+(-(/(1;2)))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(6;+(-(asin(+(-(/(1;2))))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;\u03C0);3))', '(acos(+(-(/(1;2)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(2;\u03C0))', '(*(3;acos(+(-(/(1;2))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(asin(0))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;2))', '(acos(0))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(2;acos(0)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;6))', '(asin(/(1;2)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(6;asin(/(1;2))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;3))', '(acos(/(1;2)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(3;acos(/(1;2))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;4))', '(asin(/(^(2;0.5);2)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(asin(/(^(2;0.5);2)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;3))', '(asin(/(^(3;0.5);2)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(3;asin(/(^(3;0.5);2))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;6))', '(acos(/(^(3;0.5);2)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(6;acos(/(^(3;0.5);2))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(acos(1))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;2))', '(asin(1))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(2;asin(1)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;3))', '(+(-(atg(+(-(^(3;0.5)))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(3;+(-(atg(+(-(^(3;0.5))))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(5;\u03C0);6))', '(actg(+(-(^(3;0.5)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(5;\u03C0))', '(*(6;actg(+(-(^(3;0.5))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;6))', '(+(-(atg(+(-(/(^(3;0.5);3)))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(6;+(-(atg(+(-(/(^(3;0.5);3))))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;\u03C0);3))', '(actg(+(-(/(^(3;0.5);3)))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(2;\u03C0))', '(*(3;actg(+(-(/(^(3;0.5);3))))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;3))', '(atg(/(^(3;0.5);3)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(3;atg(/(^(3;0.5);3))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;6))', '(actg(/(^(3;0.5);3)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(6;actg(/(^(3;0.5);3))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;3))', '(atg(^(3;0.5)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(3;atg(^(3;0.5))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C0;6))', '(actg(^(3;0.5)))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C0)', '(*(6;actg(^(3;0.5))))', 30, true, false, false, false, void 0, void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0()))])), new RulePackITR('TrigonometrySinCosSumReduction', void 0, void 0, "Trigonometry Sin Cos of Sum and it's Reduction", '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F sin cos \u0441\u0443\u043C\u043C\u044B \u0438 \u0438\u0445 \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u0435', 'Sin Cos of sum and difference; reduction Formulas', 'Sin cos \u0441\u0443\u043C\u043C\u044B \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438; \u0438\u0445 \u0444\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F', "Placed in separated rule pack for tasks for Derivation of formulas on Sin Cos of Double Argument, also it's Sum, Difference and Product", '\u0412\u044B\u043D\u0435\u0441\u0435\u043D\u044B \u0432 \u043E\u0442\u0434\u0435\u043B\u044C\u043D\u044B\u0439 \u043F\u0430\u043A\u0435\u0442 \u043F\u0440\u0430\u0432\u0438\u043B \u0434\u043B\u044F \u0437\u0430\u0434\u0430\u0447 \u0432\u044B\u0432\u043E\u0434 \u0444\u043E\u0440\u043C\u0443\u043B \u043D\u0430 sin cos \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430, \u0430 \u0442\u0430\u043A\u0436\u0435 \u0438\u0445 \u0441\u0443\u043C\u043C\u0443, \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u0438 \u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435', 'standard_math', listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;b)))', '(+(*(sin(a);cos(b));*(sin(b);cos(a))))', 24, true, true, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(sin(a);cos(b));*(sin(b);cos(a))))', '(sin(+(a;b)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;-(b))))', '(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))', 24, true, true, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))', '(sin(+(a;-(b))))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;b)))', '(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))', 24, true, true, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))', '(cos(+(a;b)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;-(b))))', '(+(*(cos(a);cos(b));*(sin(b);sin(a))))', 24, true, true, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(cos(a);cos(b));*(sin(b);sin(a))))', '(cos(+(a;-(b))))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(b;-(a))))', '(+(-(sin(+(a;-(b))))))', 14, true, false, false, false, 'SORTED', void 0, 2.0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(sin(+(a;-(b))))))', '(sin(+(b;-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0()))])), new RulePackITR('TrigonometryTgCtgSumReduction', void 0, void 0, "Trigonometry Tg Ctg of Sum and it's Reduction", '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F tg ctg \u0441\u0443\u043C\u043C\u044B \u0438 \u0438\u0445 \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u0435', 'Tg Ctg of sum and difference', 'Tg ctg \u0441\u0443\u043C\u043C\u044B \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438', 'Tg Ctg of sum and difference', 'Tg ctg \u0441\u0443\u043C\u043C\u044B \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438', 'standard_math', listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;b)))', '(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))', 30, true, false, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))', '(tg(+(a;b)))', 30, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;-(b))))', '(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))', 30, true, false, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))', '(tg(+(a;-(b))))', 30, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;b)))', '(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))', 30, true, false, true, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))', '(ctg(+(a;b)))', 30, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;-(b))))', '(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))', 30, true, false, true, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))', '(ctg(+(a;-(b))))', 30, false, false, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0()))])), new RulePackITR('TrigonometryArgFormulas', void 0, void 0, 'Trigonometry argument formulas', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E, \u0442\u0440\u043E\u0439\u043D\u043E\u0433\u043E, \u043F\u043E\u043B\u043E\u0432\u0438\u0438\u043D\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430', 'Trigonometry argument formulas', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E, \u0442\u0440\u043E\u0439\u043D\u043E\u0433\u043E, \u043F\u043E\u043B\u043E\u0432\u0438\u0438\u043D\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(*(tg(/(a;2));+(1;cos(a))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(*(ctg(/(a;2));+(1;+(-(cos(a))))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(/(+(1;+(-(cos(a))));tg(/(a;2))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(/(+(1;cos(a));ctg(/(a;2))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(*(2;cos(/(a;2));sin(/(a;2))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(/(2;+(tg(/(a;2));ctg(/(a;2)))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(*(2;^(cos(/(a;2));2));+(-(1))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(a;2)))', '(/(+(1;+(-(cos(a))));sin(a)))', 80, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(a;2)))', '(/(sin(a);+(1;cos(a))))', 80, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(/(+(ctg(/(a;2));+(-(tg(/(a;2)))));+(ctg(/(a;2));tg(/(a;2)))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(a;2)))', '(/(+(1;cos(a));sin(a)))', 80, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(a;2)))', '(/(sin(a);+(1;+(-(cos(a))))))', 80, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(a;2)))', '(/(+(1;cos(a));sin(a)))', 80, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(a;2)))', '(/(sin(a);+(1;+(-(cos(a))))))', 80, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;^(cos(/(x;2));2));+(-(cos(x)))))', 89, true, false, false, false, void 0, void 0, 3.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(/(*(2;tg(/(x;2)));sin(x));+(-(^(tg(/(x;2));2)))))', 89, true, false, false, false, void 0, void 0, 3.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;tg(/(x;2));ctg(x));^(tg(/(x;2));2)))', 89, true, false, false, false, void 0, void 0, 3.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(3;a)))', '(+(*(3;sin(a));+(-(*(4;^(sin(a);3))))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(3;a)))', '(+(-(^(sin(a);3));*(3;^(cos(a);2);sin(a))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(3;a)))', '(+(*(4;^(cos(a);3));-(+(*(3;cos(a))))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(3;a)))', '(+(^(cos(a);3);-(*(3;^(sin(a);2);cos(a)))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(*(3;a)))', '(/(+(*(3;tg(a));-(^(tg(a);3)));+(1;-(*(3;^(tg(a);2))))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(*(3;a)))', '(/(+(*(3;ctg(a));-(^(ctg(a);3)));+(1;-(*(3;^(ctg(a);2))))))', 85, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(+(*(3;cos(x));cos(*(3;x)));*(4;^(cos(x);3))))', 89, true, false, false, false, void 0, void 0, 2.5, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(2;a)))', '(*(2;sin(a);cos(a)))', 24, true, true, false, false, 'SORTED', void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(2;sin(a);cos(a)))', '(sin(*(2;a)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(+(^(cos(a);2);-(^(sin(a);2))))', 24, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(cos(a);2);-(^(sin(a);2))))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(^(sin(a);2));^(cos(a);2)))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(+(1;-(*(2;^(sin(a);2)))))', 24, true, true, false, false, 'SORTED', void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;-(*(2;^(sin(a);2)))))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(*(2;^(sin(a);2)));1))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(+(*(2;^(cos(a);2));-(1)))', 24, true, true, false, false, 'SORTED', void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(2;^(cos(a);2));-(1)))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(1);*(2;^(cos(a);2))))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(cos(a);2))', '(+(cos(*(2;a));^(sin(a);2)))', 24, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(sin(a);2))', '(+(^(cos(a);2);-(cos(*(2;a)))))', 24, true, true, false, false, 'SORTED', void 0, void 0, void 0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(2;a)))', '(/(*(2;tg(a));+(1;^(tg(a);2))))', 30, true, false, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;tg(a));+(1;^(tg(a);2))))', '(sin(*(2;a)))', 30, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))', 30, true, false, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))', '(cos(*(2;a)))', 30, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(*(2;a)))', '(/(*(2;tg(a));+(1;-(^(tg(a);2)))))', 30, true, false, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;tg(a));+(1;-(^(tg(a);2)))))', '(tg(*(2;a)))', 30, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(*(2;a)))', '(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))', 30, true, false, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))', '(ctg(*(2;a)))', 30, false, false, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(*(2;a)))', '(/(+(ctg(a);+(-(tg(a))));2))', 80, true, true, false, false, 'SORTED', void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(^(+(sin(x);cos(x));2);+(-(sin(*(2;x))))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(^(+(sin(x);-(+(cos(x))));2);sin(*(2;x))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;^(sin(x);2));cos(*(2;x))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;^(cos(x);2));+(-(cos(*(2;x))))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(+(ctg(x);+(-(tg(x))));*(2;ctg(*(2;x)))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(sin(*(2;x));*(2;sin(x);cos(x))))', 89, true, false, false, false, void 0, void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(/(+(ctg(a);+(-(tg(a))));+(ctg(a);tg(a))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(2;a)))', '(/(2;+(tg(a);ctg(a))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(n;a)))', '(+(*(2;cos(a);sin(*(+(n;-(1));a)));-(sin(*(+(n;-(2));a)))))', 85, true, true, false, false, 'SORTED', void 0, 3.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(*(n;a)))', '(/(+(tg(a);tg(*(+(n;-(1));a)));+(1;-(*(tg(a);tg(*(+(n;-(1));a)))))))', 85, true, true, false, false, 'SORTED', void 0, 3.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(n;a)))', '(+(*(2;cos(a);cos(*(+(n;-(1));a)));-(cos(*(+(n;-(2));a)))))', 85, true, true, false, false, 'SORTED', void 0, 3.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance_0()))])), new RulePackITR('TrigonometryPowerReducing', void 0, void 0, 'Trigonometry power reducing', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u043E\u043D\u0438\u0436\u0435\u043D\u0438\u044F \u0441\u0442\u0435\u043F\u0435\u043D\u0438', 'Trigonometry power reducing', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u043E\u043D\u0438\u0436\u0435\u043D\u0438\u044F \u0441\u0442\u0435\u043F\u0435\u043D\u0438', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(cos(a);2))', '(/(+(1;cos(*(2;a)));2))', 80, true, true, false, false, 'SORTED', void 0, 2.0, 5.0, void 0, listOf(RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(sin(a);2))', '(/(+(1;-(cos(*(2;a))));2))', 80, true, true, false, false, 'SORTED', void 0, 2.0, 5.0, void 0, listOf(RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(cos(a);3))', '(/(+(*(3;cos(a));cos(*(3;a)));4))', 80, true, true, false, false, 'SORTED', void 0, 3.0, 5.0, void 0, listOf(RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(sin(a);3))', '(/(+(*(3;sin(a));-(sin(*(3;a))));4))', 80, true, true, false, false, 'SORTED', void 0, 3.0, 5.0, void 0, listOf(RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(ctg(/(a;2));2))', '(/(+(1;cos(a));+(1;+(-(cos(a))))))', 80, true, true, false, false, 'SORTED', void 0, 3.0, 5.0, void 0, listOf(RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(tg(/(a;2));2))', '(/(+(1;+(-(cos(a))));+(1;cos(a))))', 80, true, true, false, false, 'SORTED', void 0, 3.0, 5.0, void 0, listOf(RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(tg(a);2))', '(/(+(1;+(-(cos(*(2;a)))));+(1;cos(*(2;a)))))', 80, true, true, false, false, 'SORTED', void 0, 3.0, 5.0, void 0, listOf_0([RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0()])), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(tg(a);3))', '(/(+(*(3;sin(a));+(-(sin(*(3;a)))));+(*(3;cos(a));cos(*(3;a)))))', 80, true, true, false, false, 'SORTED', void 0, 3.0, 5.0, void 0, listOf_0([RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0()])), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(ctg(a);2))', '(/(+(1;cos(*(2;a)));+(1;+(-(cos(*(2;a)))))))', 80, true, true, false, false, 'SORTED', void 0, 3.0, 5.0, void 0, listOf(RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0()))])), new RulePackITR('TrigonometrySumToProd', void 0, void 0, 'Trigonometry sum to prod', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435 \u0441\u0443\u043C\u043C\u044B \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u0432 \u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435', 'Trigonometry sum to prods', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435 \u0441\u0443\u043C\u043C\u044B \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u0432 \u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(sin(a);-(sin(b))))', '(*(2;sin(/(+(a;-(b));2));cos(/(+(a;b);2))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(cos(a);cos(b)))', '(*(2;cos(/(+(a;b);2));cos(/(+(a;-(b));2))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(cos(a);-(cos(b))))', '(+(-(*(2;sin(/(+(a;-(b));2));sin(/(+(a;b);2))))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(sin(a);sin(b)))', '(*(2;sin(/(+(a;b);2));cos(/(+(a;-(b));2))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(tg(a);tg(b)))', '(/(sin(+(a;b));*(cos(a);cos(b))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(tg(a);-(tg(b))))', '(/(sin(+(a;-(b)));*(cos(a);cos(b))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(sin(a);sin(b)))', '(/(+(cos(+(a;-(b)));-(cos(+(a;b))));2))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(sin(a);cos(b)))', '(/(+(sin(+(a;-(b)));sin(+(a;b)));2))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(tg(a);tg(b)))', '(/(+(cos(+(a;-(b)));-(cos(+(a;b))));+(cos(+(a;-(b)));cos(+(a;b)))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(cos(a);cos(b)))', '(/(+(cos(+(a;-(b)));cos(+(a;b)));2))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 2.0, void 0, listOf(RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0()))])), new RulePackITR('TrigonometryWeierstrass', void 0, void 0, 'Trigonometry Weierstrass substitution', '\u0423\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u0430\u044F \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0430', 'Trigonometry Weierstrass substitution', '\u0423\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u0430\u044F \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0430', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(a;2)))', '(/(tg(/(a;2));^(+(1;^(tg(/(a;2));2));/(1;2))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(a;2)))', '(/(1;^(+(1;^(tg(/(a;2));2));/(1;2))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(/(*(2;tg(/(a;2)));+(1;^(tg(/(a;2));2))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(/(+(1;-(^(tg(/(a;2));2)));+(1;^(tg(/(a;2));2))))', 23, true, true, false, false, 'SORTED', void 0, 2.0, 1000.0, void 0, listOf(RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance_0()))])), new RulePackITR('TrigonometryComplex', void 0, void 0, 'Trigonometry in complex numbers', '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F \u0441 \u043A\u043E\u043C\u043F\u043B\u0435\u043A\u0441\u043D\u044B\u043C\u0438 \u0447\u0438\u0441\u043B\u0430\u043C\u0438', 'Trigonometry in complex numbers', '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F \u0441 \u043A\u043E\u043C\u043F\u043B\u0435\u043A\u0441\u043D\u044B\u043C\u0438 \u0447\u0438\u0441\u043B\u0430\u043C\u0438', void 0, void 0, 'standard_math', void 0, emptyList())]);
  }
  TrigonometricRulePacks$Companion.prototype.get = function () {
    return this.trigonometricRulePacks;
  };
  TrigonometricRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TrigonometricRulePacks$Companion_instance = null;
  function TrigonometricRulePacks$Companion_getInstance() {
    if (TrigonometricRulePacks$Companion_instance === null) {
      new TrigonometricRulePacks$Companion();
    }
    return TrigonometricRulePacks$Companion_instance;
  }
  TrigonometricRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TrigonometricRulePacks',
    interfaces: []
  };
  function DefaultCombinatoricsRulePacks() {
    DefaultCombinatoricsRulePacks$Companion_getInstance();
  }
  function DefaultCombinatoricsRulePacks$Companion() {
    DefaultCombinatoricsRulePacks$Companion_instance = this;
    this.defaultCombinatoricsRulePacks = listOf_0([new RulePackITR('Factorial', void 0, void 0, 'Factorial', '\u0424\u0430\u043A\u0442\u043E\u0440\u0438\u0430\u043B', 'Basic Properties of Natural Factorial', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u043D\u0430\u0442\u0443\u0440\u0430\u043B\u044C\u043D\u043E\u0433\u043E \u0444\u0430\u043A\u0442\u043E\u0440\u0438\u0430\u043B\u0430', void 0, void 0, 'combinatorics', listOf(new RulePackLinkITR(void 0, 'ShortMultiplication')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(factorial(+(n;1)))', '(*(factorial(n);+(n;1)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(factorial(n);+(n;1)))', '(factorial(+(n;1)))', 35, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(factorial(+(n;1));+(n;1)))', '(factorial(n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(factorial(n))', '(/(factorial(+(n;1));+(n;1)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(factorial(+(n;1));factorial(n)))', '(+(n;1))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(n;1))', '(/(factorial(+(n;1));factorial(n)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(factorial(n))', '(*(factorial(+(n;-(1)));n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(factorial(+(n;-(1)));n))', '(factorial(n))', 35, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(factorial(n);n))', '(factorial(+(n;-(1))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(factorial(+(n;-(1))))', '(/(factorial(n);n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(factorial(n);factorial(+(n;-(1)))))', '(n)', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(n)', '(/(factorial(n);factorial(+(n;-(1)))))', 85, true, false, false, false)])), new RulePackITR('BasicCombinatorics', void 0, void 0, 'Basic Combinatorics', '\u0411\u0430\u0437\u043E\u0432\u0430\u044F \u043A\u043E\u043C\u0431\u0438\u043D\u0430\u0442\u043E\u0440\u0438\u043A\u0430', 'Connections between Base Combinatorial Numbers', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B, \u0441\u0432\u044F\u0437\u044B\u0432\u0430\u044E\u0449\u0438\u0435 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043A\u043E\u043C\u0431\u0438\u043D\u0430\u0442\u043E\u0440\u043D\u044B\u0435 \u0447\u0438\u0441\u043B\u0430', 'Simple formulas for Placements (A), Placements with Repetitions (U), Combinations (C), Combinations with repetitions (V), Permutations (P), Stirling I kind (S1), Stirling II kind (S2), Bell (B), Catalan (C)', '\u041F\u0440\u043E\u0441\u0442\u044B\u0435 \u0444\u043E\u0440\u043C\u0443\u043B\u044B \u0434\u043B\u044F \u0447\u0438\u0441\u0435\u043B \u0420\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F (A), \u0420\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F \u0441 \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F\u043C\u0438 (U), \u0421\u043E\u0447\u0435\u0442\u0430\u043D\u0438\u0439 (C), \u0421\u043E\u0447\u0435\u0442\u0430\u043D\u0438\u0439 \u0441 \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F\u043C\u0438 (V), \u041F\u0435\u0440\u0435\u0441\u0442\u0430\u043D\u043E\u0432\u043E\u043A (P), \u0421\u0442\u0438\u0440\u043B\u0438\u043D\u0433\u0430 I \u0440\u043E\u0434\u0430 (S1), \u0421\u0442\u0438\u0440\u043B\u0438\u043D\u0433\u0430 II \u0440\u043E\u0434\u0430 (S2), \u0411\u0435\u043B\u043B\u0430 (B), \u041A\u0430\u0442\u0430\u043B\u0430\u043D\u0430 (C)', 'combinatorics', listOf(new RulePackLinkITR(void 0, 'Factorial')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(U(m;n))', '(^(m;n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(m;n))', '(U(m;n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(P(n))', '(factorial(n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(factorial(n))', '(P(n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A(n;n))', '(P(n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(P(n))', '(A(n;n))', 70, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(C(m;n);P(n)))', '(A(m;n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A(m;n))', '(*(C(m;n);P(n)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A(m;n);P(n)))', '(C(m;n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(C(m;n))', '(/(A(m;n);P(n)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A(m;n);C(m;n)))', '(P(n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(P(n))', '(/(A(m;n);C(m;n)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(V(+(m;1);n))', '(/(factorial(+(m;n));*(factorial(m);factorial(n))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(factorial(+(m;n));*(factorial(m);factorial(n))))', '(V(+(m;1);n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(factorial(+(m;n)))', '(*(V(+(m;1);n);*(factorial(m);factorial(n))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(V(+(m;1);n);*(factorial(m);factorial(n))))', '(factorial(+(m;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(factorial(m);factorial(n)))', '(/(factorial(+(m;n));V(+(m;1);n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(factorial(+(m;n));V(+(m;1);n)))', '(*(factorial(m);factorial(n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(C(+(m;n);n))', '(/(factorial(+(m;n));*(factorial(m);factorial(n))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(C(+(m;n);n))', '(V(+(m;1);n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(V(+(m;1);n))', '(C(+(m;n);n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A(+(m;n);n))', '(/(factorial(+(m;n));factorial(m)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(factorial(+(m;n));factorial(m)))', '(A(+(m;n);n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(factorial(+(m;n)))', '(*(A(+(m;n);n);factorial(m)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A(+(m;n);n);factorial(m)))', '(factorial(+(m;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(factorial(m);A(+(m;n);n)))', '(factorial(+(m;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(factorial(m))', '(/(factorial(+(m;n));A(+(m;n);n)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(factorial(+(m;n));A(+(m;n);n)))', '(factorial(m))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(S1(m;n))', '(*(factorial(n);S2(m;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(factorial(n);S2(m;n)))', '(S1(m;n))', 35, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(factorial(n))', '(/(S1(m;n);S2(m;n)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(S1(m;n);S2(m;n)))', '(factorial(n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(S2(m;n))', '(/(S1(m;n);factorial(n)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(S1(m;n);factorial(n)))', '(S2(m;n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(S2(+(m;1);+(n;1)))', '(+(S2(m;n);*(n;S2(m;+(n;1)))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(S2(m;n);*(n;S2(m;+(n;1)))))', '(S2(+(m;1);+(n;1)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(S2(m;m))', '(1)', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(S2(m;n))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(C(*(2;n);n))', '(*(C(n);+(n;1)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(C(n);+(n;1)))', '(C(*(2;n);n))', 35, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(C(n))', '(/(C(*(2;n);n);+(n;1)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(C(*(2;n);n);+(n;1)))', '(C(n))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(n;1))', '(/(C(*(2;n);n);C(n)))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(C(*(2;n);n);C(n)))', '(+(n;1))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(C(0))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(C(0))', 90, true, false, false, false)]))]);
  }
  DefaultCombinatoricsRulePacks$Companion.prototype.get = function () {
    return this.defaultCombinatoricsRulePacks;
  };
  DefaultCombinatoricsRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DefaultCombinatoricsRulePacks$Companion_instance = null;
  function DefaultCombinatoricsRulePacks$Companion_getInstance() {
    if (DefaultCombinatoricsRulePacks$Companion_instance === null) {
      new DefaultCombinatoricsRulePacks$Companion();
    }
    return DefaultCombinatoricsRulePacks$Companion_instance;
  }
  DefaultCombinatoricsRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DefaultCombinatoricsRulePacks',
    interfaces: []
  };
  function DefaultComplexRulePacks() {
    DefaultComplexRulePacks$Companion_getInstance();
  }
  function DefaultComplexRulePacks$Companion() {
    DefaultComplexRulePacks$Companion_instance = this;
    this.defaultComplexRulePacks = listOf(new RulePackITR('ComplexNumbers', void 0, void 0, 'Complex Numbers', '\u041A\u043E\u043C\u043F\u043B\u0435\u043A\u0441\u043D\u044B\u0435 \u0447\u0438\u0441\u043B\u0430', 'Basic properties', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', void 0, void 0, 'complex_numbers', listOf_0([new RulePackLinkITR(void 0, 'AdvancedTrigonometry'), new RulePackLinkITR(void 0, 'Logarithm')]), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(sys_def_i_complex;sys_def_i_complex))', '(+(-(1)))', 100, false, false, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(sys_def_i_complex;2))', '(+(-(1)))', 100, false, false, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(abs(+(x;*(y;sys_def_i_complex))))', '(sqrt(+(^(x;2);^(y;2))))', 30, false, true, false, false, 'SORTED_AND_I_MULTIPLICATED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(abs(+(x;*(y;sys_def_i_complex))))', '(^(+(^(x;2);^(y;2));0.5))', 30, false, true, false, false, 'SORTED_AND_I_MULTIPLICATED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(exp(+(x;*(y;sys_def_i_complex))))', '(*(exp(x);+(cos(y);*(sys_def_i_complex;sin(y)))))', 30, false, true, false, false, 'SORTED_AND_I_MULTIPLICATED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(exp(ln(a)))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(z))', '(/(+(exp(*(sys_def_i_complex;z));exp(+(-(*(sys_def_i_complex;z)))));2))', 30, false, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(z))', '(/(+(exp(*(sys_def_i_complex;z));-(exp(+(-(*(sys_def_i_complex;z))))));*(2;sys_def_i_complex)))', 30, false, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(e;ln(a)))', '(a)', 30, false, false, false, false)])));
  }
  DefaultComplexRulePacks$Companion.prototype.get = function () {
    return this.defaultComplexRulePacks;
  };
  DefaultComplexRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DefaultComplexRulePacks$Companion_instance = null;
  function DefaultComplexRulePacks$Companion_getInstance() {
    if (DefaultComplexRulePacks$Companion_instance === null) {
      new DefaultComplexRulePacks$Companion();
    }
    return DefaultComplexRulePacks$Companion_instance;
  }
  DefaultComplexRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DefaultComplexRulePacks',
    interfaces: []
  };
  function DefaultRulePacks() {
    DefaultRulePacks$Companion_getInstance();
  }
  function DefaultRulePacks$Companion() {
    DefaultRulePacks$Companion_instance = this;
    this.defaultRulePacks = plus(plus(plus(plus(plus(DefaultStandardMathRulePacks$Companion_getInstance().get(), DefaultCombinatoricsRulePacks$Companion_getInstance().get()), DefaultComplexRulePacks$Companion_getInstance().get()), LogicRulePacks$Companion_getInstance().get()), SetRulePacks$Companion_getInstance().get()), DefaultPhysicsRulePacks$Companion_getInstance().get());
    var $receiver = this.defaultRulePacks;
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
    var destination = LinkedHashMap_init(capacity);
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      destination.put_xwzc9p$(ensureNotNull(element.code), element);
    }
    this.defaultRulePacksMap = destination;
  }
  DefaultRulePacks$Companion.prototype.map = function () {
    return this.defaultRulePacksMap;
  };
  DefaultRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DefaultRulePacks$Companion_instance = null;
  function DefaultRulePacks$Companion_getInstance() {
    if (DefaultRulePacks$Companion_instance === null) {
      new DefaultRulePacks$Companion();
    }
    return DefaultRulePacks$Companion_instance;
  }
  DefaultRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DefaultRulePacks',
    interfaces: []
  };
  function LogicRulePacks() {
    LogicRulePacks$Companion_getInstance();
  }
  function LogicRulePacks$Companion() {
    LogicRulePacks$Companion_instance = this;
    this.defaultLogicRulePacks = listOf_0([new RulePackITR('LogicBase', void 0, void 0, 'Basic Boolean Logic', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B \u0431\u0443\u043B\u0435\u0432\u043E\u0439 \u043B\u043E\u0433\u0438\u043A\u0438', "Basic operations, it's definitions and properties", '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438, \u0438\u0445 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0438 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F', 'logic', void 0, listOf_0([new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(and(a;b)))', '(or(not(a);not(b)))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(or(not(a);not(b)))', '(not(and(a;b)))', 10, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(or(a;b)))', '(and(not(a);not(b)))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(and(not(a);not(b)))', '(not(or(a;b)))', 10, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(and(a;b))', '(not(or(not(a);not(b))))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(or(not(a);not(b))))', '(and(a;b))', 10, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(or(a;b))', '(not(and(not(a);not(b))))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(and(not(a);not(b))))', '(or(a;b))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(not(a)))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(not(not(a)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;a))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;a))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;b))', '(and(b;a))', 40, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;b))', '(or(b;a))', 40, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;1))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;0))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;not(a)))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(not(a);a))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(a)))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);a))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;1))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(1;a))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;1))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(1;a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;0))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(0;a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;0))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(0;a))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(0))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(1))', '(0)', 5, false, false, false, false), new RuleITR('SimpleComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('ZeroComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('ParentBracketsExpansion', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false), new RuleITR('ArgumentsSwap', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('ArgumentsPermutation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('OpeningBrackets', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false), new RuleITR('ArgumentsPermutationInOriginalOrder', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 41, false, false, false, false), new RuleITR('ReduceArithmetic', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false), new RuleITR('TwoSidesArithmeticReduce', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(not(a);b))', '(implic(a;b))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(b;not(a)))', '(implic(a;b))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(a;b))', '(or(not(a);b))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(0;a))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(a;1))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(a;0))', '(not(a))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(1;a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(implic(1;a))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;b))', '(or(and(not(a);b);and(a;not(b))))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(not(a);b);and(a;not(b))))', '(xor(a;b))', 5, true, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a;b))', '(or(and(a;b);and(not(a);not(b))))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(a;b);and(not(a);not(b))))', '(alleq(a;b))', 5, true, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;b))', '(and(or(not(a);not(b));or(a;b)))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);not(b));or(a;b)))', '(xor(a;b))', 5, true, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a;b))', '(and(or(not(a);b);or(a;not(b))))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);b);or(a;not(b))))', '(alleq(a;b))', 5, true, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;0))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;1))', '(not(a))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(0;a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(1;a))', '(not(a))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(0;a))', '(not(a))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a;1))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a;0))', '(not(a))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(1;a))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(xor(a;0))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(alleq(1;a))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(a))', '(xor(a;1))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(a))', '(alleq(0;a))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;b))', '(not(alleq(a;b)))', 90, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a;b))', '(not(xor(a;b)))', 90, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(alleq(a;b)))', '(xor(a;b))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(xor(a;b)))', '(alleq(a;b))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(not(a);b))', '(alleq(a;b))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a;b))', '(xor(not(a);b))', 90, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(not(a);b))', '(xor(a;b))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;b))', '(alleq(not(a);b))', 90, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;a))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(a;a))', '(1)', 5, false, false, false, false), new RuleITR('SetComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false), new RuleITR('Xor', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false)])), new RulePackITR('RelativeComplement', void 0, void 0, 'Relative Complement', '\u041B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'Definition and basic properties', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Relative Complement', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F, \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(b)))', '(set-(a;b))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(b);a))', '(set-(a;b))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(a;b))', '(and(a;not(b)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(a;b))', '(not(implic(a;b)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(implic(a;b)))', '(set-(a;b))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(a;b))', '(not(set-(a;b)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(set-(a;b)))', '(implic(a;b))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(a;0))', '(a)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(a;1))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(0;a))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(1;a))', '(not(a))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(set-(a;0))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(a;a))', '(0)', 5, false, false, false, false), new RuleITR('SetMinusOrRelativeComplement', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false)])), new RulePackITR('LogicNotAnd', void 0, void 0, 'Negation of Conjunction', '\u041E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u0438 (\u0428\u0442\u0440\u0438\u0445 \u0428\u0435\u0444\u0444\u0435\u0440\u0430)', 'Definition and basic properties', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Negation of Conjunction', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u0438', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nand(a;b))', '(not(and(a;b)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(and(a;b)))', '(nand(a;b))', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nand(a;b))', '(or(not(a);not(b)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(not(a);not(b)))', '(nand(a;b))', 6, false, false, false, false)])), new RulePackITR('LogicNotOr', void 0, void 0, 'Negation of Disjunction', '\u041E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u0438 (\u0421\u0442\u0440\u0435\u043B\u043A\u0430 \u041F\u0438\u0440\u0441\u0430)', 'Definition and basic properties', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Negation of Disjunction', '\u0411\u0443\u043B\u0435\u0432\u0430 \u0430\u043B\u0433\u0435\u0431\u0440\u0430: \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438, \u044D\u043A\u0432\u0438\u0432\u0430\u043B\u0435\u043D\u0446\u0438\u044F, \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u0438', 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nor(a;b))', '(not(or(a;b)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(or(a;b)))', '(nor(a;b))', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nor(a;b))', '(and(not(a);not(b)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);not(b)))', '(nor(a;b))', 6, false, false, false, false)])), new RulePackITR('LogicAbsorptionLaw', void 0, void 0, 'Absorption Law', '\u0417\u0430\u043A\u043E\u043D \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u044F', 'Law and basic properties in Boolean Algebra', '\u0417\u0430\u043A\u043E\u043D \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u0432 \u0431\u0443\u043B\u0435\u0432\u043E\u0439 \u0430\u043B\u0433\u0435\u0431\u0440\u0435', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(a;b)))', '(a)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;and(a;b)))', '(a)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(b;a)))', '(a)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;and(b;a)))', '(a)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;b);a))', '(a)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(a;b);a))', '(a)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(b;a);a))', '(a)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(b;a);a))', '(a)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(and(a;or(a;b)))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(or(a;and(a;b)))', 90, true, false, false, false), new RuleITR('AbsorptionComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false)])), new RulePackITR('LogicXorDistribution', void 0, void 0, 'XOR Distributive Law', '\u0414\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043D\u043E\u0441\u0442\u044C XOR', 'Rules of XOR Distributive Law', '\u041F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043D\u043E\u0441\u0442\u0438 \u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0433\u043E \u0438\u043B\u0438', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf(new RuleITR('XorDistribution', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false))), new RulePackITR('LogicZhegalkinPolynom', void 0, void 0, 'Zhegalkin Polynomial', '\u041F\u043E\u043B\u0438\u043D\u043E\u043C \u0416\u0435\u0433\u0430\u043B\u043A\u0438\u043D\u0430', 'Zhegalkin polynomial transformation rules', '\u041F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0441\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u043A \u043F\u043E\u043B\u0438\u043D\u043E\u043C\u0443 \u0416\u0435\u0433\u0430\u043B\u043A\u0438\u043D\u0430', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicXorDistribution')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;b))', '(xor(a;b;and(a;b)))', 34, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;b;and(a;b)))', '(or(a;b))', 6, false, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a;b))', '(xor(a;b;1))', 34, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;b;1))', '(alleq(a;b))', 6, false, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(implic(a;b))', '(xor(a;and(a;b);1))', 34, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;and(a;b);1))', '(implic(a;b))', 6, false, true, false, false)])), new RulePackITR('LogicZhegalkinNandNor', void 0, void 0, 'Zhegalkin Polinomial and Negation', '\u041F\u043E\u043B\u0438\u043D\u043E\u043C \u0416\u0435\u0433\u0430\u043B\u043A\u0438\u043D\u0430 \u0438 \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u044F', 'Zhegalkin polynomial transformation rules with negation of conjunction and disjunction Zhegalkin polynomial', '\u041F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0441\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u043A \u043F\u043E\u043B\u0438\u043D\u043E\u043C\u0443 \u0416\u0435\u0433\u0430\u043B\u043A\u0438\u043D\u0430 \u0441 \u043E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435\u043C \u043A\u043E\u043D\u044C\u044E\u043D\u043A\u0446\u0438\u0438 \u0438 \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u0438', void 0, void 0, 'logic', listOf_0([new RulePackLinkITR(void 0, 'LogicZhegalkinPolynom'), new RulePackLinkITR(void 0, 'LogicNotAnd'), new RulePackLinkITR(void 0, 'LogicNotOr')]), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nand(a;b))', '(xor(and(a;b);1))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(and(a;b);1))', '(nand(a;b))', 6, false, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(nor(a;b))', '(xor(a;b;and(a;b);1))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(xor(a;b;and(a;b);1))', '(nor(a;b))', 6, false, true, false, false)])), new RulePackITR('LogicResolution', void 0, void 0, 'Resolution', '\u041C\u0435\u0442\u043E\u0434 \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439', 'Rules for proof by Resolution method', '\u041F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0434\u043E\u043A\u0430\u0437\u0430\u0442\u0435\u043B\u044C\u0441\u0442\u0432 \u043C\u0435\u0442\u043E\u0434\u043E\u043C \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439', void 0, void 0, 'logic', listOf(new RulePackLinkITR(void 0, 'LogicBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);a))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(a)))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);not(a)))', '(and(X;or(a;X);not(a)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);or(a;X)))', '(and(X;not(a);or(a;X)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);a))', '(and(X;or(not(a);X);a))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(not(a);X)))', '(and(X;a;or(not(a);X)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);or(not(a);Y)))', '(and(or(X;Y);or(a;X);or(not(a);Y)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);or(a;Y)))', '(and(or(X;Y);or(not(a);X);or(a;Y)))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);a;C))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(a);C))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);not(a);C))', '(and(X;or(a;X);not(a);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);or(a;X);C))', '(and(X;not(a);or(a;X);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);a;C))', '(and(X;or(not(a);X);a;C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(not(a);X);C))', '(and(X;a;or(not(a);X);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);or(not(a);Y);C))', '(and(or(X;Y);or(a;X);or(not(a);Y);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);or(a;Y);C))', '(and(or(X;Y);or(not(a);X);or(a;Y);C))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);a;C;D))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(a);C;D))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);not(a);C;D))', '(and(X;or(a;X);not(a);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);or(a;X);C;D))', '(and(X;not(a);or(a;X);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);a;C;D))', '(and(X;or(not(a);X);a;C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(not(a);X);C;D))', '(and(X;a;or(not(a);X);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);or(not(a);Y);C;D))', '(and(or(X;Y);or(a;X);or(not(a);Y);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);or(a;Y);C;D))', '(and(or(X;Y);or(not(a);X);or(a;Y);C;D))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);a;C;D;E))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(a);C;D;E))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);not(a);C;D;E))', '(and(X;or(a;X);not(a);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);or(a;X);C;D;E))', '(and(X;not(a);or(a;X);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);a;C;D;E))', '(and(X;or(not(a);X);a;C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(not(a);X);C;D;E))', '(and(X;a;or(not(a);X);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);or(not(a);Y);C;D;E))', '(and(or(X;Y);or(a;X);or(not(a);Y);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);or(a;Y);C;D;E))', '(and(or(X;Y);or(not(a);X);or(a;Y);C;D;E))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);a;C;D;E;F))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(a);C;D;E;F))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);not(a);C;D;E;F))', '(and(X;or(a;X);not(a);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);or(a;X);C;D;E;F))', '(and(X;not(a);or(a;X);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);a;C;D;E;F))', '(and(X;or(not(a);X);a;C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(not(a);X);C;D;E;F))', '(and(X;a;or(not(a);X);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);or(not(a);Y);C;D;E;F))', '(and(or(X;Y);or(a;X);or(not(a);Y);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);or(a;Y);C;D;E;F))', '(and(or(X;Y);or(not(a);X);or(a;Y);C;D;E;F))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);a;C;D;E;F;G))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(a);C;D;E;F;G))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);not(a);C;D;E;F;G))', '(and(X;or(a;X);not(a);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);or(a;X);C;D;E;F;G))', '(and(X;not(a);or(a;X);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);a;C;D;E;F;G))', '(and(X;or(not(a);X);a;C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(not(a);X);C;D;E;F;G))', '(and(X;a;or(not(a);X);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);or(not(a);Y);C;D;E;F;G))', '(and(or(X;Y);or(a;X);or(not(a);Y);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);or(a;Y);C;D;E;F;G))', '(and(or(X;Y);or(not(a);X);or(a;Y);C;D;E;F;G))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);a;C;D;E;F;G;H))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(a);C;D;E;F;G;H))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);not(a);C;D;E;F;G;H))', '(and(X;or(a;X);not(a);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);or(a;X);C;D;E;F;G;H))', '(and(X;not(a);or(a;X);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);a;C;D;E;F;G;H))', '(and(X;or(not(a);X);a;C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(not(a);X);C;D;E;F;G;H))', '(and(X;a;or(not(a);X);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);or(not(a);Y);C;D;E;F;G;H))', '(and(or(X;Y);or(a;X);or(not(a);Y);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);or(a;Y);C;D;E;F;G;H))', '(and(or(X;Y);or(not(a);X);or(a;Y);C;D;E;F;G;H))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);a;C;D;E;F;G;H;I))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;not(a);C;D;E;F;G;H;I))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);not(a);C;D;E;F;G;H;I))', '(and(X;or(a;X);not(a);C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(a);or(a;X);C;D;E;F;G;H;I))', '(and(X;not(a);or(a;X);C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);a;C;D;E;F;G;H;I))', '(and(X;or(not(a);X);a;C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;or(not(a);X);C;D;E;F;G;H;I))', '(and(X;a;or(not(a);X);C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(a;X);or(not(a);Y);C;D;E;F;G;H;I))', '(and(or(X;Y);or(a;X);or(not(a);Y);C;D;E;F;G;H;I))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(not(a);X);or(a;Y);C;D;E;F;G;H;I))', '(and(or(X;Y);or(not(a);X);or(a;Y);C;D;E;F;G;H;I))', 10, false, false, false, false)]))]);
  }
  LogicRulePacks$Companion.prototype.get = function () {
    return this.defaultLogicRulePacks;
  };
  LogicRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var LogicRulePacks$Companion_instance = null;
  function LogicRulePacks$Companion_getInstance() {
    if (LogicRulePacks$Companion_instance === null) {
      new LogicRulePacks$Companion();
    }
    return LogicRulePacks$Companion_instance;
  }
  LogicRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LogicRulePacks',
    interfaces: []
  };
  function DefaultPhysicsRulePacks() {
    DefaultPhysicsRulePacks$Companion_getInstance();
  }
  function DefaultPhysicsRulePacks$Companion() {
    DefaultPhysicsRulePacks$Companion_instance = this;
    this.defaultPhysicsRulePacks = listOf_0([new RulePackITR('PhysicsStraightMoving', void 0, void 0, 'Basics of Straight Moving', '\u041E\u0441\u043D\u043E\u0432\u044B \u0434\u0432\u0438\u0436\u0435\u043D\u0438\u044F \u043F\u043E \u043F\u0440\u044F\u043C\u043E\u0439', 'Start formulas', '\u041F\u0440\u043E\u0441\u0442\u0435\u0439\u0448\u0438\u0435 \u0444\u043E\u0440\u043C\u0443\u043B\u044B', void 0, void 0, 'physics', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(s)', '(/(v;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(s;t))', '(v)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(t)', '(/(s;v))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(s;v))', '(t)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(s)', '(*(v;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(v;t))', '(s)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(/(v;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(v;t))', '(a)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(t)', '(/(v;a))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(v;a))', '(t)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(v)', '(*(a;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;t))', '(v)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(s)', '(/(*(a;^(t;2));2))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(a;^(t;2));2))', '(s)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(/(*(2;s);^(t;2)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;s);^(t;2)))', '(a)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(t)', '(^(/(*(2;s);a);0.5))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(/(*(2;s);a);0.5))', '(t)', 35, false, true, false, true)])), new RulePackITR('PhysicsCircleMoving', void 0, void 0, 'Basics of Circle Moving', '\u041E\u0441\u043D\u043E\u0432\u044B \u0434\u0432\u0438\u0436\u0435\u043D\u0438\u044F \u043F\u043E \u043E\u043A\u0440\u0443\u0436\u043D\u043E\u0441\u0442\u0438', 'Start formulas', '\u041F\u0440\u043E\u0441\u0442\u0435\u0439\u0448\u0438\u0435 \u0444\u043E\u0440\u043C\u0443\u043B\u044B', void 0, void 0, 'physics', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C9)', '(/(*(2;\u03C0);T))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;\u03C0);T))', '(\u03C9)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(T)', '(/(*(2;\u03C0);\u03C9))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;\u03C0);\u03C9))', '(T)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C9)', '(*(2;\u03C0;v))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(2;\u03C0;v))', '(\u03C9)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(v)', '(/(\u03C9;*(2;\u03C0)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03C9;*(2;\u03C0)))', '(v)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C9)', '(/(v;R))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(v;R))', '(\u03C9)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(R)', '(/(v;\u03C9))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(v;\u03C9))', '(R)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(v)', '(*(\u03C9;R))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(\u03C9;R))', '(v)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(/(^(v;2);R))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(v;2);R))', '(a)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(R)', '(/(^(v;2);a))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(v;2);a))', '(R)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(v)', '(^(*(a;R);/(1;2)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(*(a;R);0.5))', '(v)', 35, false, true, false, true)])), new RulePackITR('PhysicsMolecular', void 0, void 0, 'Basics of Molecular Physics', '\u041E\u0441\u043D\u043E\u0432\u044B \u043C\u043E\u043B\u0435\u043A\u0443\u043B\u044F\u0440\u043D\u043E\u0439 \u0444\u0438\u0437\u0438\u043A\u0438', 'Start formulas', '\u041F\u0440\u043E\u0441\u0442\u0435\u0439\u0448\u0438\u0435 \u0444\u043E\u0440\u043C\u0443\u043B\u044B', void 0, void 0, 'physics', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(P)', '(/(F;S))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(F;S))', '(P)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(S)', '(/(F;P))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(F;P))', '(S)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(F)', '(*(P;S))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(P;S))', '(F)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(m)', '(/(F;a))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(F;a))', '(m)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(/(F;P))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(F;m))', '(a)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(F)', '(*(m;a))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(m;a))', '(F)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03BD)', '(/(m;\u03BC))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(m;\u03BC))', '(\u03BD)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03BC)', '(/(m;\u03BD))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(m;\u03BD))', '(\u03BC)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(m)', '(*(\u03BD;\u03BC))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(\u03BD;\u03BC))', '(m)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03BD)', '(/(N;N\u2090))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(N;N\u2090))', '(\u03BD)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(N\u2090)', '(/(N;\u03BD))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(N;\u03BD))', '(N\u2090)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(N)', '(*(\u03BD;N\u2090))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(\u03BD;N\u2090))', '(N)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(k)', '(/(R;N\u2090))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(R;N\u2090))', '(k)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(N\u2090)', '(/(R;k))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(R;k))', '(N\u2090)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(R)', '(*(k;N\u2090))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(k;N\u2090))', '(R)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(n)', '(/(N;V))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(N;V))', '(n)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(V)', '(/(N;n))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(N;n))', '(V)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(N)', '(*(n;V))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(n;V))', '(N)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(P)', '(*(n;k;T))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(n;k;T))', '(P)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(T)', '(/(*(n;k);P))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(n;k);P))', '(T)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(P;V))', '(*(\u03BD;R;T))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(\u03BD;R;T))', '(*(P;V))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(P)', '(/(*(\u03BD;R;T);V))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(\u03BD;R;T);V))', '(P)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(V)', '(/(*(\u03BD;R;T);P))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(\u03BD;R;T);P))', '(V)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(T)', '(/(*(P;V);*(\u03BD;R)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(P;V);*(\u03BD;R)))', '(T)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(U)', '(*(N;/(3;2);k;T))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(N;/(3;2);k;T))', '(U)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(U)', '(*(/(3;2);\u03BD;R;T))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(3;2);\u03BD;R;T))', '(U)', 35, false, true, false, true)])), new RulePackITR('PhysicsElectrodynamics', void 0, void 0, 'Basics of Electrodynamics', '\u041E\u0441\u043D\u043E\u0432\u044B \u044D\u043B\u0435\u043A\u0442\u0440\u043E\u0434\u0438\u043D\u0430\u043C\u0438\u043A\u0438', 'Start formulas', '\u041F\u0440\u043E\u0441\u0442\u0435\u0439\u0448\u0438\u0435 \u0444\u043E\u0440\u043C\u0443\u043B\u044B', void 0, void 0, 'physics', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(I)', '(/(q;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(q;t))', '(I)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(t)', '(/(q;I))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(q;I))', '(t)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(q)', '(*(I;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(I;t))', '(q)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(q)', '(/(A;U))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;U))', '(q)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(U)', '(/(A;q))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;q))', '(U)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(*(U;q))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(U;q))', '(A)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(S)', '(/(*(\u03C1;l);R))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(\u03C1;l);R))', '(S)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(R)', '(/(*(\u03C1;l);S))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(\u03C1;l);S))', '(R)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(l)', '(/(*(S;R);\u03C1))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(S;R);\u03C1))', '(l)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03C1)', '(/(*(S;R);l))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(S;R);l))', '(\u03C1)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(S;R))', '(*(\u03C1;l))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(\u03C1;l))', '(*(S;R))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(I)', '(/(U;R))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(U;R))', '(I)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(R)', '(/(U;I))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(U;I))', '(R)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(U)', '(*(I;R))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(I;R))', '(U)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(P)', '(/(A;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;t))', '(P)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(t)', '(/(A;P))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;P))', '(t)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(*(P;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(P;t))', '(A)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(U)', '(/(P;I))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(P;I))', '(U)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(I)', '(/(P;U))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(P;U))', '(I)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(P)', '(*(I;U))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(I;U))', '(P)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(Q)', '(A)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(Q)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(P)', '(/(Q;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(Q;t))', '(P)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(t)', '(/(Q;P))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(Q;P))', '(t)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(Q)', '(*(P;t))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(P;t))', '(Q)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(C)', '(/(q;U))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(q;U))', '(C)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(U)', '(/(q;C))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(q;C))', '(U)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(q)', '(*(U;C))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(U;C))', '(q)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(W)', '(/(*(C;^(U;2));2))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(C;^(U;2));2))', '(W)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(C)', '(/(*(2;W);^(U;2)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;W);^(U;2)))', '(C)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(W)', '(/(*(L;^(I;2));2))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(L;^(I;2));2))', '(W)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(L)', '(/(*(2;W);^(I;2)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;W);^(I;2)))', '(L)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(I)', '(/(\u03A8;L))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03A8;L))', '(I)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(L)', '(/(\u03A8;I))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03A8;I))', '(L)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03A8)', '(*(I;L))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(I;L))', '(\u03A8)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(I)', '(/(F\u2090;*(B;l;sin(\u03C6))))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(F\u2090;*(B;l;sin(\u03C6))))', '(I)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(B)', '(/(F\u2090;*(I;l;sin(\u03C6))))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(F\u2090;*(I;l;sin(\u03C6))))', '(B)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(l)', '(/(F\u2090;*(B;I;sin(\u03C6))))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(F\u2090;*(B;I;sin(\u03C6))))', '(l)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(F\u2090)', '(*(I;B;l;sin(\u03C6)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(I;B;l;sin(\u03C6)))', '(F\u2090)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(B)', '(/(\u03A8;*(S;cos(\u03C6))))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03A8;*(S;cos(\u03C6))))', '(B)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(S)', '(/(\u03A8;*(B;cos(\u03C6))))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(\u03A8;*(B;cos(\u03C6))))', '(S)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03A8)', '(*(B;S;cos(\u03C6)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(B;S;cos(\u03C6)))', '(\u03A8)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(E)', '(/(F;q))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(F;q))', '(E)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(q)', '(/(F;E))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(F;E))', '(q)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(F)', '(*(E;q))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(E;q))', '(F)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(d)', '(/(U;E))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(U;E))', '(d)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(E)', '(/(U;d))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(U;d))', '(E)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(U)', '(*(E;d))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(E;d))', '(U)', 35, false, true, false, true)])), new RulePackITR('PhysicsNuclear', void 0, void 0, 'Basics of Nuclear Physics', '\u041E\u0441\u043D\u043E\u0432\u044B \u044F\u0434\u0435\u0440\u043D\u043E\u0439 \u0444\u0438\u0437\u0438\u043A\u0438', 'Start formulas', '\u041F\u0440\u043E\u0441\u0442\u0435\u0439\u0448\u0438\u0435 \u0444\u043E\u0440\u043C\u0443\u043B\u044B', void 0, void 0, 'physics', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(m)', '(/(E;^(c;2)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(E;^(c;2)))', '(m)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(c)', '(^(/(E;m);/(1;2)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(/(E;m);0.5))', '(c)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(E)', '(*(m;^(c;2)))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(m;^(c;2)))', '(E)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(h)', '(/(E;\u03BD))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(E;\u03BD))', '(h)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03BD)', '(/(E;h))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(E;h))', '(\u03BD)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(E)', '(*(h;\u03BD))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(h;\u03BD))', '(E)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03BB)', '(/(c;\u03BD))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(c;\u03BD))', '(\u03BB)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(\u03BD)', '(/(c;\u03BB))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(c;\u03BB))', '(\u03BD)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(c)', '(*(\u03BB;\u03BD))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(\u03BB;\u03BD))', '(c)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(c)', '(/(p;m))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(p;m))', '(c)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(m)', '(/(p;c))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(p;c))', '(m)', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(p)', '(*(m;c))', 35, false, true, false, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(m;c))', '(p)', 35, false, true, false, true)]))]);
  }
  DefaultPhysicsRulePacks$Companion.prototype.get = function () {
    return this.defaultPhysicsRulePacks;
  };
  DefaultPhysicsRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DefaultPhysicsRulePacks$Companion_instance = null;
  function DefaultPhysicsRulePacks$Companion_getInstance() {
    if (DefaultPhysicsRulePacks$Companion_instance === null) {
      new DefaultPhysicsRulePacks$Companion();
    }
    return DefaultPhysicsRulePacks$Companion_instance;
  }
  DefaultPhysicsRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DefaultPhysicsRulePacks',
    interfaces: []
  };
  function SetRulePacks() {
    SetRulePacks$Companion_getInstance();
  }
  function SetRulePacks$Companion() {
    SetRulePacks$Companion_instance = this;
    this.defaultSetRulePacks = listOf_0([new RulePackITR('SetBase', void 0, void 0, 'Basic Set Theory', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B \u0442\u0435\u043E\u0440\u0438\u0438 \u043C\u043D\u043E\u0436\u0435\u0441\u0442\u0432', "Basic operations, it's definitions and properties", '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438, \u0438\u0445 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0438 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430', 'Set intersection, union, difference, symmetric difference, complement', '\u041F\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043D\u0438\u0435, \u043E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435, \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C, \u0441\u0438\u043C\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0440\u0430\u0437\u043D\u0441\u0442\u044C, \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'set', void 0, listOf_0([new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(and(A;B)))', '(or(not(A);not(B)))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(or(not(A);not(B)))', '(not(and(A;B)))', 10, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(or(A;B)))', '(and(not(A);not(B)))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(and(not(A);not(B)))', '(not(or(A;B)))', 10, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(and(A;B))', '(not(or(not(A);not(B))))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(or(not(A);not(B))))', '(and(A;B))', 10, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(or(A;B))', '(not(and(not(A);not(B))))', 15, false, false, false, false), new RuleITR('', 'De Morgan Law', '\u0417\u0430\u043A\u043E\u043D \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430', void 0, void 0, void 0, void 0, '(not(and(not(A);not(B))))', '(or(A;B))', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(not(A)))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(not(not(A)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;A))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(or(A;A))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;A))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(and(A;A))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;B))', '(and(B;A))', 40, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;B))', '(or(B;A))', 40, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(and(A;1))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(or(A;0))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;not(A)))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(not(A);A))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(A)))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(A);A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;1))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(1;A))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;1))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(1;A))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;0))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(0;A))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;0))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(0;A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(0))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(1))', '(0)', 5, false, false, false, false), new RuleITR('SimpleComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('ZeroComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('ParentBracketsExpansion', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false), new RuleITR('ArgumentsSwap', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('ArgumentsPermutation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('OpeningBrackets', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false), new RuleITR('ArgumentsPermutationInOriginalOrder', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 41, false, false, false, false), new RuleITR('ReduceArithmetic', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false), new RuleITR('TwoSidesArithmeticReduce', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;not(B)))', '(set-(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(not(B);A))', '(set-(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;B))', '(and(A;not(B)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;0))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(A;1))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(0;A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(set-(1;A))', '(not(A))', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(set-(A;0))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(A))', '(set-(1;A))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(set-(A;1))', 91, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(set-(0;A))', 91, true, false, false, false)])), new RulePackITR('SetAbsorptionLaw', void 0, void 0, 'Absorption Law', '\u0417\u0430\u043A\u043E\u043D \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u044F', 'Law and basic properties in Set Theory', '\u0417\u0430\u043A\u043E\u043D \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u0432 \u0442\u0435\u043E\u0440\u0438\u0438 \u043C\u043D\u043E\u0436\u0435\u0441\u0442\u0432', void 0, void 0, 'set', listOf(new RulePackLinkITR(void 0, 'SetBase')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(A;B)))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;and(A;B)))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(A;or(B;A)))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(A;and(B;A)))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(A;B);A))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(A;B);A))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(or(B;A);A))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(and(B;A);A))', '(A)', 6, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(and(A;or(A;B)))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(A)', '(or(A;and(A;B)))', 90, true, false, false, false), new RuleITR('SetComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false)]))]);
  }
  SetRulePacks$Companion.prototype.get = function () {
    return this.defaultSetRulePacks;
  };
  SetRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SetRulePacks$Companion_instance = null;
  function SetRulePacks$Companion_getInstance() {
    if (SetRulePacks$Companion_instance === null) {
      new SetRulePacks$Companion();
    }
    return SetRulePacks$Companion_instance;
  }
  SetRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SetRulePacks',
    interfaces: []
  };
  function DefaultStandardMathRulePacks() {
    DefaultStandardMathRulePacks$Companion_getInstance();
  }
  function DefaultStandardMathRulePacks$Companion() {
    DefaultStandardMathRulePacks$Companion_instance = this;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13;
    tmp$ = new RulePackITR('ArithmeticPositiveAddition', void 0, void 0, 'Addition of Positive Numbers', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u0447\u0438\u0441\u0435\u043B', 'Addition of Positive Numbers', '\u041F\u0440\u0430\u0432\u0438\u043B \u0434\u043B\u044F \u0437\u0430\u0434\u0430\u0447 \u043D\u0430 \u0441\u0447\u0435\u0442 \u0434\u043B\u044F \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0449\u0438\u0445', 'Addition of Positive Numbers', '\u041F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0437\u0430\u0434\u0430\u0447 \u043D\u0430 \u0441\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435 \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u0447\u0438\u0441\u0435\u043B. \u0421\u043E\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u044B \u0442\u0430\u043A, \u0447\u0442\u043E\u0431\u044B \u043D\u0435 \u0434\u0430\u0442\u044C \u0432\u044B\u0439\u0442\u0438 \u0432 \u043E\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043B\u044C\u043D\u0443\u044E \u043E\u0431\u043B\u0430\u0441\u0442\u044C', 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a))', '(a)', 30, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;b))', '(+(b;a))', 20, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(+(a;0))', 35, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('SimpleComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ZeroComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('PositiveNumberPlusMinus1', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 20, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ParentBracketsExpansion', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ArgumentsSwap', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ArgumentsPermutation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ArgumentsPermutationInOriginalOrder', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 41, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0()))]));
    tmp$_0 = new RulePackITR('ArithmeticAddition', void 0, void 0, 'Addition and Subtraction', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435', 'Arithmetic Addition and Subtraction', '\u0410\u0440\u0438\u0444\u043C\u0435\u0442\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0441\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a))', '(a)', 30, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;b))', '(+(b;a))', 20, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(+(a;0))', 90, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(+(-(a)))))', '(a)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(+(-(a))))', '(a)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(-(a)))', '(a)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(+(-(+(-(a)))))', 95, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;-(a)))', '(0)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(a);a))', '(0)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;+(-(a))))', '(0)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(+(-(a));a))', '(0)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('SimpleComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ZeroComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('NumberPlusMinus1', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 20, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('MinusInOutBrackets', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 31, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ParentBracketsExpansion', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ArgumentsSwap', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ArgumentsPermutation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ArgumentsPermutationInOriginalOrder', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 41, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('AdditiveComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0()))]));
    tmp$_1 = new RulePackITR('ArithmeticMultiplication', void 0, void 0, 'Addition Subtraction Multiplication', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435 \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435', 'Arithmetic Addition, Subtraction and Multiplication', '\u0410\u0440\u0438\u0444\u043C\u0435\u0442\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0441\u043B\u043E\u0436\u0435\u043D\u0438\u0435, \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435 \u0438 \u0443\u043D\u043E\u0436\u0435\u043D\u0438\u0435', void 0, void 0, 'standard_math', listOf(new RulePackLinkITR(void 0, 'ArithmeticAddition')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;0))', '(0)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(0;a))', '(0)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(*(a;0))', 35, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;1))', '(a)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(1;a))', '(a)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(*(a;1))', 35, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;b))', '(*(b;a))', 20, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('OpeningBrackets', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ReduceArithmetic', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('TwoSidesArithmeticReduce', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('MultiplicationFactorization', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 15, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;a))', '(*(2;a))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;+(a)))', '(*(2;a))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(+(a);a))', '(*(2;a))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(2;a))', '(+(a;a))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;*(a;n)))', '(*(a;+(n;1)))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;+(n;1)))', '(+(a;*(a;n)))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(a;n);a))', '(*(a;+(1;n)))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;+(1;n)))', '(+(*(a;n);a))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(*(A;C)))', '(*(+(-(A));C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(-(A);C))', '(+(-(*(A;C))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(*(A;C)))', '(*(A;+(-(C))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;-(C)))', '(+(-(*(A;C))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;-(C)))', '(*(+(-(A));C))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(-(A);C))', '(*(A;+(-(C))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(*(A;C))))', '(*(+(-(A));C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(-(A));C))', '(+(-(*(A;C))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(*(A;C))))', '(*(A;+(-(C))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;+(-(C))))', '(+(-(*(A;C))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;+(-(C))))', '(*(+(-(A));C))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(-(A));C))', '(*(A;+(-(C))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(-(A);-(B)))', '(*(A;B))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;B))', '(*(+(-(A));+(-(B))))', 80, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(-(A));+(-(B))))', '(*(A;B))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0()))]));
    tmp$_2 = new RulePackITR('ArithmeticDivision', void 0, void 0, 'Rational Numbers', '\u0420\u0430\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0435 \u0447\u0438\u0441\u043B\u0430', 'Addition, Subtraction, Multiplication and Division', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435, \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435, \u0443\u043D\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0434\u0435\u043B\u0435\u043D\u0438\u0435', void 0, void 0, 'standard_math', listOf(new RulePackLinkITR(void 0, 'ArithmeticMultiplication')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(0;a))', '(0)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;1))', '(a)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;a))', '(1)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(1;a);a))', '(1)', 4, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;/(1;a)))', '(a)', 4, false, true, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(/(1;/(1;a)))', 90, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0.5)', '(/(1;2))', 15, false, false, true, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;2))', '(0.5)', 5, false, false, true, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;b))', '(/(*(a;b);*(b;b)))', 90, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('MultiplicativeComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('ReduceFraction', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('DecimalToFraction', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 15, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(/(A;C)))', '(/(+(-(A));C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(-(A);C))', '(+(-(/(A;C))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(/(A;C)))', '(/(A;+(-(C))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;-(C)))', '(+(-(/(A;C))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;-(C)))', '(/(+(-(A));C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(-(A);C))', '(/(A;+(-(C))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(/(A;C))))', '(/(+(-(A));C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(-(A));C))', '(+(-(/(A;C))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(/(A;C))))', '(/(A;+(-(C))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;+(-(C))))', '(+(-(/(A;C))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;+(-(C))))', '(/(+(-(A));C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(-(A));C))', '(/(A;+(-(C))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(-(A);-(B)))', '(/(A;B))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;B))', '(/(+(-(A));+(-(B))))', 80, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(-(A));+(-(B))))', '(/(A;B))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(/(B;C);/(A;D)))', '(/(+(*(B;D);*(C;A));*(C;D)))', 35, false, false, false, false, void 0, void 0, 0.0, 15.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(/(B;C);-(/(A;D))))', '(/(+(*(B;D);-(*(C;A)));*(C;D)))', 35, false, false, false, false, void 0, void 0, 0.0, 15.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;/(B;A)))', '(B)', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(B;A);A))', '(B)', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;/(B;C)))', '(/(*(A;B);C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(B;C);A))', '(/(*(A;B);C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;B))', '(/(1;/(B;A)))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;/(B;A)))', '(/(A;B))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(A;B);C))', '(*(A;/(B;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(/(B;C);A))', '(/(B;*(A;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(B;*(A;C)))', '(/(/(B;C);A))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;/(B;C)))', '(/(*(A;C);B))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(A;C);B))', '(/(A;/(B;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;*(B;C)))', '(*(/(A;B);/(1;C)))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;*(B;C)))', '(*(/(1;B);/(A;C)))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(A;B);/(1;C)))', '(/(A;*(B;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(1;B);/(A;C)))', '(/(A;*(B;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(D;B);/(A;C)))', '(/(*(D;A);*(B;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(D;A);*(B;C)))', '(*(/(D;B);/(A;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(D;A);*(B;A)))', '(/(D;B))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(D;A);*(D;C)))', '(/(A;C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(D;A);D))', '(A)', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(A;D);D))', '(A)', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0()))]));
    tmp$_3 = listOf(new RulePackLinkITR(void 0, 'ArithmeticDivision'));
    tmp$_4 = mapOf_0([to(notChangesOnVariablesInComparisonFunctionJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1)])), to(notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1)]))]);
    tmp$_13 = listOf_0([tmp$, tmp$_0, tmp$_1, tmp$_2, new RulePackITR('ArithmeticExponentiation', void 0, void 0, 'Algebraic Numbers', '\u0410\u043B\u0433\u0435\u0431\u0440\u0430\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0447\u0438\u0441\u043B\u0430', 'Pow, Ratio, Product, Difference, Sum', '\u0421\u0442\u0435\u043F\u0435\u043D\u044C, \u0447\u0430\u0441\u0442\u043D\u043E\u0435, \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435, \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C, \u0441\u0443\u043C\u043C\u0430', 'Pow, Division, Multiplication, Subtraction, Addition', '\u0412\u043E\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u0432 \u0441\u0442\u0435\u043F\u0435\u043D\u044C, \u0434\u0435\u043B\u0435\u043D\u0438\u0435, \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435, \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435, \u0441\u043B\u043E\u0436\u0435\u043D\u0438\u0435', 'standard_math', tmp$_3, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(a;1))', 95, true, false, true, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(^(1;2))', 95, true, false, true, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(^(1;3))', 95, true, false, true, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;a))', '(^(a;+(-(1))))', 80, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(-(1))))', '(/(1;a))', 40, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('PowFactorization', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 15, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(b;-(c))))', '(/(^(a;b);^(a;c)))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(a;b);^(a;c)))', '(^(a;+(b;-(c))))', 35, false, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(B;^(A;C)))', '(*(B;^(A;+(-(C)))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(B;^(A;+(-(C)))))', '(/(B;^(A;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;^(A;C)))', '(^(A;+(-(C))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;+(-(C))))', '(/(1;^(A;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;B))', '(^(/(B;A);+(-(1))))', 35, true, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(/(B;A);+(-(1))))', '(/(A;B))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;0))', '(1)', 5, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(1;A))', '(1)', 5, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;1))', '(A)', 5, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(0;A))', '(0)', 5, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;a))', '(^(a;2))', 40, false, false, true, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;2))', '(*(a;a))', 40, false, false, true, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;^(a;n)))', '(^(a;+(n;1)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(n;1)))', '(*(a;^(a;n)))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(^(a;n);a))', '(^(a;+(1;n)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(1;n)))', '(*(^(a;n);a))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(a;n);a))', '(^(a;+(n;-(1))))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(n;-(1))))', '(/(^(a;n);a))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;*(B;C)))', '(^(^(A;B);C))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(^(A;B);C))', '(^(A;*(B;C)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(/(B;C);A))', '(/(^(B;A);^(C;A)))', 35, true, false, false, false, void 0, void 0, 0.0, void 0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(B;A);^(C;A)))', '(^(/(B;C);A))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(-(A);*(2;n)))', '(^(A;*(2;n)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(-(A);2))', '(^(A;2))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(-(A));*(2;n)))', '(^(A;*(2;n)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(-(A));2))', '(^(A;2))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;*(2;n)))', '(^(+(-(a));*(2;n)))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;2))', '(^(+(-(a));2))', 35, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(^(a;b);/(1;b)))', '(a)', 5, false, false, false, false, void 0, void 0, 0.0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0()))]), tmp$_4), new RulePackITR('ArithmeticPowExtension', void 0, void 0, 'Pow from Root and Root from Pow', '\u0421\u0442\u0435\u043F\u0435\u043D\u044C \u0438\u0437 \u043A\u043E\u0440\u043D\u044F \u0438 \u043A\u043E\u0440\u0435\u043D\u044C \u0438\u0437 \u0441\u0442\u0435\u043F\u0435\u043D\u0438', 'Straight and Reverse Application of Root and Pow', '\u041F\u0440\u044F\u043C\u043E\u0435 \u0438 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u0435 \u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D\u0438\u0435 \u0441\u0442\u0435\u043F\u0435\u043D\u0438 \u0438 \u043A\u043E\u0440\u043D\u044F', 'Moved to separate rule pack because of not full domain', '\u0412\u044B\u043D\u0435\u0441\u0435\u043D\u043E \u0432 \u043E\u0442\u0434\u0435\u043B\u044C\u043D\u044B\u0439 \u043F\u0430\u043A\u0435\u0442 \u043F\u0440\u0430\u0432\u0438\u043B \u0442\u0430\u043A \u043A\u0430\u043A \u043D\u0435 \u0432\u0435\u0437\u0434\u0435 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043E', 'standard_math', listOf(new RulePackLinkITR(void 0, 'ArithmeticExponentiation')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(^(a;2);/(1;2)))', 96, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(^(a;/(1;2));2))', 96, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(^(a;3);/(1;3)))', 96, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(^(a;/(1;3));3))', 96, false, false, false, false, void 0, void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('PowRootComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 96, false, false, false, false, void 0, void 0, void 0, 0.0)]))]);
    tmp$_5 = listOf(new RulePackLinkITR(void 0, 'ArithmeticExponentiation'));
    tmp$_6 = mapOf_0([to(notChangesOnVariablesInComparisonFunctionJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1)])), to(notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1)]))]);
    tmp$_7 = new RulePackITR('ShortMultiplication', void 0, void 0, 'Short Multiplication', '\u0421\u043E\u043A\u0440\u0430\u0449\u0435\u043D\u043D\u043E\u0435 \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435', 'Short Multiplication Formulas', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0441\u043E\u043A\u0440\u0430\u0449\u0435\u043D\u043D\u043E\u0433\u043E \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u044F', 'Difference of Squares, Square of Sum, Square of Difference, Sum of Cubes, Difference of Cubes, Cube of Sum, Cube of Difference', '\u0420\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u043A\u0432\u0430\u0434\u0440\u0430\u0442\u043E\u0432, \u043A\u0432\u0430\u0434\u0440\u0430\u0442 \u0441\u0443\u043C\u043C\u044B, \u043A\u0432\u0430\u0434\u0440\u0430\u0442 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438, \u0441\u0443\u043C\u043C\u0430 \u043A\u0443\u0431\u043E\u0432, \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u043A\u0443\u0431\u043E\u0432, \u043A\u0443\u0431 \u0441\u0443\u043C\u043C\u044B, \u043A\u0443\u0431 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438', 'standard_math', tmp$_5, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);-(^(b;2))))', '(*(+(a;-(b));+(a;b)))', 25, true, true, false, false, 'SORTED', void 0, void 0, 20.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;-(b));+(a;b)))', '(+(^(a;2);-(^(b;2))))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(a;b);2))', '(+(^(a;2);*(2;a;b);^(b;2)))', 25, true, true, false, false, 'SORTED', void 0, void 0, 20.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);*(2;a;b);^(b;2)))', '(^(+(a;b);2))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);*(2;a);1))', '(^(+(a;1);2))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(a;-(b));2))', '(+(^(a;2);-(*(2;a;b));^(b;2)))', 25, true, true, false, false, 'SORTED', void 0, void 0, 20.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);-(*(2;a;b));^(b;2)))', '(^(+(a;-(b));2))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);-(*(2;a));1))', '(^(+(a;-(1));2))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(a;b);3))', '(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))', 25, true, true, false, false, 'SORTED', void 0, void 0, 20.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))', '(^(+(a;b);3))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);*(3;^(a;2));*(3;a);1))', '(^(+(a;1);3))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(a;-(b));3))', '(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))', 25, true, true, false, false, 'SORTED', void 0, void 0, 20.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))', '(^(+(a;-(b));3))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);-(*(3;^(a;2)));*(3;a);-(1)))', '(^(+(a;-(1));3))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);-(^(b;3))))', '(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))', 25, true, true, false, false, 'SORTED', void 0, void 0, 20.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))', '(+(^(a;3);-(^(b;3))))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;-(1));+(^(a;2);a;1)))', '(+(^(a;3);-(^(1;3))))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);^(b;3)))', '(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))', 25, false, true, false, false, 'SORTED', void 0, void 0, 20.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))', '(+(^(a;3);^(b;3)))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;1);+(^(a;2);-(a);1)))', '(+(^(a;3);^(1;3)))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0()))]), tmp$_6);
    tmp$_8 = listOf(new RulePackLinkITR(void 0, 'ShortMultiplication'));
    tmp$_9 = mapOf_0([to(notChangesOnVariablesInComparisonFunctionJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1), new FunctionIdentifier('^', -1)])), to(notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1), new FunctionIdentifier('^', -1)]))]);
    tmp$_10 = new RulePackITR('Logarithm', void 0, void 0, 'Logarithm', '\u041B\u043E\u0433\u0430\u0440\u0438\u0444\u043C', 'Basic Properties Without Regard to Domain', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F', void 0, void 0, 'standard_math', tmp$_8, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;log(b;a)))', '(b)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(1;A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(A;A))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(*(b;c);a))', '(+(log(b;a);log(c;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(log(b;a);log(c;a)))', '(log(*(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(*(b;c;d);a))', '(+(log(b;a);log(c;a);log(d;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(log(b;a);log(c;a);log(d;a)))', '(log(*(b;c;d);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(*(b;c;d;e);a))', '(+(log(b;a);log(c;a);log(d;a);log(e;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(log(b;a);log(c;a);log(d;a);log(e;a)))', '(log(*(b;c;d;e);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(/(b;c);a))', '(+(log(b;a);-(log(c;a))))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(log(b;a);-(log(c;a))))', '(log(/(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(^(b;c);a))', '(*(c;log(b;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(c;log(b;a)))', '(log(^(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(log(b;a);c))', '(log(^(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(b;^(a;k)))', '(/(log(b;a);k))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(log(b;a);k))', '(log(b;^(a;k)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;log(b;a)))', '(log(a;b))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;b))', '(/(1;log(b;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(log(c;a);log(b;a)))', '(log(c;b))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(/(b;c);a))', '(+(-(log(/(c;b);a))))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(log(/(c;b);a))))', '(log(/(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(b;a))', '(+(-(log(/(1;b);a))))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(log(/(1;b);a))))', '(log(b;a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(/(1;b);a))', '(+(-(log(b;a))))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(log(b;a))))', '(log(/(1;b);a))', 25, false, false, false, false), new RuleITR('LogExpComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 96, false, false, false, false)]), tmp$_9);
    tmp$_11 = listOf(new RulePackLinkITR(void 0, 'ShortMultiplication'));
    tmp$_12 = mapOf_0([to(notChangesOnVariablesInComparisonFunctionJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1), new FunctionIdentifier('^', -1)])), to(notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1), new FunctionIdentifier('^', -1)]))]);
    this.defaultStandardMathRulePacks = plus(tmp$_13, listOf_0([tmp$_7, tmp$_10, new RulePackITR('BasicTrigonometricDefinitionsIdentity', void 0, void 0, 'Basic Trigonometric Identity', '\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0442\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u043E', 'Sin, Cos, Tg, Ctg Definitions and Basic Identity', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F sin, cos, tg, ctg \u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435 \u0442\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u043E', void 0, void 0, 'standard_math', tmp$_11, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(sin(a);2);^(cos(a);2)))', '(1)', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;-(^(sin(a);2))))', '(^(cos(a);2))', 25, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(cos(a);2))', '(+(1;-(^(sin(a);2))))', 25, true, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(^(+(1;-(^(sin(a);2)));0.5))', 25, true, true, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;-(^(cos(a);2))))', '(^(sin(a);2))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(sin(a);2))', '(+(1;-(^(cos(a);2))))', 25, true, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(^(+(1;-(^(cos(a);2)));0.5))', 25, true, true, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;^(cos(a);2)))', '(+(1;^(tg(a);2)))', 25, true, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;^(tg(a);2)))', '(/(1;^(cos(a);2)))', 25, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;^(sin(a);2)))', '(+(1;^(ctg(a);2)))', 25, true, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;^(ctg(a);2)))', '(/(1;^(sin(a);2)))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;+(1;^(tg(a);2))))', '(^(cos(a);2))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(cos(a);2))', '(/(1;+(1;^(tg(a);2))))', 25, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;+(1;^(ctg(a);2))))', '(^(sin(a);2))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(sin(a);2))', '(/(1;+(1;^(ctg(a);2))))', 25, true, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(tg(a);ctg(a)))', '(1)', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(sin(a);cos(a)))', '(tg(a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(/(sin(a);cos(a)))', 25, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(cos(a);sin(a)))', '(ctg(a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(/(cos(a);sin(a)))', 25, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;ctg(a)))', '(tg(a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(/(1;ctg(a)))', 25, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;tg(a)))', '(ctg(a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(/(1;tg(a)))', 25, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(sin(0))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(\u03C0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(2;\u03C0)))', '(0)', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(sin(\u03C0))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(\u03C0;2)))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(sin(/(\u03C0;2)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(0))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(cos(0))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(\u03C0))', '(+(-(1)))', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;\u03C0)))', '(1)', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(1)))', '(cos(\u03C0))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(1))', '(cos(\u03C0))', 89, true, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(\u03C0;2)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(cos(/(\u03C0;2)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(\u03C0;6)))', '(/(1;2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0.5)', '(sin(/(\u03C0;6)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(\u03C0;4)))', '(/(^(2;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(2;0.5);2))', '(sin(/(\u03C0;4)))', 13, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(/(\u03C0;3)))', '(/(^(3;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(3;0.5);2))', '(sin(/(\u03C0;3)))', 13, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(\u03C0;3)))', '(/(1;2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0.5)', '(cos(/(\u03C0;3)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(\u03C0;4)))', '(/(^(2;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(2;0.5);2))', '(cos(/(\u03C0;4)))', 13, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(/(\u03C0;6)))', '(/(^(3;/(1;2));2))', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(3;0.5);2))', '(cos(/(\u03C0;6)))', 13, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(\u03C0;4)))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(tg(/(\u03C0;4)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(\u03C0;4)))', '(1)', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(ctg(/(\u03C0;4)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(tg(0))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(\u03C0;2)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(ctg(/(\u03C0;2)))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;*(2;\u03C0))))', '(sin(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;-(*(2;\u03C0)))))', '(sin(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(sin(+(a;*(2;\u03C0))))', 80, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;*(2;\u03C0))))', '(cos(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;-(*(2;\u03C0)))))', '(cos(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(cos(+(a;*(2;\u03C0))))', 80, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;*(2;\u03C0))))', '(tg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;-(*(2;\u03C0)))))', '(tg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(tg(+(a;*(2;\u03C0))))', 80, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;*(2;\u03C0))))', '(ctg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;-(*(2;\u03C0)))))', '(ctg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(ctg(+(a;*(2;\u03C0))))', 80, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;\u03C0)))', '(+(-(sin(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;-(\u03C0))))', '(+(-(sin(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(sin(+(a;\u03C0)))))', 85, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(sin(a))))', '(sin(+(a;\u03C0)))', 80, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;\u03C0)))', '(+(-(cos(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;-(\u03C0))))', '(+(-(cos(a))))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(cos(+(a;\u03C0)))))', 85, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(cos(a))))', '(cos(+(a;\u03C0)))', 80, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;\u03C0)))', '(tg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;-(\u03C0))))', '(tg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(a))', '(tg(+(a;\u03C0)))', 85, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;\u03C0)))', '(ctg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;-(\u03C0))))', '(ctg(a))', 5, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(a))', '(ctg(+(a;\u03C0)))', 85, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(*(tg(/(a;2));+(1;cos(a))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(*(ctg(/(a;2));+(1;+(-(cos(a))))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(/(+(1;+(-(cos(a))));tg(/(a;2))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(/(+(1;cos(a));ctg(/(a;2))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(*(2;cos(/(a;2));sin(/(a;2))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(2;a)))', '(/(2;+(tg(a);ctg(a))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(/(2;+(tg(/(a;2));ctg(/(a;2)))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(3;a)))', '(+(*(3;sin(a));+(-(*(4;^(sin(a);3))))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(+(a;b);c)))', '(sin(+(*(a;c);*(b;c))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 1000.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(*(sin(a);ctg(a)))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(*(2;^(cos(/(a;2));2));+(-(1))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(/(+(ctg(a);+(-(tg(a))));+(ctg(a);tg(a))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(/(+(ctg(/(a;2));+(-(tg(/(a;2)))));+(ctg(/(a;2));tg(/(a;2)))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(3;a)))', '(+(*(4;^(cos(a);3));-(+(*(3;cos(a))))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(+(a;b);c)))', '(cos(+(*(a;c);*(b;c))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 1000.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(tg(a);2))', '(+(/(1;^(cos(a);2));+(-(1))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(a;2)))', '(/(+(1;+(-(cos(a))));sin(a)))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(/(a;2)))', '(/(sin(a);+(1;cos(a))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(tg(/(a;2));2))', '(/(+(1;+(-(cos(a))));+(1;cos(a))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(tg(a);2))', '(/(+(1;+(-(cos(*(2;a)))));+(1;cos(*(2;a)))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(tg(a);3))', '(/(+(*(3;sin(a));+(-(sin(*(3;a)))));+(*(3;cos(a));cos(*(3;a)))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(*(+(a;b);c)))', '(tg(+(*(a;c);*(b;c))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 1000.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(ctg(a);2))', '(+(/(1;^(sin(a);2));+(-(1))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(a;2)))', '(/(+(1;cos(a));sin(a)))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(/(a;2)))', '(/(sin(a);+(1;+(-(cos(a))))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(ctg(/(a;2));2))', '(/(+(1;cos(a));+(1;+(-(cos(a))))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(ctg(a);2))', '(/(+(1;cos(*(2;a)));+(1;+(-(cos(*(2;a)))))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(*(2;a)))', '(/(+(ctg(a);+(-(tg(a))));2))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(ctg(a);3))', '(/(+(*(3;cos(a));cos(*(3;a)));+(*(3;sin(a));+(-(sin(*(3;a)))))))', 80, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(*(+(a;b);c)))', '(ctg(+(*(a;c);*(b;c))))', 85, true, true, false, false, 'SORTED', void 0, void 0, 1000.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(1;+(-(1))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(+(-(1));1))', 89, true, false, false, false, void 0, void 0, void 0, 15.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(^(sin(x);2);^(cos(x);2);+(-(1))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(*(^(tg(x);2);^(ctg(x);2));+(-(1))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(1;^(tg(x);2);+(-(/(1;^(cos(x);2))))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(1;^(ctg(x);2);+(-(/(1;^(sin(x);2))))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(cos(+(/(\u03C0;3);/(\u03C0;6))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(cos(+(/(*(2;\u03C0);3);+(-(/(\u03C0;6))))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(2)', '(+(1;1))', 89, true, false, false, false, void 0, void 0, void 0, 10.0, void 0, listOf(RuleTag$BASIC_MATH_getInstance_0())), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(^(+(sin(x);cos(x));2);+(-(sin(*(2;x))))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(^(+(sin(x);-(+(cos(x))));2);sin(*(2;x))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(^(cos(x);2);+(1;^(tg(x);2))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(^(sin(x);2);+(1;^(ctg(x);2))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;^(sin(x);2));cos(*(2;x))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(^(sin(x);2);+(1;^(ctg(x);2))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;^(cos(x);2));+(-(cos(*(2;x))))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;^(cos(/(x;2));2));+(-(cos(x)))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(/(*(2;tg(/(x;2)));sin(x));+(-(^(tg(/(x;2));2)))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;tg(/(x;2));ctg(x));^(tg(/(x;2));2)))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(+(ctg(x);+(-(tg(x))));*(2;ctg(*(2;x)))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(+(*(3;cos(x));cos(*(3;x)));*(4;^(cos(x);3))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(tg(x);ctg(x)))', 89, true, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(/(1;^(cos(x);2));+(-(^(tg(x);2)))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(/(1;^(sin(x);2));+(-(^(ctg(x);2)))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(sin(*(2;x));*(2;sin(x);cos(x))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(8;^(sin(x);2);^(cos(x);2));cos(*(4;x))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(sin(/(\u03C0;6));cos(/(\u03C0;3))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(sin(/(\u03C0;6));cos(/(\u03C0;3))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(sin(+(/(\u03C0;3);/(\u03C0;6))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(sin(+(/(*(2;\u03C0);3);+(-(/(\u03C0;6))))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(2;sin(/(\u03C0;6))))', 89, true, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(2;cos(/(\u03C0;3))))', 89, true, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(^(+(sin(*(2;x));cos(*(2;x)));2);+(-(sin(*(4;x))))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(^(+(sin(*(2;x));-(+(cos(*(2;x)))));2);sin(*(4;x))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(^(cos(*(2;x));2);+(1;^(tg(*(2;x));2))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(^(sin(*(2;x));2);+(1;^(ctg(*(2;x));2))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;^(sin(*(2;x));2));cos(*(4;x))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;^(cos(*(2;x));2));+(-(cos(*(4;x))))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(/(*(2;tg(x));sin(*(2;x)));+(-(^(tg(x);2)))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(2;tg(x);ctg(*(2;x)));^(tg(x);2)))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(+(ctg(*(2;x));+(-(tg(*(2;x)))));*(2;ctg(*(4;x)))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(+(*(3;cos(*(2;x)));cos(*(6;x)));*(4;^(cos(*(2;x));3))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(*(tg(*(2;x));ctg(*(2;x))))', 89, true, false, false, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(/(1;^(cos(*(2;x));2));+(-(^(tg(*(2;x));2)))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(/(1;^(sin(*(2;x));2));+(-(^(ctg(*(2;x));2)))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(/(sin(*(4;x));*(2;sin(*(2;x));cos(*(2;x)))))', 89, true, false, false, false, void 0, void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(+(*(8;^(sin(*(2;x));2);^(cos(*(2;x));2));cos(*(8;x))))', 89, true, false, false, false, void 0, void 0, void 0, 10.0)]), tmp$_12), new RulePackITR('TrigonometrySinCosSumReduction', void 0, void 0, "Trigonometry Sin Cos of Sum and it's Reduction", '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F sin cos \u0441\u0443\u043C\u043C\u044B \u0438 \u0438\u0445 \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u0435', 'Sin Cos of sum and difference; reduction Formulas', 'Sin cos \u0441\u0443\u043C\u043C\u044B \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438; \u0438\u0445 \u0444\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F', "Placed in separated rule pack for tasks for Derivation of formulas on Sin Cos of Double Argument, also it's Sum, Difference and Product", '\u0412\u044B\u043D\u0435\u0441\u0435\u043D\u044B \u0432 \u043E\u0442\u0434\u0435\u043B\u044C\u043D\u044B\u0439 \u043F\u0430\u043A\u0435\u0442 \u043F\u0440\u0430\u0432\u0438\u043B \u0434\u043B\u044F \u0437\u0430\u0434\u0430\u0447 \u0432\u044B\u0432\u043E\u0434 \u0444\u043E\u0440\u043C\u0443\u043B \u043D\u0430 sin cos \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430, \u0430 \u0442\u0430\u043A\u0436\u0435 \u0438\u0445 \u0441\u0443\u043C\u043C\u0443, \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u0438 \u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435', 'standard_math', listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;b)))', '(+(*(sin(a);cos(b));*(sin(b);cos(a))))', 24, true, true, false, false, 'SORTED', void 0, void 0, 1000.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(sin(a);cos(b));*(sin(b);cos(a))))', '(sin(+(a;b)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;-(b))))', '(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))', 24, true, true, false, false, 'SORTED', void 0, void 0, 30.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))', '(sin(+(a;-(b))))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;b)))', '(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))', 24, true, true, false, false, 'SORTED', void 0, void 0, 1000.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))', '(cos(+(a;b)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;-(b))))', '(+(*(cos(a);cos(b));*(sin(b);sin(a))))', 24, true, true, false, false, 'SORTED', void 0, void 0, 30.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(cos(a);cos(b));*(sin(b);sin(a))))', '(cos(+(a;-(b))))', 24, false, true, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(-(a))))', '(+(-(sin(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(sin(a))))', '(sin(+(-(a))))', 14, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(sin(a)))', '(sin(+(-(a))))', 14, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(-(a)))', '(+(-(sin(a))))', 17, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(-(a))))', '(cos(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(cos(+(-(a))))', 35, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(\u03C0;a)))', '(+(-(cos(-(a)))))', 14, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(\u03C0;-(a))))', '(+(-(cos(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(cos(a))))', '(cos(+(\u03C0;-(a))))', 14, true, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(cos(a)))', '(cos(+(\u03C0;-(a))))', 35, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(\u03C0;a)))', '(sin(+(-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(\u03C0;-(a))))', '(sin(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(sin(+(\u03C0;-(a))))', 35, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(/(\u03C0;2);-(a))))', '(cos(a))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(/(\u03C0;2);a)))', '(cos(+(-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(sin(+(/(\u03C0;2);-(a))))', 35, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(/(\u03C0;2);-(a))))', '(sin(a))', 14, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(/(\u03C0;2);a)))', '(sin(+(-(a))))', 14, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(cos(+(/(\u03C0;2);-(a))))', 35, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(-(a))))', '(+(-(sin(a))))', 17, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(b;-(a))))', '(+(-(sin(+(a;-(b))))))', 14, true, false, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(sin(+(a;-(b))))))', '(sin(+(b;-(a))))', 14, false, false, false, false, 'SORTED', void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(-(a)))', '(cos(a))', 14, false, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(cos(+(-(a))))', 35, true, false, false, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;-(b))))', '(cos(+(b;-(a))))', 14, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(sin(+(a;\u03C0)))))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(a))', '(+(-(sin(+(a;-(\u03C0))))))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(cos(+(a;\u03C0)))))', 89, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(a))', '(+(-(cos(+(a;-(\u03C0))))))', 89, true, false, false, false)])), new RulePackITR('Trigonometry', void 0, void 0, 'Trigonometry', '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F', 'Basic properties without Tg Ctg of sum and \u03C0k', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u0431\u0435\u0437 tg ctg \u0441\u0443\u043C\u043C\u043C\u044B \u0438 \u03C0k', void 0, void 0, 'standard_math', listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(2;a)))', '(*(2;sin(a);cos(a)))', 24, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(2;sin(a);cos(a)))', '(sin(*(2;a)))', 24, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(+(^(cos(a);2);-(^(sin(a);2))))', 24, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(cos(a);2);-(^(sin(a);2))))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(^(sin(a);2));^(cos(a);2)))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(+(1;-(*(2;^(sin(a);2)))))', 24, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(1;-(*(2;^(sin(a);2)))))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(*(2;^(sin(a);2)));1))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(+(*(2;^(cos(a);2));-(1)))', 24, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(2;^(cos(a);2));-(1)))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(1);*(2;^(cos(a);2))))', '(cos(*(2;a)))', 24, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(sin(a);sin(b)))', '(*(2;sin(/(+(a;b);2));cos(/(+(a;-(b));2))))', 23, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(sin(a);-(sin(b))))', '(*(2;sin(/(+(a;-(b));2));cos(/(+(a;b);2))))', 23, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(cos(a);cos(b)))', '(*(2;cos(/(+(a;b);2));cos(/(+(a;-(b));2))))', 23, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(cos(a);-(cos(b))))', '(+(-(*(2;sin(/(+(a;-(b));2));sin(/(+(a;b);2))))))', 23, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(sin(a);sin(b)))', '(/(+(cos(+(a;-(b)));-(cos(+(a;b))));2))', 23, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(sin(a);cos(b)))', '(/(+(sin(+(a;-(b)));sin(+(a;b)));2))', 23, true, true, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(cos(a);cos(b)))', '(/(+(cos(+(a;-(b)));cos(+(a;b)));2))', 23, true, true, false, false, 'SORTED', void 0, void 0, 15.0)])), new RulePackITR('AdvancedTrigonometry', void 0, void 0, 'Advanced Trigonometry', '\u041F\u0440\u043E\u0434\u0432\u0438\u043D\u0443\u0442\u0430\u044F \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F', 'With Tg Ctg of Sum and \u03C0k reduction', '\u0421 tg ctg \u0441\u0443\u043C\u043C\u043C\u044B \u0438 \u03C0k \u0443\u043F\u0440\u043E\u0449\u0435\u043D\u0438\u0435\u043C', void 0, void 0, 'standard_math', listOf(new RulePackLinkITR(void 0, 'Trigonometry')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(*(2;a)))', '(/(*(2;tg(a));+(1;^(tg(a);2))))', 30, true, false, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;tg(a));+(1;^(tg(a);2))))', '(sin(*(2;a)))', 30, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(*(2;a)))', '(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))', 30, true, false, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))', '(cos(*(2;a)))', 30, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;b)))', '(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))', 30, true, false, false, false, 'SORTED', void 0, void 0, 1000.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))', '(tg(+(a;b)))', 30, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(+(a;-(b))))', '(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))', 30, true, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))', '(tg(+(a;-(b))))', 30, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;b)))', '(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))', 30, true, false, true, false, 'SORTED', void 0, void 0, 1000.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))', '(ctg(+(a;b)))', 30, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(+(a;-(b))))', '(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))', 30, true, false, true, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))', '(ctg(+(a;-(b))))', 30, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(*(2;a)))', '(/(*(2;tg(a));+(1;-(^(tg(a);2)))))', 30, true, false, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(2;tg(a));+(1;-(^(tg(a);2)))))', '(tg(*(2;a)))', 30, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(*(2;a)))', '(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))', 30, true, false, false, false, 'SORTED', void 0, void 0, 15.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))', '(ctg(*(2;a)))', 30, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(a;*(2;\u03C0;k))))', '(sin(a))', 30, false, false, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(a;*(2;\u03C0;k))))', '(cos(a))', 30, false, false, false, false, 'SORTED')])), new RulePackITR('InverseTrigonometricFunctions', void 0, void 0, 'Inverse Trigonometric Functions', '\u041E\u0431\u0440\u0430\u0442\u043D\u044B\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0438', 'Straight and inverse trigonometric functions', '\u041F\u0440\u044F\u043C\u044B\u0435 \u0438 \u043E\u0431\u0440\u0430\u0442\u043D\u044B\u0435 \u0442\u0440\u0438\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0438', 'Straight and inverse trigonometric functions relations. Defined not on full domain', '\u041F\u0440\u044F\u043C\u044B\u0435 \u0438 \u043E\u0431\u0440\u0430\u0442\u043D\u044B\u0435 \u0442\u0440\u0438\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0438, \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u044B \u043D\u0435 \u0432\u0435\u0437\u0434\u0435', 'standard_math', listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(asin(sin(a)))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(asin(sin(a)))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(acos(cos(a)))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(acos(cos(a)))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(atg(tg(a)))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(atg(tg(a)))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(actg(ctg(a)))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(actg(ctg(a)))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(asin(a)))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(sin(asin(a)))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(acos(a)))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(cos(acos(a)))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(atg(a)))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(tg(atg(a)))', 30, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(actg(a)))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(ctg(actg(a)))', 30, true, false, false, false)]))]));
  }
  DefaultStandardMathRulePacks$Companion.prototype.get = function () {
    return this.defaultStandardMathRulePacks;
  };
  DefaultStandardMathRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DefaultStandardMathRulePacks$Companion_instance = null;
  function DefaultStandardMathRulePacks$Companion_getInstance() {
    if (DefaultStandardMathRulePacks$Companion_instance === null) {
      new DefaultStandardMathRulePacks$Companion();
    }
    return DefaultStandardMathRulePacks$Companion_instance;
  }
  DefaultStandardMathRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DefaultStandardMathRulePacks',
    interfaces: []
  };
  function CombinatoricTaskSets() {
    CombinatoricTaskSets$Companion_getInstance();
  }
  function CombinatoricTaskSets$Companion() {
    CombinatoricTaskSets$Companion_instance = this;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17;
    tmp$ = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    tmp$_0 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(*(V(+(m;1);n);*(P(m);P(n))))', void 0, void 0, void 0, '(*(P(m);A(+(m;n);n)))', void 0, void 0, void 0, void 0, void 0, tmp$, void 0, void 0, void 0, 3.0);
    tmp$_1 = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    tmp$_2 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(S2(/(P(+(m;1));P(m));+(n;S2(m;m))))', void 0, void 0, void 0, '(+(S2(m;n);*(n;S2(m;+(n;1)))))', void 0, void 0, void 0, void 0, void 0, tmp$_1, void 0, void 0, void 0, 3.0);
    tmp$_3 = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    tmp$_4 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(*(C(n);C(0);A(+(n;1);1)))', void 0, void 0, void 0, '(C(*(2;n);n))', void 0, void 0, void 0, void 0, void 0, tmp$_3, void 0, void 0, void 0, 3.0);
    tmp$_5 = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    tmp$_6 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(*(+(m;n;1);C(+(m;n);n)))', void 0, void 0, void 0, '(*(+(n;1);C(+(m;n;1);+(n;1))))', void 0, void 0, void 0, void 0, void 0, tmp$_5, void 0, void 0, void 0, 3.0);
    tmp$_7 = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    tmp$_8 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(/(*(S1(n;m);A(+(m;n);n));*(V(+(m;1);n);factorial(m);factorial(n))))', void 0, void 0, void 0, '(S2(n;m))', void 0, void 0, void 0, void 0, void 0, tmp$_7, void 0, void 0, void 0, 4.0);
    tmp$_9 = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    tmp$_10 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(+(C(+(*(2;n);1);n);C(+(*(2;n);1);+(n;1))))', void 0, void 0, void 0, '(C(*(2;+(n;1));+(n;1)))', void 0, void 0, void 0, void 0, void 0, tmp$_9, void 0, void 0, void 0, 3.0);
    tmp$_11 = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    tmp$_12 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(*(/(A(+(n;m;1);m);+(m;n;1));/(+(n;1);P(m))))', void 0, void 0, void 0, '(V(+(n;1);m))', void 0, void 0, void 0, void 0, void 0, tmp$_11, void 0, void 0, void 0, 3.0);
    tmp$_13 = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    tmp$_14 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(*(C(+(n;k;m);+(k;m));C(+(k;m);m)))', void 0, void 0, void 0, '(*(C(+(n;k;m);m);C(+(n;k);k)))', void 0, void 0, void 0, void 0, void 0, tmp$_13, void 0, void 0, void 0, 3.0);
    tmp$_15 = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    tmp$_16 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(/(V(+(m;1);+(n;k;1));A(+(k;m;1);+(k;1))))', void 0, void 0, void 0, '(/(A(+(m;n;k;1);n);P(+(n;k;1))))', void 0, void 0, void 0, void 0, void 0, tmp$_15, void 0, void 0, void 0, 4.0);
    tmp$_17 = listOf(new RulePackLinkITR(void 0, 'BasicCombinatorics'));
    this.basicCombinatoricsFormulasCheckYourselfTasks = listOf_0([tmp$_0, tmp$_2, tmp$_4, tmp$_6, tmp$_8, tmp$_10, tmp$_12, tmp$_14, tmp$_16, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'combinatorics', mutableSetOf([TaskTagCode$COMBINATORICS_getInstance().code]), '(*(/(A(+(n;1;m);m);+(m;n;1));/(C(*(2;n);n);*(C(n);P(m)))))', void 0, void 0, void 0, '(V(+(m;1);n))', void 0, void 0, void 0, void 0, void 0, tmp$_17, void 0, void 0, void 0, 4.0)]);
    this.allCombinatoricsTasks = this.basicCombinatoricsFormulasCheckYourselfTasks;
    var tmp$_18 = void 0;
    var tmp$_19 = void 0;
    var tmp$_20 = mutableSetOf([TaskSetTagCode$COMBINATORICS_getInstance().code, TaskSetTagCode$CHECK_YOURSELF_getInstance().code]);
    var tmp$_21 = void 0;
    var tmp$_22 = void 0;
    var $receiver = this.basicCombinatoricsFormulasCheckYourselfTasks;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_23;
    tmp$_23 = $receiver.iterator();
    while (tmp$_23.hasNext()) {
      var item = tmp$_23.next();
      destination.add_11rb$(item.copy_eb9u9i$());
    }
    this.defaultCombinatoricsTaskSets = listOf(new TaskSetITR('BasicCombinatoricsFormulasCheckYourself', tmp$_18, tmp$_19, '[Check Yourself] Basic Combinatorics Formulas', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u0411\u0430\u0437\u043E\u0432\u044B\u0435 \u0444\u043E\u0440\u043C\u0443\u043B\u044B \u043A\u043E\u043C\u0431\u0438\u043D\u0430\u0442\u043E\u0440\u0438\u043A\u0438', 'Combinatorics Expressions Transformations', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043A\u043E\u043C\u0431\u0438\u043D\u0430\u0442\u043E\u0440\u043D\u044B\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', '[Check Yourself] Combinatorics Expressions Transformations by Simple Formulas', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043A\u043E\u043C\u0431\u0438\u043D\u0430\u0442\u043E\u0440\u043D\u044B\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u043F\u043E \u043F\u0440\u043E\u0441\u0442\u044B\u043C \u0444\u043E\u0440\u043C\u0443\u043B\u0430\u043C', 'combinatorics', tmp$_20, tmp$_21, tmp$_22, destination));
  }
  CombinatoricTaskSets$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var CombinatoricTaskSets$Companion_instance = null;
  function CombinatoricTaskSets$Companion_getInstance() {
    if (CombinatoricTaskSets$Companion_instance === null) {
      new CombinatoricTaskSets$Companion();
    }
    return CombinatoricTaskSets$Companion_instance;
  }
  CombinatoricTaskSets.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CombinatoricTaskSets',
    interfaces: []
  };
  function DefaultTaskSets() {
    DefaultTaskSets$Companion_getInstance();
  }
  function DefaultTaskSets$Companion() {
    DefaultTaskSets$Companion_instance = this;
    this.defaultTaskSets = plus(plus(plus(TriginometryTaskSets$Companion_getInstance().defaultTrigonometryTaskSets, SetTaskSets$Companion_getInstance().defaultSetTaskSets), LogicTaskSets$Companion_getInstance().defaultLogicTaskSets), CombinatoricTaskSets$Companion_getInstance().defaultCombinatoricsTaskSets);
    var $receiver = this.defaultTaskSets;
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
    var destination = LinkedHashMap_init(capacity);
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      destination.put_xwzc9p$(ensureNotNull(element.code), element);
    }
    this.defaultTaskSetsMap = destination;
  }
  DefaultTaskSets$Companion.prototype.map = function () {
    return this.defaultTaskSetsMap;
  };
  DefaultTaskSets$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DefaultTaskSets$Companion_instance = null;
  function DefaultTaskSets$Companion_getInstance() {
    if (DefaultTaskSets$Companion_instance === null) {
      new DefaultTaskSets$Companion();
    }
    return DefaultTaskSets$Companion_instance;
  }
  DefaultTaskSets.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DefaultTaskSets',
    interfaces: []
  };
  function LogicTaskSets() {
    LogicTaskSets$Companion_getInstance();
  }
  function LogicTaskSets$Companion() {
    LogicTaskSets$Companion_instance = this;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25, tmp$_26, tmp$_27, tmp$_28, tmp$_29, tmp$_30, tmp$_31, tmp$_32, tmp$_33, tmp$_34, tmp$_35, tmp$_36, tmp$_37, tmp$_38, tmp$_39, tmp$_40, tmp$_41, tmp$_42, tmp$_43, tmp$_44, tmp$_45, tmp$_46, tmp$_47, tmp$_48, tmp$_49, tmp$_50, tmp$_51, tmp$_52, tmp$_53, tmp$_54, tmp$_55, tmp$_56, tmp$_57, tmp$_58, tmp$_59, tmp$_60, tmp$_61, tmp$_62, tmp$_63, tmp$_64, tmp$_65, tmp$_66, tmp$_67, tmp$_68, tmp$_69, tmp$_70, tmp$_71, tmp$_72, tmp$_73, tmp$_74, tmp$_75, tmp$_76, tmp$_77, tmp$_78, tmp$_79, tmp$_80, tmp$_81, tmp$_82, tmp$_83, tmp$_84, tmp$_85, tmp$_86, tmp$_87, tmp$_88, tmp$_89, tmp$_90, tmp$_91, tmp$_92;
    tmp$ = listOf(new RulePackLinkITR(void 0, 'LogicBase'));
    tmp$_0 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(and(implic(b;a);implic(c;a)))', void 0, void 0, void 0, '(or(a;not(or(b;c))))', void 0, void 0, void 0, void 0, void 0, tmp$, void 0, 2, void 0, 1.0);
    tmp$_1 = listOf(new RulePackLinkITR(void 0, 'LogicBase'));
    tmp$_2 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(and(a;implic(b;a)))', void 0, void 0, void 0, '(a)', void 0, void 0, void 0, void 0, void 0, tmp$_1, void 0, void 0, void 0, 2.5);
    tmp$_3 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_4 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(implic(implic(a;not(b));c))', void 0, void 0, void 0, '(or(and(a;b);c))', void 0, void 0, void 0, void 0, void 0, tmp$_3, void 0, void 0, void 0, 2.0);
    tmp$_5 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_6 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(and(not(implic(or(a;b);b));alleq(1;c)))', void 0, void 0, void 0, '(and(a;not(b);c))', void 0, void 0, void 0, void 0, void 0, tmp$_5, void 0, void 0, void 0, 3.0);
    tmp$_7 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_8 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(and(implic(a;b);implic(b;a)))', void 0, void 0, void 0, '(alleq(a;b))', void 0, void 0, void 0, void 0, void 0, tmp$_7, void 0, void 0, void 0, 3.0);
    tmp$_9 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_10 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(and(or(a;not(a));or(not(a);not(b));or(a;b);or(not(b);b)))', void 0, void 0, void 0, '(xor(a;b))', void 0, void 0, void 0, void 0, void 0, tmp$_9, void 0, void 0, void 0, 3.0);
    tmp$_11 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_12 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(xor(xor(and(a;b);a);b))', void 0, void 0, void 0, '(or(a;b))', void 0, void 0, void 0, void 0, void 0, tmp$_11, void 0, void 0, void 0, 4.0);
    tmp$_13 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_14 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(implic(and(a;b);or(not(c);b)))', void 0, void 0, void 0, '(implic(a;implic(b;implic(c;b))))', void 0, void 0, void 0, void 0, void 0, tmp$_13, void 0, void 0, void 0, 3.0);
    tmp$_15 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_16 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_17 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(and(or(a;b;c);implic(a;or(c;d));implic(c;or(b;d));not(b);not(d)))', void 0, void 0, 'simplification', void 0, void 0, void 0, '?:0:?:?N', void 0, tmp$_15, tmp$_16, void 0, void 0, void 0, 5.0);
    tmp$_18 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_19 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    this.logicBaseTrainSetTasks = listOf_0([tmp$_0, tmp$_2, tmp$_4, tmp$_6, tmp$_8, tmp$_10, tmp$_12, tmp$_14, tmp$_17, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(and(or(a;b);implic(not(c);not(a));implic(not(d);not(b));not(or(c;d));not(or(not(c);not(d)))))', void 0, void 0, 'simplification', void 0, void 0, void 0, '?:0:?:?N', void 0, tmp$_18, tmp$_19, void 0, void 0, void 0, 5.5)]);
    tmp$_20 = listOf(new RulePackLinkITR(void 0, 'LogicBase'));
    tmp$_21 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(or(set-(not(A);B);C))', void 0, void 0, void 0, '(implic(or(A;B);C))', void 0, void 0, void 0, void 0, void 0, tmp$_20, void 0, void 0, void 0, 2.0);
    tmp$_22 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_23 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(set-(not(and(A;B));B))', void 0, void 0, void 0, '(not(B))', void 0, void 0, void 0, void 0, void 0, tmp$_22, void 0, void 0, void 0, 2.0);
    tmp$_24 = listOf_0([new RulePackLinkITR(void 0, 'RelativeComplement'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_25 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(or(set-(set-(A;B);C);or(not(B);C)))', void 0, void 0, void 0, '(implic(implic(A;or(B;C));implic(B;C)))', void 0, void 0, void 0, void 0, void 0, tmp$_24, void 0, void 0, void 0, 4.5);
    tmp$_26 = listOf_0([new RulePackLinkITR(void 0, 'RelativeComplement'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_27 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(implic(or(A;B);and(A;B)))', void 0, void 0, void 0, '(and(not(set-(A;B));not(set-(B;A))))', void 0, void 0, void 0, void 0, void 0, tmp$_26, void 0, void 0, void 0, 3.5);
    tmp$_28 = listOf_0([new RulePackLinkITR(void 0, 'RelativeComplement'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_29 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(set-(or(A;B);and(implic(A;B);implic(B;A))))', void 0, void 0, void 0, '(or(set-(A;B);set-(B;A)))', void 0, void 0, void 0, void 0, void 0, tmp$_28, void 0, void 0, void 0, 4.0);
    tmp$_30 = listOf_0([new RulePackLinkITR(void 0, 'RelativeComplement'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    this.logicRelativeComplementTrainSetTasks = listOf_0([tmp$_21, tmp$_23, tmp$_25, tmp$_27, tmp$_29, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(implic(implic(set-(A;C);D);set-(D;B)))', void 0, void 0, void 0, '(or(set-(D;B);set-(A;or(C;D))))', void 0, void 0, void 0, void 0, void 0, tmp$_30, void 0, void 0, void 0, 4.5)]);
    this.logicPeculiarOperationsTasks = emptyList();
    tmp$_31 = listOf(new RulePackLinkITR(void 0, 'LogicBase'));
    tmp$_32 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(implic(implic(A;not(B));C))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and) : : : not', void 0, void 0, tmp$_31, void 0, void 0, void 0, 1.5);
    tmp$_33 = listOf(new RulePackLinkITR(void 0, 'LogicBase'));
    tmp$_34 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$CNF_getInstance().code]), '(not(or(and(not(A);not(B));and(not(C);not(D)))))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or : 2) : : : not', 2, void 0, tmp$_33, void 0, void 0, void 0, 2.0);
    tmp$_35 = listOf(new RulePackLinkITR(void 0, 'LogicBase'));
    tmp$_36 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(not(or(A;B;C)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and : 3) : : : not', 3, void 0, tmp$_35, void 0, void 0, void 0, 2.5);
    tmp$_37 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_38 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(implic(and(implic(C;B);not(or(A;B;C)));C))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and) : : : not', void 0, void 0, tmp$_37, void 0, void 0, void 0, 3.0);
    tmp$_39 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_40 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(and(not(or(and(A;B;or(and(B;C);not(A)));A));and(B;A)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and : 3) : : : not', 3, void 0, tmp$_39, void 0, void 0, void 0, 3.5);
    tmp$_41 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_42 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(implic(implic(implic(implic(A;B);C);implic(implic(B;C);A));implic(implic(C;A);B)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and) : : : not', void 0, void 0, tmp$_41, void 0, void 0, void 0, 4.0);
    tmp$_43 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_44 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(or(and(A;not(B);not(C));and(A;not(B);C);and(not(A);B;C)))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or) : : : not', void 0, void 0, tmp$_43, void 0, void 0, void 0, 5.0);
    tmp$_45 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_46 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(and(or(A;B;not(C));or(A;not(B);C);or(not(A);B;C)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and) : : : not', void 0, void 0, tmp$_45, void 0, void 0, void 0, 5.0);
    tmp$_47 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_48 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(or(and(A;not(B));and(C;not(D));and(not(A);B);and(not(C);D)))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or) : : : not', void 0, void 0, tmp$_47, void 0, void 0, void 0, 5.0);
    tmp$_49 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_50 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(and(or(A;not(B));or(C;not(D));or(not(A);B);or(not(C);D)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and) : : : not', void 0, void 0, tmp$_49, void 0, void 0, void 0, 5.0);
    tmp$_51 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_52 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(or(and(A;not(B);C;not(D));and(not(A);B;not(C);D)))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or : 3) : : : not', 3, void 0, tmp$_51, void 0, void 0, void 0, 6.0);
    tmp$_53 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_54 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(and(or(A;not(B);C;not(D));or(not(A);B;not(C);D)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and : 3) : : : not', 3, void 0, tmp$_53, void 0, void 0, void 0, 6.0);
    tmp$_55 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_56 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(or(and(A;not(B));and(C;not(D));and(not(A);B);and(not(C);D)))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or : 3) : : : not', 3, void 0, tmp$_55, void 0, void 0, void 0, 6.0);
    tmp$_57 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    this.logicNormalFormsTrainSetTasks = listOf_0([tmp$_32, tmp$_34, tmp$_36, tmp$_38, tmp$_40, tmp$_42, tmp$_44, tmp$_46, tmp$_48, tmp$_50, tmp$_52, tmp$_54, tmp$_56, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'LogicAbsorptionLaw', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(and(or(A;not(B));or(C;not(D));or(not(A);B);or(not(C);D)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and : 3) : : : not', 3, void 0, tmp$_57, void 0, void 0, void 0, 6.0)]);
    tmp$_58 = listOf(new RulePackLinkITR(void 0, 'LogicResolution'));
    tmp$_59 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$RESOLUTION_getInstance().code]), '(and(A;B;implic(A;C);not(C)))', void 0, void 0, void 0, '(0)', void 0, void 0, void 0, void 0, void 0, tmp$_58, void 0, void 0, void 0, 2.0);
    tmp$_60 = listOf(new RulePackLinkITR(void 0, 'LogicResolution'));
    tmp$_61 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$RESOLUTION_getInstance().code]), '(and(not(A);implic(not(A);B);implic(B;C);not(C)))', void 0, void 0, void 0, '(0)', void 0, void 0, void 0, void 0, void 0, tmp$_60, void 0, void 0, void 0, 3.0);
    tmp$_62 = listOf(new RulePackLinkITR(void 0, 'LogicResolution'));
    tmp$_63 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$RESOLUTION_getInstance().code]), '(and(or(A;C);implic(D;C);implic(A;D);not(C)))', void 0, void 0, void 0, '(0)', void 0, void 0, void 0, void 0, void 0, tmp$_62, void 0, void 0, void 0, 3.0);
    tmp$_64 = listOf(new RulePackLinkITR(void 0, 'LogicResolution'));
    tmp$_65 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$RESOLUTION_getInstance().code]), '(and(or(A;B;C);implic(A;or(C;D));implic(C;or(B;D));not(B);not(D)))', void 0, void 0, void 0, '(0)', void 0, void 0, void 0, void 0, void 0, tmp$_64, void 0, void 0, void 0, 4.0);
    tmp$_66 = listOf(new RulePackLinkITR(void 0, 'LogicResolution'));
    this.logicResolutionTrainSetTasks = listOf_0([tmp$_59, tmp$_61, tmp$_63, tmp$_65, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$RESOLUTION_getInstance().code]), '(and(or(A;B);implic(not(C);not(A));implic(not(D);not(B));not(or(C;D));not(or(not(C);not(D)))))', void 0, void 0, void 0, '(0)', void 0, void 0, void 0, void 0, void 0, tmp$_66, void 0, void 0, void 0, 5.0)]);
    tmp$_67 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_68 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$CNF_getInstance().code]), '(not(or(A;B;C)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and) : : : not', void 0, void 0, tmp$_67, void 0, void 0, void 0, 1.5);
    tmp$_69 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_70 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code]), '(implic(and(a;b);or(c;b)))', void 0, void 0, void 0, '(implic(d;implic(b;implic(not(c);b))))', void 0, void 0, void 0, void 0, void 0, tmp$_69, void 0, void 0, void 0, 3.0);
    tmp$_71 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_72 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$CNF_getInstance().code]), '(not(and(A;implic(B;C))))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or : 3) : : : not', 3, void 0, tmp$_71, void 0, void 0, void 0, 2.0);
    tmp$_73 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_74 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(or(and(A;not(B);C;not(D));and(not(A);B;not(C);D)))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or) : : : not', void 0, void 0, tmp$_73, void 0, void 0, void 0, 5.0);
    tmp$_75 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_76 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(and(or(A;not(B);C;not(D));or(not(A);B;not(C);D)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and) : : : not', void 0, void 0, tmp$_75, void 0, void 0, void 0, 5.0);
    tmp$_77 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    tmp$_78 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(or(and(A;not(B);not(C));and(A;not(B);C);and(not(A);B;C)))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or : 3) : : : not', 3, void 0, tmp$_77, void 0, void 0, void 0, 6.0);
    tmp$_79 = listOf_0([new RulePackLinkITR(void 0, 'LogicBase'), new RulePackLinkITR(void 0, 'LogicAbsorptionLaw')]);
    this.logicUsualCnfDnfMixCheckYourselfTasks = listOf_0([tmp$_68, tmp$_70, tmp$_72, tmp$_74, tmp$_76, tmp$_78, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(and(or(A;B;not(C));or(A;not(B);C);or(not(A);B;C)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and : 3) : : : not', 3, void 0, tmp$_79, void 0, void 0, void 0, 6.0)]);
    tmp$_80 = listOf(new RulePackLinkITR(void 0, 'RelativeComplement'));
    tmp$_81 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$CNF_getInstance().code]), '(set-(A;set-(A;B)))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or) : : : not', void 0, void 0, tmp$_80, void 0, void 0, void 0, 1.5);
    tmp$_82 = listOf(new RulePackLinkITR(void 0, 'RelativeComplement'));
    tmp$_83 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$CNF_getInstance().code]), '(not(and(A;set-(B;C))))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or : 3) : : : not', 3, void 0, tmp$_82, void 0, void 0, void 0, 2.0);
    tmp$_84 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_85 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(or(and(A;not(B);C;not(D));and(not(A);B;not(C);D)))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or) : : : not', void 0, void 0, tmp$_84, void 0, void 0, void 0, 5.0);
    tmp$_86 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_87 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(and(or(A;not(B);C;not(D));or(not(A);B;not(C);D)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and) : : : not', void 0, void 0, tmp$_86, void 0, void 0, void 0, 5.0);
    tmp$_88 = listOf(new RulePackLinkITR(void 0, 'LogicResolution'));
    tmp$_89 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$RESOLUTION_getInstance().code]), '(and(not(set-(A;or(C;D)));implic(C;or(B;D));or(A;B;C);not(B);not(D)))', void 0, void 0, void 0, '(0)', void 0, void 0, void 0, void 0, void 0, tmp$_88, void 0, void 0, void 0, 4.0);
    tmp$_90 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    tmp$_91 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(or(and(A;not(B);not(C));and(A;not(B);C);and(not(A);B;C)))', void 0, void 0, 'CNF', void 0, void 0, void 0, 'and : (or : 3) : : : not', 3, void 0, tmp$_90, void 0, void 0, void 0, 6.0);
    tmp$_92 = listOf(new RulePackLinkITR(void 0, 'LogicAbsorptionLaw'));
    this.logicMixCheckYourselfTasks = listOf_0([tmp$_81, tmp$_83, tmp$_85, tmp$_87, tmp$_89, tmp$_91, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'logic', mutableSetOf([TaskTagCode$LOGIC_getInstance().code, TaskTagCode$NORMAL_FORMS_getInstance().code, TaskTagCode$DNF_getInstance().code]), '(and(or(A;B;not(C));or(A;not(B);C);or(not(A);B;C)))', void 0, void 0, 'DNF', void 0, void 0, void 0, 'or : (and : 3) : : : not', 3, void 0, tmp$_92, void 0, void 0, void 0, 6.0)]);
    this.allLogicTasks = plus(plus(plus(plus(plus(plus(this.logicBaseTrainSetTasks, this.logicRelativeComplementTrainSetTasks), this.logicPeculiarOperationsTasks), this.logicNormalFormsTrainSetTasks), this.logicResolutionTrainSetTasks), this.logicMixCheckYourselfTasks), this.logicUsualCnfDnfMixCheckYourselfTasks);
    var tmp$_93 = void 0;
    var tmp$_94 = void 0;
    var tmp$_95 = mutableSetOf([TaskSetTagCode$TRAIN_SET_getInstance().code, TaskSetTagCode$LOGIC_getInstance().code]);
    var tmp$_96 = void 0;
    var tmp$_97 = void 0;
    var $receiver = this.logicBaseTrainSetTasks;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_98;
    tmp$_98 = $receiver.iterator();
    while (tmp$_98.hasNext()) {
      var item = tmp$_98.next();
      destination.add_11rb$(item.copy_eb9u9i$());
    }
    var tmp$_99 = new TaskSetITR('LogicBaseTrainSet', tmp$_93, tmp$_94, '[Train Set] Basic Boolean Logic', '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041E\u0441\u043D\u043E\u0432\u044B \u0431\u0443\u043B\u0435\u0432\u043E\u0439 \u043B\u043E\u0433\u0438\u043A\u0438', 'Logic Expressions Transformations', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', "[Train Set] Conjunction, Disjunction, Implication, de Morgan's laws, Absorption", '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0437\u0430\u043A\u043E\u043D\u044B \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430, \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u0435', 'logic', tmp$_95, tmp$_96, tmp$_97, destination);
    var tmp$_100 = void 0;
    var tmp$_101 = void 0;
    var tmp$_102 = mutableSetOf([TaskSetTagCode$TRAIN_SET_getInstance().code, TaskSetTagCode$LOGIC_getInstance().code]);
    var tmp$_103 = void 0;
    var tmp$_104 = void 0;
    var $receiver_0 = this.logicRelativeComplementTrainSetTasks;
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_105;
    tmp$_105 = $receiver_0.iterator();
    while (tmp$_105.hasNext()) {
      var item_0 = tmp$_105.next();
      destination_0.add_11rb$(item_0.copy_eb9u9i$());
    }
    var tmp$_106 = new TaskSetITR('LogicRelativeComplementTrainSet', tmp$_100, tmp$_101, '[Train Set] Logic Relative Complement', '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'Logic Expressions Transformations', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', "[Train Set] Relative Complement and Conjunction, Disjunction, Implication, de Morgan's laws, Absorption", '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435 \u0438 \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u044F, \u0438\u043C\u043F\u043B\u0438\u043A\u0430\u0446\u0438\u044F, \u0437\u0430\u043A\u043E\u043D\u044B \u0434\u0435 \u041C\u043E\u0440\u0433\u0430\u043D\u0430, \u043F\u043E\u0433\u043B\u043E\u0449\u0435\u043D\u0438\u0435', 'logic', tmp$_102, tmp$_103, tmp$_104, destination_0);
    var tmp$_107 = void 0;
    var tmp$_108 = void 0;
    var tmp$_109 = mutableSetOf([TaskSetTagCode$LOGIC_getInstance().code, TaskSetTagCode$EXTRAORDINARY_getInstance().code]);
    var tmp$_110 = void 0;
    var tmp$_111 = void 0;
    var $receiver_1 = this.logicPeculiarOperationsTasks;
    var destination_1 = ArrayList_init_0(collectionSizeOrDefault($receiver_1, 10));
    var tmp$_112;
    tmp$_112 = $receiver_1.iterator();
    while (tmp$_112.hasNext()) {
      var item_1 = tmp$_112.next();
      destination_1.add_11rb$(item_1.copy_eb9u9i$());
    }
    var tmp$_113 = new TaskSetITR('LogicPeculiarOperations', tmp$_107, tmp$_108, 'Logic Peculiar Operations', '\u041D\u0435\u043E\u0431\u044B\u0447\u043D\u044B\u0435 \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438', 'Logic Expressions Transformations: Negation of Conjunction and Disjunction', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439: \u0448\u0442\u0440\u0438\u0445 \u0428\u0435\u0444\u0444\u0435\u0440\u0440\u0430 \u0438 \u0441\u0442\u0440\u0435\u043B\u043A\u0430 \u041F\u0438\u0440\u0441\u0430', 'Negation of Conjunction, Negation of Disjunction and Other Logic Operations', '\u041E\u0442\u0440\u0438\u0446\u0430\u043D\u0438\u0435 \u043A\u043E\u043D\u044A\u044E\u043D\u043A\u0446\u0438\u0438, \u043E\u0442\u0440\u0438\u0438\u0446\u0430\u043D\u0438\u0435 \u0434\u0438\u0437\u044A\u044E\u043D\u043A\u0446\u0438\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043B\u043E\u0433\u0438\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438', 'logic', tmp$_109, tmp$_110, tmp$_111, destination_1);
    var tmp$_114 = void 0;
    var tmp$_115 = void 0;
    var tmp$_116 = mutableSetOf([TaskSetTagCode$LOGIC_getInstance().code, TaskSetTagCode$TRAIN_SET_getInstance().code]);
    var tmp$_117 = void 0;
    var tmp$_118 = void 0;
    var $receiver_2 = this.logicNormalFormsTrainSetTasks;
    var destination_2 = ArrayList_init_0(collectionSizeOrDefault($receiver_2, 10));
    var tmp$_119;
    tmp$_119 = $receiver_2.iterator();
    while (tmp$_119.hasNext()) {
      var item_2 = tmp$_119.next();
      destination_2.add_11rb$(item_2.copy_eb9u9i$());
    }
    var tmp$_120 = new TaskSetITR('LogicNormalFormsTrainSet', tmp$_114, tmp$_115, '[Train Set] Logic Normal Forms', '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u044B\u0435 \u0444\u043E\u0440\u043C\u044B', 'Logic Expressions Transformations', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', '[Train Set] Normal Forms of Logic Expressions', '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u044B\u0435 \u0444\u043E\u0440\u043C\u044B \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', 'logic', tmp$_116, tmp$_117, tmp$_118, destination_2);
    var tmp$_121 = void 0;
    var tmp$_122 = void 0;
    var tmp$_123 = mutableSetOf([TaskSetTagCode$LOGIC_getInstance().code, TaskSetTagCode$TRAIN_SET_getInstance().code, TaskSetTagCode$RESOLUTION_getInstance().code]);
    var tmp$_124 = void 0;
    var tmp$_125 = void 0;
    var $receiver_3 = this.logicResolutionTrainSetTasks;
    var destination_3 = ArrayList_init_0(collectionSizeOrDefault($receiver_3, 10));
    var tmp$_126;
    tmp$_126 = $receiver_3.iterator();
    while (tmp$_126.hasNext()) {
      var item_3 = tmp$_126.next();
      destination_3.add_11rb$(item_3.copy_eb9u9i$());
    }
    var tmp$_127 = new TaskSetITR('LogicResolutionTrainSet', tmp$_121, tmp$_122, '[Train Set] Resolution Method', '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041C\u0435\u0442\u043E\u0434 \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439', 'Logic Expressions Transformations', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', '[Train Set] Resolution Method for Logic Expressions', '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041C\u0435\u0442\u043E\u0434 \u0440\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0439 \u0434\u043B\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', 'logic', tmp$_123, tmp$_124, tmp$_125, destination_3);
    var tmp$_128 = void 0;
    var tmp$_129 = void 0;
    var tmp$_130 = mutableSetOf([TaskSetTagCode$LOGIC_getInstance().code, TaskSetTagCode$CHECK_YOURSELF_getInstance().code]);
    var tmp$_131 = void 0;
    var tmp$_132 = void 0;
    var $receiver_4 = this.logicMixCheckYourselfTasks;
    var destination_4 = ArrayList_init_0(collectionSizeOrDefault($receiver_4, 10));
    var tmp$_133;
    tmp$_133 = $receiver_4.iterator();
    while (tmp$_133.hasNext()) {
      var item_4 = tmp$_133.next();
      destination_4.add_11rb$(item_4.copy_eb9u9i$());
    }
    var tmp$_134 = new TaskSetITR('LogicMixCheckYourself', tmp$_128, tmp$_129, '[Check Yourself] Mix of Logic Transformations', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u041C\u0438\u043A\u0441 \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0439', 'Logic Expressions Transformations', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', '[Check Yourself] Logic Expressions Transformations', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', 'logic', tmp$_130, tmp$_131, tmp$_132, destination_4);
    var tmp$_135 = void 0;
    var tmp$_136 = void 0;
    var tmp$_137 = mutableSetOf([TaskSetTagCode$LOGIC_getInstance().code, TaskSetTagCode$CHECK_YOURSELF_getInstance().code]);
    var tmp$_138 = void 0;
    var tmp$_139 = void 0;
    var $receiver_5 = this.logicUsualCnfDnfMixCheckYourselfTasks;
    var destination_5 = ArrayList_init_0(collectionSizeOrDefault($receiver_5, 10));
    var tmp$_140;
    tmp$_140 = $receiver_5.iterator();
    while (tmp$_140.hasNext()) {
      var item_5 = tmp$_140.next();
      destination_5.add_11rb$(item_5.copy_eb9u9i$());
    }
    this.defaultLogicTaskSets = listOf_0([tmp$_99, tmp$_106, tmp$_113, tmp$_120, tmp$_127, tmp$_134, new TaskSetITR('LogicUsualCnfDnfMixCheckYourself', tmp$_135, tmp$_136, '[Check Yourself] Mix of Logic Usual CNF DNF Transformations', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u041C\u0438\u043A\u0441 \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0439 \u043A \u041A\u041D\u0424 \u0414\u041D\u0424', 'Logic Expressions Transformations', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439', '[Check Yourself] Logic Expressions Usual CNF DNF Transformations', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438, \u0432 \u0442\u043E\u043C \u0447\u0438\u0441\u043B\u0435 \u043A \u043D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u044B\u043C \u0444\u043E\u0440\u043C\u0430\u043C \u041A\u041D\u0424 \u0414\u041D\u0424', 'logic', tmp$_137, tmp$_138, tmp$_139, destination_5)]);
  }
  LogicTaskSets$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var LogicTaskSets$Companion_instance = null;
  function LogicTaskSets$Companion_getInstance() {
    if (LogicTaskSets$Companion_instance === null) {
      new LogicTaskSets$Companion();
    }
    return LogicTaskSets$Companion_instance;
  }
  LogicTaskSets.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LogicTaskSets',
    interfaces: []
  };
  function SetTaskSets() {
    SetTaskSets$Companion_getInstance();
  }
  function SetTaskSets$Companion() {
    SetTaskSets$Companion_instance = this;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25, tmp$_26, tmp$_27, tmp$_28, tmp$_29, tmp$_30, tmp$_31;
    tmp$ = listOf(new RulePackLinkITR(void 0, 'SetBase'));
    tmp$_0 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code]), '(and(or(A;not(B));or(A;not(C))))', void 0, void 0, void 0, '(or(A;not(or(B;C))))', void 0, void 0, void 0, void 0, void 0, tmp$, void 0, 2, void 0, 1.0);
    tmp$_1 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_2 = listOf(new RulePackLinkITR(void 0, 'SetBase'));
    tmp$_3 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(not(or(and(A;not(A));or(B;not(B));and(A;not(B)))))', void 0, void 0, 'simplification', void 0, void 0, void 0, '?:0:?:?N', void 0, tmp$_1, tmp$_2, void 0, void 0, void 0, 1.0);
    tmp$_4 = listOf(new RulePackLinkITR(void 0, 'SetBase'));
    tmp$_5 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(or(A;and(A;B)))', void 0, void 0, void 0, '(A)', void 0, void 0, void 0, void 0, void 0, tmp$_4, void 0, void 0, void 0, 2.5);
    tmp$_6 = listOf(new RulePackLinkITR(void 0, 'SetBase'));
    tmp$_7 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(or(A;and(not(A);B)))', void 0, void 0, void 0, '(or(A;B))', void 0, void 0, void 0, void 0, void 0, tmp$_6, void 0, void 0, void 0, 2.5);
    tmp$_8 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_9 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code]), '(set-(not(and(A;B));B))', void 0, void 0, void 0, '(not(B))', void 0, void 0, void 0, void 0, void 0, tmp$_8, void 0, void 0, void 0, 2.0);
    tmp$_10 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_11 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code]), '(set-(set-(A;B);not(C)))', void 0, void 0, void 0, '(and(A;not(B);C))', void 0, void 0, void 0, void 0, void 0, tmp$_10, void 0, void 0, void 0, 2.5);
    tmp$_12 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_13 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(or(and(A;B);and(A;not(B));and(not(A);B)))', void 0, void 0, void 0, '(or(A;B))', void 0, void 0, void 0, void 0, void 0, tmp$_12, void 0, void 0, void 0, 3.0);
    tmp$_14 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_15 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(and(A;not(B);C;or(B;and(C;A))))', void 0, void 0, void 0, '(and(A;not(B);C))', void 0, void 0, void 0, void 0, void 0, tmp$_14, void 0, void 0, void 0, 3.0);
    tmp$_16 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_17 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(set-(set-(or(A;B);B);set-(1;C)))', void 0, void 0, void 0, '(and(A;not(B);C))', void 0, void 0, void 0, void 0, void 0, tmp$_16, void 0, void 0, void 0, 3.0);
    tmp$_18 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    this.setBaseTrainSetTasks = listOf_0([tmp$_0, tmp$_3, tmp$_5, tmp$_7, tmp$_9, tmp$_11, tmp$_13, tmp$_15, tmp$_17, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(or(and(or(A;C);or(B;D));and(or(A;C);not(B);not(D));and(not(A);not(C);or(B;D))))', void 0, void 0, void 0, '(or(A;B;C;D))', void 0, void 0, void 0, void 0, void 0, tmp$_18, void 0, void 0, void 0, 3.0)]);
    tmp$_19 = listOf(new RulePackLinkITR(void 0, 'SetBase'));
    tmp$_20 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(or(and(A;B);not(A)))', void 0, void 0, void 0, '(or(not(A);B))', void 0, void 0, void 0, void 0, void 0, tmp$_19, void 0, void 0, void 0, 2.5);
    tmp$_21 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_22 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code]), '(set-(not(and(A;not(B)));not(B)))', void 0, void 0, void 0, '(B)', void 0, void 0, void 0, void 0, void 0, tmp$_21, void 0, void 0, void 0, 2.0);
    tmp$_23 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_24 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code]), '(set-(set-(A;B);C))', void 0, void 0, void 0, '(and(A;not(B);not(C)))', void 0, void 0, void 0, void 0, void 0, tmp$_23, void 0, void 0, void 0, 2.5);
    tmp$_25 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_26 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(or(and(A;B);and(not(A);B);and(A;not(B))))', void 0, void 0, void 0, '(or(A;B))', void 0, void 0, void 0, void 0, void 0, tmp$_25, void 0, void 0, void 0, 3.0);
    tmp$_27 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_28 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(and(A;B;C;D;or(not(B);and(C;D;A))))', void 0, void 0, void 0, '(and(A;B;C;D))', void 0, void 0, void 0, void 0, void 0, tmp$_27, void 0, void 0, void 0, 3.0);
    tmp$_29 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    tmp$_30 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(set-(set-(or(A;set-(1;B));not(B));set-(1;C)))', void 0, void 0, void 0, '(and(A;B;C))', void 0, void 0, void 0, void 0, void 0, tmp$_29, void 0, void 0, void 0, 3.0);
    tmp$_31 = listOf_0([new RulePackLinkITR(void 0, 'SetBase'), new RulePackLinkITR(void 0, 'SetAbsorptionLaw')]);
    this.setBaseCheckYourselfTasks = listOf_0([tmp$_20, tmp$_22, tmp$_24, tmp$_26, tmp$_28, tmp$_30, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'set', mutableSetOf([TaskTagCode$SET_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(or(and(or(A;C);or(not(B);D));and(or(A;C);B;not(D));and(not(A);not(C);or(not(B);D))))', void 0, void 0, void 0, '(or(A;not(B);C;D))', void 0, void 0, void 0, void 0, void 0, tmp$_31, void 0, void 0, void 0, 3.0)]);
    this.allSetTasks = plus(this.setBaseTrainSetTasks, this.setBaseCheckYourselfTasks);
    var tmp$_32 = void 0;
    var tmp$_33 = void 0;
    var tmp$_34 = mutableSetOf([TaskSetTagCode$TRAIN_SET_getInstance().code, TaskSetTagCode$SET_getInstance().code]);
    var tmp$_35 = void 0;
    var tmp$_36 = void 0;
    var $receiver = this.setBaseTrainSetTasks;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_37;
    tmp$_37 = $receiver.iterator();
    while (tmp$_37.hasNext()) {
      var item = tmp$_37.next();
      destination.add_11rb$(item.copy_eb9u9i$());
    }
    var tmp$_38 = new TaskSetITR('SetBaseTrainSet', tmp$_32, tmp$_33, '[Train Set] Basic Set Theory', '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041E\u0441\u043D\u043E\u0432\u044B \u0442\u0435\u043E\u0440\u0438\u0438 \u043C\u043D\u043E\u0436\u0435\u0441\u0442\u0432', 'Set Theory Expressions Transformations', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u043D\u0430\u0434 \u043C\u043D\u043E\u0436\u0435\u0441\u0442\u0432\u0430\u043C\u0438', '[Train Set] Set intersection, union, difference, symmetric difference, complement', '[\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430] \u041F\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043D\u0438\u0435, \u043E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435, \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C, \u0441\u0438\u043C\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0440\u0430\u0437\u043D\u0441\u0442\u044C, \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'set', tmp$_34, tmp$_35, tmp$_36, destination);
    var tmp$_39 = void 0;
    var tmp$_40 = void 0;
    var tmp$_41 = mutableSetOf([TaskSetTagCode$SET_getInstance().code, TaskSetTagCode$CHECK_YOURSELF_getInstance().code]);
    var tmp$_42 = void 0;
    var tmp$_43 = void 0;
    var $receiver_0 = this.setBaseCheckYourselfTasks;
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_44;
    tmp$_44 = $receiver_0.iterator();
    while (tmp$_44.hasNext()) {
      var item_0 = tmp$_44.next();
      destination_0.add_11rb$(item_0.copy_eb9u9i$());
    }
    this.defaultSetTaskSets = listOf_0([tmp$_38, new TaskSetITR('SetBaseCheckYourself', tmp$_39, tmp$_40, '[Check Yourself] Mix of Basic Set Transformations', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u041C\u0438\u043A\u0441 \u043E\u0441\u043D\u043E\u0432 \u043C\u043D\u043E\u0436\u0435\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u0445 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0439', 'Set Theory Expressions Transformations', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u043D\u0430\u0434 \u043C\u043D\u043E\u0436\u0435\u0441\u0442\u0432\u0430\u043C\u0438', '[Check Yourself] Set intersection, union, difference, symmetric difference, complement', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u041F\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043D\u0438\u0435, \u043E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435, \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C, \u0441\u0438\u043C\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0440\u0430\u0437\u043D\u0441\u0442\u044C, \u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435', 'set', tmp$_41, tmp$_42, tmp$_43, destination_0)]);
  }
  SetTaskSets$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SetTaskSets$Companion_instance = null;
  function SetTaskSets$Companion_getInstance() {
    if (SetTaskSets$Companion_instance === null) {
      new SetTaskSets$Companion();
    }
    return SetTaskSets$Companion_instance;
  }
  SetTaskSets.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SetTaskSets',
    interfaces: []
  };
  function TriginometryTaskSets() {
    TriginometryTaskSets$Companion_getInstance();
  }
  function TriginometryTaskSets$Companion() {
    TriginometryTaskSets$Companion_instance = this;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25, tmp$_26, tmp$_27, tmp$_28, tmp$_29, tmp$_30, tmp$_31, tmp$_32, tmp$_33, tmp$_34, tmp$_35, tmp$_36, tmp$_37, tmp$_38, tmp$_39, tmp$_40, tmp$_41, tmp$_42, tmp$_43, tmp$_44, tmp$_45, tmp$_46, tmp$_47, tmp$_48, tmp$_49, tmp$_50, tmp$_51, tmp$_52, tmp$_53, tmp$_54, tmp$_55, tmp$_56, tmp$_57, tmp$_58, tmp$_59, tmp$_60, tmp$_61, tmp$_62, tmp$_63, tmp$_64, tmp$_65, tmp$_66, tmp$_67, tmp$_68, tmp$_69, tmp$_70, tmp$_71, tmp$_72, tmp$_73, tmp$_74, tmp$_75, tmp$_76, tmp$_77, tmp$_78, tmp$_79, tmp$_80, tmp$_81, tmp$_82, tmp$_83, tmp$_84, tmp$_85, tmp$_86, tmp$_87, tmp$_88, tmp$_89, tmp$_90, tmp$_91, tmp$_92, tmp$_93, tmp$_94, tmp$_95, tmp$_96, tmp$_97, tmp$_98, tmp$_99, tmp$_100, tmp$_101, tmp$_102, tmp$_103, tmp$_104, tmp$_105, tmp$_106, tmp$_107, tmp$_108, tmp$_109, tmp$_110, tmp$_111, tmp$_112, tmp$_113, tmp$_114, tmp$_115, tmp$_116, tmp$_117, tmp$_118, tmp$_119, tmp$_120, tmp$_121, tmp$_122, tmp$_123, tmp$_124, tmp$_125, tmp$_126, tmp$_127, tmp$_128, tmp$_129, tmp$_130, tmp$_131, tmp$_132, tmp$_133, tmp$_134, tmp$_135, tmp$_136, tmp$_137, tmp$_138, tmp$_139, tmp$_140, tmp$_141, tmp$_142, tmp$_143, tmp$_144, tmp$_145, tmp$_146, tmp$_147;
    tmp$ = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_0 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), '(cos(/(*(8;pi);3)))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$, void 0, void 0, void 0, 1.1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '16 vlad_u');
    tmp$_1 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_2 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$FORMULA_DEDUCE_getInstance().code]), '(/(+(1;-(^(tg(/(x;2));2)));+(1;^(tg(/(x;2));2))))', void 0, void 0, void 0, '(cos(x))', void 0, void 0, void 0, void 0, void 0, tmp$_1, void 0, void 0, void 0, 6.0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mapOf(to('data', new InterestingFact('Cosine though tangent formula', '\u0424\u043E\u0440\u043C\u0443\u043B\u0430 \u0440\u0430\u0437\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u0430 \u0447\u0435\u0440\u0435\u0437 \u0442\u0430\u043D\u0433\u0435\u043D\u0441', 'beforeBeginning'))), void 0, void 0, void 0, '5 vlad_u');
    tmp$_3 = mapOf(to('hiddenGoalExpressions', listOf('(cos(/(*(2;pi);5)))')));
    tmp$_4 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    this.trigonometryStepByStepTasksVladU = listOf_0([tmp$_0, tmp$_2, new TaskITR(void 0, void 0, void 0, void 0, 'Positive acute angle', '\u041F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043E\u0441\u0442\u0440\u044B\u0439 \u0443\u0433\u043E\u043B', 'Write using a positive acute angle', '\u0417\u0430\u043F\u0438\u0448\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043E\u0441\u0442\u0440\u044B\u0439 \u0443\u0433\u043E\u043B', 'Write using a positive acute angle', '\u041F\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0443\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u043F\u0440\u043E\u0438\u0437\u0432\u043E\u043B\u044C\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430 \u043A \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u0444\u0443\u043D\u043A\u0446\u0438\u0438 \u043E\u0441\u0442\u0440\u043E\u0433\u043E \u0443\u0433\u043B\u0430', void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(cos(/(*(18;pi);5)))', void 0, void 0, 'oneOfHiddenGoals', void 0, void 0, void 0, void 0, void 0, tmp$_3, tmp$_4, void 0, void 0, void 0, 1.6, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '24 vlad_u')]);
    tmp$_5 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_6 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(/(+(1;-(cos(x));cos(*(2;x)));+(sin(*(2;x));-(sin(x)))))', void 0, void 0, void 0, '(ctg(x))', void 0, void 0, void 0, void 0, void 0, tmp$_5, void 0, void 0, void 0, 2.7, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '26 vlad_u');
    tmp$_7 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_8 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$TRICK_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(/(+(tg(/(\u03C0;4));-(sin(+(*(2;\u03C0);x))));cos(x)))', void 0, void 0, void 0, '(/(cos(x);+(1;sin(x))))', void 0, void 0, void 0, void 0, void 0, tmp$_7, void 0, void 0, void 0, 3.9, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '10 vlad_u');
    tmp$_9 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_10 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code]), '(+(*(2;cos(*(3;x));cos(x));-(cos(*(2;x)));-(cos(*(4;x)))))', void 0, void 0, 'simplification', void 0, void 0, void 0, '?:0:?:?N', void 0, mapOf(to('hiddenGoalExpressions', listOf('(0)'))), tmp$_9, void 0, void 0, void 0, 3.0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '76 vlad_u');
    tmp$_11 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_12 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(/(+(*(3;sin(+(x;-(*(9;\u03C0)))));cos(+(x;/(\u03C0;2))));sin(+(\u03C0;-(x)))))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, mapOf(to('hiddenGoalExpressions', listOf('(+(-(4)))'))), tmp$_11, void 0, void 0, void 0, 3.0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '75 vlad_u');
    tmp$_13 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_14 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(/(*(cos(x);tg(x));^(sin(x);2));-(*(ctg(x);cos(x)))))', void 0, void 0, void 0, '(sin(x))', void 0, void 0, void 0, void 0, void 0, tmp$_13, void 0, void 0, void 0, 3.5, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '30 vlad_u');
    tmp$_15 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_16 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(sin(x);cos(x)))', '(/(5;4))', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_17 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$TRICK_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(sin(*(+(*(ctg(/(\u03C0;2));sin(x));1;tg(/(\u03C0;4)));x)))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_15, tmp$_16, void 0, void 0, 3.2, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '39 vlad_u');
    tmp$_18 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_19 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(x))', '(5)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_20 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(/(+(*(3;sin(x));-(cos(x)));+(sin(x);*(2;cos(x)))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_18, tmp$_19, void 0, void 0, 2.6, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '43 vlad_u');
    tmp$_21 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_22 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(+(^(tg(x);2);-(*(^(tg(x);2);^(sin(x);2)));-(^(sin(x);2))))', void 0, void 0, 'simplification', void 0, void 0, void 0, '?:0:?:?N', void 0, void 0, tmp$_21, void 0, void 0, void 0, 2.7, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '49 vlad_u');
    tmp$_23 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_24 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$TRIGONOMETRY_SUM_getInstance().code]), '(+(*(sin(x);cos(*(6;x)));-(*(sin(*(3;x));cos(*(4;x))))))', void 0, void 0, void 0, '(+(-(*(cos(*(3;x));sin(*(2;x))))))', void 0, void 0, void 0, void 0, void 0, tmp$_23, void 0, void 0, void 0, 3.9, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '77 vlad_u');
    tmp$_25 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    this.checkYourSelfSimpleTrigonometryTasks = listOf_0([tmp$_6, tmp$_8, tmp$_10, tmp$_12, tmp$_14, tmp$_17, tmp$_20, tmp$_22, tmp$_24, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(*(cos(/(\u03C0;9));cos(/(*(2;\u03C0);9));cos(/(*(4;\u03C0);9))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, mapOf(to('hiddenGoalExpressions', listOf_0(['(0.125)', '(/(1;8))']))), tmp$_25, void 0, void 0, void 0, 3.7, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '79 vlad_u')]);
    tmp$_26 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_27 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$SQR_DIFF_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(tg(*(4;x));-(/(1;cos(*(4;x))))))', void 0, void 0, void 0, '(/(+(sin(*(2;x));-(cos(*(2;x))));+(sin(*(2;x));cos(*(2;x)))))', void 0, void 0, void 0, void 0, void 0, tmp$_26, void 0, void 0, void 0, 4.8, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '6 vlad_u');
    tmp$_28 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_29 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(+(^(+(*(sin(/(*(3;pi);10));cos(/(*(2;pi);5)));*(cos(/(*(3;pi);10));sin(/(*(2;pi);5))));2);^(+(*(cos(/(pi;10));cos(/(*(3;pi);5)));-(*(sin(/(pi;10));sin(/(*(3;pi);5)))));2)))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_28, void 0, void 0, void 0, 4.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '27 vlad_u');
    tmp$_30 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_31 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(*(2;x)))', '(4)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_32 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(+(sin(*(4;x));*(cos(*(4;x));ctg(*(2;x)))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_30, tmp$_31, void 0, void 0, 4.6, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '13 vlad_u');
    tmp$_33 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_34 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(/(+(1;cos(/(x;2));-(sin(/(x;2))));+(1;-(cos(/(x;2)));-(sin(/(x;2))))))', void 0, void 0, void 0, '(+(-(ctg(/(x;4)))))', void 0, void 0, void 0, void 0, void 0, tmp$_33, void 0, void 0, void 0, 5.8, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '33 vlad_u');
    tmp$_35 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_36 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code]), '(+(^(sin(+(/(*(9;pi);8);x));2);-(^(sin(+(/(*(17;pi);8);-(x)));2))))', void 0, void 0, void 0, '(/(sin(*(2;x));^(2;0.5)))', void 0, void 0, void 0, void 0, void 0, tmp$_35, void 0, void 0, void 0, 6.2, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '40 vlad_u');
    tmp$_37 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_38 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(/(+(cos(x);cos(*(2;x));cos(*(3;x)));+(sin(x);sin(*(2;x));sin(*(3;x)))))', void 0, void 0, void 0, '(ctg(*(2;x)))', void 0, void 0, void 0, void 0, void 0, tmp$_37, void 0, void 0, void 0, 5.2, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '48 vlad_u');
    tmp$_39 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_40 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(/(+(cos(*(4;x));1);+(ctg(x);-(tg(x)))))', void 0, void 0, void 0, '(/(sin(*(4;x));2))', void 0, void 0, void 0, void 0, void 0, tmp$_39, void 0, void 0, void 0, 5.0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '52 vlad_u solution: \\textcolor{purple}{\\frac{\\left(\\cos \\left(4\\cdot x\\right)+1\\right)}{\\left(\\operatorname{ctg}\\left(x\\right)-tg\\left(x\\right)\\right)}\\textcolor{green}{=}\\frac{\\left(\\cos \\left(4\\cdot x\\right)+1\\right)\\cdot \\left(\\sin \\left(x\\right)\\cdot \\cos \\left(x\\right)\\right)}{\\left(\\operatorname{ctg}\\left(x\\right)-tg\\left(x\\right)\\right)\\cdot \\left(\\sin \\left(x\\right)\\cdot \\cos \\left(x\\right)\\right)}\\textcolor{green}{=}\\frac{\\left(\\cos \\left(4\\cdot x\\right)+1\\right)\\cdot \\left(\\frac{\\sin \\left(2\\cdot x\\right)}{2}\\right)}{\\left(\\operatorname{ctg}\\left(x\\right)-tg\\left(x\\right)\\right)\\cdot \\left(\\sin \\left(x\\right)\\cdot \\cos \\left(x\\right)\\right)}\\textcolor{green}{=}\\frac{\\left(\\cos \\left(4\\cdot x\\right)+1\\right)\\cdot \\left(\\frac{\\sin \\left(2\\cdot x\\right)}{2}\\right)}{\\left(\\frac{\\cos \\left(x\\right)}{\\sin \\left(x\\right)}-tg\\left(x\\right)\\right)\\cdot \\left(\\sin \\left(x\\right)\\cdot \\cos \\left(x\\right)\\right)}\\textcolor{green}{=}\\frac{\\left(\\cos \\left(4\\cdot x\\right)+1\\right)\\cdot \\sin \\left(2\\cdot x\\right)}{2\\left(\\cos ^2\\left(x\\right)-\\sin ^2\\left(x\\right)\\right)}\\textcolor{red}{=}\\frac{2\\cos ^2\\left(2\\cdot x\\right)\\cdot \\sin \\left(2\\cdot x\\right)}{2\\cos \\left(2\\cdot x\\right)}=\\frac{\\sin \\left(4\\cdot x\\right)}{2}}');
    tmp$_41 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_42 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$TRIGONOMETRY_SUM_getInstance().code]), '(*(tg(/(\u03C0;9));tg(/(*(2;\u03C0);9));tg(/(*(3;\u03C0);9));tg(/(*(4;\u03C0);9))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, mapOf(to('hiddenGoalExpressions', listOf('(3)'))), tmp$_41, void 0, void 0, void 0, 5.8, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '78 vlad_u');
    tmp$_43 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_44 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(+(*(sin(/(+(*(4;\u03C0);-(*(3;x)));3));sin(/(+(*(2;\u03C0);-(*(3;x)));3)));-(*(cos(+(/(\u03C0;3);x));cos(/(+(*(19;\u03C0);-(*(3;x)));3))))))', void 0, void 0, void 0, '(+(-(cos(*(2;x)))))', void 0, void 0, void 0, void 0, void 0, tmp$_43, void 0, void 0, void 0, 4.8, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '81 vlad_u');
    tmp$_45 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    this.checkYourSelfMiddleTrigonometryTasks = listOf_0([tmp$_27, tmp$_29, tmp$_32, tmp$_34, tmp$_36, tmp$_38, tmp$_40, tmp$_42, tmp$_44, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(/(+(1;sin(x));+(1;-(sin(x)))))', void 0, void 0, void 0, '(^(tg(+(/(\u03C0;4);/(x;2)));2))', void 0, void 0, void 0, void 0, void 0, tmp$_45, void 0, void 0, void 0, 5.1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '83 vlad_u')]);
    tmp$_46 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_47 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(/(+(*(2;^(sin(*(4;x));2));-(1));*(2;ctg(+(/(pi;4);*(4;x)));^(cos(+(/(*(5;pi);4);-(*(4;x))));2))))', void 0, void 0, 'simplification', void 0, void 0, void 0, '+:0-1(-:1):?:?Z', void 0, mapOf(to('hiddenGoalExpressions', listOf('(+(-(1)))'))), tmp$_46, void 0, void 0, void 0, 6.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '35 vlad_u');
    tmp$_48 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_49 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(+(/(1;+(tg(*(3;x));tg(x)));-(/(1;+(ctg(*(3;x));ctg(x))))))', void 0, void 0, void 0, '(ctg(*(4;x)))', void 0, void 0, void 0, void 0, void 0, tmp$_48, void 0, void 0, void 0, 6.1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '38 vlad_u');
    tmp$_50 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    this.checkYourSelfCompleteTrigonometryTasks = listOf_0([tmp$_47, tmp$_49, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(/(+(3;-(*(4;cos(*(2;x))));cos(*(4;x)));+(3;*(4;cos(*(2;x)));cos(*(4;x)))))', void 0, void 0, void 0, '(^(tg(x);4))', void 0, void 0, void 0, void 0, void 0, tmp$_50, void 0, void 0, void 0, 5.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '41 vlad_u'), new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_SUM_getInstance().code]), '(/(+(sin(*(3;x));-(sin(x));sin(*(5;x));-(sin(*(7;x))));+(cos(x);-(cos(*(3;x)));cos(*(5;x));-(cos(*(7;x))))))', void 0, void 0, 'simplification', void 0, void 0, void 0, 'tg,* : (* : 2)', void 0, mapOf(to('hiddenGoalExpressions', listOf('(tg(*(2;x)))'))), void 0, void 0, void 0, void 0, 6.5, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '34 vlad_u')]);
    tmp$_51 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_52 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$SQR_DIFF_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(^(+(sin(x);-(cos(x)));2))', void 0, void 0, void 0, '(+(1;-(sin(*(2;x)))))', void 0, void 0, void 0, void 0, void 0, tmp$_51, void 0, void 0, void 0, 1.5);
    tmp$_53 = stringToStructureString('(tg(x))^2 + (ctg(x))^2');
    tmp$_54 = stringToStructureString('(tg(x) + ctg(x))^2 - 2');
    tmp$_55 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_56 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_53, void 0, void 0, void 0, tmp$_54, void 0, void 0, void 0, void 0, void 0, tmp$_55, void 0, void 0, void 0, 2.5);
    tmp$_57 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_58 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(x))', '(2)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_59 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code]), '(/(*(+(2;*(2;sin(x)));+(1;-(sin(x))));*(+(1;cos(x));+(2;-(*(2;cos(x)))))))', void 0, void 0, void 0, void 0, void 0, void 0, '?:0:?:?N', void 0, void 0, tmp$_57, tmp$_58, void 0, void 0, 4.2, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '1 vlad_u');
    tmp$_60 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_61 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(/(+(1;-(^(sin(x);4)));^(cos(x);2)))', void 0, void 0, void 0, '(+(2;-(^(cos(x);2))))', void 0, void 0, void 0, void 0, void 0, tmp$_60, void 0, void 0, void 0, 4.2, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '8 vlad_u');
    tmp$_62 = stringToStructureString('(sin(x))^4 + 2*cos(x)*(sin(x))^2 + (cos(x))^2');
    tmp$_63 = stringToStructureString('(sin(x) + ctg(x))^2 * (sin(x))^2');
    tmp$_64 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_65 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_62, void 0, void 0, void 0, tmp$_63, void 0, void 0, void 0, void 0, void 0, tmp$_64, void 0, void 0, void 0, 2.5);
    tmp$_66 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_67 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(+(cos(*(4;x));*(4;cos(*(2;x)));3))', void 0, void 0, void 0, '(*(8;^(cos(x);4)))', void 0, void 0, void 0, void 0, void 0, tmp$_66, void 0, void 0, void 0, 4.2, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '12 vlad_u');
    tmp$_68 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_69 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(/(sin(x);+(1;cos(x)));/(+(1;cos(x));sin(x))))', void 0, void 0, void 0, '(/(2;sin(x)))', void 0, void 0, void 0, void 0, void 0, tmp$_68, void 0, void 0, void 0, 4.3, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '9 vlad_u');
    tmp$_70 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_71 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$CUBE_DIFF_getInstance().code]), '(/(+(^(cos(x);3);-(^(sin(x);3)));+(cos(x);-(sin(x)))))', void 0, void 0, void 0, '(+(1;*(sin(x);cos(x))))', void 0, void 0, void 0, void 0, void 0, tmp$_70, void 0, void 0, void 0, 4.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '3 vlad_u');
    tmp$_72 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_73 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$CUBE_SUM_getInstance().code]), '(/(+(^(sin(x);3);^(cos(x);3));+(sin(x);cos(x))))', void 0, void 0, void 0, '(+(1;-(/(sin(*(2;x));2))))', void 0, void 0, void 0, void 0, void 0, tmp$_72, void 0, void 0, void 0, 4.5, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '4 vlad_u');
    tmp$_74 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_75 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$SUM_CUBES_getInstance().code, TaskTagCode$TRICK_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(*(+(tg(x);ctg(x));+(/(4;^(sin(*(2;x));2));-(3))))', void 0, void 0, void 0, '(+(^(tg(x);3);^(ctg(x);3)))', void 0, void 0, void 0, void 0, void 0, tmp$_74, void 0, void 0, void 0, 5.5);
    tmp$_76 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_77 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$SQR_DIFF_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(^(+(sin(x);-(cos(x)));2);sin(*(2;x))))', void 0, void 0, 'simplification', void 0, void 0, void 0, '+:0-1(-:1):?:?R', void 0, void 0, tmp$_76, void 0, void 0, void 0, 4.3, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '28 vlad_u');
    tmp$_78 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_79 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(/(*(+(1;-(cos(x)));+(1;cos(x)));sin(x)))', void 0, void 0, void 0, '(sin(x))', void 0, void 0, void 0, void 0, void 0, tmp$_78, void 0, void 0, void 0, 4.0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '29 vlad_u');
    tmp$_80 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_81 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code]), '(/(cos(*(2;x));+(cos(x);-(sin(x)))))', void 0, void 0, void 0, '(+(sin(x);cos(x)))', void 0, void 0, void 0, void 0, void 0, tmp$_80, void 0, void 0, void 0, 3.3, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '31 vlad_u');
    tmp$_82 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_83 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$SQR_DIFF_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(/(+(1;-(sin(*(2;x))));+(cos(x);-(sin(x)))))', void 0, void 0, void 0, '(+(cos(x);-(sin(x))))', void 0, void 0, void 0, void 0, void 0, tmp$_82, void 0, void 0, void 0, 3.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '32 vlad_u');
    tmp$_84 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_85 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$SUM_CUBES_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(*(8;^(cos(x);6));*(8;^(sin(x);6));-(*(3;cos(*(4;x))))))', void 0, void 0, 'simplification', void 0, void 0, void 0, '+:0-1(-:1):?:?R', void 0, void 0, tmp$_84, void 0, void 0, void 0, 5.3, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '36 vlad_u');
    tmp$_86 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_87 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code]), '(/(+(1;*(2;sin(x);cos(x)));+(^(sin(x);2);-(^(cos(x);2)))))', void 0, void 0, void 0, '(/(+(tg(x);1);+(tg(x);-(1))))', void 0, void 0, void 0, void 0, void 0, tmp$_86, void 0, void 0, void 0, 4.6, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '47 vlad_u');
    tmp$_88 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_89 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$TRIGONOMETRY_SUM_getInstance().code]), '(+(^(cos(x);2);-(^(sin(y);2))))', void 0, void 0, void 0, '(*(cos(+(x;y));cos(+(x;-(y)))))', void 0, void 0, void 0, void 0, void 0, tmp$_88, void 0, void 0, void 0, 3.7, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '84 vlad_u');
    tmp$_90 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_91 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$TRICK_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(^(sin(x);4);^(cos(x);4)))', void 0, void 0, void 0, '(/(+(3;cos(*(4;x)));4))', void 0, void 0, void 0, void 0, void 0, tmp$_90, void 0, void 0, void 0, 5.7, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '93 vlad_u');
    tmp$_92 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_93 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$SUM_SQRS_getInstance().code, TaskTagCode$TRICK_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(^(sin(x);6);^(cos(x);6)))', void 0, void 0, void 0, '(/(+(5;*(3;cos(*(4;x))));8))', void 0, void 0, void 0, void 0, void 0, tmp$_92, void 0, void 0, void 0, 6.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '94 vlad_u');
    tmp$_94 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_95 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(^(cos(x);4);-(^(sin(x);4))))', void 0, void 0, void 0, '(cos(*(2;x)))', void 0, void 0, void 0, void 0, void 0, tmp$_94, void 0, void 0, void 0, 2.3, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '101 vlad_u');
    tmp$_96 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_97 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$SUM_CUBES_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(^(sin(x);6);^(cos(x);6);*(3;^(sin(x);2);^(cos(x);2))))', void 0, void 0, 'simplification', void 0, void 0, void 0, '?:0:?:?N', void 0, mapOf(to('hiddenGoalExpressions', listOf('(1)'))), tmp$_96, void 0, void 0, void 0, 3.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '102 vlad_u');
    tmp$_98 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_99 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$SUM_CUBES_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code, TaskTagCode$TRICK_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(/(+(^(sin(x);4);^(cos(x);4);-(1));+(^(sin(x);6);^(cos(x);6);-(1))))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, mapOf(to('hiddenGoalExpressions', listOf('(/(2;3))'))), tmp$_98, void 0, void 0, void 0, 6.7, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '104 vlad_u');
    tmp$_100 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_101 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 'Write using m = tg(x) + ctg(x)', '\u0417\u0430\u043F\u0438\u0448\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 m = tg(x) + ctg(x)', void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code, TaskTagCode$TRICK_getInstance().code]), '(+(^(tg(x);4);^(ctg(x);4)))', void 0, void 0, 'express', void 0, void 0, void 0, '?:?:?:m', void 0, mapOf(to('hiddenGoalExpressions', listOf('(+(^(m;4);-(*(4;^(m;2)));2))'))), tmp$_100, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(tg(x);ctg(x)))', '(m)', 2, false, false, false, true, 'ORIGINAL'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(m)', '(+(tg(x);ctg(x)))', 2, false, false, false, true, 'ORIGINAL')]), void 0, void 0, 7.3, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '103 vlad_u');
    tmp$_102 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    this.shortMultiplicationTrigonometryTasks = listOf_0([tmp$_52, tmp$_56, tmp$_59, tmp$_61, tmp$_65, tmp$_67, tmp$_69, tmp$_71, tmp$_73, tmp$_75, tmp$_77, tmp$_79, tmp$_81, tmp$_83, tmp$_85, tmp$_87, tmp$_89, tmp$_91, tmp$_93, tmp$_95, tmp$_97, tmp$_99, tmp$_101, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(/(*(4;cos(x));+(^(ctg(/(x;2));2);-(^(tg(/(x;2));2)))))', void 0, void 0, void 0, '(^(sin(x);2))', void 0, void 0, void 0, void 0, void 0, tmp$_102, void 0, void 0, void 0, 3.5, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '59 vlad_u')]);
    tmp$_103 = mapOf(to('hiddenGoalExpressions', listOf('(sin(o(45)))')));
    tmp$_104 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_105 = new TaskITR(void 0, void 0, void 0, void 0, 'Positive acute angle', '\u041F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043E\u0441\u0442\u0440\u044B\u0439 \u0443\u0433\u043E\u043B', 'Write using a positive acute angle', '\u0417\u0430\u043F\u0438\u0448\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043E\u0441\u0442\u0440\u044B\u0439 \u0443\u0433\u043E\u043B', 'Write using a positive acute angle', '\u041F\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0443\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u043F\u0440\u043E\u0438\u0437\u0432\u043E\u043B\u044C\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430 \u043A \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u0444\u0443\u043D\u043A\u0446\u0438\u0438 \u043E\u0441\u0442\u0440\u043E\u0433\u043E \u0443\u0433\u043B\u0430', void 0, mutableSetOf([TaskTagCode$DEGREES_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(sin(o(405)))', void 0, void 0, 'oneOfHiddenGoals', void 0, void 0, void 0, void 0, void 0, tmp$_103, tmp$_104, void 0, void 0, void 0, 1.5, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '23 vlad_u');
    tmp$_106 = mapOf(to('hiddenGoalExpressions', listOf('(+(-(tg(o(37)))))')));
    tmp$_107 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_108 = new TaskITR(void 0, void 0, void 0, void 0, 'Positive acute angle', '\u041F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043E\u0441\u0442\u0440\u044B\u0439 \u0443\u0433\u043E\u043B', 'Write using a positive acute angle', '\u0417\u0430\u043F\u0438\u0448\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043E\u0441\u0442\u0440\u044B\u0439 \u0443\u0433\u043E\u043B', 'Write using a positive acute angle', '\u041F\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0443\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u043F\u0440\u043E\u0438\u0437\u0432\u043E\u043B\u044C\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430 \u043A \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u0444\u0443\u043D\u043A\u0446\u0438\u0438 \u043E\u0441\u0442\u0440\u043E\u0433\u043E \u0443\u0433\u043B\u0430', void 0, mutableSetOf([TaskTagCode$DEGREES_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(tg(o(863)))', void 0, void 0, 'oneOfHiddenGoals', void 0, void 0, void 0, void 0, void 0, tmp$_106, tmp$_107, void 0, void 0, void 0, 1.7, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '25 vlad_u');
    tmp$_109 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_110 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$DEGREES_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(^(sin(+(-(o(585))));2))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_109, void 0, void 0, void 0, 1.5, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '15 vlad_u');
    tmp$_111 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_112 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$DEGREES_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(*(sin(o(75));sin(o(15))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_111, void 0, void 0, void 0, 2.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '11 vlad_u');
    tmp$_113 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_114 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$DEGREES_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), '(+(cos(o(24));cos(o(5));cos(o(175));cos(o(204));cos(o(300))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_113, void 0, void 0, void 0, 2.5, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '14 vlad_u');
    tmp$_115 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_116 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$DEGREES_getInstance().code]), '(+(/(1;*(2;sin(o(10))));-(*(2;sin(o(70))))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_115, void 0, void 0, void 0, 2.9, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '42 vlad_u');
    tmp$_117 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_118 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$DEGREES_getInstance().code]), '(+(^(sin(o(15));4);^(cos(o(15));4)))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_117, void 0, void 0, void 0, 3.1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '50 vlad_u');
    tmp$_119 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_120 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$DEGREES_getInstance().code]), '(+(^(tg(o(15));2);^(ctg(o(15));2)))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_119, void 0, void 0, void 0, 3.0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '51 vlad_u');
    tmp$_121 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_122 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$DEGREES_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(/(+(tg(o(210));ctg(o(210));tg(o(220));ctg(o(220)));+(sin(o(100));sin(o(40)))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, mapOf(to('hiddenGoalExpressions', listOf('(/(8;3))'))), tmp$_121, void 0, void 0, void 0, 7.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '85 vlad_u');
    tmp$_123 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    this.TrigonometryTasksWithDegrees = listOf_0([tmp$_105, tmp$_108, tmp$_110, tmp$_112, tmp$_114, tmp$_116, tmp$_118, tmp$_120, tmp$_122, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$DEGREES_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_SUM_getInstance().code]), '(+(ctg(o(70));*(4;cos(o(70)))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, mapOf(to('hiddenGoalExpressions', listOf_0(['(^(3;0.5))', '(^(3;/(1;2)))']))), tmp$_123, void 0, void 0, void 0, 7.1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '87 vlad_u')]);
    tmp$_124 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_125 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(^(ctg(x);2);-(^(ctg(y);2))))', void 0, void 0, void 0, '(/(+(^(cos(x);2);-(^(cos(y);2)));*(^(sin(x);2);^(sin(y);2))))', void 0, void 0, void 0, void 0, void 0, tmp$_124, void 0, void 0, void 0, 3.5, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '91 vlad_u');
    tmp$_126 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_127 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), '(+(^(+(cos(x);-(cos(y)));2);^(+(sin(x);-(sin(y)));2)))', void 0, void 0, void 0, '(*(4;^(sin(/(+(x;-(y));2));2)))', void 0, void 0, void 0, void 0, void 0, tmp$_126, void 0, void 0, void 0, 2.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '92 vlad_u');
    tmp$_128 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    this.TrigonometryOtherTasks = listOf_0([tmp$_125, tmp$_127, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(*(+(sin(x);-(cos(x)));+(sin(y);-(cos(y)))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, mapOf(to('hiddenGoalExpressions', listOf_0(['(+(-(0.5)))', '(+(-(/(1;2))))']))), tmp$_128, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(sin(+(x;y)))', '(0.8)', 2, false, false, false, true, 'ORIGINAL'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(cos(+(x;-(y))))', '(0.3)', 2, false, false, false, true, 'ORIGINAL')]), void 0, void 0, 2.4, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '95 vlad_u')]);
    this.allTrigonometryTasks = plus(plus(plus(plus(this.shortMultiplicationTrigonometryTasks, this.checkYourSelfCompleteTrigonometryTasks), this.checkYourSelfSimpleTrigonometryTasks), this.checkYourSelfMiddleTrigonometryTasks), TrigonometryStepByStep$Companion_getInstance().trigonometryStepByStepTasks);
    tmp$_129 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Degrees and Radians', '\u0413\u0440\u0430\u0434\u0443\u0441\u044B \u0438 \u0440\u0430\u0434\u0438\u0430\u043D\u044B', void 0, void 0, 1, 1, 'Function Definitions', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u0439', void 0, TrigonometryStepByStep$Companion_getInstance().degreesAndRadians);
    tmp$_130 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Sine and Cosine', '\u0421\u0438\u043D\u0443\u0441 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441', void 0, void 0, 1, 2, 'Function Definitions', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u0439', void 0, TrigonometryStepByStep$Companion_getInstance().definitionOfSinCos);
    tmp$_131 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Tangent and Cotangent', '\u0422\u0430\u043D\u0433\u0435\u043D\u0441 \u0438 \u043A\u043E\u0442\u0430\u043D\u0433\u0435\u043D\u0441', void 0, void 0, 1, 3, 'Function Definitions', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u0439', void 0, TrigonometryStepByStep$Companion_getInstance().definitionOfTgCtg);
    tmp$_132 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Shifts and Periodicity', '\u0421\u0434\u0432\u0438\u0433\u0438 \u0438 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C', void 0, void 0, 1, 4, 'Function Definitions', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u0439', void 0, TrigonometryStepByStep$Companion_getInstance().trigonometricShiftsAndPeriodicity);
    tmp$_133 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Function Definitions', '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u0439', void 0, void 0, 1, void 0, void 0, void 0, true, TrigonometryStepByStep$Companion_getInstance().definitionOfTrigonometryFunctionsCheckYourself);
    tmp$_134 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Pythagorean Identity', '\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0442\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u043E', void 0, void 0, 2, void 0, void 0, void 0, void 0, TrigonometryStepByStep$Companion_getInstance().pythagoreanIdentity);
    tmp$_135 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Pythagorean Identity', '\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0442\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u043E', void 0, void 0, 2, void 0, void 0, void 0, true, TrigonometryStepByStep$Companion_getInstance().pythagoreanIdentityCheckYourself);
    tmp$_136 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Reflection formulas', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F', void 0, void 0, 3, void 0, void 0, void 0, void 0, TrigonometryStepByStep$Companion_getInstance().trigonometryReflections);
    tmp$_137 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Reflection formulas', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F', void 0, void 0, 3, void 0, void 0, void 0, true, TrigonometryStepByStep$Companion_getInstance().trigonometryReflectionsCheckYourself);
    tmp$_138 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Sine and Cosine of Angle Sum and Difference', '\u0421\u0438\u043D\u0443\u0441 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441 \u0441\u0443\u043C\u043C\u044B \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438 \u0443\u0433\u043B\u043E\u0432', void 0, void 0, 4, 1, 'Sine and Cosine of Angle Sum and Difference', '\u0421\u0438\u043D\u0443\u0441 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441 \u0441\u0443\u043C\u043C\u044B \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438 \u0443\u0433\u043B\u043E\u0432', void 0, TrigonometryStepByStep$Companion_getInstance().trigonometrySinCosAngleSumDiff);
    tmp$_139 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Double Angle', '\u0414\u0432\u043E\u0439\u043D\u043E\u0439 \u0443\u0433\u043E\u043B', void 0, void 0, 4, 2, 'Sine and Cosine of Angle Sum and Difference', '\u0421\u0438\u043D\u0443\u0441 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441 \u0441\u0443\u043C\u043C\u044B \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438 \u0443\u0433\u043B\u043E\u0432', void 0, TrigonometryStepByStep$Companion_getInstance().trigonometrySinCosAngleSumDiffWithDoubleArgs);
    tmp$_140 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Sine and Cosine of Angle Sum and Difference', '\u0421\u0438\u043D\u0443\u0441 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441 \u0441\u0443\u043C\u043C\u044B \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438 \u0443\u0433\u043B\u043E\u0432', void 0, void 0, 4, void 0, void 0, void 0, true, TrigonometryStepByStep$Companion_getInstance().trigonometrySinCosAngleSumDiffWithDoubleArgsCheckYourself);
    tmp$_141 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Sum and Product of Sine and Cosine', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435 \u0441\u0438\u043D\u0443\u0441\u0430 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u0430', void 0, void 0, 5, void 0, void 0, void 0, void 0, TrigonometryStepByStep$Companion_getInstance().trigonometrySumProdSinCos);
    tmp$_142 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Sum and Product of Sine and Cosine', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435 \u0441\u0438\u043D\u0443\u0441\u0430 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u0430', void 0, void 0, 5, void 0, void 0, void 0, true, TrigonometryStepByStep$Companion_getInstance().trigonometrySumProdSinCosCheckYourself);
    tmp$_143 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Advanced Operations with Tangent and Cotangent', '\u0421\u043B\u043E\u0436\u043D\u044B\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438 \u043D\u0430\u0434 \u0442\u0430\u043D\u0433\u0435\u043D\u0441\u043E\u043C \u0438 \u043A\u043E\u0442\u0430\u043D\u0433\u0435\u043D\u0441\u043E\u043C', void 0, void 0, 6, void 0, void 0, void 0, void 0, TrigonometryStepByStep$Companion_getInstance().tgCtgSinCosCompositeTasks);
    tmp$_144 = this.createTrigonometryStepByStepTaskSet_6b37b0$('Advanced Operations with Tangent and Cotangent', '\u0421\u043B\u043E\u0436\u043D\u044B\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438 \u043D\u0430\u0434 \u0442\u0430\u043D\u0433\u0435\u043D\u0441\u043E\u043C \u0438 \u043A\u043E\u0442\u0430\u043D\u0433\u0435\u043D\u0441\u043E\u043C', void 0, void 0, 6, void 0, void 0, void 0, true, TrigonometryStepByStep$Companion_getInstance().tgCtgSinCosCompositeTasksCheckYourself);
    var tmp$_148 = void 0;
    var tmp$_149 = void 0;
    var tmp$_150 = mutableSetOf([TaskSetTagCode$CHECK_YOURSELF_getInstance().code, TaskSetTagCode$TRIGONOMETRY_getInstance().code]);
    var tmp$_151 = void 0;
    var tmp$_152 = void 0;
    var $receiver = this.checkYourSelfSimpleTrigonometryTasks;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_153;
    tmp$_153 = $receiver.iterator();
    while (tmp$_153.hasNext()) {
      var item = tmp$_153.next();
      destination.add_11rb$(item.copy_eb9u9i$());
    }
    tmp$_145 = new TaskSetITR('CheckYourselfSimpleTrigonometry', tmp$_148, tmp$_149, '[Check Yourself] Simple Trigonometry', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u041F\u0440\u043E\u0441\u0442\u0430\u044F \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F', 'Simple expression transformations in trigonometry', '\u041F\u0440\u043E\u0441\u0442\u044B\u0435 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u0432 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0438', '[Check Yourself] Complicated expression transformations in trigonometry', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u0421\u043B\u043E\u0436\u043D\u044B\u0435 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u0432 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0438', 'standard_math', tmp$_150, tmp$_151, tmp$_152, destination);
    var tmp$_154 = void 0;
    var tmp$_155 = void 0;
    var tmp$_156 = mutableSetOf([TaskSetTagCode$CHECK_YOURSELF_getInstance().code, TaskSetTagCode$TRIGONOMETRY_getInstance().code]);
    var tmp$_157 = void 0;
    var tmp$_158 = void 0;
    var $receiver_0 = this.checkYourSelfMiddleTrigonometryTasks;
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_159;
    tmp$_159 = $receiver_0.iterator();
    while (tmp$_159.hasNext()) {
      var item_0 = tmp$_159.next();
      destination_0.add_11rb$(item_0.copy_eb9u9i$());
    }
    tmp$_146 = new TaskSetITR('CheckYourselfTrigonometry', tmp$_154, tmp$_155, '[Check Yourself] Trigonometry', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F', 'Expression transformations in trigonometry', '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u0432 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0438', '[Check Yourself] Expression transformations in trigonometry', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u0432 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0438', 'standard_math', tmp$_156, tmp$_157, tmp$_158, destination_0);
    var tmp$_160 = void 0;
    var tmp$_161 = void 0;
    var tmp$_162 = mutableSetOf([TaskSetTagCode$CHECK_YOURSELF_getInstance().code, TaskSetTagCode$TRIGONOMETRY_getInstance().code]);
    var tmp$_163 = void 0;
    var tmp$_164 = void 0;
    var $receiver_1 = this.checkYourSelfCompleteTrigonometryTasks;
    var destination_1 = ArrayList_init_0(collectionSizeOrDefault($receiver_1, 10));
    var tmp$_165;
    tmp$_165 = $receiver_1.iterator();
    while (tmp$_165.hasNext()) {
      var item_1 = tmp$_165.next();
      destination_1.add_11rb$(item_1.copy_eb9u9i$());
    }
    tmp$_147 = new TaskSetITR('CheckYourselfCompleteTrigonometry', tmp$_160, tmp$_161, '[Check Yourself] Complete Trigonometry', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u0421\u043B\u043E\u0436\u043D\u0430\u044F \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F', 'Complicated expression transformations in trigonometry', '\u0421\u043B\u043E\u0436\u043D\u044B\u0435 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u0432 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0438', '[Check Yourself] Complicated expression transformations in trigonometry', '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F] \u0421\u043B\u043E\u0436\u043D\u044B\u0435 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u0432 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0438', 'standard_math', tmp$_162, tmp$_163, tmp$_164, destination_1);
    var tmp$_166 = void 0;
    var tmp$_167 = void 0;
    var tmp$_168 = mutableSetOf([TaskSetTagCode$EXTRAORDINARY_getInstance().code, TaskSetTagCode$TRIGONOMETRY_getInstance().code]);
    var tmp$_169 = void 0;
    var tmp$_170 = void 0;
    var $receiver_2 = this.shortMultiplicationTrigonometryTasks;
    var destination_2 = ArrayList_init_0(collectionSizeOrDefault($receiver_2, 10));
    var tmp$_171;
    tmp$_171 = $receiver_2.iterator();
    while (tmp$_171.hasNext()) {
      var item_2 = tmp$_171.next();
      destination_2.add_11rb$(item_2.copy_eb9u9i$());
    }
    this.defaultTrigonometryTaskSets = listOf_0([tmp$_129, tmp$_130, tmp$_131, tmp$_132, tmp$_133, tmp$_134, tmp$_135, tmp$_136, tmp$_137, tmp$_138, tmp$_139, tmp$_140, tmp$_141, tmp$_142, tmp$_143, tmp$_144, tmp$_145, tmp$_146, tmp$_147, new TaskSetITR('TrigonometryShortMultiplication', tmp$_166, tmp$_167, 'Short Multiplication in Trigonometry', '\u0421\u043E\u043A\u0440\u0430\u0449\u0435\u043D\u043D\u043E\u0435 \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435 \u0432 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0438', 'New approach to formulas for short multiplication', '\u0412\u044B\u0432\u043E\u0434\u0438 \u0444\u043E\u0440\u043C\u0443\u043B\u044B \u0441\u043E\u043A\u0440\u0430\u0449\u0435\u043D\u043D\u043E\u0433\u043E \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u044F \u043F\u043E-\u043D\u043E\u0432\u043E\u043C\u0443', 'Derive and use short multiplication formulas using trigonometric transformations', '\u0412\u044B\u0432\u043E\u0434\u0438 \u0438 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439 \u0444\u043E\u0440\u043C\u0443\u043B\u044B \u0441\u043E\u043A\u0440\u0430\u0449\u0435\u043D\u043D\u043E\u0433\u043E \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u044F \u0441 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043C \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0439', 'standard_math', tmp$_168, tmp$_169, tmp$_170, destination_2)]);
  }
  TriginometryTaskSets$Companion.prototype.createTrigonometryStepByStepTaskSet_6b37b0$ = function (nameSuffixEn, nameSuffixRu, descriptionShortEn, descriptionShortRu, topIndex, subIndex, topNameEn, topNameRu, isCheckYourself, tasks) {
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (subIndex === void 0)
      subIndex = null;
    if (topNameEn === void 0)
      topNameEn = null;
    if (topNameRu === void 0)
      topNameRu = null;
    if (isCheckYourself === void 0)
      isCheckYourself = false;
    var tmp$;
    var moduleNumberString = topIndex.toString() + '.' + ((tmp$ = subIndex != null ? subIndex.toString() : null) != null ? tmp$ : '');
    var moduleNumberCodePart = '_' + topIndex + '_' + (subIndex != null ? toString(subIndex) + '_' : '') + (isCheckYourself ? 'z_' : '');
    var checkYourselfEn = isCheckYourself ? '[Check Yourself]' : '';
    var checkYourselfRu = isCheckYourself ? '[\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F]' : '';
    var descriptionShortEnResult = descriptionShortEn != null ? descriptionShortEn : 'Expression transformations on ' + nameSuffixEn.toLowerCase();
    var descriptionShortRuResult = descriptionShortRu != null ? descriptionShortRu : '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u043D\u0430 ' + nameSuffixRu.toLowerCase();
    var tmp$_0 = topNameEn != null && topNameRu != null && subIndex != null ? new Pair(toString(topNameEn) + ' ' + moduleNumberString, toString(topNameRu) + ' ' + moduleNumberString) : new Pair('', '');
    var topDescriptionPartEn = tmp$_0.component1()
    , topDescriptionPartRu = tmp$_0.component2();
    var tmp$_1 = 'TrigonometryStepByStep' + moduleNumberCodePart + (isCheckYourself ? 'CheckYourself' : '') + toCustomCodeSuffixPart(nameSuffixEn);
    var tmp$_2 = void 0;
    var tmp$_3 = void 0;
    var tmp$_4 = '[Trigonometry Step By Step]' + checkYourselfEn + ' ' + moduleNumberString + ' ' + nameSuffixEn;
    var tmp$_5 = '[\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043E\u043C]' + checkYourselfRu + ' ' + moduleNumberString + ' ' + nameSuffixRu;
    var tmp$_6 = '[Trigonometry Step By Step]' + checkYourselfEn + ' ' + topIndex + '. ' + topDescriptionPartEn + ' ' + descriptionShortEnResult;
    var tmp$_7 = '[\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043E\u043C]' + checkYourselfRu + ' ' + topIndex + '. ' + topDescriptionPartRu + ' ' + descriptionShortRuResult;
    var tmp$_8 = toMutableSet_1(plus_0(setOf_0([TaskSetTagCode$STEP_BY_STEP_getInstance().code, TaskSetTagCode$TRIGONOMETRY_getInstance().code]), isCheckYourself ? setOf(TaskSetTagCode$CHECK_YOURSELF_getInstance().code) : emptySet()));
    var tmp$_9 = void 0;
    var tmp$_10 = void 0;
    var destination = ArrayList_init_0(collectionSizeOrDefault(tasks, 10));
    var tmp$_11;
    tmp$_11 = tasks.iterator();
    while (tmp$_11.hasNext()) {
      var item = tmp$_11.next();
      destination.add_11rb$(item.copy_eb9u9i$());
    }
    return new TaskSetITR(tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, descriptionShortEnResult, descriptionShortRuResult, tmp$_6, tmp$_7, 'standard_math', tmp$_8, tmp$_9, tmp$_10, destination);
  };
  TriginometryTaskSets$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TriginometryTaskSets$Companion_instance = null;
  function TriginometryTaskSets$Companion_getInstance() {
    if (TriginometryTaskSets$Companion_instance === null) {
      new TriginometryTaskSets$Companion();
    }
    return TriginometryTaskSets$Companion_instance;
  }
  TriginometryTaskSets.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TriginometryTaskSets',
    interfaces: []
  };
  function TrigonometryStepByStep() {
    TrigonometryStepByStep$Companion_getInstance();
  }
  function TrigonometryStepByStep$Companion() {
    TrigonometryStepByStep$Companion_instance = this;
    this.degreesAndRadians = emptyList();
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25, tmp$_26, tmp$_27, tmp$_28, tmp$_29, tmp$_30, tmp$_31, tmp$_32, tmp$_33, tmp$_34, tmp$_35, tmp$_36, tmp$_37, tmp$_38, tmp$_39, tmp$_40, tmp$_41, tmp$_42, tmp$_43, tmp$_44, tmp$_45, tmp$_46, tmp$_47, tmp$_48, tmp$_49, tmp$_50, tmp$_51, tmp$_52, tmp$_53, tmp$_54, tmp$_55, tmp$_56, tmp$_57, tmp$_58, tmp$_59, tmp$_60, tmp$_61, tmp$_62, tmp$_63, tmp$_64, tmp$_65, tmp$_66, tmp$_67, tmp$_68, tmp$_69, tmp$_70, tmp$_71, tmp$_72, tmp$_73, tmp$_74, tmp$_75, tmp$_76, tmp$_77, tmp$_78, tmp$_79, tmp$_80, tmp$_81, tmp$_82, tmp$_83, tmp$_84, tmp$_85, tmp$_86, tmp$_87, tmp$_88, tmp$_89, tmp$_90, tmp$_91, tmp$_92, tmp$_93, tmp$_94, tmp$_95, tmp$_96, tmp$_97, tmp$_98, tmp$_99, tmp$_100, tmp$_101, tmp$_102, tmp$_103, tmp$_104, tmp$_105, tmp$_106, tmp$_107, tmp$_108, tmp$_109, tmp$_110, tmp$_111, tmp$_112, tmp$_113, tmp$_114, tmp$_115, tmp$_116, tmp$_117, tmp$_118, tmp$_119, tmp$_120, tmp$_121, tmp$_122, tmp$_123, tmp$_124, tmp$_125, tmp$_126, tmp$_127, tmp$_128, tmp$_129, tmp$_130, tmp$_131, tmp$_132, tmp$_133, tmp$_134, tmp$_135, tmp$_136, tmp$_137, tmp$_138, tmp$_139, tmp$_140, tmp$_141, tmp$_142, tmp$_143, tmp$_144, tmp$_145, tmp$_146, tmp$_147, tmp$_148, tmp$_149, tmp$_150, tmp$_151, tmp$_152, tmp$_153, tmp$_154, tmp$_155, tmp$_156, tmp$_157, tmp$_158, tmp$_159, tmp$_160, tmp$_161, tmp$_162, tmp$_163, tmp$_164, tmp$_165, tmp$_166, tmp$_167, tmp$_168, tmp$_169, tmp$_170, tmp$_171, tmp$_172, tmp$_173, tmp$_174, tmp$_175, tmp$_176, tmp$_177, tmp$_178, tmp$_179, tmp$_180, tmp$_181, tmp$_182, tmp$_183, tmp$_184, tmp$_185, tmp$_186, tmp$_187, tmp$_188, tmp$_189, tmp$_190, tmp$_191, tmp$_192, tmp$_193, tmp$_194, tmp$_195, tmp$_196, tmp$_197, tmp$_198, tmp$_199, tmp$_200, tmp$_201, tmp$_202, tmp$_203, tmp$_204, tmp$_205, tmp$_206, tmp$_207, tmp$_208, tmp$_209, tmp$_210, tmp$_211, tmp$_212, tmp$_213, tmp$_214, tmp$_215, tmp$_216, tmp$_217, tmp$_218, tmp$_219, tmp$_220, tmp$_221, tmp$_222, tmp$_223, tmp$_224, tmp$_225, tmp$_226, tmp$_227, tmp$_228, tmp$_229, tmp$_230, tmp$_231, tmp$_232, tmp$_233, tmp$_234, tmp$_235, tmp$_236, tmp$_237, tmp$_238, tmp$_239, tmp$_240, tmp$_241, tmp$_242, tmp$_243, tmp$_244, tmp$_245, tmp$_246, tmp$_247, tmp$_248, tmp$_249, tmp$_250, tmp$_251, tmp$_252, tmp$_253, tmp$_254, tmp$_255, tmp$_256, tmp$_257, tmp$_258, tmp$_259, tmp$_260, tmp$_261, tmp$_262, tmp$_263, tmp$_264, tmp$_265, tmp$_266, tmp$_267, tmp$_268, tmp$_269, tmp$_270, tmp$_271, tmp$_272, tmp$_273, tmp$_274, tmp$_275, tmp$_276, tmp$_277, tmp$_278, tmp$_279, tmp$_280, tmp$_281, tmp$_282, tmp$_283, tmp$_284, tmp$_285, tmp$_286, tmp$_287, tmp$_288, tmp$_289, tmp$_290, tmp$_291, tmp$_292, tmp$_293, tmp$_294, tmp$_295, tmp$_296, tmp$_297, tmp$_298, tmp$_299, tmp$_300, tmp$_301, tmp$_302, tmp$_303, tmp$_304, tmp$_305, tmp$_306, tmp$_307, tmp$_308, tmp$_309, tmp$_310, tmp$_311, tmp$_312, tmp$_313, tmp$_314, tmp$_315, tmp$_316, tmp$_317, tmp$_318, tmp$_319, tmp$_320, tmp$_321, tmp$_322, tmp$_323, tmp$_324, tmp$_325, tmp$_326, tmp$_327, tmp$_328, tmp$_329, tmp$_330, tmp$_331, tmp$_332, tmp$_333, tmp$_334, tmp$_335, tmp$_336, tmp$_337, tmp$_338, tmp$_339, tmp$_340, tmp$_341, tmp$_342, tmp$_343, tmp$_344, tmp$_345, tmp$_346, tmp$_347, tmp$_348, tmp$_349, tmp$_350, tmp$_351, tmp$_352, tmp$_353, tmp$_354, tmp$_355, tmp$_356, tmp$_357, tmp$_358, tmp$_359, tmp$_360, tmp$_361, tmp$_362, tmp$_363, tmp$_364, tmp$_365, tmp$_366, tmp$_367, tmp$_368, tmp$_369, tmp$_370, tmp$_371, tmp$_372, tmp$_373, tmp$_374, tmp$_375, tmp$_376, tmp$_377, tmp$_378, tmp$_379, tmp$_380, tmp$_381, tmp$_382, tmp$_383, tmp$_384, tmp$_385, tmp$_386, tmp$_387, tmp$_388, tmp$_389, tmp$_390, tmp$_391, tmp$_392, tmp$_393, tmp$_394, tmp$_395, tmp$_396, tmp$_397, tmp$_398, tmp$_399, tmp$_400, tmp$_401, tmp$_402, tmp$_403, tmp$_404, tmp$_405, tmp$_406, tmp$_407, tmp$_408, tmp$_409, tmp$_410, tmp$_411, tmp$_412, tmp$_413, tmp$_414, tmp$_415, tmp$_416, tmp$_417, tmp$_418, tmp$_419, tmp$_420, tmp$_421, tmp$_422, tmp$_423, tmp$_424, tmp$_425, tmp$_426, tmp$_427, tmp$_428, tmp$_429, tmp$_430, tmp$_431, tmp$_432, tmp$_433, tmp$_434, tmp$_435, tmp$_436, tmp$_437, tmp$_438, tmp$_439, tmp$_440, tmp$_441, tmp$_442, tmp$_443, tmp$_444, tmp$_445, tmp$_446, tmp$_447, tmp$_448, tmp$_449, tmp$_450, tmp$_451, tmp$_452, tmp$_453, tmp$_454, tmp$_455, tmp$_456, tmp$_457, tmp$_458, tmp$_459, tmp$_460, tmp$_461, tmp$_462, tmp$_463, tmp$_464, tmp$_465, tmp$_466, tmp$_467, tmp$_468, tmp$_469, tmp$_470, tmp$_471, tmp$_472, tmp$_473, tmp$_474, tmp$_475, tmp$_476, tmp$_477, tmp$_478, tmp$_479, tmp$_480, tmp$_481, tmp$_482, tmp$_483, tmp$_484, tmp$_485, tmp$_486, tmp$_487, tmp$_488, tmp$_489, tmp$_490, tmp$_491, tmp$_492, tmp$_493, tmp$_494, tmp$_495, tmp$_496, tmp$_497, tmp$_498, tmp$_499, tmp$_500, tmp$_501, tmp$_502, tmp$_503, tmp$_504, tmp$_505, tmp$_506, tmp$_507, tmp$_508, tmp$_509, tmp$_510, tmp$_511, tmp$_512, tmp$_513, tmp$_514, tmp$_515, tmp$_516, tmp$_517, tmp$_518, tmp$_519, tmp$_520, tmp$_521, tmp$_522, tmp$_523, tmp$_524, tmp$_525, tmp$_526, tmp$_527, tmp$_528, tmp$_529, tmp$_530, tmp$_531, tmp$_532, tmp$_533, tmp$_534, tmp$_535, tmp$_536;
    tmp$ = this.basicTrigonometryFormulaComputationTask_puj7f4$('(sin(0))');
    tmp$_0 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(sin(/(pi;6)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_1 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(sin(/(pi;4)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_2 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(sin(/(pi;3)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_3 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(sin(/(pi;2)))');
    tmp$_4 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(cos(0))');
    tmp$_5 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(cos(/(pi;6)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_6 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(cos(/(pi;4)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_7 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(cos(/(pi;3)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_8 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(cos(/(pi;2)))');
    tmp$_9 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_10 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_11 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), '(+(^(sin(/(pi;4));2);-(cos(/(pi;3)))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_10, tmp$_9, void 0, void 0, void 0, 0.5);
    tmp$_12 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_13 = mapOf(to('hiddenGoalExpressions', listOf('(+(-(2)))')));
    tmp$_14 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), '(+(*(2;sin(/(pi;2)));*(4;cos(pi))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_13, tmp$_12, void 0, void 0, void 0, 0.5);
    tmp$_15 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_16 = mapOf(to('hiddenGoalExpressions', listOf('(4)')));
    tmp$_17 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), '(+(*(sin(/(pi;3));cos(/(pi;6));cos(/(pi;2)));*(8;sin(/(pi;6)))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_16, tmp$_15, void 0, void 0, void 0, 0.5);
    tmp$_18 = stringToStructureString('(sin(pi/3)*cos(pi/6) + sin(pi))*(sin(pi/4)*cos(pi/4) - sin(pi/6))');
    tmp$_19 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_20 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_21 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), tmp$_18, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_20, tmp$_19, void 0, void 0, void 0, 0.7);
    tmp$_22 = stringToStructureString('3*(sin(pi/6)/cos(pi/6))^2 - (cos(pi/3))^2 - (cos(pi/6))^2');
    tmp$_23 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_24 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_25 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_22, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_24, tmp$_23, void 0, void 0, void 0, 0.7);
    tmp$_26 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_27 = mapOf(to('hiddenGoalExpressions', listOf('(2)')));
    tmp$_28 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), '(+(*(+(sin(x);-(cos(x)));/(cos(/(\u03C0;2));sin(/(\u03C0;2))));/(cos(/(\u03C0;4));sin(/(\u03C0;4)));1))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_27, tmp$_26, void 0, void 0, void 0, 0.9);
    tmp$_29 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_30 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_31 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), '(+(*(+(/(^(3;sin(/(\u03C0;6)));2);-(/(/(cos(/(\u03C0;4));sin(/(\u03C0;4)));2)));sin(x));-(*(+(+(-(0.5));/(^(3;sin(/(\u03C0;6)));2));sin(x)));-(*(+(+(-(0.5));sin(/(\u03C0;6)));^(sin(x);3)))))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_30, tmp$_29, void 0, void 0, void 0, 0.9);
    tmp$_32 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_33 = mapOf(to('hiddenGoalExpressions', listOf('(2)')));
    tmp$_34 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), '(+(*(+(1;-(/(cos(/(\u03C0;4));sin(/(\u03C0;4)))));+(sin(x);cos(x)));/(cos(/(\u03C0;4));sin(/(\u03C0;4)));/(sin(/(\u03C0;4));cos(/(\u03C0;4)))))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_33, tmp$_32, void 0, void 0, void 0, 0.9);
    tmp$_35 = stringToStructureString('(sin(pi/3)*cos(pi/6)+sin(pi/6)*cos(pi/3)-1) * (sin(pi/3)*sin(pi/4)*sin(pi/6) - cos(pi/3)*cos(pi/4)*cos(pi/6) + 0.5)');
    tmp$_36 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_37 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_38 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), tmp$_35, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_37, tmp$_36, void 0, void 0, void 0, 0.9);
    tmp$_39 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_40 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    this.definitionOfSinCos = listOf_0([tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_11, tmp$_14, tmp$_17, tmp$_21, tmp$_25, tmp$_28, tmp$_31, tmp$_34, tmp$_38, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), '(+(*(+(/(^(3;cos(/(\u03C0;3)));2);-(sin(/(\u03C0;6))));sin(x));-(*(+(/(^(3;sin(/(\u03C0;6)));2);-(/(/(cos(/(\u03C0;4));sin(/(\u03C0;4)));2)));sin(x)));-(*(+(0.5;-(/(/(cos(/(\u03C0;4));sin(/(\u03C0;4)));2)));sin(x)))))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_40, tmp$_39, void 0, void 0, void 0, 0.9)]);
    tmp$_41 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_42 = new TaskITR(void 0, void 0, void 0, void 0, 'Tangent', '\u0422\u0430\u043D\u0433\u0435\u043D\u0441', 'Express though sin and cos', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u0447\u0435\u0440\u0435\u0437 sin \u0438 cos', 'Express tangent though sine and cosine by formula', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u0442\u0430\u043D\u0433\u0435\u043D\u0441 \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u043D\u0443\u0441 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441 \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435', void 0, mutableSetOf([TaskTagCode$FORMULA_BASE_getInstance().code]), '(tg(x))', void 0, void 0, 'simplification', void 0, void 0, void 0, '!tg,!ctg : ? : ?', void 0, void 0, tmp$_41, void 0, void 0, void 0, 0.1);
    tmp$_43 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(tg(0))');
    tmp$_44 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(tg(/(pi;6)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_45 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(tg(/(pi;4)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_46 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(tg(/(pi;3)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_47 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_48 = new TaskITR(void 0, void 0, void 0, void 0, 'Cotangent', '\u041A\u043E\u0442\u0430\u043D\u0433\u0435\u043D\u0441', 'Express though sin and cos', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u0447\u0435\u0440\u0435\u0437 sin \u0438 cos', 'Express cotangent though sine and cosine by formula', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u043A\u043E\u0442\u0430\u043D\u0433\u0435\u043D\u0441 \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u043D\u0443\u0441 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441 \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435', void 0, mutableSetOf([TaskTagCode$FORMULA_BASE_getInstance().code]), '(ctg(x))', void 0, void 0, 'simplification', void 0, void 0, void 0, '!tg,!ctg : ? : ?', void 0, void 0, tmp$_47, void 0, void 0, void 0, 0.1);
    tmp$_49 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(ctg(/(pi;6)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_50 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(ctg(/(pi;4)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_51 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(ctg(/(pi;3)))', '!cos,!sin,!tg,!ctg,!- : ? : ?');
    tmp$_52 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(ctg(/(pi;2)))');
    tmp$_53 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(*(ctg(x);tg(x)))');
    tmp$_54 = stringToStructureString('(sin(pi/4))^2 - tg(pi/3) - cos(pi/3) + ctg(pi/6)');
    tmp$_55 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_56 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_57 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_54, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_56, tmp$_55, void 0, void 0, void 0, 0.6);
    tmp$_58 = stringToStructureString('(sin(pi/6))^2 + (sin(pi/3))^2 - (tg(pi/3))^2');
    tmp$_59 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_60 = mapOf(to('hiddenGoalExpressions', listOf('(+(-(2)))')));
    tmp$_61 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_58, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_60, tmp$_59, void 0, void 0, void 0, 0.6);
    tmp$_62 = stringToStructureString('3*(tg(pi/6))^2 - (cos(pi/6))^2 - (cos(pi/3))^2');
    tmp$_63 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_64 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_65 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_62, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_64, tmp$_63, void 0, void 0, void 0, 0.6);
    tmp$_66 = stringToStructureString('(3*sin(x)-cos(x)) / (sin(a) + 2*cos(x))');
    tmp$_67 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_68 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(x))', '(5)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_69 = mapOf(to('hiddenGoalExpressions', listOf('(2)')));
    tmp$_70 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_66, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_69, tmp$_67, tmp$_68, void 0, void 0, 0.7);
    tmp$_71 = stringToStructureString('((sin(x))^3*(ctg(x))^3*tg(x))/cos(x)^2');
    tmp$_72 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_73 = mapOf(to('hiddenGoalExpressions', listOf('(sin(x))')));
    tmp$_74 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_71, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_73, tmp$_72, void 0, void 0, void 0, 0.6);
    tmp$_75 = stringToStructureString('tg(pi/8)*ctg(pi/8)*sin(pi/6)*cos(pi/6)*tg(pi/4)*ctg(pi/4)*sin(pi/2)*cos(pi/2)');
    tmp$_76 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_77 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_78 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), tmp$_75, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_77, tmp$_76, void 0, void 0, void 0, 0.8);
    tmp$_79 = stringToStructureString('(3*(cos(x))^2 + 4*sin(x)*cos(x)) / (2*(cos(x))^2 - 7*(sin(x))^2)');
    tmp$_80 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_81 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(x))', '(+(-(2)))', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_82 = mapOf(to('hiddenGoalExpressions', listOf('(4)')));
    tmp$_83 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_79, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_82, tmp$_80, tmp$_81, void 0, void 0, 0.7);
    tmp$_84 = stringToStructureString('(cos(\u03C0/4)/sin(\u03C0/4)+ctg(\u03C0/4)+tg(\u03C0/4)-(tg(pi/3))^2)*ctg(x^2)*tg(x^2)*ctg(pi/6)');
    tmp$_85 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_86 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_87 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), tmp$_84, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_86, tmp$_85, void 0, void 0, void 0, 0.8);
    tmp$_88 = stringToStructureString('3*((sin(pi/6))^2+(cos(pi/6))^2+(tg(pi/6))^2+(ctg(pi/6))^2 - (sin(pi/4))^2+(cos(pi/4))^2+(tg(pi/4))^2+(ctg(pi/4))^2 + (sin(pi/3))^2+(cos(pi/3))^2+(tg(pi/3))^2+(ctg(pi/3))^2)');
    tmp$_89 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_90 = mapOf(to('hiddenGoalExpressions', listOf('(32)')));
    tmp$_91 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_88, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_90, tmp$_89, void 0, void 0, void 0, 0.9);
    tmp$_92 = stringToStructureString('((cos(\u03C0/6) / sin(\u03C0/6))^4 - (ctg(\u03C0/6))^4) * tg(pi/3)^4 * ctg(pi/3)^4');
    tmp$_93 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_94 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    this.definitionOfTgCtg = listOf_0([tmp$_42, tmp$_43, tmp$_44, tmp$_45, tmp$_46, tmp$_48, tmp$_49, tmp$_50, tmp$_51, tmp$_52, tmp$_53, tmp$_57, tmp$_61, tmp$_65, tmp$_70, tmp$_74, tmp$_78, tmp$_83, tmp$_87, tmp$_91, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), tmp$_92, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_94, tmp$_93, void 0, void 0, void 0, 0.9)]);
    tmp$_95 = this.basicTrigonometryFormulaSimplificationTask_nkmm1q$('(sin(+(a;\u03C0)))', mapOf(to('hiddenGoalExpressions', listOf('(+(-(sin(a))))'))), 'Sine Shift on \u03C0', '\u0421\u0434\u0432\u0438\u0433 \u0441\u0438\u043D\u0443\u0441\u0430 \u043D\u0430 \u03C0');
    tmp$_96 = this.basicTrigonometryFormulaSimplificationTask_nkmm1q$('(sin(+(a;-(*(2;\u03C0)))))', mapOf(to('hiddenGoalExpressions', listOf('(sin(a))'))), 'Sine Shift on 2\u03C0', '\u0421\u0434\u0432\u0438\u0433 \u0441\u0438\u043D\u0443\u0441\u0430 \u043D\u0430 2\u03C0');
    tmp$_97 = this.basicTrigonometryFormulaSimplificationTask_nkmm1q$('(cos(+(\u03C0;-(a))))', mapOf(to('hiddenGoalExpressions', listOf('(+(-(cos(a))))'))), 'Cosine Shift on \u03C0', '\u0421\u0434\u0432\u0438\u0433 \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u0430 \u043D\u0430 \u03C0');
    tmp$_98 = this.basicTrigonometryFormulaSimplificationTask_nkmm1q$('(cos(+(a;*(2;\u03C0))))', mapOf(to('hiddenGoalExpressions', listOf('(cos(a))'))), 'Cosine Shift on 2\u03C0', '\u0421\u0434\u0432\u0438\u0433 \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u0430 \u043D\u0430 2\u03C0');
    tmp$_99 = this.basicTrigonometryFormulaSimplificationTask_nkmm1q$('(tg(+(a;\u03C0)))', mapOf(to('hiddenGoalExpressions', listOf('(tg(a))'))), 'Tangent Shift on \u03C0', '\u0421\u0434\u0432\u0438\u0433 \u0442\u0430\u043D\u0433\u0435\u043D\u0441\u0430 \u043D\u0430 \u03C0');
    tmp$_100 = this.basicTrigonometryFormulaSimplificationTask_nkmm1q$('(ctg(+(a;-(\u03C0))))', mapOf(to('hiddenGoalExpressions', listOf('(ctg(a))'))), 'Cotangent Shift on \u03C0', '\u0421\u0434\u0432\u0438\u0433 \u043A\u043E\u0442\u0430\u043D\u0433\u0435\u043D\u0441\u0430 \u043D\u0430 \u03C0');
    tmp$_101 = stringToStructureString('cos(\u03C0/4-2*\u03C0)/sin(2*\u03C0+\u03C0/4)-ctg(\u03C0/4-\u03C0)');
    tmp$_102 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_103 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_104 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_101, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_103, tmp$_102, void 0, void 0, void 0, 0.7);
    tmp$_105 = stringToStructureString('sin(2*pi + pi/6)+sin(4*pi+pi/4)/cos(3*pi+pi/4)-tg(3*pi/4)');
    tmp$_106 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_107 = mapOf(to('hiddenGoalExpressions', listOf('(0.5)')));
    tmp$_108 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_105, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_107, tmp$_106, void 0, void 0, void 0, 0.7);
    tmp$_109 = stringToStructureString('(sin(10*pi)+sin(9*pi)+sin(8*pi)+sin(7*pi)+sin(6*pi))/(cos(10*pi)+cos(9*pi)+cos(8*pi)+cos(7*pi)+cos(6*pi))');
    tmp$_110 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_111 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_112 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_109, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_111, tmp$_110, void 0, void 0, void 0, 0.7);
    tmp$_113 = stringToStructureString('sin(9*pi/6)+sin(7*pi/6)+sin(5*pi/6)+sin(3*pi/6)+sin(pi/6)');
    tmp$_114 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_115 = mapOf(to('hiddenGoalExpressions', listOf('0.5')));
    tmp$_116 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_113, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_115, tmp$_114, void 0, void 0, void 0, 0.7);
    tmp$_117 = stringToStructureString('cos(pi)+cos(7*pi/6)+cos(8*pi/6)+cos(9*pi/6)+cos(10*pi/6)+cos(11*pi/6)+cos(2*pi)');
    tmp$_118 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_119 = mapOf(to('hiddenGoalExpressions', listOf('0')));
    tmp$_120 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_117, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_119, tmp$_118, void 0, void 0, void 0, 0.7);
    tmp$_121 = stringToStructureString('(ctg(13*pi/4)+ctg(14*pi/4)+tg(15*pi/4)+tg(16*pi/4)+tg(17*pi/4)) / ((tg(13*pi/6))^2 + (tg(14*pi/6))^2 + (ctg(15*pi/6))^2 + (ctg(16*pi/6))^2 + (ctg(17*pi/6))^2)');
    tmp$_122 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_123 = mapOf(to('hiddenGoalExpressions', listOf_0(['(0.15)', '(/(3;20))'])));
    tmp$_124 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_121, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_123, tmp$_122, void 0, void 0, void 0, 0.9);
    tmp$_125 = stringToStructureString('(sin(x)*sin(9*\u03C0/2))/cos(8*pi+x)-(ctg(x)*tg(x-pi)^2)');
    tmp$_126 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_127 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_128 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_125, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_127, tmp$_126, void 0, void 0, void 0, 0.9);
    tmp$_129 = stringToStructureString('(tg(-7*pi/4)*sin(x)+cos(x-pi)/ctg(x))*(sin(pi/3)+tg(5*pi/3)-cos(7*pi/6))');
    tmp$_130 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_131 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_132 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_129, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_131, tmp$_130, void 0, void 0, void 0, 0.9);
    tmp$_133 = stringToStructureString('3*(ctg(7*pi/3))^2 - (sin(pi/6) + sin(7*pi/3))^2 + 2*sin(pi/3)*sin(13*pi/6)');
    tmp$_134 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_135 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_136 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$SQR_SUM_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_133, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_135, tmp$_134, void 0, void 0, void 0, 0.9);
    tmp$_137 = stringToStructureString('(tg(-2*pi/3) + 2*sin(-pi/3)) * (2*sin(2*pi/3) + tg(4*pi/3))');
    tmp$_138 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_139 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    this.trigonometricShiftsAndPeriodicity = listOf_0([tmp$_95, tmp$_96, tmp$_97, tmp$_98, tmp$_99, tmp$_100, tmp$_104, tmp$_108, tmp$_112, tmp$_116, tmp$_120, tmp$_124, tmp$_128, tmp$_132, tmp$_136, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$SHORT_MULTIPLICATION_getInstance().code, TaskTagCode$DIFF_SQRS_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_137, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_139, tmp$_138, void 0, void 0, void 0, 0.9)]);
    tmp$_140 = stringToStructureString('cos(pi/3) + 2* sin(pi/2) + 4*cos(pi) + (tg(pi/3))^2/3 - 0.5');
    tmp$_141 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_142 = mapOf(to('hiddenGoalExpressions', listOf('(+(-(1)))')));
    tmp$_143 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_140, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_142, tmp$_141, void 0, void 0, void 0, 0.6);
    tmp$_144 = stringToStructureString('(5*cos(x) + 6*sin(x)) / (7*cos(x) - 6*sin(a))');
    tmp$_145 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_146 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(x))', '(2)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_147 = mapOf(to('hiddenGoalExpressions', listOf('(2)')));
    tmp$_148 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_144, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_147, tmp$_145, tmp$_146, void 0, void 0, 0.7);
    tmp$_149 = stringToStructureString('(3*(sin(x))^2 + 12*sin(x)*cos(x) + 4*(cos(x))^2) / ((sin(x))^2 + sin(x)*cos(x) - 2*(cos(x))^2)');
    tmp$_150 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_151 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(x))', '(2)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_152 = mapOf(to('hiddenGoalExpressions', listOf('(10)')));
    tmp$_153 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, LinkedHashSet_init(), tmp$_149, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_152, tmp$_150, tmp$_151, void 0, void 0, 0.7);
    tmp$_154 = stringToStructureString('tg(pi/5)*ctg(pi/5)*sin(pi/3)*cos(pi/3)*tg(pi/3)*ctg(pi/3) - tg(pi/8)*ctg(pi/8)*sin(pi/6)*cos(pi/6)*tg(pi/4)*ctg(pi/4)');
    tmp$_155 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_156 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    this.definitionOfTrigonometryFunctionsCheckYourself = listOf_0([tmp$_143, tmp$_148, tmp$_153, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code]), tmp$_154, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_156, tmp$_155, void 0, void 0, void 0, 0.8)]);
    this.definitionOfTrigonometryFunctions = plus(plus(plus(plus(this.degreesAndRadians, this.definitionOfSinCos), this.definitionOfTgCtg), this.trigonometricShiftsAndPeriodicity), this.definitionOfTrigonometryFunctionsCheckYourself);
    tmp$_157 = this.basicTrigonometryFormulaComputationTask_puj7f4$('(+(^(sin(a);2);^(cos(a);2)))');
    tmp$_158 = mapOf(to('hiddenGoalExpressions', listOf('(^(sin(a);2))')));
    tmp$_159 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_160 = new TaskITR(void 0, void 0, void 0, void 0, 'Sin Pythagorean', '\u041F\u0438\u0444\u0430\u0433\u043E\u0440\u043E\u0432 \u0441\u0438\u043D\u0443\u0441', 'Express though sin', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u0447\u0435\u0440\u0435\u0437 sin', 'Express though sine by formula', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u043D\u0443\u0441 \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435', void 0, mutableSetOf([TaskTagCode$FORMULA_BASE_getInstance().code]), '(+(1;-(^(cos(a);2))))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_158, tmp$_159, void 0, void 0, void 0, 0.1);
    tmp$_161 = mapOf(to('hiddenGoalExpressions', listOf('(^(cos(a);2))')));
    tmp$_162 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_163 = new TaskITR(void 0, void 0, void 0, void 0, 'Pythagorean Tangent', '\u041F\u0438\u0444\u0430\u0433\u043E\u0440\u043E\u0432 \u0442\u0430\u043D\u0433\u0435\u043D\u0441', 'Express though cos', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u0447\u0435\u0440\u0435\u0437 cos', 'Express though cosine by formula', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u0447\u0435\u0440\u0435\u0437 \u043A\u043E\u0441\u0438\u043D\u0443\u0441 \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435', void 0, mutableSetOf([TaskTagCode$FORMULA_BASE_getInstance().code]), '(/(1;+(1;^(tg(a);2))))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_161, tmp$_162, void 0, void 0, void 0, 0.1);
    tmp$_164 = mapOf(to('hiddenGoalExpressions', listOf('(+(1;^(ctg(a);2)))')));
    tmp$_165 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_166 = new TaskITR(void 0, void 0, void 0, void 0, 'Pythagorean Cotangent', '\u041F\u0438\u0444\u0430\u0433\u043E\u0440\u043E\u0432 \u043A\u043E\u0442\u0430\u043D\u0433\u0435\u043D\u0441', 'Express though sin', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u0447\u0435\u0440\u0435\u0437 sin', 'Express though sine by formula', '\u0412\u044B\u0440\u0430\u0437\u0438\u0442\u044C \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u043D\u0443\u0441 \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435', void 0, mutableSetOf([TaskTagCode$FORMULA_BASE_getInstance().code]), '(/(1;^(sin(a);2)))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_164, tmp$_165, void 0, void 0, void 0, 0.1);
    tmp$_167 = stringToStructureString('(sin(pi/6))^2+(cos(pi/6))^2+1/(sin(pi/6))^2');
    tmp$_168 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_169 = mapOf(to('hiddenGoalExpressions', listOf('(5)')));
    tmp$_170 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), tmp$_167, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_169, tmp$_168, void 0, void 0, void 0, 1.0);
    tmp$_171 = stringToStructureString('(1+(tg(7*pi/3))^2-1/(cos(pi/3))^2) * ((sin(pi/3))^2 + ctg(7*pi/3))');
    tmp$_172 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_173 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_174 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), tmp$_171, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_173, tmp$_172, void 0, void 0, void 0, 1.1);
    tmp$_175 = stringToStructureString('(1 - sin(x)) / cos(x) - cos(x) / (1 + sin(x))');
    tmp$_176 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_177 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_178 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), tmp$_175, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_177, tmp$_176, void 0, void 0, void 0, 1.5);
    tmp$_179 = stringToStructureString('(1 - (cos(2*x))^2) / (1 - (sin(2*x))^2)');
    tmp$_180 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_181 = mapOf(to('hiddenGoalExpressions', listOf('(^(tg(*(2;x));2))')));
    tmp$_182 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), tmp$_179, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_181, tmp$_180, void 0, void 0, void 0, 1.6);
    tmp$_183 = stringToStructureString('1 / (1+(tg(a))^2) + 1 / (1+(ctg(a))^2)');
    tmp$_184 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_185 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_186 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), tmp$_183, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_185, tmp$_184, void 0, void 0, void 0, 1.8);
    tmp$_187 = stringToStructureString('(1 - (cos(x))^2) * (tg(x))^2 + 1 - (tg(x))^2');
    tmp$_188 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_189 = mapOf(to('hiddenGoalExpressions', listOf('(^(cos(x);2))')));
    tmp$_190 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), tmp$_187, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_189, tmp$_188, void 0, void 0, void 0, 1.6);
    tmp$_191 = stringToStructureString('sin(x)*cos(x)*(tg(x)+ctg(x))');
    tmp$_192 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_193 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_194 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), tmp$_191, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_193, tmp$_192, void 0, void 0, void 0, 1.5);
    tmp$_195 = stringToStructureString('(5*cos(x) + 6*sin(x)) / (7*cos(x) - 6*sin(a))');
    tmp$_196 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_197 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(x))', '(2)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_198 = mapOf(to('hiddenGoalExpressions', listOf('(2)')));
    tmp$_199 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FRACTION_getInstance().code]), tmp$_195, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_198, tmp$_196, tmp$_197, void 0, void 0, 0.7);
    tmp$_200 = stringToStructureString('((1+sin(x))/(1-sin(x)))^0.5 - ((1-sin(x))/(1+sin(x)))^0.5');
    tmp$_201 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_202 = mapOf(to('hiddenGoalExpressions', listOf('(*(2;tg(x)))')));
    tmp$_203 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_200, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_202, tmp$_201, void 0, void 0, void 0, 2.1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '-\u03C0/2 < x < 0');
    tmp$_204 = stringToStructureString('(5*sin(x)-cos(x)) / (2*(sin(x)^3) + 111*(cos(x)^3))');
    tmp$_205 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_206 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(x))', '(+(-(4)))', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_207 = mapOf(to('hiddenGoalExpressions', listOf('(21)')));
    tmp$_208 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_204, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_207, tmp$_205, tmp$_206, void 0, void 0, 2.4);
    tmp$_209 = stringToStructureString('((sin(x))^2 + 5*sin(x)*cos(x) - (cos(x))^2) / (2 - (sin(x))^2 - 2*(cos(x))^2)');
    tmp$_210 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_211 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(x))', '(3)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_212 = mapOf(to('hiddenGoalExpressions', listOf('(23)')));
    tmp$_213 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_209, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_212, tmp$_210, tmp$_211, void 0, void 0, 2.5);
    tmp$_214 = stringToStructureString('(cos(x)+sin(x))/(sin(pi/3)*sin(pi/4))');
    tmp$_215 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_216 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(tg(x);ctg(x)))', '(4)', 2, false, true, false, true, 'SORTED'));
    tmp$_217 = mapOf(to('hiddenGoalExpressions', listOf('(8)')));
    tmp$_218 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_214, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_217, tmp$_215, tmp$_216, void 0, void 0, 2.5);
    tmp$_219 = stringToStructureString('(tg(x))^4+(ctg(x))^4');
    tmp$_220 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_221 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(tg(x);-(ctg(x))))', '(b)', 2, false, true, false, true, 'SORTED'));
    tmp$_222 = mapOf(to('hiddenGoalExpressions', listOf('(+(^(b;4);*(4;^(b;2));2))')));
    this.pythagoreanIdentity = listOf_0([tmp$_157, tmp$_160, tmp$_163, tmp$_166, tmp$_170, tmp$_174, tmp$_178, tmp$_182, tmp$_186, tmp$_190, tmp$_194, tmp$_199, tmp$_203, tmp$_208, tmp$_213, tmp$_218, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_219, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_222, tmp$_220, tmp$_221, void 0, void 0, 2.7)]);
    tmp$_223 = stringToStructureString('(sin(pi/3))^2 + (cos(pi/3))^2 + 1/(cos(pi/3))^2');
    tmp$_224 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_225 = mapOf(to('hiddenGoalExpressions', listOf('(5)')));
    tmp$_226 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRICK_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), tmp$_223, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_225, tmp$_224, void 0, void 0, void 0, 1.0);
    tmp$_227 = stringToStructureString('sin(x)*cos(x)*(tg(x)+ctg(x))');
    tmp$_228 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_229 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_230 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code]), tmp$_227, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_229, tmp$_228, void 0, void 0, void 0, 1.5);
    tmp$_231 = stringToStructureString('((1+cos(x))/(1-cos(x)))^0.5 - ((1-cos(x))/(1+cos(x)))^0.5');
    tmp$_232 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_233 = mapOf(to('hiddenGoalExpressions', listOf('(*(2;ctg(x)))')));
    tmp$_234 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_231, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_233, tmp$_232, void 0, void 0, void 0, 2.1, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, '0 < x < \u03C0/2');
    tmp$_235 = stringToStructureString('(2*(sin(x))^2 - (cos(x))^2) / ((sin(x))^4 + 5*(sin(x))^3*cos(x) - (cos(x))^4)');
    tmp$_236 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_237 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(ctg(x))', '(2)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_238 = mapOf(to('hiddenGoalExpressions', listOf('(10)')));
    tmp$_239 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_235, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_238, tmp$_236, tmp$_237, void 0, void 0, 2.4);
    tmp$_240 = stringToStructureString('(tg(x))^2+(ctg(x))^2');
    tmp$_241 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_242 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(tg(x);-(ctg(x))))', '(b)', 2, false, true, false, true, 'SORTED'));
    tmp$_243 = mapOf(to('hiddenGoalExpressions', listOf('(+(^(b;2);2))')));
    this.pythagoreanIdentityCheckYourself = listOf_0([tmp$_226, tmp$_230, tmp$_234, tmp$_239, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_240, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_243, tmp$_241, tmp$_242, void 0, void 0, 2.5)]);
    tmp$_244 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(sin(+(-(a))))', mapOf(to('hiddenGoalExpressions', listOf('(+(-(sin(a))))'))), 'Negative Angle Sine', '\u0421\u0438\u043D\u0443\u0441 \u043E\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0433\u043E \u0443\u0433\u043B\u0430');
    tmp$_245 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(cos(+(-(a))))', mapOf(to('hiddenGoalExpressions', listOf('(cos(a))'))), 'Negative Angle Cosine', '\u041A\u043E\u0441\u0438\u043D\u0443\u0441 \u043E\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0433\u043E \u0443\u0433\u043B\u0430');
    tmp$_246 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(sin(+(\u03C0;-(a))))', mapOf(to('hiddenGoalExpressions', listOf('(sin(a))'))), 'Sine Reflected in \u03C0/2', '\u0421\u0438\u043D\u0443\u0441 \u043E\u0442\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u0432 \u03C0/2');
    tmp$_247 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(cos(+(\u03C0;-(a))))', mapOf(to('hiddenGoalExpressions', listOf('(+(-(cos(a))))'))), 'Cosine Reflected in \u03C0/2', '\u041A\u043E\u0441\u0438\u043D\u0443\u0441 \u043E\u0442\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u0432 \u03C0/2');
    tmp$_248 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(sin(+(/(\u03C0;2);-(a))))', mapOf(to('hiddenGoalExpressions', listOf('(cos(a))'))), 'Sine Reflected to Cosine', '\u041F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u0441\u0438\u043D\u0443\u0441\u0430 \u043A \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u0443');
    tmp$_249 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(cos(+(/(\u03C0;2);a)))', mapOf(to('hiddenGoalExpressions', listOf('(sin(+(-(a))))'))), 'Cosine Reflected to Sine', '\u041F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u0430 \u043A \u0441\u0438\u043D\u0443\u0441\u0443');
    tmp$_250 = stringToStructureString('-cos(-4*pi/3)');
    tmp$_251 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_252 = mapOf(to('hiddenGoalExpressions', listOf('(0.5)')));
    tmp$_253 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_250, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_252, tmp$_251, void 0, void 0, void 0, 1.0);
    tmp$_254 = stringToStructureString('tg(5*pi/6)*sin(4*pi/3)');
    tmp$_255 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_256 = mapOf(to('hiddenGoalExpressions', listOf('(0.5)')));
    tmp$_257 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_254, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_256, tmp$_255, void 0, void 0, void 0, 1.0);
    tmp$_258 = stringToStructureString('sin(pi/2-x)-cos(x)');
    tmp$_259 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_260 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_261 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_258, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_260, tmp$_259, void 0, void 0, void 0, 1.0);
    tmp$_262 = stringToStructureString('cos(2*pi/18)-sin(7*pi/18)');
    tmp$_263 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_264 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_265 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_262, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_264, tmp$_263, void 0, void 0, void 0, 1.0);
    tmp$_266 = stringToStructureString('2*tg(-pi/4)*ctg(-pi/6) - 3*sin(-pi/2) - 4*cos(-pi/6)');
    tmp$_267 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_268 = mapOf(to('hiddenGoalExpressions', listOf('(3)')));
    tmp$_269 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_266, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_268, tmp$_267, void 0, void 0, void 0, 1.6);
    tmp$_270 = stringToStructureString('(cos(\u03C0/2-x)/cos(x))*(ctg(\u03C0/4)-tg(\u03C0/4))');
    tmp$_271 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_272 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_273 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_270, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_272, tmp$_271, void 0, void 0, void 0, 1.0);
    tmp$_274 = stringToStructureString('sin(-pi/3)*tg(-pi/6)+3*cos(pi)+cos(-pi/3)');
    tmp$_275 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_276 = mapOf(to('hiddenGoalExpressions', listOf('(+(-(2)))')));
    tmp$_277 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_274, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_276, tmp$_275, void 0, void 0, void 0, 1.6);
    tmp$_278 = stringToStructureString('(((1-sin(-(\u03C0/2-x))^2)^0.5*cos(\u03C0)-(cos(-\u03C0)*cos(\u03C0/2)-sin(-\u03C0)*sin(\u03C0/2))*cos(\u03C0/2-(-(\u03C0/2-x))))+cos(\u03C0/2-x))*tg(x)');
    tmp$_279 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_280 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_281 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_278, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_280, tmp$_279, void 0, void 0, void 0, 1.1);
    tmp$_282 = stringToStructureString('(sin(x+pi)*cos((3*pi)/2-x)*tg(x-pi/2)) / (cos(pi/2+x)*cos((3*pi)/2+x)*tg(pi+x))');
    tmp$_283 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_284 = mapOf(to('hiddenGoalExpressions', listOf('(^(ctg(x);2))')));
    tmp$_285 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_282, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_284, tmp$_283, void 0, void 0, void 0, 1.7);
    tmp$_286 = stringToStructureString('sin(11*pi/6)*cos(-13*pi/6)*tg(-5*pi/4)*tg(-5*pi/3)');
    tmp$_287 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_288 = mapOf(to('hiddenGoalExpressions', listOf_0(['(0.75)', '(/(3;4))'])));
    this.trigonometryReflections = listOf_0([tmp$_244, tmp$_245, tmp$_246, tmp$_247, tmp$_248, tmp$_249, tmp$_253, tmp$_257, tmp$_261, tmp$_265, tmp$_269, tmp$_273, tmp$_277, tmp$_281, tmp$_285, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_286, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_288, tmp$_287, void 0, void 0, void 0, 1.7)]);
    tmp$_289 = stringToStructureString('(sin(-(22*pi)/6))^2');
    tmp$_290 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_291 = mapOf(to('hiddenGoalExpressions', listOf_0(['(0.75)', '(/(3;4))'])));
    tmp$_292 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_289, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_291, tmp$_290, void 0, void 0, void 0, 1.0);
    tmp$_293 = stringToStructureString('(sin(\u03C0/2-x)/sin(x))*(ctg(-\u03C0/4)+tg(\u03C0/4))');
    tmp$_294 = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    tmp$_295 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_296 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_293, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_295, tmp$_294, void 0, void 0, void 0, 1.0);
    tmp$_297 = stringToStructureString('6*tg(9*pi/4)+cos(5*pi/6)*tg(-pi/6)-sin(-pi/6)');
    tmp$_298 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_299 = mapOf(to('hiddenGoalExpressions', listOf('(7)')));
    tmp$_300 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code]), tmp$_297, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_299, tmp$_298, void 0, void 0, void 0, 1.6);
    tmp$_301 = stringToStructureString('sqrt(6)/(sin(-7*pi/4)*cos(-7*pi/6)*tg(5*pi/3)*ctg(4*pi/3))');
    tmp$_302 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_303 = mapOf(to('hiddenGoalExpressions', listOf('(4)')));
    tmp$_304 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_301, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_303, tmp$_302, void 0, void 0, void 0, 1.7);
    tmp$_305 = stringToStructureString('(sin(x-pi)*cos(x-2*pi)*sin(2*pi-x)) / (sin(pi/2-x)*ctg(pi-x)*ctg(3*pi/2+x))');
    tmp$_306 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_307 = mapOf(to('hiddenGoalExpressions', listOf('(^(sin(x);2))')));
    this.trigonometryReflectionsCheckYourself = listOf_0([tmp$_292, tmp$_296, tmp$_300, tmp$_304, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_305, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_307, tmp$_306, void 0, void 0, void 0, 1.7)]);
    tmp$_308 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(sin(+(a;b)))', mapOf(to('hiddenGoalExpressions', listOf('(+(*(sin(a);cos(b));*(sin(b);cos(a))))'))), 'Sine of Sum', '\u0421\u0438\u043D\u0443\u0441 \u0441\u0443\u043C\u043C\u044B');
    tmp$_309 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))', mapOf(to('hiddenGoalExpressions', listOf('(sin(+(a;-(b))))'))), 'Sine of Difference', '\u0421\u0438\u043D\u0443\u0441 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438');
    tmp$_310 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))', mapOf(to('hiddenGoalExpressions', listOf('(cos(+(a;b)))'))), 'Cosine of Sum', '\u041A\u043E\u0441\u0438\u043D\u0443\u0441 \u0441\u0443\u043C\u043C\u044B');
    tmp$_311 = this.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$('(cos(+(a;-(b))))', mapOf(to('hiddenGoalExpressions', listOf('(+(*(cos(a);cos(b));*(sin(b);sin(a))))'))), 'Cosine of Difference', '\u041A\u043E\u0441\u0438\u043D\u0443\u0441 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438');
    tmp$_312 = stringToStructureString('(sin(pi/30)sin(pi/15) + cos(pi/30)cos(pi/15))/((sin(7*pi/30)cos(4*pi/15) + cos(7*pi/30)sin(4*pi/15))*cos(pi/30))');
    tmp$_313 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_314 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_315 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_312, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_314, tmp$_313, void 0, void 0, void 0, 1.4);
    tmp$_316 = stringToStructureString('(sin(x+y)-sin(y)*cos(x)) / (sin(x-y)+sin(y)*cos(x))');
    tmp$_317 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_318 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_319 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_316, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_318, tmp$_317, void 0, void 0, void 0, 1.4);
    tmp$_320 = stringToStructureString('((cos((11*pi)/20)cos(9*pi/20) - sin((11*pi)/20)sin((9*pi)/20)) / (cos(pi/8)sin((3*pi)/8) - sin(pi/8)cos((3*pi)/8)))^2');
    tmp$_321 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_322 = mapOf(to('hiddenGoalExpressions', listOf('(2)')));
    tmp$_323 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_320, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_322, tmp$_321, void 0, void 0, void 0, 1.5);
    tmp$_324 = stringToStructureString('(cos(pi/6-x)-cos(11*pi/6)*cos(x)) / (sin(pi/6-x)+sin(2*pi/3)*sin(x))');
    tmp$_325 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_326 = mapOf(to('hiddenGoalExpressions', listOf('(tg(x))')));
    tmp$_327 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_324, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_326, tmp$_325, void 0, void 0, void 0, 1.7);
    tmp$_328 = stringToStructureString('(sin(-pi/8))^4 + (cos(-3*pi/8))^4 + (sin(-5*pi/8))^4 + (cos(-7*pi/8))^4');
    tmp$_329 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_330 = mapOf(to('hiddenGoalExpressions', listOf_0(['(1.5)', '(/(3;2))'])));
    tmp$_331 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), tmp$_328, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_330, tmp$_329, void 0, void 0, void 0, 1.5);
    tmp$_332 = stringToStructureString('(2*(sin(pi/4)*cos(x)-cos(pi/4+x))) / (2*sin(pi/4+x) - sin(x)/sin(pi/4))');
    tmp$_333 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_334 = mapOf(to('hiddenGoalExpressions', listOf('(tg(x))')));
    tmp$_335 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), tmp$_332, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_334, tmp$_333, void 0, void 0, void 0, 1.7);
    tmp$_336 = stringToStructureString('(tg(7*pi/6)+ctg(pi/6))*(sin(5*pi/6)-sin(3*pi/6)*cos(2*pi/6)-sin(2*pi/6)*cos(3*pi/6))');
    tmp$_337 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_338 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_339 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), tmp$_336, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_338, tmp$_337, void 0, void 0, void 0, 1.7);
    tmp$_340 = stringToStructureString('(cos(8*x)+sin(2*x)*sin(6*x)) / (cos(2*x)*cos(6*x))');
    tmp$_341 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_342 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_343 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_340, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_342, tmp$_341, void 0, void 0, void 0, 1.7);
    tmp$_344 = stringToStructureString('sin(9*pi/12)*cos(7*pi/12)*tg(5*pi/6)+cos(9*pi/12)*sin(7*pi/12)*tg(-pi/6)');
    tmp$_345 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_346 = mapOf(to('hiddenGoalExpressions', listOf('(0.5)')));
    tmp$_347 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_344, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_346, tmp$_345, void 0, void 0, void 0, 1.9);
    tmp$_348 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_349 = mapOf(to('hiddenGoalExpressions', listOf('(/(1;sin(*(3;x))))')));
    this.trigonometrySinCosAngleSumDiff = listOf_0([tmp$_308, tmp$_309, tmp$_310, tmp$_311, tmp$_315, tmp$_319, tmp$_323, tmp$_327, tmp$_331, tmp$_335, tmp$_339, tmp$_343, tmp$_347, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(+(/(cos(*(6;x));sin(*(3;x)));/(*(sin(*(6;x));cos(*(3;x)));+(/(1;^(sin(*(3;x));2));-(^(sin(*(3;x));2));-(^(ctg(*(3;x));2))))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_349, tmp$_348, void 0, void 0, void 0, 1.9)]);
    tmp$_350 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_351 = new TaskITR(void 0, void 0, void 0, void 0, 'Double-Angle Sine', '\u0421\u0438\u043D\u0443\u0441 \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0443\u0433\u043B\u0430', void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_DEDUCE_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(sin(*(2;a)))', void 0, void 0, void 0, '(*(2;sin(a);cos(a)))', void 0, void 0, void 0, void 0, void 0, tmp$_350, void 0, void 0, void 0, 2.0);
    tmp$_352 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_353 = new TaskITR(void 0, void 0, void 0, void 0, 'Double-Angle Cosine', '\u041A\u043E\u0441\u0438\u043D\u0443\u0441 \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0443\u0433\u043B\u0430', void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_DEDUCE_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(cos(*(2;a)))', void 0, void 0, void 0, '(+(^(cos(a);2);-(^(sin(a);2))))', void 0, void 0, void 0, void 0, void 0, tmp$_352, void 0, void 0, void 0, 2.0);
    tmp$_354 = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    tmp$_382 = listOf_0([tmp$_351, tmp$_353, new TaskITR(void 0, void 0, void 0, void 0, 'Double-Angle Cosine through Sine', '\u041A\u043E\u0441\u0438\u043D\u0443\u0441 \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0443\u0433\u043B\u0430 \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u043D\u0443\u0441', void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_DEDUCE_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(+(1;-(*(2;^(sin(a);2)))))', void 0, void 0, void 0, '(cos(*(2;a)))', void 0, void 0, void 0, void 0, void 0, tmp$_354, void 0, void 0, void 0, 2.0)]);
    tmp$_355 = stringToStructureString('(sin(2*x)) / ((cos(x))^2-(sin(x))^2)');
    tmp$_356 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_357 = mapOf(to('hiddenGoalExpressions', listOf('(tg(*(2;x)))')));
    tmp$_358 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_355, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_357, tmp$_356, void 0, void 0, void 0, 1.2);
    tmp$_359 = stringToStructureString('sin(2*x)*tg(x)+cos(2*x)');
    tmp$_360 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_361 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_362 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_359, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_361, tmp$_360, void 0, void 0, void 0, 1.5);
    tmp$_363 = stringToStructureString('(ctg(x)-tg(x))/2');
    tmp$_364 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_365 = mapOf(to('hiddenGoalExpressions', listOf('(ctg(*(2;x)))')));
    tmp$_366 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_363, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_365, tmp$_364, void 0, void 0, void 0, 1.5);
    tmp$_367 = stringToStructureString('cos(3*x)/(2*sin(x)) + sin(3*x)/(2*cos(x))');
    tmp$_368 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_369 = mapOf(to('hiddenGoalExpressions', listOf('(ctg(*(2;x)))')));
    tmp$_370 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_367, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_369, tmp$_368, void 0, void 0, void 0, 1.4);
    tmp$_371 = stringToStructureString('((sin(2*x))^2-4*(sin(x))^2) / ((sin(2*x))^2+4*(sin(x))^2-4)');
    tmp$_372 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_373 = mapOf(to('hiddenGoalExpressions', listOf('(^(tg(x);4))')));
    tmp$_374 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_371, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_373, tmp$_372, void 0, void 0, void 0, 2.9);
    tmp$_375 = stringToStructureString('(2*(cos(4*x))^2-1) / (tg(9*pi/4-4*x)*(sin((-3*pi)/4+4*x))^2)');
    tmp$_376 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_377 = mapOf(to('hiddenGoalExpressions', listOf('(2)')));
    tmp$_378 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_375, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_377, tmp$_376, void 0, void 0, void 0, 3.8);
    tmp$_379 = stringToStructureString('1/(cos(pi/7)*cos((4*pi)/7)*cos((5*pi)/7))');
    tmp$_380 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_381 = mapOf(to('hiddenGoalExpressions', listOf('(8)')));
    this.trigonometrySinCosAngleSumDiffWithDoubleArgs = plus(tmp$_382, listOf_0([tmp$_358, tmp$_362, tmp$_366, tmp$_370, tmp$_374, tmp$_378, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_379, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_381, tmp$_380, void 0, void 0, void 0, 4.8, void 0, void 0, void 0, mapOf(to('data', listOf_0([new HintITR('Multiply the numerator and denominator by $$8\\cdot\\sin\\left(\\frac{\\pi}{7}\\right)$$', '\u0414\u043E\u043C\u043D\u043E\u0436\u0438\u0442\u044C \u0447\u0438\u0441\u043B\u0438\u0442\u0435\u043B\u044C \u0438 \u0437\u043D\u0430\u043C\u0435\u043D\u0430\u0442\u0435\u043B\u044C \u043D\u0430 $$8\\cdot\\sin\\left(\\frac{\\pi}{7}\\right)$$'), new HintITR(void 0, void 0, void 0, '$$\\cos\\left(\\frac{5\\cdot\\pi}{7}\\right)=\\cos\\left(\\pi-\\frac{2\\cdot\\pi}{7}\\right)=-\\cos\\left(\\frac{2\\cdot\\pi}{7}\\right)$$'), new HintITR('Apply the double angle formula three times$$', '\u0422\u0440\u0438\u0436\u0434\u044B \u043F\u0440\u0438\u043C\u0435\u043D\u0438\u0442\u044C \u0444\u043E\u0440\u043C\u0443\u043B\u0443 \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0443\u0433\u043B\u0430')]))))]));
    tmp$_383 = stringToStructureString('(sin(x+pi/4)-cos(x+pi/4)) / (sin(x+pi/4)+cos(x+pi/4))');
    tmp$_384 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_385 = mapOf(to('hiddenGoalExpressions', listOf('(tg(x))')));
    tmp$_386 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_383, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_385, tmp$_384, void 0, void 0, void 0, 1.4);
    tmp$_387 = stringToStructureString('(cos(pi/8))^4 + (sin(3*pi/8))^4 + (cos(5*pi/8))^4 + (sin(7*pi/8))^4');
    tmp$_388 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_389 = mapOf(to('hiddenGoalExpressions', listOf_0(['(1.5)', '(/(3;2))'])));
    tmp$_390 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), tmp$_387, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_389, tmp$_388, void 0, void 0, void 0, 1.5);
    tmp$_391 = stringToStructureString('((sin(2*x))^2-4*(cos(x))^2) / ((sin(2*x))^2+4*(cos(x))^2-4)');
    tmp$_392 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_393 = mapOf(to('hiddenGoalExpressions', listOf('(^(ctg(x);4))')));
    tmp$_394 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_391, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_393, tmp$_392, void 0, void 0, void 0, 2.9);
    tmp$_395 = stringToStructureString('(1-2*(sin(4*x))^2) / (2*ctg(pi/4+4*x)*(cos((5*pi)/4-4*x))^2)');
    tmp$_396 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_397 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_398 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_395, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_397, tmp$_396, void 0, void 0, void 0, 3.8);
    tmp$_399 = stringToStructureString('1/(sin(pi/18)*cos(pi/9)*cos((2*pi)/9))');
    tmp$_400 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_401 = mapOf(to('hiddenGoalExpressions', listOf('(8)')));
    this.trigonometrySinCosAngleSumDiffWithDoubleArgsCheckYourself = listOf_0([tmp$_386, tmp$_390, tmp$_394, tmp$_398, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code, TaskTagCode$TRICK_getInstance().code]), tmp$_399, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_401, tmp$_400, void 0, void 0, void 0, 4.8)]);
    tmp$_402 = this.trigonometrySumProdSinCosFormulaSimplificationTask_nkmm1q$('(+(sin(a);sin(b)))', mapOf(to('hiddenGoalExpressions', listOf('(*(2;sin(/(+(a;b);2));cos(/(+(a;-(b));2))))'))), 'Sum of Sine', '\u0421\u0443\u043C\u043C\u0430 \u0441\u0438\u043D\u0443\u0441\u043E\u0432');
    tmp$_403 = this.trigonometrySumProdSinCosFormulaSimplificationTask_nkmm1q$('(+(sin(a);-(sin(b))))', mapOf(to('hiddenGoalExpressions', listOf('(*(2;sin(/(+(a;-(b));2));cos(/(+(a;b);2))))'))), 'Difference of Sine', '\u0420\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u0441\u0438\u043D\u0443\u0441\u043E\u0432');
    tmp$_404 = this.trigonometrySumProdSinCosFormulaSimplificationTask_nkmm1q$('(+(cos(a);cos(b)))', mapOf(to('hiddenGoalExpressions', listOf('(*(2;cos(/(+(a;b);2));cos(/(+(a;-(b));2))))'))), 'Sum of Cosine', '\u0421\u0443\u043C\u043C\u0430 \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u043E\u0432');
    tmp$_405 = this.trigonometrySumProdSinCosFormulaSimplificationTask_nkmm1q$('(+(cos(a);-(cos(b))))', mapOf(to('hiddenGoalExpressions', listOf('(+(-(*(2;sin(/(+(a;-(b));2));sin(/(+(a;b);2))))))'))), 'Difference of Cosine', '\u0420\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u043E\u0432');
    tmp$_406 = this.trigonometrySumProdSinCosFormulaSimplificationTask_nkmm1q$('(*(sin(a);sin(b)))', mapOf(to('hiddenGoalExpressions', listOf('(/(+(cos(+(a;-(b)));-(cos(+(a;b))));2))'))), 'Product of Sine', '\u041F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u0441\u0438\u043D\u0443\u0441\u043E\u0432');
    tmp$_407 = this.trigonometrySumProdSinCosFormulaSimplificationTask_nkmm1q$('(*(sin(a);cos(b)))', mapOf(to('hiddenGoalExpressions', listOf('(/(+(sin(+(a;-(b)));sin(+(a;b)));2))'))), 'Product of Sine and Cosine', '\u041F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u0441\u0438\u043D\u0443\u0441\u0430 \u0438 \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u0430');
    tmp$_408 = this.trigonometrySumProdSinCosFormulaSimplificationTask_nkmm1q$('(*(cos(a);cos(b)))', mapOf(to('hiddenGoalExpressions', listOf('(/(+(cos(+(a;-(b)));cos(+(a;b)));2))'))), 'Product of Cosine', '\u041F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u043A\u043E\u0441\u0438\u043D\u0443\u0441\u043E\u0432');
    tmp$_409 = stringToStructureString('(cos(3*x)-cos(7*x))/(sin(2*x)*sin(5*x))');
    tmp$_410 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_411 = mapOf(to('hiddenGoalExpressions', listOf('(2)')));
    tmp$_412 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_409, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_411, tmp$_410, void 0, void 0, void 0, 1.8);
    tmp$_413 = stringToStructureString('(sin(x)+sin(3*x)) / (cos(x)+cos(3*x))');
    tmp$_414 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_415 = mapOf(to('hiddenGoalExpressions', listOf('(tg(*(2;x)))')));
    tmp$_416 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_413, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_415, tmp$_414, void 0, void 0, void 0, 1.9);
    tmp$_417 = stringToStructureString('(sin((5*pi)/18)+cos((2*pi)/18))/(2*cos(pi/18)*sin(pi/3))');
    tmp$_418 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_419 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_420 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_417, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_419, tmp$_418, void 0, void 0, void 0, 2.0);
    tmp$_421 = stringToStructureString('(ctg((11*pi)/36)-tg((5*pi)/36))*cos((5*pi)/36)*cos((7*pi)/36)');
    tmp$_422 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_423 = mapOf(to('hiddenGoalExpressions', listOf('(sin(/(pi;18)))')));
    tmp$_424 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_421, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_423, tmp$_422, void 0, void 0, void 0, 2.5);
    tmp$_425 = stringToStructureString('cos(x+(3*pi)/2)*cos(x-(5*pi)/2)+cos(x+(7*pi)/2)*sin(x-9*pi)');
    tmp$_426 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_427 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_428 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_425, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_427, tmp$_426, void 0, void 0, void 0, 2.0);
    tmp$_429 = stringToStructureString('(cos(x)-cos(2*x)-cos(4*x)+cos(5*x)) / (sin(x)-sin(2*x)-sin(4*x)+sin(5*x))');
    tmp$_430 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_431 = mapOf(to('hiddenGoalExpressions', listOf('(ctg(*(3;x)))')));
    tmp$_432 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_429, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_431, tmp$_430, void 0, void 0, void 0, 2.0);
    tmp$_433 = stringToStructureString('(sin(x-pi)*cos(x-2*pi)*sin(2*pi-x)) / (sin(pi/2-x)*ctg((3*pi)/2+x)*ctg(pi-x))');
    tmp$_434 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_435 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_433, void 0, void 0, void 0, '(^(sin(x);2))', void 0, void 0, void 0, void 0, void 0, tmp$_434, void 0, void 0, void 0, 2.6);
    tmp$_436 = stringToStructureString('(sin(x+pi)*cos((3*pi)/2-x)*tg(x-pi/2)) / (cos(pi/2+x)*cos((3*pi)/2+x)*tg(pi+x))');
    tmp$_437 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_438 = mapOf(to('hiddenGoalExpressions', listOf('(^(ctg(x);2))')));
    tmp$_439 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_436, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_438, tmp$_437, void 0, void 0, void 0, 2.6);
    tmp$_440 = stringToStructureString('(sin(0.3*pi)*cos(-2.8*pi)+cos(0.3*pi)*sin(-2.8*pi)) / (sin(0.3*pi)*sin(-4.3*pi) - cos(0.3*pi)*cos(2.3*pi))');
    tmp$_441 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_442 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_443 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_440, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_442, tmp$_441, void 0, void 0, void 0, 2.0);
    tmp$_444 = stringToStructureString('2*cos(x)-1-cos(2*x)');
    tmp$_445 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_446 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_444, void 0, void 0, void 0, '(*(4;cos(x);^(sin(/(x;2));2)))', void 0, void 0, void 0, void 0, void 0, tmp$_445, void 0, void 0, void 0, 5.3);
    tmp$_447 = stringToStructureString('16*sin((7*pi)/4) * cos((7*pi)/6) * tg((5*pi)/3) * ctg(-(4*pi)/3) * cos(pi/4) * cos(pi/6)');
    tmp$_448 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_449 = mapOf(to('hiddenGoalExpressions', listOf('(6)')));
    tmp$_450 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_447, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_449, tmp$_448, void 0, void 0, void 0, 5.0);
    tmp$_451 = stringToStructureString('((cos(4*x-3*pi))^2-4*(cos(2*x-pi))^2+3) / ((cos(4*x+3*pi))^2+4*(cos(2*x+pi))^2-1)');
    tmp$_452 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_453 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_451, void 0, void 0, void 0, '(^(tg(*(2;x));4))', void 0, void 0, void 0, void 0, void 0, tmp$_452, void 0, void 0, void 0, 6.1);
    tmp$_454 = stringToStructureString('((sin(x-pi))^2 - 4*(cos(3*pi/2-x/2))^2) / ((cos(x-5*pi/2))^2+4*(cos(pi/2+x/2))^2-4)');
    tmp$_455 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    this.trigonometrySumProdSinCos = listOf_0([tmp$_402, tmp$_403, tmp$_404, tmp$_405, tmp$_406, tmp$_407, tmp$_408, tmp$_412, tmp$_416, tmp$_420, tmp$_424, tmp$_428, tmp$_432, tmp$_435, tmp$_439, tmp$_443, tmp$_446, tmp$_450, tmp$_453, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_454, void 0, void 0, void 0, '(^(tg(/(x;2));4))', void 0, void 0, void 0, void 0, void 0, tmp$_455, void 0, void 0, void 0, 6.2)]);
    tmp$_456 = stringToStructureString('((cos(2*x)-cos(4*x))*ctg(3*x)) / (cos(2*x)+cos(4*x))');
    tmp$_457 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_458 = mapOf(to('hiddenGoalExpressions', listOf('(tg(x))')));
    tmp$_459 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_456, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_458, tmp$_457, void 0, void 0, void 0, 1.9);
    tmp$_460 = stringToStructureString('(tg((4*pi)/18)+ctg((2*pi)/18))*cos((7*pi)/18)*cos((4*pi)/18)');
    tmp$_461 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_462 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_460, void 0, void 0, void 0, '(sin(/(*(11;pi);18)))', void 0, void 0, void 0, void 0, void 0, tmp$_461, void 0, void 0, void 0, 2.5);
    tmp$_463 = stringToStructureString('cos(x+pi/2)*cos(3*pi-x)+sin(x+(5*pi)/2)*sin(3*pi+x)');
    tmp$_464 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_465 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_466 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_463, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_465, tmp$_464, void 0, void 0, void 0, 2.0);
    tmp$_467 = stringToStructureString('(cos(x)-cos(3*x)+cos(5*x)-cos(7*x)) / (sin(x)+sin(3*x)+sin(5*x)+sin(7*x))');
    tmp$_468 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_469 = mapOf(to('hiddenGoalExpressions', listOf('(tg(x))')));
    tmp$_470 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_467, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_469, tmp$_468, void 0, void 0, void 0, 2.0);
    tmp$_471 = stringToStructureString('16*sin((11*pi)/6) * cos(-(13*pi)/6) * tg(-(5*pi)/4) * ctg(-(5*pi)/3)');
    tmp$_472 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_473 = mapOf(to('hiddenGoalExpressions', listOf('(4)')));
    this.trigonometrySumProdSinCosCheckYourself = listOf_0([tmp$_459, tmp$_462, tmp$_466, tmp$_470, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_471, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_473, tmp$_472, void 0, void 0, void 0, 5.0)]);
    tmp$_474 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_475 = new TaskITR(void 0, void 0, void 0, void 0, 'Tangent of Sum', '\u0422\u0430\u043D\u0433\u0435\u043D\u0441 \u0441\u0443\u043C\u043C\u044B', void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_DEDUCE_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(tg(+(a;b)))', void 0, void 0, void 0, '(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))', void 0, void 0, void 0, void 0, void 0, tmp$_474, void 0, void 0, void 0, 4.5);
    tmp$_476 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_477 = new TaskITR(void 0, void 0, void 0, void 0, 'Tangent of Difference', '\u0422\u0430\u043D\u0433\u0435\u043D\u0441 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438', void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_DEDUCE_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))', void 0, void 0, void 0, '(tg(+(a;-(b))))', void 0, void 0, void 0, void 0, void 0, tmp$_476, void 0, void 0, void 0, 4.5);
    tmp$_478 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_479 = new TaskITR(void 0, void 0, void 0, void 0, 'Cotangent of Sum', '\u041A\u043E\u0442\u0430\u043D\u0433\u0435\u043D\u0441 \u0441\u0443\u043C\u043C\u044B', void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_DEDUCE_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))', void 0, void 0, void 0, '(ctg(+(a;b)))', void 0, void 0, void 0, void 0, void 0, tmp$_478, void 0, void 0, void 0, 4.5);
    tmp$_480 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_481 = new TaskITR(void 0, void 0, void 0, void 0, 'Cotangent of Difference', '\u041A\u043E\u0442\u0430\u043D\u0433\u0435\u043D\u0441 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438', void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_DEDUCE_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(ctg(+(a;-(b))))', void 0, void 0, void 0, '(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))', void 0, void 0, void 0, void 0, void 0, tmp$_480, void 0, void 0, void 0, 4.5);
    tmp$_482 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    tmp$_483 = new TaskITR(void 0, void 0, void 0, void 0, 'Double Angle Sine through Tangent', '\u0421\u0438\u043D\u0443\u0441 \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0443\u0433\u043B\u0430 \u0447\u0435\u0440\u0435\u0437 \u0442\u0430\u043D\u0433\u0435\u043D\u0441', void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_DEDUCE_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(sin(*(2;a)))', void 0, void 0, void 0, '(/(*(2;tg(a));+(1;^(tg(a);2))))', void 0, void 0, void 0, void 0, void 0, tmp$_482, void 0, void 0, void 0, 4.0);
    tmp$_484 = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    this.tgCtgOfSumDiffToSinCosFormulasDeducing = listOf_0([tmp$_475, tmp$_477, tmp$_479, tmp$_481, tmp$_483, new TaskITR(void 0, void 0, void 0, void 0, 'Double Angle Cosine through Tangent', '\u041A\u043E\u0441\u0438\u043D\u0443\u0441 \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0443\u0433\u043B\u0430 \u0447\u0435\u0440\u0435\u0437 \u0442\u0430\u043D\u0433\u0435\u043D\u0441', void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_DEDUCE_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))', void 0, void 0, void 0, '(cos(*(2;a)))', void 0, void 0, void 0, void 0, void 0, tmp$_484, void 0, void 0, void 0, 4.0)]);
    tmp$_521 = this.tgCtgOfSumDiffToSinCosFormulasDeducing;
    tmp$_485 = stringToStructureString('(1+tg(pi/24)*tg(13*pi/24)) / (tg(13*pi/24) - tg(pi/24))');
    tmp$_486 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_487 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_488 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_485, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_487, tmp$_486, void 0, void 0, void 0, 2.0);
    tmp$_489 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_490 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_491 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(/(+((^(ctg(/(pi;8));2));-(1));*(2;ctg(/(pi;8)))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_490, tmp$_489, void 0, void 0, void 0, 2.0);
    tmp$_492 = stringToStructureString('( (tg(5*pi/24) + tg(pi/8)) /  ( (sin(pi/8))^2 + (sin(3*pi/8))^2 - tg(pi/8)*tg(5*pi/24) ) )^2');
    tmp$_493 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_494 = mapOf(to('hiddenGoalExpressions', listOf('(3)')));
    tmp$_495 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_492, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_494, tmp$_493, void 0, void 0, void 0, 2.3);
    tmp$_496 = stringToStructureString('(tg(pi/3+x)*tg(pi/6+5*x) - 1) / (tg(pi/3+x)+ctg(pi/3-5*x))');
    tmp$_497 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_498 = mapOf(to('hiddenGoalExpressions', listOf('(tg(*(6;x)))')));
    tmp$_499 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_496, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_498, tmp$_497, void 0, void 0, void 0, 3.4);
    tmp$_500 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_501 = mapOf(to('hiddenGoalExpressions', listOf('(cos(*(2;x)))')));
    tmp$_502 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(/(2;+(tg(+(/(*(5;\u03C0);4);x));tg(+(/(*(5;\u03C0);4);-(x))))))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_501, tmp$_500, void 0, void 0, void 0, 3.5);
    tmp$_503 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_504 = mapOf(to('hiddenGoalExpressions', listOf('(tg(x))')));
    tmp$_505 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(/(+(1;sin(*(2;x));-(cos(*(2;x))));+(1;sin(*(2;x));cos(*(2;x)))))', void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_504, tmp$_503, void 0, void 0, void 0, 5.5);
    tmp$_506 = stringToStructureString('27^0.5/(2*cos((5*pi)/18)) - 6 * sin(pi/18)');
    tmp$_507 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_508 = mapOf(to('hiddenGoalExpressions', listOf('(3)')));
    tmp$_509 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_506, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_508, tmp$_507, void 0, void 0, void 0, 5.5);
    tmp$_510 = stringToStructureString('((cos(5*pi/8+x))^2 - (sin(15*pi/8+x))^2) / cos((7*pi)/4)');
    tmp$_511 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_512 = mapOf(to('hiddenGoalExpressions', listOf('(sin(*(2;x)))')));
    tmp$_513 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_510, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_512, tmp$_511, void 0, void 0, void 0, 5.5);
    tmp$_514 = stringToStructureString('2*(cos(8*x-3*pi) - 1) / (tg(2*x) - ctg(2*x))');
    tmp$_515 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_516 = mapOf(to('hiddenGoalExpressions', listOf('(sin(*(8;x)))')));
    tmp$_517 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_514, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_516, tmp$_515, void 0, void 0, void 0, 5.5);
    tmp$_518 = stringToStructureString('tg(6*x)-tg(4*x)-tg(2*x)');
    tmp$_519 = stringToStructureString('tg(6*x)*tg(4*x)*tg(2*x)');
    tmp$_520 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    this.tgCtgSinCosCompositeTasks = plus(tmp$_521, listOf_0([tmp$_488, tmp$_491, tmp$_495, tmp$_499, tmp$_502, tmp$_505, tmp$_509, tmp$_513, tmp$_517, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code]), tmp$_518, void 0, void 0, 'simplification', tmp$_519, void 0, void 0, void 0, void 0, void 0, tmp$_520, void 0, void 0, void 0, 6.4, void 0, void 0, void 0, mapOf(to('data', listOf_0([new HintITR(void 0, void 0, void 0, '$$ tg\\left(6\\cdot x\\right)-tg\\left(4\\cdot x\\right)=\\frac{\\sin \\left(2\\cdot x\\right)}{\\cos \\left(6\\cdot x\\right)\\cos \\left(4\\cdot x\\right)}$$'), new HintITR(void 0, void 0, void 0, '$$ tg\\left(2\\cdot x\\right)=\\frac{\\sin \\left(2\\cdot x\\right)}{\\cos \\left(2\\cdot x\\right)}$$')]))))]));
    tmp$_522 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_523 = mapOf(to('hiddenGoalExpressions', listOf('(1)')));
    tmp$_524 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(/(+(*(ctg(*(13;/(\u03C0;8)));ctg(*(3;/(\u03C0;8))));^(cos(/(\u03C0;8));2);^(cos(*(5;/(\u03C0;8)));2));+(ctg(*(3;/(\u03C0;8)));-(ctg(*(13;/(\u03C0;8)))))))', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_523, tmp$_522, void 0, void 0, void 0, 2.3);
    tmp$_525 = stringToStructureString('(1 - tg(pi/4+x)*tg(pi/4+3*x)) / (tg(pi/4+x)+ctg(pi/4-3*x)) + tg(4*x)');
    tmp$_526 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_527 = mapOf(to('hiddenGoalExpressions', listOf('(0)')));
    tmp$_528 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_525, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, tmp$_527, tmp$_526, void 0, void 0, void 0, 3.4);
    tmp$_529 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_530 = listOf(new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(tg(*(2;x)))', '(5)', 2, false, false, false, true, 'ORIGINAL'));
    tmp$_531 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance().code, TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code]), '(*(+(sin(*(4;x));*(cos(*(4;x));ctg(*(2;x)))));100)', void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, void 0, tmp$_529, tmp$_530, void 0, void 0, 0.7);
    tmp$_532 = stringToStructureString('2*(1/(2*cos(pi*4/9)) - 2* sin(pi*7/18))');
    tmp$_533 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    tmp$_534 = mapOf(to('hiddenGoalExpressions', listOf('(2)')));
    tmp$_535 = new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), tmp$_532, void 0, void 0, 'computation', void 0, void 0, void 0, void 0, void 0, tmp$_534, tmp$_533, void 0, void 0, void 0, 5.5);
    tmp$_536 = listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry'));
    this.tgCtgSinCosCompositeTasksCheckYourself = listOf_0([tmp$_524, tmp$_528, tmp$_531, tmp$_535, new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance().code, TaskTagCode$FRACTION_getInstance().code]), '(+(/(1;(+(tg(*(3;a));tg(a))));-(/(1;(+(ctg(*(3;a));ctg(a)))))))', void 0, void 0, void 0, '(ctg(*(4;a)))', void 0, void 0, void 0, void 0, void 0, tmp$_536, void 0, void 0, void 0, 5.5)]);
    this.trigonometryStepByStepTasks = plus(plus(plus(plus(plus(plus(plus(plus(plus(plus(plus(this.definitionOfTrigonometryFunctions, this.pythagoreanIdentity), this.pythagoreanIdentityCheckYourself), this.trigonometryReflections), this.trigonometryReflectionsCheckYourself), this.trigonometrySinCosAngleSumDiff), this.trigonometrySinCosAngleSumDiffWithDoubleArgs), this.trigonometrySinCosAngleSumDiffWithDoubleArgsCheckYourself), this.trigonometrySumProdSinCos), this.trigonometrySumProdSinCosCheckYourself), this.tgCtgSinCosCompositeTasks), this.tgCtgSinCosCompositeTasksCheckYourself);
  }
  TrigonometryStepByStep$Companion.prototype.basicTrigonometryFormulaComputationTask_puj7f4$ = function (originalExpressionStructureString, goalPattern) {
    if (goalPattern === void 0)
      goalPattern = '+:0-1(-:1):?:?R';
    var tmp$;
    tmp$ = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    return new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, mutableSetOf([TaskTagCode$FORMULA_BASE_getInstance().code]), originalExpressionStructureString, void 0, void 0, 'computation', void 0, void 0, void 0, goalPattern, void 0, void 0, tmp$, void 0, void 0, void 0, 0.1, void 0, void 0, void 0, void 0, defaultOtherCheckSolutionData);
  };
  TrigonometryStepByStep$Companion.prototype.basicTrigonometryFormulaSimplificationTask_nkmm1q$ = function (originalExpressionStructureString, otherGoalData, nameEn, nameRu) {
    var tmp$;
    tmp$ = listOf(new RulePackLinkITR(void 0, 'BasicTrigonometricDefinitionsIdentity'));
    return new TaskITR(void 0, void 0, void 0, void 0, void 0, void 0, 'Simplify by formula', '\u0423\u043F\u0440\u043E\u0441\u0442\u0438\u0442\u044C \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435', 'Simplify by formula', '\u0423\u043F\u0440\u043E\u0441\u0442\u0438\u0442\u044C \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435', void 0, mutableSetOf([TaskTagCode$FORMULA_BASE_getInstance().code]), originalExpressionStructureString, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, otherGoalData, tmp$, void 0, void 0, void 0, 0.1);
  };
  TrigonometryStepByStep$Companion.prototype.trigonometrySinCosSumReductionFormulaSimplificationTask_nkmm1q$ = function (originalExpressionStructureString, otherGoalData, nameEn, nameRu) {
    var tmp$;
    tmp$ = listOf(new RulePackLinkITR(void 0, 'TrigonometrySinCosSumReduction'));
    return new TaskITR(void 0, void 0, void 0, void 0, nameEn, nameRu, 'Expand by formula', '\u0420\u0430\u0441\u043A\u0440\u044B\u0442\u044C \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435', "Expand by formula '" + nameEn + "'", "\u0420\u0430\u0441\u043A\u0440\u044B\u0442\u044C \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435 '" + nameRu + "'", void 0, mutableSetOf([TaskTagCode$FORMULA_BASE_getInstance().code]), originalExpressionStructureString, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, otherGoalData, tmp$, void 0, void 0, void 0, 0.1);
  };
  TrigonometryStepByStep$Companion.prototype.trigonometrySumProdSinCosFormulaSimplificationTask_nkmm1q$ = function (originalExpressionStructureString, otherGoalData, nameEn, nameRu) {
    var tmp$;
    tmp$ = listOf(new RulePackLinkITR(void 0, 'Trigonometry'));
    return new TaskITR(void 0, void 0, void 0, void 0, nameEn, nameRu, 'Expand by formula', '\u0420\u0430\u0441\u043A\u0440\u044B\u0442\u044C \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435', "Expand by formula '" + nameEn + "'", "\u0420\u0430\u0441\u043A\u0440\u044B\u0442\u044C \u043F\u043E \u0444\u043E\u0440\u043C\u0443\u043B\u0435 '" + nameRu + "'", void 0, mutableSetOf([TaskTagCode$FORMULA_BASE_getInstance().code]), originalExpressionStructureString, void 0, void 0, 'simplification', void 0, void 0, void 0, void 0, void 0, otherGoalData, tmp$, void 0, void 0, void 0, 0.1);
  };
  TrigonometryStepByStep$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TrigonometryStepByStep$Companion_instance = null;
  function TrigonometryStepByStep$Companion_getInstance() {
    if (TrigonometryStepByStep$Companion_instance === null) {
      new TrigonometryStepByStep$Companion();
    }
    return TrigonometryStepByStep$Companion_instance;
  }
  TrigonometryStepByStep.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TrigonometryStepByStep',
    interfaces: []
  };
  function TaskTagCode(name, ordinal, code, nameEn, nameRu, descriptionEn, descriptionRu) {
    if (descriptionEn === void 0)
      descriptionEn = nameEn;
    if (descriptionRu === void 0)
      descriptionRu = nameRu;
    Enum.call(this);
    this.code = code;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function TaskTagCode_initFields() {
    TaskTagCode_initFields = function () {
    };
    TaskTagCode$PROOF_instance = new TaskTagCode('PROOF', 0, 'Proof', 'Proof', '\u0414\u043E\u043A\u0430\u0437\u0430\u0442\u0435\u043B\u044C\u0441\u0442\u0432\u043E');
    TaskTagCode$SIMPLIFICATION_instance = new TaskTagCode('SIMPLIFICATION', 1, 'Simplification', 'Simplification', '\u0423\u043F\u0440\u043E\u0449\u0435\u043D\u0438\u0435');
    TaskTagCode$COMPUTATION_instance = new TaskTagCode('COMPUTATION', 2, 'Computation', 'Computation', '\u0412\u044B\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u0435');
    TaskTagCode$EQUATION_instance = new TaskTagCode('EQUATION', 3, 'Equation', 'Equation', '\u0423\u0440\u0430\u0432\u043D\u0435\u043D\u0438\u0435');
    TaskTagCode$FACTORIZATION_instance = new TaskTagCode('FACTORIZATION', 4, 'Factorization', 'Factorization', '\u0420\u0430\u0437\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u043D\u0430 \u043C\u043D\u043E\u0436\u0438\u0442\u0435\u043B\u0438');
    TaskTagCode$REDUCE_instance = new TaskTagCode('REDUCE', 5, 'Reduce', 'Factorization', '\u0420\u0430\u0437\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u043D\u0430 \u043C\u043D\u043E\u0436\u0438\u0442\u0435\u043B\u0438');
    TaskTagCode$FORMULA_BASE_instance = new TaskTagCode('FORMULA_BASE', 6, 'FormulaBase', 'Formula Application Task', '\u0417\u0430\u0434\u0430\u0447\u0430 \u043D\u0430 \u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D\u0438\u0435 \u0444\u043E\u0440\u043C\u0443\u043B\u044B');
    TaskTagCode$FORMULA_DEDUCE_instance = new TaskTagCode('FORMULA_DEDUCE', 7, 'FormulaDeduce', 'Formula Deducing Task', '\u0417\u0430\u0434\u0430\u0447\u0430, \u0432 \u043A\u043E\u0442\u043E\u0440\u043E\u0439 \u0432\u044B\u0432\u043E\u0434\u0438\u0442\u0441\u044F \u0444\u043E\u0440\u043C\u0443\u043B\u0430');
    TaskTagCode$TRICK_instance = new TaskTagCode('TRICK', 8, 'Trick', 'Task with Trick', '\u0417\u0430\u0434\u0430\u0447\u0430 \u0441 \u0438\u0437\u044E\u043C\u0438\u043D\u043A\u043E\u0439');
    TaskTagCode$SHORT_MULTIPLICATION_instance = new TaskTagCode('SHORT_MULTIPLICATION', 9, 'ShortMultiplication', 'Short Multiplication', '\u0421\u043E\u043A\u0440\u0430\u0449\u0435\u043D\u043D\u043E\u0435 \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435');
    TaskTagCode$SUM_SQRS_instance = new TaskTagCode('SUM_SQRS', 10, 'SumSqrs', 'Sum of Squares', '\u0421\u0443\u043C\u043C\u0430 \u043A\u0432\u0430\u0434\u0440\u0430\u0442\u043E\u0432');
    TaskTagCode$DIFF_SQRS_instance = new TaskTagCode('DIFF_SQRS', 11, 'DiffSqrs', 'Difference of Squares', '\u0420\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u043A\u0432\u0430\u0434\u0440\u0430\u0442\u043E\u0432');
    TaskTagCode$SQR_SUM_instance = new TaskTagCode('SQR_SUM', 12, 'SqrSum', 'Square of Sum', '\u041A\u0432\u0430\u0434\u0440\u0430\u0442 \u0441\u0443\u043C\u043C\u044B');
    TaskTagCode$SQR_DIFF_instance = new TaskTagCode('SQR_DIFF', 13, 'SqrDiff', 'Square of Difference', '\u041A\u0432\u0430\u0434\u0440\u0430\u0442 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438');
    TaskTagCode$SUM_CUBES_instance = new TaskTagCode('SUM_CUBES', 14, 'SumCubes', 'Sum of Cubes', '\u0421\u0443\u043C\u043C\u0430 \u043A\u0443\u0431\u043E\u0432');
    TaskTagCode$DIFF_CUBES_instance = new TaskTagCode('DIFF_CUBES', 15, 'DiffCubes', 'Difference of Cubes', '\u0420\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u043A\u0443\u0431\u043E\u0432');
    TaskTagCode$CUBE_SUM_instance = new TaskTagCode('CUBE_SUM', 16, 'CubeSum', 'Cube of Sum', '\u041A\u0443\u0431 \u0441\u0443\u043C\u043C\u044B');
    TaskTagCode$CUBE_DIFF_instance = new TaskTagCode('CUBE_DIFF', 17, 'CubeDiff', 'Cube of Difference', '\u041A\u0443\u0431 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438');
    TaskTagCode$FRACTION_instance = new TaskTagCode('FRACTION', 18, 'Fraction', 'Fraction', '\u0414\u0440\u043E\u0431\u044C');
    TaskTagCode$TRIGONOMETRY_instance = new TaskTagCode('TRIGONOMETRY', 19, 'Trigonometry', 'Trigonometry', '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F');
    TaskTagCode$INVERSE_TRIGONOMETRY_instance = new TaskTagCode('INVERSE_TRIGONOMETRY', 20, 'InverseTrigonometry', 'Inverse Trigonometry Functions', '\u041E\u0431\u0440\u0430\u0442\u043D\u044B\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0438');
    TaskTagCode$DEGREES_instance = new TaskTagCode('DEGREES', 21, 'Degrees', 'Degrees of Angles', '\u0413\u0440\u0430\u0434\u0443\u0441\u043D\u044B\u0435 \u043C\u0443\u0440\u044B \u0443\u0433\u043B\u043E\u0432');
    TaskTagCode$PYTHAGOREAN_IDENTITY_instance = new TaskTagCode('PYTHAGOREAN_IDENTITY', 22, 'PythagoreanIdentity', 'Pythagorean Trigonometric Identity', '\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0442\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u043E');
    TaskTagCode$TRIGONOMETRY_ANGLE_SUM_instance = new TaskTagCode('TRIGONOMETRY_ANGLE_SUM', 23, 'TrigonometryAngleSum', 'Expanding of Sum or Difference of Angle in Trigonometry Function', '\u0420\u0430\u0441\u043A\u0440\u044B\u0442\u0438\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u043E\u0442 \u0441\u0443\u043C\u043C\u044B \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438');
    TaskTagCode$TRIGONOMETRY_SUM_instance = new TaskTagCode('TRIGONOMETRY_SUM', 24, 'TrigonometrySum', 'Expanding of Sum or Difference of Trigonometry Functions', '\u0420\u0430\u0441\u043A\u0440\u044B\u0442\u0438\u0435 \u0441\u0443\u043C\u043C\u044B \u0438\u043B\u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439');
    TaskTagCode$TRIGONOMETRY_PRODUCT_instance = new TaskTagCode('TRIGONOMETRY_PRODUCT', 25, 'TrigonometryProduct', 'Expanding of Product of Trigonometry Functions', '\u0420\u0430\u0441\u043A\u0440\u044B\u0442\u0438\u0435 \u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439');
    TaskTagCode$TRIGONOMETRY_REFLECTIONS_instance = new TaskTagCode('TRIGONOMETRY_REFLECTIONS', 26, 'TrigonometryReflections', 'Trigonometry Reflection Formulas', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u0432 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0438');
    TaskTagCode$LOGARITHM_instance = new TaskTagCode('LOGARITHM', 27, 'Logarithm', 'Logarithm', '\u041B\u043E\u0433\u0430\u0440\u0438\u0444\u043C');
    TaskTagCode$SET_instance = new TaskTagCode('SET', 28, 'Set', 'Set Theory', '\u0422\u0435\u043E\u0440\u0438\u044F \u043C\u043D\u043E\u0436\u0435\u0441\u0442\u0432');
    TaskTagCode$LOGIC_instance = new TaskTagCode('LOGIC', 29, 'Logic', 'Logic', '\u041B\u043E\u0433\u0438\u043A\u0430');
    TaskTagCode$NORMAL_FORMS_instance = new TaskTagCode('NORMAL_FORMS', 30, 'NormalForms', 'Normal Forms', '\u041D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u044B\u0435 \u0444\u043E\u0440\u043C\u044B');
    TaskTagCode$CNF_instance = new TaskTagCode('CNF', 31, 'CNF', 'CNF', '\u041A\u041D\u0424');
    TaskTagCode$DNF_instance = new TaskTagCode('DNF', 32, 'DNF', 'DNF', '\u0414\u041D\u0424');
    TaskTagCode$RESOLUTION_instance = new TaskTagCode('RESOLUTION', 33, 'Resolution', 'Resolution', '\u0420\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0438');
    TaskTagCode$COMBINATORICS_instance = new TaskTagCode('COMBINATORICS', 34, 'Combinatorics', 'Combinatorics', '\u041A\u043E\u043C\u0431\u0438\u043D\u0430\u0442\u043E\u0440\u0438\u043A\u0430');
  }
  var TaskTagCode$PROOF_instance;
  function TaskTagCode$PROOF_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$PROOF_instance;
  }
  var TaskTagCode$SIMPLIFICATION_instance;
  function TaskTagCode$SIMPLIFICATION_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$SIMPLIFICATION_instance;
  }
  var TaskTagCode$COMPUTATION_instance;
  function TaskTagCode$COMPUTATION_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$COMPUTATION_instance;
  }
  var TaskTagCode$EQUATION_instance;
  function TaskTagCode$EQUATION_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$EQUATION_instance;
  }
  var TaskTagCode$FACTORIZATION_instance;
  function TaskTagCode$FACTORIZATION_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$FACTORIZATION_instance;
  }
  var TaskTagCode$REDUCE_instance;
  function TaskTagCode$REDUCE_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$REDUCE_instance;
  }
  var TaskTagCode$FORMULA_BASE_instance;
  function TaskTagCode$FORMULA_BASE_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$FORMULA_BASE_instance;
  }
  var TaskTagCode$FORMULA_DEDUCE_instance;
  function TaskTagCode$FORMULA_DEDUCE_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$FORMULA_DEDUCE_instance;
  }
  var TaskTagCode$TRICK_instance;
  function TaskTagCode$TRICK_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$TRICK_instance;
  }
  var TaskTagCode$SHORT_MULTIPLICATION_instance;
  function TaskTagCode$SHORT_MULTIPLICATION_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$SHORT_MULTIPLICATION_instance;
  }
  var TaskTagCode$SUM_SQRS_instance;
  function TaskTagCode$SUM_SQRS_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$SUM_SQRS_instance;
  }
  var TaskTagCode$DIFF_SQRS_instance;
  function TaskTagCode$DIFF_SQRS_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$DIFF_SQRS_instance;
  }
  var TaskTagCode$SQR_SUM_instance;
  function TaskTagCode$SQR_SUM_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$SQR_SUM_instance;
  }
  var TaskTagCode$SQR_DIFF_instance;
  function TaskTagCode$SQR_DIFF_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$SQR_DIFF_instance;
  }
  var TaskTagCode$SUM_CUBES_instance;
  function TaskTagCode$SUM_CUBES_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$SUM_CUBES_instance;
  }
  var TaskTagCode$DIFF_CUBES_instance;
  function TaskTagCode$DIFF_CUBES_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$DIFF_CUBES_instance;
  }
  var TaskTagCode$CUBE_SUM_instance;
  function TaskTagCode$CUBE_SUM_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$CUBE_SUM_instance;
  }
  var TaskTagCode$CUBE_DIFF_instance;
  function TaskTagCode$CUBE_DIFF_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$CUBE_DIFF_instance;
  }
  var TaskTagCode$FRACTION_instance;
  function TaskTagCode$FRACTION_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$FRACTION_instance;
  }
  var TaskTagCode$TRIGONOMETRY_instance;
  function TaskTagCode$TRIGONOMETRY_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$TRIGONOMETRY_instance;
  }
  var TaskTagCode$INVERSE_TRIGONOMETRY_instance;
  function TaskTagCode$INVERSE_TRIGONOMETRY_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$INVERSE_TRIGONOMETRY_instance;
  }
  var TaskTagCode$DEGREES_instance;
  function TaskTagCode$DEGREES_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$DEGREES_instance;
  }
  var TaskTagCode$PYTHAGOREAN_IDENTITY_instance;
  function TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$PYTHAGOREAN_IDENTITY_instance;
  }
  var TaskTagCode$TRIGONOMETRY_ANGLE_SUM_instance;
  function TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$TRIGONOMETRY_ANGLE_SUM_instance;
  }
  var TaskTagCode$TRIGONOMETRY_SUM_instance;
  function TaskTagCode$TRIGONOMETRY_SUM_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$TRIGONOMETRY_SUM_instance;
  }
  var TaskTagCode$TRIGONOMETRY_PRODUCT_instance;
  function TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$TRIGONOMETRY_PRODUCT_instance;
  }
  var TaskTagCode$TRIGONOMETRY_REFLECTIONS_instance;
  function TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$TRIGONOMETRY_REFLECTIONS_instance;
  }
  var TaskTagCode$LOGARITHM_instance;
  function TaskTagCode$LOGARITHM_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$LOGARITHM_instance;
  }
  var TaskTagCode$SET_instance;
  function TaskTagCode$SET_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$SET_instance;
  }
  var TaskTagCode$LOGIC_instance;
  function TaskTagCode$LOGIC_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$LOGIC_instance;
  }
  var TaskTagCode$NORMAL_FORMS_instance;
  function TaskTagCode$NORMAL_FORMS_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$NORMAL_FORMS_instance;
  }
  var TaskTagCode$CNF_instance;
  function TaskTagCode$CNF_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$CNF_instance;
  }
  var TaskTagCode$DNF_instance;
  function TaskTagCode$DNF_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$DNF_instance;
  }
  var TaskTagCode$RESOLUTION_instance;
  function TaskTagCode$RESOLUTION_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$RESOLUTION_instance;
  }
  var TaskTagCode$COMBINATORICS_instance;
  function TaskTagCode$COMBINATORICS_getInstance() {
    TaskTagCode_initFields();
    return TaskTagCode$COMBINATORICS_instance;
  }
  TaskTagCode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TaskTagCode',
    interfaces: [Enum]
  };
  function TaskTagCode$values() {
    return [TaskTagCode$PROOF_getInstance(), TaskTagCode$SIMPLIFICATION_getInstance(), TaskTagCode$COMPUTATION_getInstance(), TaskTagCode$EQUATION_getInstance(), TaskTagCode$FACTORIZATION_getInstance(), TaskTagCode$REDUCE_getInstance(), TaskTagCode$FORMULA_BASE_getInstance(), TaskTagCode$FORMULA_DEDUCE_getInstance(), TaskTagCode$TRICK_getInstance(), TaskTagCode$SHORT_MULTIPLICATION_getInstance(), TaskTagCode$SUM_SQRS_getInstance(), TaskTagCode$DIFF_SQRS_getInstance(), TaskTagCode$SQR_SUM_getInstance(), TaskTagCode$SQR_DIFF_getInstance(), TaskTagCode$SUM_CUBES_getInstance(), TaskTagCode$DIFF_CUBES_getInstance(), TaskTagCode$CUBE_SUM_getInstance(), TaskTagCode$CUBE_DIFF_getInstance(), TaskTagCode$FRACTION_getInstance(), TaskTagCode$TRIGONOMETRY_getInstance(), TaskTagCode$INVERSE_TRIGONOMETRY_getInstance(), TaskTagCode$DEGREES_getInstance(), TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance(), TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance(), TaskTagCode$TRIGONOMETRY_SUM_getInstance(), TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance(), TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance(), TaskTagCode$LOGARITHM_getInstance(), TaskTagCode$SET_getInstance(), TaskTagCode$LOGIC_getInstance(), TaskTagCode$NORMAL_FORMS_getInstance(), TaskTagCode$CNF_getInstance(), TaskTagCode$DNF_getInstance(), TaskTagCode$RESOLUTION_getInstance(), TaskTagCode$COMBINATORICS_getInstance()];
  }
  TaskTagCode.values = TaskTagCode$values;
  function TaskTagCode$valueOf(name) {
    switch (name) {
      case 'PROOF':
        return TaskTagCode$PROOF_getInstance();
      case 'SIMPLIFICATION':
        return TaskTagCode$SIMPLIFICATION_getInstance();
      case 'COMPUTATION':
        return TaskTagCode$COMPUTATION_getInstance();
      case 'EQUATION':
        return TaskTagCode$EQUATION_getInstance();
      case 'FACTORIZATION':
        return TaskTagCode$FACTORIZATION_getInstance();
      case 'REDUCE':
        return TaskTagCode$REDUCE_getInstance();
      case 'FORMULA_BASE':
        return TaskTagCode$FORMULA_BASE_getInstance();
      case 'FORMULA_DEDUCE':
        return TaskTagCode$FORMULA_DEDUCE_getInstance();
      case 'TRICK':
        return TaskTagCode$TRICK_getInstance();
      case 'SHORT_MULTIPLICATION':
        return TaskTagCode$SHORT_MULTIPLICATION_getInstance();
      case 'SUM_SQRS':
        return TaskTagCode$SUM_SQRS_getInstance();
      case 'DIFF_SQRS':
        return TaskTagCode$DIFF_SQRS_getInstance();
      case 'SQR_SUM':
        return TaskTagCode$SQR_SUM_getInstance();
      case 'SQR_DIFF':
        return TaskTagCode$SQR_DIFF_getInstance();
      case 'SUM_CUBES':
        return TaskTagCode$SUM_CUBES_getInstance();
      case 'DIFF_CUBES':
        return TaskTagCode$DIFF_CUBES_getInstance();
      case 'CUBE_SUM':
        return TaskTagCode$CUBE_SUM_getInstance();
      case 'CUBE_DIFF':
        return TaskTagCode$CUBE_DIFF_getInstance();
      case 'FRACTION':
        return TaskTagCode$FRACTION_getInstance();
      case 'TRIGONOMETRY':
        return TaskTagCode$TRIGONOMETRY_getInstance();
      case 'INVERSE_TRIGONOMETRY':
        return TaskTagCode$INVERSE_TRIGONOMETRY_getInstance();
      case 'DEGREES':
        return TaskTagCode$DEGREES_getInstance();
      case 'PYTHAGOREAN_IDENTITY':
        return TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance();
      case 'TRIGONOMETRY_ANGLE_SUM':
        return TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance();
      case 'TRIGONOMETRY_SUM':
        return TaskTagCode$TRIGONOMETRY_SUM_getInstance();
      case 'TRIGONOMETRY_PRODUCT':
        return TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance();
      case 'TRIGONOMETRY_REFLECTIONS':
        return TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance();
      case 'LOGARITHM':
        return TaskTagCode$LOGARITHM_getInstance();
      case 'SET':
        return TaskTagCode$SET_getInstance();
      case 'LOGIC':
        return TaskTagCode$LOGIC_getInstance();
      case 'NORMAL_FORMS':
        return TaskTagCode$NORMAL_FORMS_getInstance();
      case 'CNF':
        return TaskTagCode$CNF_getInstance();
      case 'DNF':
        return TaskTagCode$DNF_getInstance();
      case 'RESOLUTION':
        return TaskTagCode$RESOLUTION_getInstance();
      case 'COMBINATORICS':
        return TaskTagCode$COMBINATORICS_getInstance();
      default:throwISE('No enum constant mathhelper.twf.defaultcontent.TaskTagCode.' + name);
    }
  }
  TaskTagCode.valueOf_61zpoe$ = TaskTagCode$valueOf;
  function TaskSetTagCode(name, ordinal, code, nameEn, nameRu, descriptionEn, descriptionRu) {
    if (descriptionEn === void 0)
      descriptionEn = nameEn;
    if (descriptionRu === void 0)
      descriptionRu = nameRu;
    Enum.call(this);
    this.code = code;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function TaskSetTagCode_initFields() {
    TaskSetTagCode_initFields = function () {
    };
    TaskSetTagCode$TRIGONOMETRY_instance = new TaskSetTagCode('TRIGONOMETRY', 0, 'Trigonometry', 'Trigonometry', '\u0422\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u044F');
    TaskSetTagCode$LOGIC_instance = new TaskSetTagCode('LOGIC', 1, 'Logic', 'Logic', '\u041B\u043E\u0433\u0438\u043A\u0430');
    TaskSetTagCode$SET_instance = new TaskSetTagCode('SET', 2, 'Set', 'Set Theory', '\u0422\u0435\u043E\u0440\u0438\u044F \u043C\u043D\u043E\u0436\u0435\u0441\u0442\u0432');
    TaskSetTagCode$COMBINATORICS_instance = new TaskSetTagCode('COMBINATORICS', 3, 'Combinatorics', 'Combinatorics', '\u041A\u043E\u043C\u0431\u0438\u043D\u0430\u0442\u043E\u0440\u0438\u043A\u0430');
    TaskSetTagCode$NORMAL_FORMS_instance = new TaskSetTagCode('NORMAL_FORMS', 4, 'NormalForms', 'Normal Forms', '\u041D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u044B\u0435 \u0444\u043E\u0440\u043C\u044B');
    TaskSetTagCode$RESOLUTION_instance = new TaskSetTagCode('RESOLUTION', 5, 'Resolution', 'Resolution', '\u0420\u0435\u0437\u043E\u043B\u044E\u0446\u0438\u0438');
    TaskSetTagCode$CHECK_YOURSELF_instance = new TaskSetTagCode('CHECK_YOURSELF', 6, 'CheckYourself', 'Check Yourself', '\u041F\u0440\u043E\u0432\u0435\u0440\u044C \u0441\u0435\u0431\u044F');
    TaskSetTagCode$STEP_BY_STEP_instance = new TaskSetTagCode('STEP_BY_STEP', 7, 'StepByStep', 'Step by Step', '\u0428\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043E\u043C');
    TaskSetTagCode$TRAIN_SET_instance = new TaskSetTagCode('TRAIN_SET', 8, 'TrainSet', 'Train Set', '\u0422\u0440\u0435\u043D\u0438\u0440\u043E\u0432\u043A\u0430');
    TaskSetTagCode$EXTRAORDINARY_instance = new TaskSetTagCode('EXTRAORDINARY', 9, 'Extraordinary', 'Extraordinary', '\u041D\u0435\u043E\u0431\u044B\u0447\u043D\u043E\u0435');
  }
  var TaskSetTagCode$TRIGONOMETRY_instance;
  function TaskSetTagCode$TRIGONOMETRY_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$TRIGONOMETRY_instance;
  }
  var TaskSetTagCode$LOGIC_instance;
  function TaskSetTagCode$LOGIC_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$LOGIC_instance;
  }
  var TaskSetTagCode$SET_instance;
  function TaskSetTagCode$SET_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$SET_instance;
  }
  var TaskSetTagCode$COMBINATORICS_instance;
  function TaskSetTagCode$COMBINATORICS_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$COMBINATORICS_instance;
  }
  var TaskSetTagCode$NORMAL_FORMS_instance;
  function TaskSetTagCode$NORMAL_FORMS_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$NORMAL_FORMS_instance;
  }
  var TaskSetTagCode$RESOLUTION_instance;
  function TaskSetTagCode$RESOLUTION_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$RESOLUTION_instance;
  }
  var TaskSetTagCode$CHECK_YOURSELF_instance;
  function TaskSetTagCode$CHECK_YOURSELF_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$CHECK_YOURSELF_instance;
  }
  var TaskSetTagCode$STEP_BY_STEP_instance;
  function TaskSetTagCode$STEP_BY_STEP_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$STEP_BY_STEP_instance;
  }
  var TaskSetTagCode$TRAIN_SET_instance;
  function TaskSetTagCode$TRAIN_SET_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$TRAIN_SET_instance;
  }
  var TaskSetTagCode$EXTRAORDINARY_instance;
  function TaskSetTagCode$EXTRAORDINARY_getInstance() {
    TaskSetTagCode_initFields();
    return TaskSetTagCode$EXTRAORDINARY_instance;
  }
  TaskSetTagCode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TaskSetTagCode',
    interfaces: [Enum]
  };
  function TaskSetTagCode$values() {
    return [TaskSetTagCode$TRIGONOMETRY_getInstance(), TaskSetTagCode$LOGIC_getInstance(), TaskSetTagCode$SET_getInstance(), TaskSetTagCode$COMBINATORICS_getInstance(), TaskSetTagCode$NORMAL_FORMS_getInstance(), TaskSetTagCode$RESOLUTION_getInstance(), TaskSetTagCode$CHECK_YOURSELF_getInstance(), TaskSetTagCode$STEP_BY_STEP_getInstance(), TaskSetTagCode$TRAIN_SET_getInstance(), TaskSetTagCode$EXTRAORDINARY_getInstance()];
  }
  TaskSetTagCode.values = TaskSetTagCode$values;
  function TaskSetTagCode$valueOf(name) {
    switch (name) {
      case 'TRIGONOMETRY':
        return TaskSetTagCode$TRIGONOMETRY_getInstance();
      case 'LOGIC':
        return TaskSetTagCode$LOGIC_getInstance();
      case 'SET':
        return TaskSetTagCode$SET_getInstance();
      case 'COMBINATORICS':
        return TaskSetTagCode$COMBINATORICS_getInstance();
      case 'NORMAL_FORMS':
        return TaskSetTagCode$NORMAL_FORMS_getInstance();
      case 'RESOLUTION':
        return TaskSetTagCode$RESOLUTION_getInstance();
      case 'CHECK_YOURSELF':
        return TaskSetTagCode$CHECK_YOURSELF_getInstance();
      case 'STEP_BY_STEP':
        return TaskSetTagCode$STEP_BY_STEP_getInstance();
      case 'TRAIN_SET':
        return TaskSetTagCode$TRAIN_SET_getInstance();
      case 'EXTRAORDINARY':
        return TaskSetTagCode$EXTRAORDINARY_getInstance();
      default:throwISE('No enum constant mathhelper.twf.defaultcontent.TaskSetTagCode.' + name);
    }
  }
  TaskSetTagCode.valueOf_61zpoe$ = TaskSetTagCode$valueOf;
  function containsUncertainties($receiver, cmp) {
    var tmp$;
    if (equals($receiver.value, 'log') || equals($receiver.value, 'ln')) {
      if (equals($receiver.value, 'log')) {
        var baseNode = $receiver.children.get_za3lpa$(1).cloneAndWrap();
        var baseEqualToOne = cmp.fastProbabilityEquals_heho5o$(baseNode, one);
        var baseGreaterThanZero = true;
        tmp$ = (!baseEqualToOne && baseGreaterThanZero);
      }
       else {
        tmp$ = true;
      }
      var baseSatisfiesConditions = tmp$;
      var argNode = $receiver.children.get_za3lpa$(0).cloneAndWrap();
      var argLessOrEqualToZero = cmp.fastProbabilityCheckOnIncorrectTransformation_41dun6$(argNode, zero, ComparisonType$LEFT_LESS_OR_EQUAL_getInstance());
      if (argLessOrEqualToZero || !baseSatisfiesConditions)
        return true;
    }
    if (equals($receiver.value, '/')) {
      var denominatorNode = $receiver.children.get_za3lpa$(1).cloneAndWrap();
      return cmp.fastProbabilityCheckOnZero_em03xr$(denominatorNode) || containsUncertainties(denominatorNode, cmp);
    }
    if (equals($receiver.value, '^') && cmp.fastProbabilityEquals_heho5o$(first($receiver.children), zero)) {
      var $receiver_0 = drop($receiver.children, 1);
      var any$result;
      any$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
          any$result = false;
          break any$break;
        }
        tmp$_0 = $receiver_0.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          var child = element.cloneAndWrap();
          if (containsUncertainties(child, cmp) || cmp.fastProbabilityCheckOnZero_em03xr$(child)) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      var containsInfinityOrZero = any$result;
      if (containsInfinityOrZero)
        return true;
    }
    if (equals($receiver.value, '*')) {
      var $receiver_1 = $receiver.children;
      var any$result_0;
      any$break: do {
        var tmp$_1;
        if (Kotlin.isType($receiver_1, Collection) && $receiver_1.isEmpty()) {
          any$result_0 = false;
          break any$break;
        }
        tmp$_1 = $receiver_1.iterator();
        while (tmp$_1.hasNext()) {
          var element_0 = tmp$_1.next();
          if (containsUncertainties(element_0, cmp)) {
            any$result_0 = true;
            break any$break;
          }
        }
        any$result_0 = false;
      }
       while (false);
      var containsInfinity = any$result_0;
      var $receiver_2 = $receiver.children;
      var count$result;
      count$break: do {
        var tmp$_2;
        if (Kotlin.isType($receiver_2, Collection) && $receiver_2.isEmpty()) {
          count$result = 0;
          break count$break;
        }
        var count = 0;
        tmp$_2 = $receiver_2.iterator();
        while (tmp$_2.hasNext()) {
          var element_1 = tmp$_2.next();
          var child_0 = element_1.cloneAndWrap();
          if (cmp.fastProbabilityCheckOnZero_em03xr$(child_0))
            checkCountOverflow((count = count + 1 | 0, count));
        }
        count$result = count;
      }
       while (false);
      var childrenZerosCount = count$result;
      if (containsInfinity || childrenZerosCount > 1)
        return true;
    }
    var $receiver_3 = $receiver.children;
    var any$result_1;
    any$break: do {
      var tmp$_3;
      if (Kotlin.isType($receiver_3, Collection) && $receiver_3.isEmpty()) {
        any$result_1 = false;
        break any$break;
      }
      tmp$_3 = $receiver_3.iterator();
      while (tmp$_3.hasNext()) {
        var element_2 = tmp$_3.next();
        if (containsUncertainties(element_2, cmp)) {
          any$result_1 = true;
          break any$break;
        }
      }
      any$result_1 = false;
    }
     while (false);
    return any$result_1;
  }
  function containsDifferentiation($receiver) {
    return $receiver.containsFunction_bm4lxs$('d', 2);
  }
  function diff($receiver, transformationWeight, compiledConfiguration) {
    if (transformationWeight === void 0)
      transformationWeight = mutableListOf([0.0]);
    var tmp$;
    if (transformationWeight.isEmpty()) {
      transformationWeight.add_11rb$(0.0);
    }
    if (!$receiver.containsFunction_bm4lxs$('d', 2)) {
      return $receiver;
    }
    if ($receiver.nodeType === NodeType$FUNCTION_getInstance() && equals($receiver.value, 'd') && $receiver.children.size === 2 && $receiver.children.get_za3lpa$(1).nodeType === NodeType$VARIABLE_getInstance()) {
      var variable = $receiver.children.get_za3lpa$(1).value;
      if ($receiver.children.get_za3lpa$(0).getContainedVariables_ywdfdh$(setOf(variable)).isEmpty()) {
        return new ExpressionNode(NodeType$VARIABLE_getInstance(), '0', void 0, void 0, void 0, void 0, void 0, '0');
      }
       else if ($receiver.children.get_za3lpa$(0).nodeType === NodeType$VARIABLE_getInstance()) {
        return new ExpressionNode(NodeType$VARIABLE_getInstance(), '1', void 0, void 0, void 0, void 0, void 0, '1');
      }
       else if (equals($receiver.children.get_za3lpa$(0).value, '+') || equals($receiver.children.get_za3lpa$(0).value, '-')) {
        return diffPlusMinus($receiver, variable, transformationWeight, compiledConfiguration);
      }
       else if (equals($receiver.children.get_za3lpa$(0).value, '*') && $receiver.children.get_za3lpa$(0).children.size === 2 && ($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).getContainedVariables_ywdfdh$(setOf(variable)).isEmpty() || $receiver.children.get_za3lpa$(0).children.get_za3lpa$(1).getContainedVariables_ywdfdh$(setOf(variable)).isEmpty())) {
        return diffMul($receiver, variable, transformationWeight, compiledConfiguration);
      }
      transformationWeight.set_wxm5ur$(0, transformationWeight.get_za3lpa$(0) + 0.4);
      if (equals($receiver.children.get_za3lpa$(0).value, '*'))
        return diffMul($receiver, variable, transformationWeight, compiledConfiguration);
      transformationWeight.set_wxm5ur$(0, transformationWeight.get_za3lpa$(0) + 0.15);
      switch ($receiver.children.get_za3lpa$(0).value) {
        case '/':
          return diffDiv($receiver, variable, transformationWeight, compiledConfiguration);
        case '^':
          return diffPow($receiver, variable, transformationWeight, compiledConfiguration);
        case 'sqrt':
          return diffSqrt($receiver, variable, transformationWeight, compiledConfiguration);
        case 'ln':
          return diffLn($receiver, variable, transformationWeight, compiledConfiguration);
        case 'exp':
          return diffExp($receiver, variable, transformationWeight, compiledConfiguration);
        case 'sin':
          return diffSin($receiver, variable, transformationWeight, compiledConfiguration);
        case 'cos':
          return diffCos($receiver, variable, transformationWeight, compiledConfiguration);
        case 'asin':
          return diffAsin($receiver, variable, transformationWeight, compiledConfiguration);
        case 'acos':
          return diffAcos($receiver, variable, transformationWeight, compiledConfiguration);
        case 'sh':
          return diffSh($receiver, variable, transformationWeight, compiledConfiguration);
        case 'ch':
          return diffCh($receiver, variable, transformationWeight, compiledConfiguration);
        case 'tg':
          return diffTg($receiver, variable, transformationWeight, compiledConfiguration);
        case 'ctg':
          return diffCtg($receiver, variable, transformationWeight, compiledConfiguration);
        case 'atg':
          return diffAtg($receiver, variable, transformationWeight, compiledConfiguration);
        case 'actg':
          return diffActg($receiver, variable, transformationWeight, compiledConfiguration);
        case 'th':
          return diffTh($receiver, variable, transformationWeight, compiledConfiguration);
        case 'cth':
          return diffCth($receiver, variable, transformationWeight, compiledConfiguration);
      }
    }
    var result = $receiver.copy_4anocu$();
    var maxWeight = 0.0;
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var currWeight = mutableListOf([0.0]);
      result.addChild_em03xr$(diff(child, currWeight, compiledConfiguration));
      if (maxWeight < currWeight.get_za3lpa$(0)) {
        maxWeight = currWeight.get_za3lpa$(0);
      }
    }
    transformationWeight.set_wxm5ur$(0, transformationWeight.get_za3lpa$(0) + maxWeight);
    return result;
  }
  var unlimitedWeight;
  function buildDiffNode(expressionNode, variable, compiledConfiguration) {
    var newChild = new ExpressionNode(NodeType$FUNCTION_getInstance(), 'd');
    if (!equals(expressionNode.value, '') || expressionNode.children.size !== 1)
      newChild.addChild_em03xr$(expressionNode.clone());
    else
      newChild.addChild_em03xr$(expressionNode.children.get_za3lpa$(0).clone());
    newChild.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), variable));
    return newChild;
  }
  function diffLn($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
    return result;
  }
  function diffSqrt($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    var doubledValue = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
    doubledValue.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2'));
    doubledValue.addChild_em03xr$($receiver.children.get_za3lpa$(0).clone());
    result.addChild_em03xr$(doubledValue);
    return result;
  }
  function diffExp($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$($receiver.children.get_za3lpa$(0).clone());
    return result;
  }
  function diffSin($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('cos', 1));
    last(result.children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    return result;
  }
  function diffCos($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
    last(last(result.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('sin', 1));
    last(last(last(result.children).children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    return result;
  }
  function diffSh($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('ch', 1));
    last(result.children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    return result;
  }
  function diffCh($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('sh', 1));
    last(result.children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    return result;
  }
  function diffAsin($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
    last(last(result.children).children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
    last(last(result.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
    last(last(last(result.children).children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(last(last(last(result.children).children).children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0));
    last(last(last(last(result.children).children).children).children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2'));
    last(result.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0.5'));
    return result;
  }
  function diffAcos($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    last(last(result.children).children).addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
    last(last(result.children).children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
    last(last(result.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
    last(last(last(result.children).children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(last(last(last(result.children).children).children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0));
    last(last(last(last(result.children).children).children).children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2'));
    last(result.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0.5'));
    return result;
  }
  function diffTg($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('cos', 1));
    last(last(result.children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0));
    last(result.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2'));
    return result;
  }
  function diffCtg($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
    last(last(result.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
    last(last(last(result.children).children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('sin', 1));
    last(last(last(last(result.children).children).children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0));
    last(result.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2'));
    return result;
  }
  function diffAtg($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
    last(result.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(last(result.children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0));
    last(last(result.children).children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2'));
    return result;
  }
  function diffActg($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    last(last(result.children).children).addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
    last(result.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(last(result.children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0));
    last(last(result.children).children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2'));
    return result;
  }
  function diffTh($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('ch', 1));
    last(last(result.children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0));
    last(result.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2'));
    return result;
  }
  function diffCth($receiver, variable, transformationWeight, compiledConfiguration) {
    if ($receiver.children.get_za3lpa$(0).children.size !== 1)
      return $receiver.clone();
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
    result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
    result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
    last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
    last(last(result.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
    last(last(last(result.children).children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('sh', 1));
    last(last(last(last(result.children).children).children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0));
    last(result.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2'));
    return result;
  }
  function diffPlusMinus($receiver, variable, transformationWeight, compiledConfiguration) {
    var tmp$;
    var result = $receiver.children.get_za3lpa$(0).copy_4anocu$();
    var maxWeight = 0.0;
    tmp$ = $receiver.children.get_za3lpa$(0).children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var newChild = buildDiffNode(child, variable, compiledConfiguration);
      var currWeight = toMutableList(plus(mutableListOf([0.0]), transformationWeight.subList_vux9f0$(1, transformationWeight.size)));
      result.addChild_em03xr$(diff(newChild, currWeight, compiledConfiguration));
      if (maxWeight < currWeight.get_za3lpa$(0)) {
        maxWeight = currWeight.get_za3lpa$(0);
      }
    }
    transformationWeight.set_wxm5ur$(0, transformationWeight.get_za3lpa$(0) + maxWeight);
    return result;
  }
  function diffMul($receiver, variable, transformationWeight, compiledConfiguration) {
    var tmp$, tmp$_0;
    var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
    var maxWeight = 0.0;
    tmp$ = get_lastIndex($receiver.children.get_za3lpa$(0).children);
    for (var diffChildIndex = 0; diffChildIndex <= tmp$; diffChildIndex++) {
      result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1));
      tmp$_0 = get_lastIndex($receiver.children.get_za3lpa$(0).children);
      for (var i = 0; i <= tmp$_0; i++) {
        if (diffChildIndex === i) {
          var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(i), variable, compiledConfiguration);
          var currWeight = toMutableList(plus(mutableListOf([0.0]), transformationWeight.subList_vux9f0$(1, transformationWeight.size)));
          last(result.children).addChild_em03xr$(diff(newChild, currWeight, compiledConfiguration));
          if (maxWeight < currWeight.get_za3lpa$(0)) {
            maxWeight = currWeight.get_za3lpa$(0);
          }
        }
         else {
          last(result.children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(i).clone());
        }
      }
    }
    transformationWeight.set_wxm5ur$(0, transformationWeight.get_za3lpa$(0) + maxWeight);
    return result;
  }
  function diffDiv($receiver, variable, transformationWeight, compiledConfiguration) {
    var tmp$;
    if ($receiver.children.get_za3lpa$(0).children.size === 1) {
      var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
      result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
      last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
      var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
      last(last(result.children).children).addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
      result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
      last(result.children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
      last(result.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2', void 0, void 0, void 0, void 0, void 0, '2'));
      return result;
    }
     else {
      var denum = $receiver.children.get_za3lpa$(0).children.get_za3lpa$(1);
      if ($receiver.children.get_za3lpa$(0).children.size > 2) {
        denum = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
        tmp$ = get_lastIndex($receiver.children.get_za3lpa$(0).children);
        for (var i = 1; i <= tmp$; i++) {
          denum.addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(i));
        }
      }
      if ($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).getContainedVariables_ywdfdh$(setOf(variable)).isEmpty()) {
        var result_0 = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
        result_0.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
        last(result_0.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
        last(last(result_0.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1));
        last(last(last(result_0.children).children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
        var newChild_0 = buildDiffNode(denum, variable, compiledConfiguration);
        last(last(last(result_0.children).children).children).addChild_em03xr$(diff(newChild_0, transformationWeight, compiledConfiguration));
        result_0.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
        last(result_0.children).addChild_em03xr$(denum.clone());
        last(result_0.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2', void 0, void 0, void 0, void 0, void 0, '2'));
        return result_0;
      }
       else {
        var result_1 = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
        result_1.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
        last(result_1.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1));
        last(last(result_1.children).children).addChild_em03xr$(denum.clone());
        var newNumChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
        var weight1 = toMutableList(plus(mutableListOf([0.0]), transformationWeight.subList_vux9f0$(1, transformationWeight.size)));
        last(last(result_1.children).children).addChild_em03xr$(diff(newNumChild, weight1, compiledConfiguration));
        last(result_1.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
        last(last(result_1.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1));
        last(last(last(result_1.children).children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
        var newDenumChild = buildDiffNode(denum, variable, compiledConfiguration);
        var weight2 = toMutableList(plus(mutableListOf([0.0]), transformationWeight.subList_vux9f0$(1, transformationWeight.size)));
        last(last(last(result_1.children).children).children).addChild_em03xr$(diff(newDenumChild, weight2, compiledConfiguration));
        result_1.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
        last(result_1.children).addChild_em03xr$(denum.clone());
        last(result_1.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '2', void 0, void 0, void 0, void 0, void 0, '2'));
        if (weight2.get_za3lpa$(0) > weight1.get_za3lpa$(0)) {
          transformationWeight.set_wxm5ur$(0, transformationWeight.get_za3lpa$(0) + weight2.get_za3lpa$(0));
        }
         else {
          transformationWeight.set_wxm5ur$(0, transformationWeight.get_za3lpa$(0) + weight1.get_za3lpa$(0));
        }
        return result_1;
      }
    }
  }
  function diffPow($receiver, variable, transformationWeight, compiledConfiguration) {
    var tmp$;
    if ($receiver.children.get_za3lpa$(0).children.size < 2)
      return $receiver.clone();
    var degree = $receiver.children.get_za3lpa$(0).children.get_za3lpa$(1);
    if ($receiver.children.get_za3lpa$(0).children.size > 2) {
      degree = compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
      tmp$ = get_lastIndex($receiver.children.get_za3lpa$(0).children);
      for (var i = 1; i <= tmp$; i++) {
        degree.addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(i));
      }
    }
    if (degree.getContainedVariables_ywdfdh$(setOf(variable)).isEmpty()) {
      var result = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
      result.addChild_em03xr$(degree.clone());
      result.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
      last(result.children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
      last(result.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
      last(last(result.children).children).addChild_em03xr$(degree.clone());
      last(last(result.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
      last(last(last(result.children).children).children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
      var newChild = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
      result.addChild_em03xr$(diff(newChild, transformationWeight, compiledConfiguration));
      return result;
    }
     else {
      if (!$receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).getContainedVariables_ywdfdh$(setOf(variable)).isEmpty()) {
        if (transformationWeight.size > 1) {
          var result_0 = compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
          result_0.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1));
          last(result_0.children).addChild_em03xr$($receiver.children.get_za3lpa$(0).clone());
          last(result_0.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('ln', 1));
          last(last(result_0.children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
          var newDegreeChild = buildDiffNode(degree, variable, compiledConfiguration);
          var weight1 = toMutableList(plus(mutableListOf([0.0]), transformationWeight.subList_vux9f0$(1, transformationWeight.size)));
          last(result_0.children).addChild_em03xr$(diff(newDegreeChild, weight1, compiledConfiguration));
          result_0.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1));
          last(result_0.children).addChild_em03xr$(degree.clone());
          var newChild_0 = buildDiffNode($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0), variable, compiledConfiguration);
          var weight2 = toMutableList(plus(mutableListOf([0.0]), transformationWeight.subList_vux9f0$(1, transformationWeight.size)));
          last(result_0.children).addChild_em03xr$(diff(newChild_0, weight2, compiledConfiguration));
          last(result_0.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
          last(last(result_0.children).children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
          last(last(result_0.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
          last(last(last(result_0.children).children).children).addChild_em03xr$(degree.clone());
          last(last(last(result_0.children).children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
          last(last(last(last(result_0.children).children).children).children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
          if (weight2.get_za3lpa$(0) > weight1.get_za3lpa$(0)) {
            transformationWeight.set_wxm5ur$(0, transformationWeight.get_za3lpa$(0) + weight2.get_za3lpa$(0));
          }
           else {
            transformationWeight.set_wxm5ur$(0, transformationWeight.get_za3lpa$(0) + weight1.get_za3lpa$(0));
          }
          return result_0;
        }
         else {
          return $receiver.clone();
        }
      }
       else {
        var result_1 = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
        result_1.addChild_em03xr$($receiver.children.get_za3lpa$(0).clone());
        result_1.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('ln', 1));
        last(result_1.children).addChild_em03xr$($receiver.children.get_za3lpa$(0).children.get_za3lpa$(0).clone());
        var newChild_1 = buildDiffNode(degree, variable, compiledConfiguration);
        result_1.addChild_em03xr$(diff(newChild_1, transformationWeight, compiledConfiguration));
        return result_1;
      }
    }
  }
  function calcSinCosDomain(argNum, parentDomain, inverseFunc) {
    var generalValues = DefinitionDomain$Companion_getInstance().inclusive_lu1900$(1.0, -1.0);
    var x = generalValues.intersectWith_8hcznf$(parentDomain);
    var leftVal = inverseFunc(x.leftMostElement());
    var rightVal = inverseFunc(x.rightMostElement());
    var segments = mutableSetOf([new DomainSegment(leftVal - 2 * math.PI, false, rightVal - 2 * math.PI, false), new DomainSegment(leftVal, false, rightVal, false), new DomainSegment(leftVal + 2 * math.PI, false, rightVal + 2 * math.PI, false)]);
    return new DefinitionDomain(void 0, void 0, segments);
  }
  function knownOps$lambda(node, argNum, plusValues) {
    return plusValues;
  }
  function knownOps$lambda_0(node, argNum, parentDomain) {
    return parentDomain;
  }
  function knownOps$lambda_1(node, argNum, parentDomain) {
    return parentDomain;
  }
  function knownOps$lambda_2(node, argNum, parentDomain) {
    return parentDomain;
  }
  function knownOps$lambda_3(node, argNum, parentDomain) {
    return argNum === 0 ? parentDomain : parentDomain.except_yqxtqz$(new Float64Array([0.0]));
  }
  function knownOps$lambda$lambda(a) {
    return Math_0.asin(a);
  }
  function knownOps$lambda_4(node, argnum, parentDomain) {
    return calcSinCosDomain(argnum, parentDomain, knownOps$lambda$lambda);
  }
  function knownOps$lambda$lambda_0(a) {
    return Math_0.acos(a);
  }
  function knownOps$lambda_5(node, argnum, parentDomain) {
    return calcSinCosDomain(argnum, parentDomain, knownOps$lambda$lambda_0);
  }
  var knownOps;
  var knownOpsAssociation;
  function DomainCalculator(expressionNode) {
    this.expressionNode = expressionNode;
    this.varDomain = new MultivariateDefinitionDomain(this.expressionNode);
    this.baseOperationsDefinitions = new BaseOperationsDefinitions();
  }
  DomainCalculator.prototype.calculate = function () {
    this.calcInner_0(this.expressionNode, DomainAll);
    return this;
  };
  DomainCalculator.prototype.calcInner_0 = function (expressionNode, parentDomain) {
    this.calcTopDown_0(expressionNode, parentDomain);
  };
  DomainCalculator.prototype.calcTopDown_0 = function (expressionNode, parentDomain) {
    var tmp$;
    switch (expressionNode.nodeType.name) {
      case 'VARIABLE':
        if (toDoubleOrNull(expressionNode.value) == null) {
          var curval = ensureNotNull(this.varDomain.variables.get_11rb$(expressionNode.value));
          this.varDomain.set_lik5yr$(expressionNode.value, parentDomain.intersectWith_8hcznf$(curval));
        }

        break;
      case 'FUNCTION':
        tmp$ = knownOpsAssociation.get_11rb$(expressionNode.value);
        if (tmp$ == null) {
          throw UnsupportedOperationException_init('operation %s is not supported');
        }

        var domainOp = tmp$;
        var updatedParentDomain = this.scaleDomain_0(expressionNode, parentDomain);
        var index = 0;
        for (var tmp$_0 = expressionNode.children.iterator(); tmp$_0.hasNext(); ++index) {
          var child = tmp$_0.next();
          var argDomain = domainOp.funcToCall(child, index, updatedParentDomain);
          this.calcTopDown_0(child, argDomain);
        }

        break;
      case 'EMPTY':
      case 'ERROR':
        break;
      default:Kotlin.noWhenBranchMatched();
        break;
    }
  };
  DomainCalculator.prototype.scaleDomain_0 = function (expressionNode, parentDomain) {
    var $receiver = expressionNode.children;
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      if ((tmp$_0 = this.subtreeConstantValueOrNull_0(element)) != null) {
        destination.add_11rb$(tmp$_0);
      }
    }
    var constants = destination;
    var tmp$_1;
    var accumulator = parentDomain;
    tmp$_1 = constants.iterator();
    loop_label: while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      var acc = accumulator;
      var operation$result;
      operation$break: do {
        switch (expressionNode.value) {
          case '+':
            operation$result = acc.shiftBy_14dthe$(-element_0);
            break operation$break;
          case '-':
            operation$result = acc.shiftBy_14dthe$(element_0);
            break operation$break;
          case '*':
            operation$result = acc.scaleBy_14dthe$(1 / element_0);
            break operation$break;
          case '/':
            operation$result = acc.scaleBy_14dthe$(element_0);
            break operation$break;
          default:operation$result = acc;
            break operation$break;
        }
      }
       while (false);
      accumulator = operation$result;
    }
    return accumulator;
  };
  DomainCalculator.prototype.subtreeConstantValueOrNull_0 = function (tree) {
    var tmp$, tmp$_0, tmp$_1;
    switch (tree.nodeType.name) {
      case 'FUNCTION':
        var innerDoubleValue = tree.children.size !== 1 ? null : this.subtreeConstantValueOrNull_0(tree.children.get_za3lpa$(0));
        var opToCall = innerDoubleValue == null ? null : this.baseOperationsDefinitions.getOperation_bm4lxs$(tree.value, 1);
        return (tmp$_1 = (tmp$_0 = (tmp$ = opToCall != null ? opToCall.calculatingFunction : null) != null ? tmp$(tree) : null) != null ? tmp$_0.value : null) != null ? toDoubleOrNull(tmp$_1) : null;
      case 'VARIABLE':
        return toDoubleOrNull(tree.value);
      case 'EMPTY':
      case 'ERROR':
        return null;
      default:return Kotlin.noWhenBranchMatched();
    }
  };
  DomainCalculator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DomainCalculator',
    interfaces: []
  };
  function ParserError(position, description, endPosition) {
    if (position === void 0)
      position = -1;
    if (description === void 0)
      description = '';
    if (endPosition === void 0)
      endPosition = -1;
    this.position = position;
    this.description = description;
    this.endPosition = endPosition;
  }
  ParserError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ParserError',
    interfaces: []
  };
  ParserError.prototype.component1 = function () {
    return this.position;
  };
  ParserError.prototype.component2 = function () {
    return this.description;
  };
  ParserError.prototype.component3 = function () {
    return this.endPosition;
  };
  ParserError.prototype.copy_jl0c9m$ = function (position, description, endPosition) {
    return new ParserError(position === void 0 ? this.position : position, description === void 0 ? this.description : description, endPosition === void 0 ? this.endPosition : endPosition);
  };
  ParserError.prototype.toString = function () {
    return 'ParserError(position=' + Kotlin.toString(this.position) + (', description=' + Kotlin.toString(this.description)) + (', endPosition=' + Kotlin.toString(this.endPosition)) + ')';
  };
  ParserError.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.position) | 0;
    result = result * 31 + Kotlin.hashCode(this.description) | 0;
    result = result * 31 + Kotlin.hashCode(this.endPosition) | 0;
    return result;
  };
  ParserError.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.position, other.position) && Kotlin.equals(this.description, other.description) && Kotlin.equals(this.endPosition, other.endPosition)))));
  };
  function GeneralError(description, code) {
    if (description === void 0)
      description = '';
    if (code === void 0)
      code = '';
    this.description = description;
    this.code = code;
  }
  GeneralError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GeneralError',
    interfaces: []
  };
  GeneralError.prototype.component1 = function () {
    return this.description;
  };
  GeneralError.prototype.component2 = function () {
    return this.code;
  };
  GeneralError.prototype.copy_puj7f4$ = function (description, code) {
    return new GeneralError(description === void 0 ? this.description : description, code === void 0 ? this.code : code);
  };
  GeneralError.prototype.toString = function () {
    return 'GeneralError(description=' + Kotlin.toString(this.description) + (', code=' + Kotlin.toString(this.code)) + ')';
  };
  GeneralError.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.description) | 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    return result;
  };
  GeneralError.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.description, other.description) && Kotlin.equals(this.code, other.code)))));
  };
  function SubstitutionApplicationError(descriptionEn, descriptionRu, affectedNodeIds, expressionNode) {
    if (descriptionEn === void 0)
      descriptionEn = '';
    if (descriptionRu === void 0)
      descriptionRu = '';
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.affectedNodeIds = affectedNodeIds;
    this.expressionNode = expressionNode;
  }
  SubstitutionApplicationError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubstitutionApplicationError',
    interfaces: []
  };
  SubstitutionApplicationError.prototype.component1 = function () {
    return this.descriptionEn;
  };
  SubstitutionApplicationError.prototype.component2 = function () {
    return this.descriptionRu;
  };
  SubstitutionApplicationError.prototype.component3 = function () {
    return this.affectedNodeIds;
  };
  SubstitutionApplicationError.prototype.component4 = function () {
    return this.expressionNode;
  };
  SubstitutionApplicationError.prototype.copy_xeerwz$ = function (descriptionEn, descriptionRu, affectedNodeIds, expressionNode) {
    return new SubstitutionApplicationError(descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, affectedNodeIds === void 0 ? this.affectedNodeIds : affectedNodeIds, expressionNode === void 0 ? this.expressionNode : expressionNode);
  };
  SubstitutionApplicationError.prototype.toString = function () {
    return 'SubstitutionApplicationError(descriptionEn=' + Kotlin.toString(this.descriptionEn) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', affectedNodeIds=' + Kotlin.toString(this.affectedNodeIds)) + (', expressionNode=' + Kotlin.toString(this.expressionNode)) + ')';
  };
  SubstitutionApplicationError.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.affectedNodeIds) | 0;
    result = result * 31 + Kotlin.hashCode(this.expressionNode) | 0;
    return result;
  };
  SubstitutionApplicationError.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.affectedNodeIds, other.affectedNodeIds) && Kotlin.equals(this.expressionNode, other.expressionNode)))));
  };
  function Comparator$ObjectLiteral_0(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_0.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareByDescending$lambda_0 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(b), selector(a));
      };
    };
  });
  function ExpressionComparator(baseOperationsDefinitions, baseOperationsComputationDouble, baseOperationsComputationComplex, debugMode) {
    ExpressionComparator$Companion_getInstance();
    if (baseOperationsDefinitions === void 0)
      baseOperationsDefinitions = new BaseOperationsDefinitions();
    if (baseOperationsComputationDouble === void 0)
      baseOperationsComputationDouble = new BaseOperationsComputation(ComputationType$DOUBLE_getInstance());
    if (baseOperationsComputationComplex === void 0)
      baseOperationsComputationComplex = new BaseOperationsComputation(ComputationType$COMPLEX_getInstance());
    if (debugMode === void 0)
      debugMode = false;
    this.baseOperationsDefinitions = baseOperationsDefinitions;
    this.baseOperationsComputationDouble = baseOperationsComputationDouble;
    this.baseOperationsComputationComplex = baseOperationsComputationComplex;
    this.debugMode = debugMode;
    this.compiledConfiguration_wl0p1c$_0 = this.compiledConfiguration_wl0p1c$_0;
    this.definedFunctionNameNumberOfArgsSet_hq5ml2$_0 = this.definedFunctionNameNumberOfArgsSet_hq5ml2$_0;
  }
  Object.defineProperty(ExpressionComparator.prototype, 'compiledConfiguration', {
    get: function () {
      if (this.compiledConfiguration_wl0p1c$_0 == null)
        return throwUPAE('compiledConfiguration');
      return this.compiledConfiguration_wl0p1c$_0;
    },
    set: function (compiledConfiguration) {
      this.compiledConfiguration_wl0p1c$_0 = compiledConfiguration;
    }
  });
  Object.defineProperty(ExpressionComparator.prototype, 'definedFunctionNameNumberOfArgsSet', {
    get: function () {
      if (this.definedFunctionNameNumberOfArgsSet_hq5ml2$_0 == null)
        return throwUPAE('definedFunctionNameNumberOfArgsSet');
      return this.definedFunctionNameNumberOfArgsSet_hq5ml2$_0;
    },
    set: function (definedFunctionNameNumberOfArgsSet) {
      this.definedFunctionNameNumberOfArgsSet_hq5ml2$_0 = definedFunctionNameNumberOfArgsSet;
    }
  });
  ExpressionComparator.prototype.init_3b06hw$ = function (compiledConfiguration) {
    this.compiledConfiguration = compiledConfiguration;
    this.definedFunctionNameNumberOfArgsSet = compiledConfiguration.definedFunctionNameNumberOfArgsSet;
    if (compiledConfiguration.debugOutputMessages.expressionProbabilityComparisonFalseDetailsPrintln) {
      this.debugMode = true;
    }
    this.baseOperationsDefinitions.init_3b06hw$(compiledConfiguration);
  };
  ExpressionComparator.prototype.compareAsIs_5gxvt3$ = function (left, right, nameArgsMap, withBracketUnification) {
    if (nameArgsMap === void 0) {
      nameArgsMap = LinkedHashMap_init_0();
    }
    if (withBracketUnification === void 0)
      withBracketUnification = false;
    var normilized = normalizeExpressionsForComparison(left, right);
    if (normilized.first.isNodeSubtreeEquals_cw9fud$(normilized.second, nameArgsMap)) {
      return true;
    }
     else if (!withBracketUnification) {
      return false;
    }
    var lUnified = normilized.first;
    lUnified.dropBracketNodesIfOperationsSame();
    var rUnified = normilized.second;
    rUnified.dropBracketNodesIfOperationsSame();
    if (lUnified.isNodeSubtreeEquals_cw9fud$(rUnified, nameArgsMap)) {
      return true;
    }
    lUnified.normalizeSubTree_f8z7ch$(void 0, void 0, true);
    rUnified.normalizeSubTree_f8z7ch$(void 0, void 0, true);
    return lUnified.isNodeSubtreeEquals_cw9fud$(rUnified, nameArgsMap);
  };
  ExpressionComparator.prototype.logicFullSearchComparison_v211zv$ = function (leftOrigin, rightOrigin, comparisonType, maxBustCount, resultIfVariablesCountMoreMaxBust) {
    if (comparisonType === void 0)
      comparisonType = this.compiledConfiguration.comparisonSettings.defaultComparisonType;
    if (maxBustCount === void 0)
      maxBustCount = this.compiledConfiguration.comparisonSettings.maxExpressionBustCount;
    if (resultIfVariablesCountMoreMaxBust === void 0)
      resultIfVariablesCountMoreMaxBust = false;
    var normalized = normalizeExpressionsForComparison(leftOrigin, rightOrigin);
    var left = normalized.first;
    var right = normalized.second;
    if (this.compareAsIs_5gxvt3$(left, right)) {
      return !strictComparison(comparisonType);
    }
    if (right.children.isEmpty() || left.children.isEmpty()) {
      return false;
    }
    this.baseOperationsDefinitions.simplifyExpressionTree_em03xr$(left.children.get_za3lpa$(0));
    this.baseOperationsDefinitions.simplifyExpressionTree_em03xr$(right.children.get_za3lpa$(0));
    var variablesNamesSet = LinkedHashSet_init();
    variablesNamesSet.addAll_brywnq$(left.getVariableNames_ywdfdh$());
    variablesNamesSet.addAll_brywnq$(right.getVariableNames_ywdfdh$());
    var variables = toList_0(variablesNamesSet);
    if (1 << variables.size > maxBustCount) {
      return resultIfVariablesCountMoreMaxBust;
    }
    var destination = ArrayList_init_0(collectionSizeOrDefault(variables, 10));
    var tmp$;
    tmp$ = variables.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(new Pair(item, '0'));
    }
    var variableValues = toMutableMap(toMap(destination));
    return this.logicFullSearchComparisonRecursive_fwqq4d$(variables, variableValues, left, right, comparisonType, 0);
  };
  ExpressionComparator.prototype.printDetailInfoIfDebug_sa0csu$ = function (variableValues, left, right, l, r) {
    if (this.debugMode) {
      println("'" + left + "' = '" + l + "' != '" + r + "' = '" + right + "' if " + variableValues);
    }
  };
  ExpressionComparator.prototype.logicFullSearchComparisonRecursive_fwqq4d$ = function (variables, variableValues, left, right, comparisonType, currentIndex) {
    var tmp$, tmp$_0;
    if (currentIndex === variables.size) {
      var l = typeof (tmp$ = this.baseOperationsComputationDouble.compute_em03xr$(left.cloneWithNormalization_1g1bdl$(variableValues, false))) === 'number' ? tmp$ : throwCCE();
      var r = typeof (tmp$_0 = this.baseOperationsComputationDouble.compute_em03xr$(right.cloneWithNormalization_1g1bdl$(variableValues, false))) === 'number' ? tmp$_0 : throwCCE();
      switch (comparisonType.name) {
        case 'LEFT_MORE_OR_EQUAL':
          if (l < r && !this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r)) {
            this.printDetailInfoIfDebug_sa0csu$(variableValues, left, right, l, r);
            return false;
          }

          break;
        case 'LEFT_MORE':
          if (l <= r || this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r)) {
            this.printDetailInfoIfDebug_sa0csu$(variableValues, left, right, l, r);
            return false;
          }

          break;
        case 'LEFT_LESS_OR_EQUAL':
          if (l > r && !this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r)) {
            this.printDetailInfoIfDebug_sa0csu$(variableValues, left, right, l, r);
            return false;
          }

          break;
        case 'LEFT_LESS':
          if (l >= r || this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r)) {
            this.printDetailInfoIfDebug_sa0csu$(variableValues, left, right, l, r);
            return false;
          }

          break;
        default:if (!this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r)) {
            this.printDetailInfoIfDebug_sa0csu$(variableValues, left, right, l, r);
            return false;
          }

          break;
      }
    }
     else {
      var key = variables.get_za3lpa$(currentIndex);
      variableValues.put_xwzc9p$(key, '0');
      if (!this.logicFullSearchComparisonRecursive_fwqq4d$(variables, variableValues, left, right, comparisonType, currentIndex + 1 | 0)) {
        return false;
      }
      var key_0 = variables.get_za3lpa$(currentIndex);
      variableValues.put_xwzc9p$(key_0, '1');
      if (!this.logicFullSearchComparisonRecursive_fwqq4d$(variables, variableValues, left, right, comparisonType, currentIndex + 1 | 0)) {
        return false;
      }
    }
    return true;
  };
  function ExpressionComparator$probabilityTestComparison$lambda$lambda(it) {
    return it.first + '=' + it.second;
  }
  function ExpressionComparator$probabilityTestComparison$lambda(closure$pointI, closure$lDouble, closure$rDouble) {
    return function () {
      return "'(lDouble.isNaN() != rDouble.isNaN()) && justInDomainsIntersection': " + ("pointI='" + joinToString(toList_1(closure$pointI), ',', void 0, void 0, void 0, void 0, ExpressionComparator$probabilityTestComparison$lambda$lambda) + "' lDouble='" + closure$lDouble + "' rDouble='" + closure$rDouble + "'");
    };
  }
  function ExpressionComparator$probabilityTestComparison$lambda$lambda_0(it) {
    return it.first + '=' + it.second;
  }
  function ExpressionComparator$probabilityTestComparison$lambda_0(closure$pointI, closure$lComplex, closure$rComplex) {
    return function () {
      return "'lComplex != rComplex': " + ("pointI='" + joinToString(toList_1(closure$pointI), ',', void 0, void 0, void 0, void 0, ExpressionComparator$probabilityTestComparison$lambda$lambda_0) + "' lComplex='" + closure$lComplex + "' rComplex='" + closure$rComplex + "'");
    };
  }
  function ExpressionComparator$probabilityTestComparison$lambda$lambda_1(it) {
    return it.first + '=' + it.second;
  }
  function ExpressionComparator$probabilityTestComparison$lambda_1(closure$pointI, closure$lDouble, closure$rDouble) {
    return function () {
      return "'lDouble != rDouble': " + ("pointI='" + joinToString(toList_1(closure$pointI), ',', void 0, void 0, void 0, void 0, ExpressionComparator$probabilityTestComparison$lambda$lambda_1) + "' lDouble='" + closure$lDouble + "' rDouble='" + closure$rDouble + "'");
    };
  }
  function ExpressionComparator$probabilityTestComparison$lambda_2(closure$passedTests, closure$totalTests, closure$allowedPartOfErrorTests, closure$minNumberOfPointsForEquality) {
    return function () {
      return "(passedTests='" + closure$passedTests.v + "' >= totalTests='" + closure$totalTests + "' * (1 - allowedPartOfErrorTests='" + closure$allowedPartOfErrorTests + "') && " + ("passedTests='" + closure$passedTests.v + "' >= minNumberOfPointsForEquality='" + closure$minNumberOfPointsForEquality + "') || ") + ("(passedTests='" + closure$passedTests.v + "' >= totalTests='" + closure$totalTests + "') failed");
    };
  }
  ExpressionComparator.prototype.probabilityTestComparison_je0ger$ = function (leftOrigin, rightOrigin, comparisonType, justInDomainsIntersection, maxMinNumberOfPointsForEquality, allowedPartOfErrorTests, testWithUndefinedResultIncreasingCoef, useGradientDescentComparison, numberIntervalType) {
    if (comparisonType === void 0)
      comparisonType = this.compiledConfiguration.comparisonSettings.defaultComparisonType;
    if (justInDomainsIntersection === void 0)
      justInDomainsIntersection = this.compiledConfiguration.comparisonSettings.justInDomainsIntersection;
    if (maxMinNumberOfPointsForEquality === void 0)
      maxMinNumberOfPointsForEquality = this.compiledConfiguration.comparisonSettings.minNumberOfPointsForEquality;
    if (allowedPartOfErrorTests === void 0)
      allowedPartOfErrorTests = this.compiledConfiguration.comparisonSettings.allowedPartOfErrorTests;
    if (testWithUndefinedResultIncreasingCoef === void 0)
      testWithUndefinedResultIncreasingCoef = this.compiledConfiguration.comparisonSettings.testWithUndefinedResultIncreasingCoef;
    if (useGradientDescentComparison === void 0)
      useGradientDescentComparison = false;
    if (numberIntervalType === void 0)
      numberIntervalType = NumberIntervalType$REAL_getInstance();
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12;
    var normalized = normalizeExpressionsForComparison(leftOrigin, rightOrigin);
    var left = normalized.first;
    var right = normalized.second;
    if (this.compareAsIs_5gxvt3$(left, right)) {
      return !strictComparison(comparisonType);
    }
    if (right.children.isEmpty() || left.children.isEmpty()) {
      return false;
    }
    this.baseOperationsDefinitions.simplifyExpressionTree_em03xr$(left.children.get_za3lpa$(0));
    this.baseOperationsDefinitions.simplifyExpressionTree_em03xr$(right.children.get_za3lpa$(0));
    var numberOfRemainingTests = left.getCountOfNodes() + right.getCountOfNodes() | 0;
    if (comparisonType === ComparisonType$EQUAL_getInstance()) {
      var domain = new DomainPointGenerator(arrayListOf([left, right]), this.baseOperationsDefinitions, true, numberIntervalType);
      var totalTests = numberOfRemainingTests;
      var passedTests = {v: 0.0};
      var a = left.getMaxMinNumberOfPointsForEquality();
      var b = right.getMaxMinNumberOfPointsForEquality();
      var a_0 = Math_0.max(a, b);
      var minNumberOfPointsForEquality = Math_0.max(a_0, maxMinNumberOfPointsForEquality);
      var isHaveComplexNode = left.haveComplexNode() || right.haveComplexNode();
      if (domain.variablesNamesSet.isEmpty()) {
        if (isHaveComplexNode) {
          return (Kotlin.isType(tmp$ = this.baseOperationsComputationComplex.compute_em03xr$(left), Complex) ? tmp$ : throwCCE()).equals_m1n3ex$(Kotlin.isType(tmp$_0 = this.baseOperationsComputationComplex.compute_em03xr$(right), Complex) ? tmp$_0 : throwCCE());
        }
         else {
          return this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(typeof (tmp$_1 = this.baseOperationsComputationDouble.compute_em03xr$(left)) === 'number' ? tmp$_1 : throwCCE(), typeof (tmp$_2 = this.baseOperationsComputationDouble.compute_em03xr$(right)) === 'number' ? tmp$_2 : throwCCE());
        }
      }
      while ((tmp$_3 = numberOfRemainingTests, numberOfRemainingTests = tmp$_3 - 1, tmp$_3) > 0) {
        var pointI = domain.generateNewPoint();
        var leftInPoint = left.cloneWithNormalization_1g1bdl$(pointI, false);
        var rightInPoint = right.cloneWithNormalization_1g1bdl$(pointI, false);
        if (isHaveComplexNode) {
          var lComplex = Kotlin.isType(tmp$_4 = this.baseOperationsComputationComplex.compute_em03xr$(leftInPoint), Complex) ? tmp$_4 : throwCCE();
          var rComplex = Kotlin.isType(tmp$_5 = this.baseOperationsComputationComplex.compute_em03xr$(rightInPoint), Complex) ? tmp$_5 : throwCCE();
          if (lComplex.equals_m1n3ex$(rComplex)) {
            tmp$_6 = passedTests.v, passedTests.v = tmp$_6 + 1;
          }
        }
         else {
          var lDouble = typeof (tmp$_7 = this.baseOperationsComputationDouble.compute_em03xr$(leftInPoint)) === 'number' ? tmp$_7 : throwCCE();
          var rDouble = typeof (tmp$_8 = this.baseOperationsComputationDouble.compute_em03xr$(rightInPoint)) === 'number' ? tmp$_8 : throwCCE();
          if (isNaN_0(lDouble) || isNaN_0(rDouble)) {
            if (isNaN_0(lDouble) !== isNaN_0(rDouble) && justInDomainsIntersection) {
              lazyPrintln(this.compiledConfiguration.debugOutputMessages.expressionProbabilityComparisonFalseDetailsPrintln, ExpressionComparator$probabilityTestComparison$lambda(pointI, lDouble, rDouble));
              return false;
            }
             else {
              var lComplex_0 = Kotlin.isType(tmp$_9 = this.baseOperationsComputationComplex.compute_em03xr$(leftInPoint), Complex) ? tmp$_9 : throwCCE();
              var rComplex_0 = Kotlin.isType(tmp$_10 = this.baseOperationsComputationComplex.compute_em03xr$(rightInPoint), Complex) ? tmp$_10 : throwCCE();
              if (lComplex_0.equals_m1n3ex$(rComplex_0)) {
                passedTests.v = passedTests.v + 1;
              }
               else {
                lazyPrintln(this.compiledConfiguration.debugOutputMessages.expressionProbabilityComparisonFalseDetailsPrintln, ExpressionComparator$probabilityTestComparison$lambda_0(pointI, lComplex_0, rComplex_0));
              }
            }
          }
           else {
            if (!isFinite(lDouble) || !isFinite(rDouble)) {
              numberOfRemainingTests += testWithUndefinedResultIncreasingCoef;
            }
             else if (this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(lDouble, rDouble)) {
              passedTests.v = passedTests.v + 1;
            }
             else {
              lazyPrintln(this.compiledConfiguration.debugOutputMessages.expressionProbabilityComparisonFalseDetailsPrintln, ExpressionComparator$probabilityTestComparison$lambda_1(pointI, lDouble, rDouble));
            }
          }
        }
        if (passedTests.v >= minNumberOfPointsForEquality) {
          return true;
        }
      }
      if (passedTests.v >= totalTests * (1 - allowedPartOfErrorTests) && passedTests.v >= minNumberOfPointsForEquality || passedTests.v >= totalTests) {
        return true;
      }
       else {
        lazyPrintln(this.compiledConfiguration.debugOutputMessages.expressionProbabilityComparisonFalseDetailsPrintln, ExpressionComparator$probabilityTestComparison$lambda_2(passedTests, totalTests, allowedPartOfErrorTests, minNumberOfPointsForEquality));
        return false;
      }
    }
     else {
      var domain_0 = new DomainPointGenerator(arrayListOf([left, right]), this.baseOperationsDefinitions, false, numberIntervalType);
      if (!domain_0.hasVariables()) {
        return this.compareInequalityInPoint_0(left, LinkedHashMap_init_0(), right, justInDomainsIntersection, comparisonType);
      }
      var points = domain_0.generateSimplePoints();
      tmp$_11 = points.iterator();
      while (tmp$_11.hasNext()) {
        var pointI_0 = tmp$_11.next();
        if (!this.compareInequalityInPoint_0(left, pointI_0, right, justInDomainsIntersection, comparisonType)) {
          return false;
        }
      }
      while ((tmp$_12 = numberOfRemainingTests, numberOfRemainingTests = tmp$_12 - 1, tmp$_12) > 0) {
        var pointI_1 = domain_0.generateNewPointInDomain_mqu1mq$();
        if (!this.compareInequalityInPoint_0(left, pointI_1, right, justInDomainsIntersection, comparisonType)) {
          return false;
        }
      }
      if (useGradientDescentComparison) {
        return gradientDescentComparison(left, right, this.compiledConfiguration, comparisonType, domain_0);
      }
       else {
        return true;
      }
    }
  };
  ExpressionComparator.prototype.compareInequalityInPoint_0 = function (left, pointI, right, justInDomainsIntersection, comparisonType) {
    var tmp$, tmp$_0;
    var strongInequalityComparisonEpsilon = 1.19E-9;
    var l = typeof (tmp$ = this.baseOperationsComputationDouble.compute_em03xr$(left.cloneWithNormalization_1g1bdl$(pointI, false))) === 'number' ? tmp$ : throwCCE();
    var r = typeof (tmp$_0 = this.baseOperationsComputationDouble.compute_em03xr$(right.cloneWithNormalization_1g1bdl$(pointI, false))) === 'number' ? tmp$_0 : throwCCE();
    if (justInDomainsIntersection && isNaN_0(l) !== isNaN_0(r)) {
      return false;
    }
     else if (isInfinite(l) && isInfinite(r)) {
      return true;
    }
     else {
      switch (comparisonType.name) {
        case 'LEFT_MORE_OR_EQUAL':
          if (l < r && !this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r)) {
            return false;
          }

          break;
        case 'LEFT_MORE':
          if (l <= r || this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r, strongInequalityComparisonEpsilon)) {
            return false;
          }

          break;
        case 'LEFT_LESS_OR_EQUAL':
          if (l > r && !this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r)) {
            return false;
          }

          break;
        case 'LEFT_LESS':
          if (l >= r || this.baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r, strongInequalityComparisonEpsilon)) {
            return false;
          }

          break;
      }
    }
    return true;
  };
  ExpressionComparator.prototype.compareWithoutSubstitutions_fb5b0y$ = function (l, r, comparisonType, definedFunctionNameNumberOfArgs, justInDomainsIntersection, maxBustCount) {
    if (comparisonType === void 0)
      comparisonType = this.compiledConfiguration.comparisonSettings.defaultComparisonType;
    if (definedFunctionNameNumberOfArgs === void 0)
      definedFunctionNameNumberOfArgs = this.definedFunctionNameNumberOfArgsSet;
    if (justInDomainsIntersection === void 0)
      justInDomainsIntersection = this.compiledConfiguration.comparisonSettings.justInDomainsIntersection;
    if (maxBustCount === void 0)
      maxBustCount = this.compiledConfiguration.comparisonSettings.maxExpressionBustCount;
    var tmp$;
    if (this.compareAsIs_5gxvt3$(l, r, void 0, false))
      return true;
    var left = l.clone();
    var right = r.clone();
    applyAllImmediateSubstitutions(left, this.compiledConfiguration);
    applyAllImmediateSubstitutions(right, this.compiledConfiguration);
    applyAllSubstitutions(left, this.compiledConfiguration.compiledFunctionDefinitions);
    applyAllSubstitutions(right, this.compiledConfiguration.compiledFunctionDefinitions);
    left.variableReplacement_y0zsll$(this.compiledConfiguration.variableConfiguration.variableImmediateReplacementMap);
    right.variableReplacement_y0zsll$(this.compiledConfiguration.variableConfiguration.variableImmediateReplacementMap);
    left.normalizeSubTree_f8z7ch$(void 0, void 0, true);
    right.normalizeSubTree_f8z7ch$(void 0, void 0, true);
    if (this.compareAsIs_5gxvt3$(left.cloneAndSimplifyByCommutativeNormalizeAndComputeSimplePlaces_wq2kg4$(this.compiledConfiguration), right.cloneAndSimplifyByCommutativeNormalizeAndComputeSimplePlaces_wq2kg4$(this.compiledConfiguration), void 0, true)) {
      return true;
    }
    if (this.compiledConfiguration.comparisonSettings.compareExpressionsWithProbabilityRulesWhenComparingExpressions) {
      var needBooleanComparison = left.isBoolExpression_ywdfdh$(this.compiledConfiguration.functionConfiguration.boolFunctions) || right.isBoolExpression_ywdfdh$(this.compiledConfiguration.functionConfiguration.boolFunctions);
      var functionIdentifierToVariableMap = LinkedHashMap_init_0();
      if (comparisonType === ComparisonType$EQUAL_getInstance()) {
        tmp$ = definedFunctionNameNumberOfArgs;
      }
       else {
        var destination = ArrayList_init();
        var tmp$_0;
        tmp$_0 = definedFunctionNameNumberOfArgs.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (!listOf_0(['S_4', 'P_4']).contains_11rb$(element))
            destination.add_11rb$(element);
        }
        tmp$ = toSet(destination);
      }
      var definedFunctions = tmp$;
      left.replaceNotDefinedFunctionsOnVariables_lvgqkd$(functionIdentifierToVariableMap, definedFunctions, this, needBooleanComparison);
      right.replaceNotDefinedFunctionsOnVariables_lvgqkd$(functionIdentifierToVariableMap, definedFunctions, this, needBooleanComparison);
      if (!needBooleanComparison) {
        return this.probabilityTestComparison_je0ger$(left, right, comparisonType, justInDomainsIntersection);
      }
       else {
        return this.logicFullSearchComparison_v211zv$(left, right, comparisonType, maxBustCount - 1 | 0, false);
      }
    }
    return false;
  };
  ExpressionComparator.prototype.checkOpeningBracketsSubstitutions_f7l7x0$ = function (expressionToTransform, otherExpression, expressionChainComparisonType) {
    var tmp$;
    var openingBracketsTransformationResults = computeResultsOfOpeningBracketsSubstitutions(expressionToTransform, this.compiledConfiguration);
    tmp$ = openingBracketsTransformationResults.iterator();
    while (tmp$.hasNext()) {
      var expression = tmp$.next();
      if (this.compareWithoutSubstitutions_fb5b0y$(expression, otherExpression, expressionChainComparisonType)) {
        return true;
      }
    }
    return false;
  };
  function ExpressionComparator$Companion() {
    ExpressionComparator$Companion_instance = this;
    this.algebraAutoCheckingFunctionsSet = setOf_0(['_0', '_1', '+_-1', '-_-1', '*_-1', '/_-1', '^_-1', 'sin_1', 'cos_1', 'sh_1', 'ch_1', 'th_1', 'tg_1', 'asin_1', 'acos_1', 'atg_1', 'exp_1', 'ln_1', 'abs_1']);
    this.setAutoCheckingFunctionsSet = setOf_0(['_0', '_1', 'and_-1', 'or_-1', 'xor_-1', 'alleq_-1', 'not_1']);
    this.combinatoricsAutoCheckingFunctionsSet = setOf_0(['_0', '_1', '+_-1', '-_-1', '*_-1', '/_-1', '^_-1', 'sin_1', 'cos_1', 'sh_1', 'ch_1', 'th_1', 'tg_1', 'asin_1', 'acos_1', 'atg_1', 'exp_1', 'ln_1', 'abs_1', 'S_4', 'P_4']);
    this.trigonometricAutoCheckingFunctionsSet = setOf_0(['sin', 'cos', 'tg', 'ctg', 'asin', 'acos', 'atg', 'actg', 'sh', 'ch', 'th', 'cth']);
  }
  ExpressionComparator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ExpressionComparator$Companion_instance = null;
  function ExpressionComparator$Companion_getInstance() {
    if (ExpressionComparator$Companion_instance === null) {
      new ExpressionComparator$Companion();
    }
    return ExpressionComparator$Companion_instance;
  }
  ExpressionComparator.prototype.fastProbabilityCheckOnIncorrectTransformation_41dun6$ = function (l, r, comparisonType, maxBustCount) {
    if (comparisonType === void 0)
      comparisonType = this.compiledConfiguration.comparisonSettings.defaultComparisonType;
    if (maxBustCount === void 0)
      maxBustCount = this.compiledConfiguration.comparisonSettings.maxExpressionBustCount;
    var left = l.clone();
    var right = r.clone();
    applyAllImmediateSubstitutions(left, this.compiledConfiguration);
    applyAllImmediateSubstitutions(right, this.compiledConfiguration);
    applyAllSubstitutions(left, this.compiledConfiguration.compiledFunctionDefinitions);
    applyAllSubstitutions(right, this.compiledConfiguration.compiledFunctionDefinitions);
    left.variableReplacement_y0zsll$(this.compiledConfiguration.variableConfiguration.variableImmediateReplacementMap);
    right.variableReplacement_y0zsll$(this.compiledConfiguration.variableConfiguration.variableImmediateReplacementMap);
    if (!left.containsFunctionBesides_ywdfdh$(ExpressionComparator$Companion_getInstance().algebraAutoCheckingFunctionsSet) && !right.containsFunctionBesides_ywdfdh$(ExpressionComparator$Companion_getInstance().algebraAutoCheckingFunctionsSet)) {
      if (!this.probabilityTestComparison_je0ger$(left, right, comparisonType, this.compiledConfiguration.comparisonSettings.justInDomainsIntersection)) {
        return false;
      }
    }
     else if (!left.containsFunctionBesides_ywdfdh$(ExpressionComparator$Companion_getInstance().setAutoCheckingFunctionsSet) && !right.containsFunctionBesides_ywdfdh$(ExpressionComparator$Companion_getInstance().setAutoCheckingFunctionsSet)) {
      if (!this.logicFullSearchComparison_v211zv$(left, right, comparisonType, maxBustCount, true)) {
        return false;
      }
    }
     else if (equals(this.compiledConfiguration.subjectType, 'combinatorics') && !left.containsFunctionBesides_ywdfdh$(ExpressionComparator$Companion_getInstance().combinatoricsAutoCheckingFunctionsSet) && !right.containsFunctionBesides_ywdfdh$(ExpressionComparator$Companion_getInstance().combinatoricsAutoCheckingFunctionsSet)) {
      if (!this.probabilityTestComparison_je0ger$(left, right, comparisonType, void 0, void 0, void 0, void 0, void 0, NumberIntervalType$SMALL_NATURAL_getInstance())) {
        return false;
      }
    }
    return true;
  };
  ExpressionComparator.prototype.fastProbabilityCheckOnZero_em03xr$ = function (expression) {
    return this.fastProbabilityCheckOnIncorrectTransformation_41dun6$(expression, zero, ComparisonType$EQUAL_getInstance());
  };
  ExpressionComparator.prototype.fastProbabilityEquals_heho5o$ = function (lhs, rhs) {
    return this.fastProbabilityCheckOnIncorrectTransformation_41dun6$(lhs, rhs, ComparisonType$EQUAL_getInstance());
  };
  ExpressionComparator.prototype.compareWithTreeTransformationRules_8lnv8j$ = function (leftOriginal, rightOriginal, transformations, maxTransformationWeight, maxBustCount, minTransformationWeight, expressionChainComparisonType, maxDistBetweenDiffSteps) {
    var tmp$, tmp$_0;
    if (maxTransformationWeight === void 0)
      maxTransformationWeight = this.compiledConfiguration.comparisonSettings.maxExpressionTransformationWeight;
    if (maxBustCount === void 0)
      maxBustCount = this.compiledConfiguration.comparisonSettings.maxExpressionBustCount;
    if (minTransformationWeight === void 0) {
      var minBy$result;
      minBy$break: do {
        var iterator = transformations.iterator();
        if (!iterator.hasNext()) {
          minBy$result = null;
          break minBy$break;
        }
        var minElem = iterator.next();
        if (!iterator.hasNext()) {
          minBy$result = minElem;
          break minBy$break;
        }
        var minValue = minElem.weight;
        do {
          var e = iterator.next();
          var v = e.weight;
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }
        }
         while (iterator.hasNext());
        minBy$result = minElem;
      }
       while (false);
      minTransformationWeight = (tmp$_0 = (tmp$ = minBy$result) != null ? tmp$.weight : null) != null ? tmp$_0 : 1.0;
    }
    if (expressionChainComparisonType === void 0)
      expressionChainComparisonType = ComparisonType$EQUAL_getInstance();
    if (maxDistBetweenDiffSteps === void 0)
      maxDistBetweenDiffSteps = 1.0;
    var all$result;
    all$break: do {
      var tmp$_1;
      if (Kotlin.isType(transformations, Collection) && transformations.isEmpty()) {
        all$result = true;
        break all$break;
      }
      tmp$_1 = transformations.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        if (!!element.basedOnTaskContext) {
          all$result = false;
          break all$break;
        }
      }
      all$result = true;
    }
     while (false);
    if (all$result && (expressionChainComparisonType !== ComparisonType$EQUAL_getInstance() || !this.compareAsIs_5gxvt3$(leftOriginal, rightOriginal)) && !this.fastProbabilityCheckOnIncorrectTransformation_41dun6$(leftOriginal, rightOriginal, expressionChainComparisonType, maxBustCount)) {
      return false;
    }
    var resultForOperandsInOriginalOrder = this.compareWithTreeTransformationRulesInternal_l7tdci$(leftOriginal, rightOriginal, transformations, maxTransformationWeight, maxBustCount, minTransformationWeight, expressionChainComparisonType, false, maxDistBetweenDiffSteps);
    if (resultForOperandsInOriginalOrder) {
      return true;
    }
     else {
      var resultForOperandsInSortedOrder = this.compareWithTreeTransformationRulesInternal_l7tdci$(leftOriginal, rightOriginal, transformations, maxTransformationWeight, maxBustCount, minTransformationWeight, expressionChainComparisonType, true, maxDistBetweenDiffSteps);
      return resultForOperandsInSortedOrder;
    }
  };
  function ExpressionComparator$compareWithTreeTransformationRulesInternal$lambda(it) {
    return it.second;
  }
  function ExpressionComparator$compareWithTreeTransformationRulesInternal$lambda_0() {
    return "COMPARISON_SIGNS_CONFLICT '";
  }
  function ExpressionComparator$compareWithTreeTransformationRulesInternal$lambda_1() {
    return "' in expression vs '";
  }
  function ExpressionComparator$compareWithTreeTransformationRulesInternal$lambda_2() {
    return "' in rule. MSG_CODE_";
  }
  ExpressionComparator.prototype.compareWithTreeTransformationRulesInternal_l7tdci$ = function (leftOriginal, rightOriginal, transformations, maxTransformationWeight, maxBustCount, minTransformationWeight, expressionChainComparisonType, sortOperands, maxDistBetweenDiffSteps) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    if (maxTransformationWeight === void 0)
      maxTransformationWeight = this.compiledConfiguration.comparisonSettings.maxExpressionTransformationWeight;
    if (maxBustCount === void 0)
      maxBustCount = this.compiledConfiguration.comparisonSettings.maxExpressionBustCount;
    if (minTransformationWeight === void 0) {
      var minBy$result;
      minBy$break: do {
        var iterator = transformations.iterator();
        if (!iterator.hasNext()) {
          minBy$result = null;
          break minBy$break;
        }
        var minElem = iterator.next();
        if (!iterator.hasNext()) {
          minBy$result = minElem;
          break minBy$break;
        }
        var minValue = minElem.weight;
        do {
          var e = iterator.next();
          var v = e.weight;
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }
        }
         while (iterator.hasNext());
        minBy$result = minElem;
      }
       while (false);
      minTransformationWeight = (tmp$_0 = (tmp$ = minBy$result) != null ? tmp$.weight : null) != null ? tmp$_0 : 1.0;
    }
    if (expressionChainComparisonType === void 0)
      expressionChainComparisonType = ComparisonType$EQUAL_getInstance();
    if (sortOperands === void 0)
      sortOperands = false;
    if (maxDistBetweenDiffSteps === void 0)
      maxDistBetweenDiffSteps = 1.0;
    var normFormsOfExpressionNode = LinkedHashMap_init_0();
    var left = sortOperands ? leftOriginal.cloneWithSortingChildrenForExpressionSubstitutionComparison() : leftOriginal.clone();
    var right = sortOperands ? rightOriginal.cloneWithSortingChildrenForExpressionSubstitutionComparison() : rightOriginal.clone();
    applyAllImmediateSubstitutions(left, this.compiledConfiguration);
    applyAllImmediateSubstitutions(right, this.compiledConfiguration);
    if (maxTransformationWeight < 0.5) {
      tmp$_1 = this.compiledConfiguration.noTransformationDefinedFunctionNameNumberOfArgsSet;
    }
     else {
      tmp$_1 = this.compiledConfiguration.definedFunctionNameNumberOfArgsSet;
    }
    this.definedFunctionNameNumberOfArgsSet = tmp$_1;
    if (this.compareWithoutSubstitutions_fb5b0y$(left, right, expressionChainComparisonType))
      return true;
    if (maxTransformationWeight < minTransformationWeight)
      return false;
    if (containsDifferentiation(left) || containsDifferentiation(right)) {
      var leftDiffWeight = toMutableList(plus(listOf(0.0), maxDistBetweenDiffSteps > unlimitedWeight ? listOf(maxDistBetweenDiffSteps) : emptyList()));
      var rightDiffWeight = toMutableList(plus(listOf(0.0), maxDistBetweenDiffSteps > unlimitedWeight ? listOf(maxDistBetweenDiffSteps) : emptyList()));
      var leftDiff = diff(left, leftDiffWeight, this.compiledConfiguration);
      var rightDiff = diff(right, rightDiffWeight, this.compiledConfiguration);
      var x = leftDiffWeight.get_za3lpa$(0) - rightDiffWeight.get_za3lpa$(0);
      if (Math_0.abs(x) < maxDistBetweenDiffSteps && this.compareWithoutSubstitutions_fb5b0y$(leftDiff, rightDiff, expressionChainComparisonType)) {
        return true;
      }
    }
    if (this.checkOpeningBracketsSubstitutions_f7l7x0$(left, right, expressionChainComparisonType) || this.checkOpeningBracketsSubstitutions_f7l7x0$(right, left, reverse_0(expressionChainComparisonType))) {
      return true;
    }
    var functionsInLeftExpression = left.getContainedFunctions();
    var functionsInRightExpression = right.getContainedFunctions();
    var functionsInExpression = plus_0(functionsInLeftExpression, functionsInRightExpression);
    var filteredTransformations = ArrayList_init();
    tmp$_2 = transformations.iterator();
    while (tmp$_2.hasNext()) {
      var transformation = tmp$_2.next();
      if (transformation.weight > maxTransformationWeight) {
        continue;
      }
      var transformationLeftIntersectLeftExpression = intersect(functionsInLeftExpression, transformation.leftFunctions);
      var transformationLeftIntersectRightExpression = intersect(functionsInRightExpression, transformation.leftFunctions);
      if (!transformation.leftFunctions.isEmpty() && transformationLeftIntersectLeftExpression.isEmpty() && transformationLeftIntersectRightExpression.isEmpty()) {
        continue;
      }
      var score = 1.0;
      var transformationRightIntersectLeftExpression = intersect(functionsInLeftExpression, transformation.rightFunctions);
      var transformationRightIntersectRightExpression = intersect(functionsInRightExpression, transformation.rightFunctions);
      var tmp$_7 = !transformation.rightFunctions.isEmpty();
      if (tmp$_7) {
        tmp$_7 = !transformation.leftFunctions.isEmpty();
      }
      if (tmp$_7) {
        if (transformationLeftIntersectLeftExpression.isEmpty() && transformationRightIntersectLeftExpression.isEmpty()) {
          score = 0.0;
        }
         else if (transformationLeftIntersectRightExpression.isEmpty() && transformationRightIntersectRightExpression.isEmpty()) {
          score = 0.0;
        }
      }
      filteredTransformations.add_11rb$(new Pair(transformation, score));
    }
    if (this.compiledConfiguration.comparisonSettings.useTransformationsSortingInExpressionComparison) {
      if (filteredTransformations.size > 1) {
        sortWith(filteredTransformations, new Comparator$ObjectLiteral_0(compareByDescending$lambda_0(ExpressionComparator$compareWithTreeTransformationRulesInternal$lambda)));
      }
    }
    tmp$_3 = filteredTransformations.iterator();
    while (tmp$_3.hasNext()) {
      var filteredTransformation = tmp$_3.next();
      var originalTransformation = filteredTransformation.first;
      if (!originalTransformation.leftFunctions.isEmpty() && intersect(functionsInExpression, originalTransformation.leftFunctions).isEmpty()) {
        continue;
      }
      if (sortOperands) {
        tmp$_4 = new ExpressionSubstitution(originalTransformation.left.cloneWithSortingChildrenForExpressionSubstitutionComparison(), originalTransformation.right.cloneWithSortingChildrenForExpressionSubstitutionComparison(), originalTransformation.weight, originalTransformation.basedOnTaskContext, originalTransformation.code, originalTransformation.nameEn, originalTransformation.nameRu, originalTransformation.comparisonType, originalTransformation.leftFunctions, originalTransformation.rightFunctions, originalTransformation.matchJumbledAndNested, originalTransformation.priority, originalTransformation.changeOnlyOrder, originalTransformation.simpleAdditional, originalTransformation.isExtending, originalTransformation.normalizationType);
      }
       else {
        tmp$_4 = originalTransformation;
      }
      var transformation_0 = tmp$_4;
      if (!normFormsOfExpressionNode.containsKey_11rb$(transformation_0.normalizationType)) {
        var l = sortOperands ? left.cloneWithSortingChildrenForExpressionSubstitutionComparison() : left.clone();
        var r = sortOperands ? right.cloneWithSortingChildrenForExpressionSubstitutionComparison() : right.clone();
        switch (transformation_0.normalizationType.name) {
          case 'ORIGINAL':
            var key = transformation_0.normalizationType;
            var value = new Pair(l, r);
            normFormsOfExpressionNode.put_xwzc9p$(key, value);
            break;
          case 'SORTED':
            var key_0 = transformation_0.normalizationType;
            var value_0 = new Pair(left.cloneWithSortingChildrenForExpressionSubstitutionComparison(), right.cloneWithSortingChildrenForExpressionSubstitutionComparison());
            normFormsOfExpressionNode.put_xwzc9p$(key_0, value_0);
            break;
          case 'I_MULTIPLICATED':
            var key_1 = transformation_0.normalizationType;
            var value_1 = new Pair(left.cloneWithIMultipleNorm(), right.clone());
            normFormsOfExpressionNode.put_xwzc9p$(key_1, value_1);
            break;
          case 'SORTED_AND_I_MULTIPLICATED':
            var key_2 = transformation_0.normalizationType;
            var value_2 = new Pair(left.cloneWithSortingChildrenForExpressionSubstitutionComparison().iMultiplicativeNormForm(), right.cloneWithSortingChildrenForExpressionSubstitutionComparison());
            normFormsOfExpressionNode.put_xwzc9p$(key_2, value_2);
            break;
        }
      }
      var l_0 = ensureNotNull(normFormsOfExpressionNode.get_11rb$(transformation_0.normalizationType)).first.clone();
      var r_0 = ensureNotNull(normFormsOfExpressionNode.get_11rb$(transformation_0.normalizationType)).second.clone();
      var direction = getComparingDirection(expressionChainComparisonType, transformation_0.comparisonType);
      if (direction == null) {
        log_1.add_jcldl0$(expressionChainComparisonType.string, transformation_0.comparisonType.string, ExpressionComparator$compareWithTreeTransformationRulesInternal$lambda_0, ExpressionComparator$compareWithTreeTransformationRulesInternal$lambda_1, ExpressionComparator$compareWithTreeTransformationRulesInternal$lambda_2, void 0, void 0, MessageType$USER_getInstance());
      }
      if (!equals(direction, SubstitutionDirection$RIGHT_TO_LEFT_getInstance())) {
        tmp$_5 = transformation_0.findAllPossibleSubstitutionPlaces_i8kf4x$(l_0, this);
      }
       else {
        tmp$_5 = emptyList();
      }
      if (!equals(direction, SubstitutionDirection$LEFT_TO_RIGHT_getInstance())) {
        tmp$_6 = transformation_0.findAllPossibleSubstitutionPlaces_i8kf4x$(r_0, this);
      }
       else {
        tmp$_6 = emptyList();
      }
      var substitutionPlaces = plus(tmp$_5, tmp$_6);
      var bitMaskCount = 1 << substitutionPlaces.size;
      if ((substitutionPlaces.size * 2 | 0) > 32 || bitMaskCount > maxBustCount || Kotlin.imul(bitMaskCount, transformations.size) > maxBustCount) {
        transformation_0.applySubstitution_3grqus$(substitutionPlaces, this);
        if (this.compareWithTreeTransformationRulesInternal_l7tdci$(l_0, r_0, transformations, maxTransformationWeight - transformation_0.weight, maxBustCount, minTransformationWeight, expressionChainComparisonType, sortOperands)) {
          return true;
        }
        if (substitutionPlaces.size > 1) {
          var bitMask = 1;
          while (bitMask < bitMaskCount) {
            transformation_0.applySubstitutionByBitMask_uet8du$(substitutionPlaces, bitMask);
            if (this.compareWithTreeTransformationRulesInternal_l7tdci$(l_0.clone(), r_0.clone(), transformations, maxTransformationWeight - transformation_0.weight, maxBustCount, minTransformationWeight, expressionChainComparisonType, sortOperands)) {
              return true;
            }
            bitMask = bitMask << 1;
          }
        }
      }
       else {
        for (var bitMask_0 = 1; bitMask_0 < bitMaskCount; bitMask_0++) {
          transformation_0.applySubstitutionByBitMask_uet8du$(substitutionPlaces, bitMask_0);
          if (this.compareWithTreeTransformationRulesInternal_l7tdci$(l_0.clone(), r_0.clone(), transformations, maxTransformationWeight - transformation_0.weight, maxBustCount, minTransformationWeight, expressionChainComparisonType, sortOperands)) {
            return true;
          }
        }
      }
    }
    return false;
  };
  ExpressionComparator.prototype.fullExpressionsCompare_f7l7x0$ = function (left, right, expressionChainComparisonType) {
    if (expressionChainComparisonType === void 0)
      expressionChainComparisonType = ComparisonType$EQUAL_getInstance();
    applyAllSubstitutions(left, this.compiledConfiguration.compiledImmediateTreeTransformationRules);
    applyAllSubstitutions(right, this.compiledConfiguration.compiledImmediateTreeTransformationRules);
    if (this.compiledConfiguration.comparisonSettings.isComparisonWithRules) {
      if (this.compareWithTreeTransformationRulesInternal_l7tdci$(left, right, this.compiledConfiguration.compiledExpressionTreeTransformationRules, this.compiledConfiguration.comparisonSettings.maxTransformationWeight, this.compiledConfiguration.comparisonSettings.maxBustCount, void 0, expressionChainComparisonType))
        return true;
      this.baseOperationsDefinitions.simplifyExpressionTree_em03xr$(left.children.get_za3lpa$(0));
      this.baseOperationsDefinitions.simplifyExpressionTree_em03xr$(right.children.get_za3lpa$(0));
      if (this.compareWithTreeTransformationRulesInternal_l7tdci$(left, right, this.compiledConfiguration.compiledExpressionTreeTransformationRules, this.compiledConfiguration.comparisonSettings.maxTransformationWeight, this.compiledConfiguration.comparisonSettings.maxBustCount, void 0, expressionChainComparisonType))
        return true;
    }
     else {
      if (this.compareWithoutSubstitutions_fb5b0y$(left, right))
        return true;
    }
    return false;
  };
  ExpressionComparator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionComparator',
    interfaces: []
  };
  function getComparingDirection(expressionChainComparisonType, transformationComparisonType) {
    var tmp$;
    switch (expressionChainComparisonType.name) {
      case 'EQUAL':
        tmp$ = transformationComparisonType === ComparisonType$EQUAL_getInstance() ? SubstitutionDirection$ALL_TO_ALL_getInstance() : null;
        break;
      case 'LEFT_MORE_OR_EQUAL':
        switch (transformationComparisonType.name) {
          case 'EQUAL':
            tmp$ = SubstitutionDirection$ALL_TO_ALL_getInstance();
            break;
          case 'LEFT_MORE_OR_EQUAL':
          case 'LEFT_MORE':
            tmp$ = SubstitutionDirection$LEFT_TO_RIGHT_getInstance();
            break;
          case 'LEFT_LESS_OR_EQUAL':
          case 'LEFT_LESS':
            tmp$ = SubstitutionDirection$RIGHT_TO_LEFT_getInstance();
            break;
          default:tmp$ = Kotlin.noWhenBranchMatched();
            break;
        }

        break;
      case 'LEFT_LESS_OR_EQUAL':
        switch (transformationComparisonType.name) {
          case 'EQUAL':
            tmp$ = SubstitutionDirection$ALL_TO_ALL_getInstance();
            break;
          case 'LEFT_MORE_OR_EQUAL':
          case 'LEFT_MORE':
            tmp$ = SubstitutionDirection$RIGHT_TO_LEFT_getInstance();
            break;
          case 'LEFT_LESS_OR_EQUAL':
          case 'LEFT_LESS':
            tmp$ = SubstitutionDirection$LEFT_TO_RIGHT_getInstance();
            break;
          default:tmp$ = Kotlin.noWhenBranchMatched();
            break;
        }

        break;
      case 'LEFT_MORE':
        switch (transformationComparisonType.name) {
          case 'LEFT_MORE':
            tmp$ = SubstitutionDirection$LEFT_TO_RIGHT_getInstance();
            break;
          case 'LEFT_LESS':
            tmp$ = SubstitutionDirection$RIGHT_TO_LEFT_getInstance();
            break;
          default:tmp$ = null;
            break;
        }

        break;
      case 'LEFT_LESS':
        switch (transformationComparisonType.name) {
          case 'LEFT_MORE':
            tmp$ = SubstitutionDirection$RIGHT_TO_LEFT_getInstance();
            break;
          case 'LEFT_LESS':
            tmp$ = SubstitutionDirection$LEFT_TO_RIGHT_getInstance();
            break;
          default:tmp$ = null;
            break;
        }

        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  }
  function Comparator$ObjectLiteral_1(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_1.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_1.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function Comparator$ObjectLiteral_2(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_2.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_2.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_0 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function Comparator$ObjectLiteral_3(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_3.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_3.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  function NodeType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function NodeType_initFields() {
    NodeType_initFields = function () {
    };
    NodeType$FUNCTION_instance = new NodeType('FUNCTION', 0);
    NodeType$VARIABLE_instance = new NodeType('VARIABLE', 1);
    NodeType$EMPTY_instance = new NodeType('EMPTY', 2);
    NodeType$ERROR_instance = new NodeType('ERROR', 3);
  }
  var NodeType$FUNCTION_instance;
  function NodeType$FUNCTION_getInstance() {
    NodeType_initFields();
    return NodeType$FUNCTION_instance;
  }
  var NodeType$VARIABLE_instance;
  function NodeType$VARIABLE_getInstance() {
    NodeType_initFields();
    return NodeType$VARIABLE_instance;
  }
  var NodeType$EMPTY_instance;
  function NodeType$EMPTY_getInstance() {
    NodeType_initFields();
    return NodeType$EMPTY_instance;
  }
  var NodeType$ERROR_instance;
  function NodeType$ERROR_getInstance() {
    NodeType_initFields();
    return NodeType$ERROR_instance;
  }
  NodeType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeType',
    interfaces: [Enum]
  };
  function NodeType$values() {
    return [NodeType$FUNCTION_getInstance(), NodeType$VARIABLE_getInstance(), NodeType$EMPTY_getInstance(), NodeType$ERROR_getInstance()];
  }
  NodeType.values = NodeType$values;
  function NodeType$valueOf(name) {
    switch (name) {
      case 'FUNCTION':
        return NodeType$FUNCTION_getInstance();
      case 'VARIABLE':
        return NodeType$VARIABLE_getInstance();
      case 'EMPTY':
        return NodeType$EMPTY_getInstance();
      case 'ERROR':
        return NodeType$ERROR_getInstance();
      default:throwISE('No enum constant mathhelper.twf.expressiontree.NodeType.' + name);
    }
  }
  NodeType.valueOf_61zpoe$ = NodeType$valueOf;
  function NodeValue(exactNumber) {
    this.exactNumber = exactNumber;
  }
  NodeValue.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeValue',
    interfaces: []
  };
  NodeValue.prototype.component1 = function () {
    return this.exactNumber;
  };
  NodeValue.prototype.copy_za3lpa$ = function (exactNumber) {
    return new NodeValue(exactNumber === void 0 ? this.exactNumber : exactNumber);
  };
  NodeValue.prototype.toString = function () {
    return 'NodeValue(exactNumber=' + Kotlin.toString(this.exactNumber) + ')';
  };
  NodeValue.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.exactNumber) | 0;
    return result;
  };
  NodeValue.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.exactNumber, other.exactNumber))));
  };
  function ExpressionStrictureIdentifier(originalOrderIdentifier, commutativeSortedIdentifier) {
    this.originalOrderIdentifier = originalOrderIdentifier;
    this.commutativeSortedIdentifier = commutativeSortedIdentifier;
  }
  ExpressionStrictureIdentifier.prototype.equals = function (other) {
    if (Kotlin.isType(other, ExpressionStrictureIdentifier))
      return equals(this.originalOrderIdentifier, other.originalOrderIdentifier) || equals(this.commutativeSortedIdentifier, other.commutativeSortedIdentifier);
    else
      return false;
  };
  ExpressionStrictureIdentifier.prototype.hashCode = function () {
    return 1;
  };
  ExpressionStrictureIdentifier.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionStrictureIdentifier',
    interfaces: []
  };
  ExpressionStrictureIdentifier.prototype.component1 = function () {
    return this.originalOrderIdentifier;
  };
  ExpressionStrictureIdentifier.prototype.component2 = function () {
    return this.commutativeSortedIdentifier;
  };
  ExpressionStrictureIdentifier.prototype.copy_puj7f4$ = function (originalOrderIdentifier, commutativeSortedIdentifier) {
    return new ExpressionStrictureIdentifier(originalOrderIdentifier === void 0 ? this.originalOrderIdentifier : originalOrderIdentifier, commutativeSortedIdentifier === void 0 ? this.commutativeSortedIdentifier : commutativeSortedIdentifier);
  };
  ExpressionStrictureIdentifier.prototype.toString = function () {
    return 'ExpressionStrictureIdentifier(originalOrderIdentifier=' + Kotlin.toString(this.originalOrderIdentifier) + (', commutativeSortedIdentifier=' + Kotlin.toString(this.commutativeSortedIdentifier)) + ')';
  };
  function ExpressionNode(nodeType, value, startPosition, endPosition, subValue, parent, functionStringDefinition, identifier, nodeId, distanceToRoot, expressionStrictureIdentifier, lastAppliedSubstitution, lastModifiedStepId) {
    if (startPosition === void 0)
      startPosition = -1;
    if (endPosition === void 0)
      endPosition = -1;
    if (subValue === void 0)
      subValue = '';
    if (parent === void 0)
      parent = null;
    if (functionStringDefinition === void 0)
      functionStringDefinition = null;
    if (identifier === void 0)
      identifier = '';
    if (nodeId === void 0)
      nodeId = -1;
    if (distanceToRoot === void 0)
      distanceToRoot = 0;
    if (expressionStrictureIdentifier === void 0)
      expressionStrictureIdentifier = null;
    if (lastAppliedSubstitution === void 0)
      lastAppliedSubstitution = null;
    if (lastModifiedStepId === void 0)
      lastModifiedStepId = -1;
    this.nodeType = nodeType;
    this.value = value;
    this.startPosition = startPosition;
    this.endPosition = endPosition;
    this.subValue = subValue;
    this.parent = parent;
    this.functionStringDefinition = functionStringDefinition;
    this.identifier = identifier;
    this.nodeId = nodeId;
    this.distanceToRoot = distanceToRoot;
    this.expressionStrictureIdentifier = expressionStrictureIdentifier;
    this.lastAppliedSubstitution = lastAppliedSubstitution;
    this.lastModifiedStepId = lastModifiedStepId;
    this.children = ArrayList_init();
    this.rules = ArrayList_init();
    this.parserMark = '';
    this.linkOnOriginalTreeNode = null;
  }
  ExpressionNode.prototype.addChild_em03xr$ = function (newNode) {
    this.children.add_11rb$(newNode);
    newNode.parent = this;
  };
  ExpressionNode.prototype.addChildOnPosition_gk94xr$ = function (newNode, position) {
    this.children.add_wxm5ur$(position, newNode);
    newNode.parent = this;
  };
  ExpressionNode.prototype.setChildOnPosition_gk94xr$ = function (newNode, position) {
    this.children.set_wxm5ur$(position, newNode);
    newNode.parent = this;
  };
  ExpressionNode.prototype.setVariable_14dthe$ = function (value) {
    var stringValue = toShortString(value);
    this.setVariable_61zpoe$(stringValue);
  };
  ExpressionNode.prototype.setVariable_61zpoe$ = function (value) {
    this.setVariableWithoutChildrenClearing_61zpoe$(value);
    this.children.clear();
  };
  ExpressionNode.prototype.setVariableWithoutChildrenClearing_61zpoe$ = function (value) {
    this.nodeType = NodeType$VARIABLE_getInstance();
    this.value = value;
    this.identifier = value;
    this.functionStringDefinition = null;
  };
  ExpressionNode.prototype.setFunction_ke2f21$ = function (value, functionConfiguration) {
    this.nodeType = NodeType$FUNCTION_getInstance();
    this.value = value;
    this.functionStringDefinition = functionConfiguration.fastFindStringDefinitionByNameAndNumberOfArguments_bm4lxs$(value, this.children.size);
    this.identifier = this.computeIdentifier_5osufp$();
  };
  ExpressionNode.prototype.setLastAppliedSubstitutionForAllNodes_1plxii$ = function (substitution) {
    var tmp$;
    this.lastAppliedSubstitution = substitution;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.setLastAppliedSubstitutionForAllNodes_1plxii$(substitution);
    }
  };
  ExpressionNode.prototype.setStepIdForAllNodes_za3lpa$ = function (stepId) {
    var tmp$;
    this.lastModifiedStepId = stepId;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.setStepIdForAllNodes_za3lpa$(stepId);
    }
  };
  ExpressionNode.prototype.setNode_em03xr$ = function (value) {
    this.nodeType = value.nodeType;
    this.value = value.value;
    this.identifier = value.identifier;
    this.functionStringDefinition = value.functionStringDefinition;
    if (!equals(this.children, value.children)) {
      this.children.clear();
    }
    this.children = value.children;
    var tmp$;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.parent = this;
    }
    this.subValue = value.subValue;
  };
  ExpressionNode.prototype.isNumberValue = function () {
    return !isBlank(this.value) && (isNumberPart(first_1(this.value)) || equals(this.value, '\u03C0') || equals(this.value, 'e'));
  };
  ExpressionNode.prototype.isIntNumber = function () {
    var tmp$;
    if (this.value.length === 0 && this.children.size === 1) {
      return first(this.children).isIntNumber();
    }
    if (isBlank(this.value) || !isNumberPart(first_1(this.value))) {
      return false;
    }
    tmp$ = toDoubleOrNull(this.value);
    if (tmp$ == null) {
      return false;
    }
    var number = tmp$;
    var numberFloor = Math_0.floor(number);
    if (!BaseOperationsComputation$Companion_getInstance().additivelyEqual_lu1900$(numberFloor, number)) {
      return false;
    }
    return true;
  };
  ExpressionNode.prototype.isOddNumber = function () {
    var tmp$;
    if (this.value.length === 0 && this.children.size === 1) {
      return first(this.children).isOddNumber();
    }
    if (isBlank(this.value) || !isNumberPart(first_1(this.value))) {
      return false;
    }
    tmp$ = toDoubleOrNull(this.value);
    if (tmp$ == null) {
      return false;
    }
    var number = tmp$;
    var numberDiv2 = numberToInt(number) / 2 | 0;
    if (!BaseOperationsComputation$Companion_getInstance().additivelyEqual_lu1900$(numberDiv2 * 2.0 + 1.0, number)) {
      return false;
    }
    return true;
  };
  ExpressionNode.prototype.isAdditivelyEqualTo_14dthe$ = function (number) {
    var tmp$;
    if (this.value.length === 0 && this.children.size === 1) {
      return first(this.children).isAdditivelyEqualTo_14dthe$(number);
    }
    if (isBlank(this.value) || !isNumberPart(first_1(this.value))) {
      return false;
    }
    tmp$ = toDoubleOrNull(this.value);
    if (tmp$ == null) {
      return false;
    }
    var valueNumber = tmp$;
    if (!BaseOperationsComputation$Companion_getInstance().additivelyEqual_lu1900$(valueNumber, number)) {
      return false;
    }
    return true;
  };
  ExpressionNode.prototype.getNodeValueString = function () {
    switch (this.value) {
      case '3.14159265':
        return PI_STRING_USUAL;
      case '2.71828183':
        return E_STRING_USUAL;
      default:return this.value;
    }
  };
  ExpressionNode.prototype.getComputeNodeValue_pp5jxl$ = function (computeExpressionVariableType) {
    switch (computeExpressionVariableType.name) {
      case 'ALL_TO_NUMBERS':
        return this.value;
      case 'ALL_TO_NUMBERS_OR_PI_OR_E':
      case 'ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED':
        return this.getNodeValueString();
      default:return Kotlin.noWhenBranchMatched();
    }
  };
  ExpressionNode.prototype.getTexNodeValueString = function () {
    if (equals(this.value, PI_STRING))
      return PI_STRING_TEX;
    else
      return this.value;
  };
  ExpressionNode.prototype.getTopNode = function () {
    var result = this;
    while (result.parent != null) {
      result = ensureNotNull(result.parent);
    }
    return result;
  };
  ExpressionNode.prototype.getFirstNotBracketChild = function () {
    var result = this;
    while (equals(result.value, '') && result.children.size === 1) {
      result = first(result.children);
    }
    return result;
  };
  ExpressionNode.prototype.getChildNodesOnDepthOrWhileOperation_okkhzr$ = function (depth, operationList) {
    var tmp$;
    var result = ArrayList_init();
    if (depth < 1 && !operationList.contains_11rb$(this.value))
      return result;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      result.add_11rb$(child);
      result.addAll_brywnq$(child.getChildNodesOnDepthOrWhileOperation_okkhzr$(depth - 1 | 0, operationList));
    }
    return result;
  };
  ExpressionNode.prototype.getChildNodesWhileOperation_mhpeer$ = function (operationList) {
    var tmp$;
    var result = ArrayList_init();
    if (!operationList.contains_11rb$(this.value)) {
      result.add_11rb$(this);
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        result.addAll_brywnq$(child.getChildNodesWhileOperation_mhpeer$(operationList));
      }
    }
    return result;
  };
  ExpressionNode.prototype.resetNodeIds = function () {
    var tmp$;
    this.nodeId = -1;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.resetNodeIds();
    }
  };
  ExpressionNode.prototype.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$ = function (startId, startDistance, replaceCalculatedNodeIds) {
    if (startId === void 0)
      startId = 0;
    if (startDistance === void 0)
      startDistance = 0;
    if (replaceCalculatedNodeIds === void 0)
      replaceCalculatedNodeIds = true;
    var tmp$;
    if (replaceCalculatedNodeIds || this.nodeId < 0) {
      this.nodeId = startId;
    }
    var currentStartId = startId + 1 | 0;
    this.distanceToRoot = startDistance;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      currentStartId = child.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$(currentStartId, startDistance + 1 | 0, replaceCalculatedNodeIds);
    }
    return currentStartId;
  };
  ExpressionNode.prototype.correctPositions = function () {
    var tmp$;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.correctPositions();
      if (child.startPosition < this.startPosition) {
        this.startPosition = child.startPosition;
      }
      if (child.endPosition > this.endPosition) {
        this.endPosition = child.endPosition;
      }
    }
  };
  ExpressionNode.prototype.normalizeParentLinks = function () {
    var tmp$;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.normalizeParentLinks();
      child.parent = this;
    }
  };
  ExpressionNode.prototype.normalizeFunctionStringDefinitions_z11m8b$ = function (functionConfiguration) {
    var tmp$;
    this.functionStringDefinition = functionConfiguration.fastFindStringDefinitionByNameAndNumberOfArguments_bm4lxs$(this.value, this.children.size);
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.normalizeFunctionStringDefinitions_z11m8b$(functionConfiguration);
    }
  };
  ExpressionNode.prototype.reduceExtraSigns_9jge9g$ = function (extraUnaryFunctions, exclusionChildFunctions) {
    if (exclusionChildFunctions === void 0) {
      exclusionChildFunctions = emptySet();
    }
    for (var i = get_lastIndex(this.children); i >= 0; i--) {
      this.children.get_za3lpa$(i).reduceExtraSigns_9jge9g$(extraUnaryFunctions, exclusionChildFunctions);
      if ((this.children.size === 1 || !extraUnaryFunctions.contains_11rb$(this.value)) && this.children.get_za3lpa$(i).children.size === 1 && extraUnaryFunctions.contains_11rb$(this.children.get_za3lpa$(i).value) && !exclusionChildFunctions.contains_11rb$(first(this.children.get_za3lpa$(i).children).value)) {
        this.children.set_wxm5ur$(i, first(this.children.get_za3lpa$(i).children));
        this.children.get_za3lpa$(i).parent = this;
      }
    }
  };
  ExpressionNode.prototype.normalizeNumbers = function () {
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      var double = toDoubleOrNull(this.value);
      if (double != null) {
        this.setVariable_14dthe$(double);
      }
    }
     else {
      var tmp$;
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        element.normalizeNumbers();
      }
    }
  };
  ExpressionNode.prototype.normalizeTrivialFunctions = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    var tmp$_7;
    tmp$_7 = this.children.iterator();
    while (tmp$_7.hasNext()) {
      var element = tmp$_7.next();
      element.normalizeTrivialFunctions();
    }
    if (this.nodeType === NodeType$FUNCTION_getInstance() && ((tmp$_0 = (tmp$ = this.functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.numberOfArguments : null) === -1 && equals((tmp$_2 = (tmp$_1 = this.functionStringDefinition) != null ? tmp$_1.function : null) != null ? tmp$_2.notObligateMainFunction() : null, (tmp$_4 = (tmp$_3 = this.functionStringDefinition) != null ? tmp$_3.function : null) != null ? tmp$_4.function : null) && this.children.size === 1 && !equals((tmp$_6 = (tmp$_5 = first(this.children).functionStringDefinition) != null ? tmp$_5.function : null) != null ? tmp$_6.mainFunction : null, this.value)) {
      this.setNode_em03xr$(first(this.children));
    }
  };
  ExpressionNode.prototype.normalizeSubtructions_z11m8b$ = function (functionConfiguration) {
    for (var i = get_lastIndex(this.children); i >= 0; i--) {
      this.children.get_za3lpa$(i).normalizeSubtructions_z11m8b$(functionConfiguration);
      if (this.children.get_za3lpa$(i).nodeType === NodeType$VARIABLE_getInstance() && startsWith(this.children.get_za3lpa$(i).value, '-')) {
        var double = toDoubleOrNull(this.children.get_za3lpa$(i).value);
        if (double != null && double > 0 && numberToInt(double) === double) {
          this.setVariable_14dthe$(double);
        }
         else if (double != null && double <= 0) {
          if (equals(this.value, '-')) {
            this.setVariable_14dthe$(-double);
          }
           else {
            var valueNode = new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(-double));
            var minusNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '-');
            minusNode.addChild_em03xr$(valueNode);
            if (!equals(this.value, '+')) {
              this.children.set_wxm5ur$(i, minusNode);
              minusNode.parent = this;
            }
             else {
              var plusNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '+');
              plusNode.addChild_em03xr$(minusNode);
              this.children.set_wxm5ur$(i, plusNode);
              plusNode.parent = this;
            }
          }
        }
      }
      if (!this.children.isEmpty() && equals(this.children.get_za3lpa$(i).value, '-') && !equals(this.value, '+')) {
        var plusParent = new ExpressionNode(NodeType$FUNCTION_getInstance(), '+', this.children.get_za3lpa$(i).startPosition, this.children.get_za3lpa$(i).endPosition, '', this, functionConfiguration.fastFindStringDefinitionByNameAndNumberOfArguments_bm4lxs$('+', 1));
        plusParent.addChild_em03xr$(this.children.get_za3lpa$(i));
        this.children.set_wxm5ur$(i, plusParent);
      }
    }
  };
  ExpressionNode.prototype.normalizeNullWeightCommutativeFunctions = function () {
    var tmp$, tmp$_0;
    for (var i = get_lastIndex(this.children); i >= 0; i--) {
      this.children.get_za3lpa$(i).normalizeNullWeightCommutativeFunctions();
      if (this.children.get_za3lpa$(i).children.size === 1 && (((tmp$_0 = (tmp$ = this.children.get_za3lpa$(i).functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.isCommutativeWithNullWeight : null) === true || equals(this.children.get_za3lpa$(i).value, ''))) {
        first(this.children.get_za3lpa$(i).children).parent = this;
        this.children.set_wxm5ur$(i, first(this.children.get_za3lpa$(i).children));
      }
    }
  };
  function ExpressionNode$fillStructureStringIdentifiers$lambda(it) {
    return it.getNodeValueString();
  }
  function ExpressionNode$fillStructureStringIdentifiers$lambda_0(it) {
    return ensureNotNull(it.expressionStrictureIdentifier).originalOrderIdentifier;
  }
  function ExpressionNode$fillStructureStringIdentifiers$lambda_1(it) {
    return ensureNotNull(it.expressionStrictureIdentifier).commutativeSortedIdentifier;
  }
  function ExpressionNode$fillStructureStringIdentifiers$lambda_2(it) {
    return ensureNotNull(it.expressionStrictureIdentifier).commutativeSortedIdentifier;
  }
  function ExpressionNode$fillStructureStringIdentifiers$lambda_3(it) {
    return ensureNotNull(it.expressionStrictureIdentifier).commutativeSortedIdentifier;
  }
  ExpressionNode.prototype.fillStructureStringIdentifiers_5osufp$ = function (getNodeValueString) {
    if (getNodeValueString === void 0)
      getNodeValueString = ExpressionNode$fillStructureStringIdentifiers$lambda;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      var v = getNodeValueString(this);
      this.expressionStrictureIdentifier = new ExpressionStrictureIdentifier(v, v);
    }
     else {
      var start = this.value + '(';
      this.expressionStrictureIdentifier = new ExpressionStrictureIdentifier(start, start);
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        child.fillStructureStringIdentifiers_5osufp$(getNodeValueString);
      }
      ensureNotNull(this.expressionStrictureIdentifier).originalOrderIdentifier = ensureNotNull(this.expressionStrictureIdentifier).originalOrderIdentifier + joinToString(this.children, ';', void 0, void 0, void 0, void 0, ExpressionNode$fillStructureStringIdentifiers$lambda_0);
      tmp$_3 = ensureNotNull(this.expressionStrictureIdentifier);
      tmp$_4 = tmp$_3.commutativeSortedIdentifier;
      if (((tmp$_1 = (tmp$_0 = this.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) === true) {
        tmp$_2 = joinToString(sortedWith(this.children, new Comparator$ObjectLiteral_1(compareBy$lambda(ExpressionNode$fillStructureStringIdentifiers$lambda_1))), ';', void 0, void 0, void 0, void 0, ExpressionNode$fillStructureStringIdentifiers$lambda_2);
      }
       else {
        tmp$_2 = joinToString(this.children, ';', void 0, void 0, void 0, void 0, ExpressionNode$fillStructureStringIdentifiers$lambda_3);
      }
      tmp$_3.commutativeSortedIdentifier = tmp$_4 + tmp$_2;
      ensureNotNull(this.expressionStrictureIdentifier).originalOrderIdentifier = ensureNotNull(this.expressionStrictureIdentifier).originalOrderIdentifier + ')';
      ensureNotNull(this.expressionStrictureIdentifier).commutativeSortedIdentifier = ensureNotNull(this.expressionStrictureIdentifier).commutativeSortedIdentifier + ')';
    }
  };
  function ExpressionNode$computeIdentifier$lambda(it) {
    return it.getNodeValueString();
  }
  ExpressionNode.prototype.computeIdentifier_5osufp$ = function (getNodeValueString) {
    if (getNodeValueString === void 0)
      getNodeValueString = ExpressionNode$computeIdentifier$lambda;
    var tmp$;
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      this.identifier = getNodeValueString(this);
    }
     else {
      this.identifier = this.value + '(';
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        this.identifier += child.computeIdentifier_5osufp$(getNodeValueString) + ';';
      }
      if (this.children.size > 0) {
        var $receiver = this.identifier;
        var endIndex = this.identifier.length - 1 | 0;
        this.identifier = $receiver.substring(0, endIndex);
      }
      this.identifier += ')';
    }
    return this.identifier;
  };
  function ExpressionNode$computeIdentifierWithPositions$lambda(it) {
    return it.getNodeValueString();
  }
  ExpressionNode.prototype.computeIdentifierWithPositions_5osufp$ = function (getNodeValueString) {
    if (getNodeValueString === void 0)
      getNodeValueString = ExpressionNode$computeIdentifierWithPositions$lambda;
    var tmp$;
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      this.identifier = getNodeValueString(this);
    }
     else {
      this.identifier = this.value + '(';
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        this.identifier += child.computeIdentifierWithPositions_5osufp$(getNodeValueString) + ';';
      }
      if (this.children.size > 0) {
        var $receiver = this.identifier;
        var endIndex = this.identifier.length - 1 | 0;
        this.identifier = $receiver.substring(0, endIndex);
      }
      this.identifier += ')';
    }
    return this.identifier + ('{' + this.startPosition + ';' + this.endPosition + '}');
  };
  function ExpressionNode$toStringsWithPositions$lambda(it) {
    return it.getNodeValueString();
  }
  ExpressionNode.prototype.toStringsWithPositions_gcyceb$ = function (getNodeValueString, offset) {
    if (getNodeValueString === void 0)
      getNodeValueString = ExpressionNode$toStringsWithPositions$lambda;
    if (offset === void 0)
      offset = '';
    var tmp$;
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      this.identifier = offset + getNodeValueString(this) + ('  :  [' + this.startPosition + '; ' + this.endPosition + '; ' + this.nodeId + ']' + '\n');
    }
     else {
      this.identifier = offset + this.value + ('  :  [' + this.startPosition + '; ' + this.endPosition + '; ' + this.nodeId + ']' + '\n');
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        this.identifier += child.toStringsWithPositions_gcyceb$(getNodeValueString, offset + '  ');
      }
    }
    return this.identifier;
  };
  function ExpressionNode$toStringsWithNodeIds$lambda(it) {
    return it.getNodeValueString();
  }
  ExpressionNode.prototype.toStringsWithNodeIds_gcyceb$ = function (getNodeValueString, offset) {
    if (getNodeValueString === void 0)
      getNodeValueString = ExpressionNode$toStringsWithNodeIds$lambda;
    if (offset === void 0)
      offset = '';
    var tmp$;
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      this.identifier = offset + getNodeValueString(this) + ('  :  [' + this.nodeId + ']' + '\n');
    }
     else {
      this.identifier = offset + this.value + ('  :  [' + this.nodeId + ']' + '\n');
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        this.identifier += child.toStringsWithNodeIds_gcyceb$(getNodeValueString, offset + '  ');
      }
    }
    return this.identifier;
  };
  function ExpressionNode$toPlainTextView$lambda(it) {
    return it.getNodeValueString();
  }
  function ExpressionNode$toPlainTextView$lambda_0(it) {
    return it.plainTextRepresentation;
  }
  ExpressionNode.prototype.toPlainTextView_8ellkq$ = function (functionConfiguration, getNodeValueString, functionNameGetter) {
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    if (getNodeValueString === void 0)
      getNodeValueString = ExpressionNode$toPlainTextView$lambda;
    if (functionNameGetter === void 0)
      functionNameGetter = ExpressionNode$toPlainTextView$lambda_0;
    var tmp$;
    var result = this.toPlainTextViewRec_0(functionConfiguration, getNodeValueString, functionNameGetter);
    if (first_1(result) === 40 && last_0(result) === 41) {
      var numberOfOpenBrackets = 1;
      var currentIndex = 1;
      while (currentIndex < result.length && numberOfOpenBrackets > 0) {
        if (result.charCodeAt(currentIndex) === 40) {
          numberOfOpenBrackets = numberOfOpenBrackets + 1 | 0;
        }
         else if (result.charCodeAt(currentIndex) === 41) {
          tmp$ = numberOfOpenBrackets, numberOfOpenBrackets = tmp$ - 1 | 0;
        }
        currentIndex = currentIndex + 1 | 0;
      }
      if (currentIndex >= get_lastIndex_0(result)) {
        var $receiver = result;
        var endIndex = result.length - 1 | 0;
        result = $receiver.substring(1, endIndex);
      }
    }
    return result;
  };
  ExpressionNode.prototype.toPlainTextViewRec_0 = function (functionConfiguration, getNodeValueString, functionNameGetter) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var identifier = '';
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      identifier = getNodeValueString(this);
    }
     else if (equals(this.value, '') && this.children.size === 1) {
      identifier = first(this.children).toPlainTextViewRec_0(functionConfiguration, getNodeValueString, functionNameGetter);
    }
     else {
      var $receiver = functionConfiguration.functionProperties;
      var destination = ArrayList_init();
      var tmp$_6;
      tmp$_6 = $receiver.iterator();
      while (tmp$_6.hasNext()) {
        var element = tmp$_6.next();
        if (equals(element.function, this.value) && element.defaultStringDefinitionType !== StringDefinitionType$FUNCTION_getInstance())
          destination.add_11rb$(element);
      }
      if (!destination.isEmpty()) {
        var $receiver_0 = functionConfiguration.functionProperties;
        var firstOrNull$result;
        firstOrNull$break: do {
          var tmp$_7;
          tmp$_7 = $receiver_0.iterator();
          while (tmp$_7.hasNext()) {
            var element_0 = tmp$_7.next();
            if (equals(element_0.function, this.value)) {
              firstOrNull$result = element_0;
              break firstOrNull$break;
            }
          }
          firstOrNull$result = null;
        }
         while (false);
        var functionIdentifier = ensureNotNull(firstOrNull$result);
        switch (functionIdentifier.defaultStringDefinitionType.name) {
          case 'BINARY_OPERATION':
            if (this.binaryOperationNeedBrackets_0()) {
              identifier = '(';
            }

            if (this.children.size > 0) {
              identifier += first(this.children).toPlainTextViewRec_0(functionConfiguration, getNodeValueString, functionNameGetter);
              tmp$ = get_lastIndex(this.children);
              for (var i = 1; i <= tmp$; i++) {
                if (!equals((tmp$_0 = functionConfiguration.functionPropertiesByName.get_11rb$(this.children.get_za3lpa$(i).value + '_-1')) != null ? tmp$_0.mainFunction : null, functionIdentifier.function) || equals((tmp$_1 = functionConfiguration.functionPropertiesByName.get_11rb$(this.children.get_za3lpa$(i).value + '_-1')) != null ? tmp$_1.function : null, functionIdentifier.function)) {
                  identifier += functionNameGetter(functionIdentifier);
                }
                identifier += this.children.get_za3lpa$(i).toPlainTextViewRec_0(functionConfiguration, getNodeValueString, functionNameGetter);
              }
            }

            if (this.binaryOperationNeedBrackets_0()) {
              identifier += ')';
            }

            break;
          case 'UNARY_LEFT_OPERATION':
            tmp$_3 = listOf_0([StringDefinitionType$FUNCTION_getInstance(), StringDefinitionType$BINARY_OPERATION_getInstance()]);
            var $receiver_1 = functionConfiguration.functionProperties;
            var firstOrNull$result_0;
            firstOrNull$break: do {
              var tmp$_8;
              tmp$_8 = $receiver_1.iterator();
              while (tmp$_8.hasNext()) {
                var element_1 = tmp$_8.next();
                var tmp$_9;
                if (equals(element_1.function, (tmp$_9 = this.parent) != null ? tmp$_9.value : null)) {
                  firstOrNull$result_0 = element_1;
                  break firstOrNull$break;
                }
              }
              firstOrNull$result_0 = null;
            }
             while (false);
            if (contains(tmp$_3, (tmp$_2 = firstOrNull$result_0) != null ? tmp$_2.defaultStringDefinitionType : null)) {
              identifier += functionNameGetter(functionIdentifier) + first(this.children).toPlainTextViewRec_0(functionConfiguration, getNodeValueString, functionNameGetter);
            }
             else {
              identifier += '(' + functionNameGetter(functionIdentifier) + first(this.children).toPlainTextViewRec_0(functionConfiguration, getNodeValueString, functionNameGetter) + ')';
            }

            break;
          case 'UNARY_RIGHT_OPERATION':
            var childplainTextRepresentation = first(this.children).toPlainTextViewRec_0(functionConfiguration, getNodeValueString, functionNameGetter);
            if (isSign(first_1(childplainTextRepresentation), 32, false)) {
              tmp$_4 = '(' + childplainTextRepresentation + ')';
            }
             else {
              tmp$_4 = childplainTextRepresentation;
            }

            identifier = tmp$_4 + functionNameGetter(functionIdentifier);
            break;
        }
      }
       else {
        identifier = this.value + '(';
        tmp$_5 = this.children.iterator();
        while (tmp$_5.hasNext()) {
          var child = tmp$_5.next();
          identifier += child.toPlainTextViewRec_0(functionConfiguration, getNodeValueString, functionNameGetter) + ',';
        }
        if (this.children.size > 0) {
          var $receiver_2 = identifier;
          var endIndex = identifier.length - 1 | 0;
          identifier = $receiver_2.substring(0, endIndex);
        }
        identifier += ')';
      }
    }
    return identifier;
  };
  function ExpressionNode$toTexView$lambda(it) {
    return it.getTexNodeValueString();
  }
  ExpressionNode.prototype.toTexView_bu354u$ = function (functionConfiguration, getNodeValueString) {
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    if (getNodeValueString === void 0)
      getNodeValueString = ExpressionNode$toTexView$lambda;
    var tmp$;
    var result = this.toTexViewRec_0(functionConfiguration, getNodeValueString);
    if (first_1(result) === 40 && last_0(result) === 41) {
      var numberOfOpenBrackets = 1;
      var currentIndex = 1;
      while (currentIndex < result.length && numberOfOpenBrackets > 0) {
        if (result.charCodeAt(currentIndex) === 40) {
          numberOfOpenBrackets = numberOfOpenBrackets + 1 | 0;
        }
         else if (result.charCodeAt(currentIndex) === 41) {
          tmp$ = numberOfOpenBrackets, numberOfOpenBrackets = tmp$ - 1 | 0;
        }
        currentIndex = currentIndex + 1 | 0;
      }
      if (currentIndex >= get_lastIndex_0(result)) {
        var $receiver = result;
        var startIndex = texOpenBracket.length;
        var endIndex = result.length - texCloseBracket.length | 0;
        result = $receiver.substring(startIndex, endIndex);
      }
    }
    return result;
  };
  function ExpressionNode$toTexViewRec$lambda(it) {
    return it.getTexNodeValueString();
  }
  ExpressionNode.prototype.toTexViewRec_0 = function (functionConfiguration, getNodeValueString) {
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    if (getNodeValueString === void 0)
      getNodeValueString = ExpressionNode$toTexViewRec$lambda;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var identifier = '';
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      identifier = getNodeValueString(this);
    }
     else if (equals(this.value, '') && this.children.size === 1) {
      identifier = first(this.children).toTexViewRec_0(functionConfiguration);
    }
     else {
      var $receiver = functionConfiguration.functionProperties;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$_5;
        tmp$_5 = $receiver.iterator();
        while (tmp$_5.hasNext()) {
          var element = tmp$_5.next();
          if (equals(element.function, this.value)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }
        }
        firstOrNull$result = null;
      }
       while (false);
      var functionIdentifier = firstOrNull$result;
      if (functionIdentifier != null && functionIdentifier.texStringDefinitionType !== StringDefinitionType$FUNCTION_getInstance()) {
        switch (functionIdentifier.texStringDefinitionType.name) {
          case 'BINARY_OPERATION':
            if (this.binaryOperationNeedBrackets_0(void 0, true)) {
              identifier = texOpenBracket;
            }

            if (equals(this.value, '/') && this.children.size === 2) {
              identifier += '\\frac{' + first(this.children).getFirstNotBracketChild().toTexViewRec_0(functionConfiguration) + '}{' + last(this.children).getFirstNotBracketChild().toTexViewRec_0(functionConfiguration) + '}';
            }
             else if (equals(this.value, 'log') && this.children.size === 2) {
              identifier += '\\log _{' + last(this.children).toTexViewRec_0(functionConfiguration) + '}{' + first(this.children).toTexViewRec_0(functionConfiguration) + '}';
            }
             else if (equals(this.value, 'sqrt') && this.children.size === 1) {
              identifier += '\\sqrt{' + first(this.children).toTexViewRec_0(functionConfiguration) + '}';
            }
             else if (equals(this.value, '^') && this.children.size >= 2) {
              tmp$ = this.children.iterator();
              while (tmp$.hasNext()) {
                var child = tmp$.next();
                identifier += '{' + child.toTexViewRec_0(functionConfiguration) + '^';
              }
              var $receiver_0 = identifier;
              var endIndex = identifier.length - 1 | 0;
              identifier = $receiver_0.substring(0, endIndex) + repeat('}', this.children.size);
            }
             else if (this.children.size > 0) {
              identifier += first(this.children).toTexViewRec_0(functionConfiguration);
              tmp$_0 = get_lastIndex(this.children);
              for (var i = 1; i <= tmp$_0; i++) {
                if (!equals((tmp$_1 = functionConfiguration.functionPropertiesByName.get_11rb$(this.children.get_za3lpa$(i).value + '_-1')) != null ? tmp$_1.mainFunction : null, functionIdentifier.function) || equals((tmp$_2 = functionConfiguration.functionPropertiesByName.get_11rb$(this.children.get_za3lpa$(i).value + '_-1')) != null ? tmp$_2.function : null, functionIdentifier.function)) {
                  identifier += ' ' + functionIdentifier.texRepresentation + ' ';
                }
                identifier += this.children.get_za3lpa$(i).toTexViewRec_0(functionConfiguration);
              }
            }

            if (this.binaryOperationNeedBrackets_0(void 0, true)) {
              identifier += texCloseBracket;
            }

            break;
          case 'UNARY_LEFT_OPERATION':
            identifier += ' ' + functionIdentifier.texRepresentation + ' ' + first(this.children).toTexViewRec_0(functionConfiguration);
            break;
          case 'UNARY_RIGHT_OPERATION':
            var childTexRepresentation = first(this.children).toTexViewRec_0(functionConfiguration);
            if (isSign(first_1(childTexRepresentation), 32, false)) {
              tmp$_3 = '(' + childTexRepresentation + ')';
            }
             else {
              tmp$_3 = childTexRepresentation;
            }

            identifier = tmp$_3 + (' ' + functionIdentifier.texRepresentation + ' ');
            break;
        }
      }
       else {
        identifier = this.value + texOpenBracket;
        tmp$_4 = this.children.iterator();
        while (tmp$_4.hasNext()) {
          var child_0 = tmp$_4.next();
          identifier += child_0.toTexViewRec_0() + ',';
        }
        if (this.children.size > 0) {
          var $receiver_1 = identifier;
          var endIndex_0 = identifier.length - 1 | 0;
          identifier = $receiver_1.substring(0, endIndex_0);
        }
        identifier += texCloseBracket;
      }
    }
    return identifier;
  };
  ExpressionNode.prototype.binaryOperationNeedBrackets_0 = function (bracketThresholdAdditive, isTex) {
    if (bracketThresholdAdditive === void 0)
      bracketThresholdAdditive = 0.2;
    if (isTex === void 0)
      isTex = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25, tmp$_26;
    if (!equals((tmp$_1 = (tmp$_0 = (tmp$ = this.parent) != null ? tmp$.functionStringDefinition : null) != null ? tmp$_0.function : null) != null ? tmp$_1.defaultStringDefinitionType : null, StringDefinitionType$FUNCTION_getInstance())) {
      var tmp$_27 = !(equals((tmp$_4 = (tmp$_3 = (tmp$_2 = this.parent) != null ? tmp$_2.functionStringDefinition : null) != null ? tmp$_3.function : null) != null ? tmp$_4.defaultStringDefinitionType : null, StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance()) || (equals((tmp$_7 = (tmp$_6 = (tmp$_5 = this.parent) != null ? tmp$_5.functionStringDefinition : null) != null ? tmp$_6.function : null) != null ? tmp$_7.defaultStringDefinitionType : null, StringDefinitionType$UNARY_LEFT_OPERATION_getInstance()) && equals((tmp$_10 = (tmp$_9 = (tmp$_8 = this.parent) != null ? tmp$_8.functionStringDefinition : null) != null ? tmp$_9.function : null) != null ? tmp$_10.function : null, (tmp$_13 = (tmp$_12 = (tmp$_11 = this.parent) != null ? tmp$_11.functionStringDefinition : null) != null ? tmp$_12.function : null) != null ? tmp$_13.mainFunction : null))) ? bracketThresholdAdditive + ((tmp$_17 = (tmp$_16 = (tmp$_15 = (tmp$_14 = this.parent) != null ? tmp$_14.functionStringDefinition : null) != null ? tmp$_15.function : null) != null ? tmp$_16.priority : null) != null ? tmp$_17 : 0.0) >= ((tmp$_20 = (tmp$_19 = (tmp$_18 = this.functionStringDefinition) != null ? tmp$_18.function : null) != null ? tmp$_19.priority : null) != null ? tmp$_20 : 0.0) : true;
      if (!tmp$_27) {
        var tmp$_28 = equals((tmp$_22 = (tmp$_21 = this.functionStringDefinition) != null ? tmp$_21.function : null) != null ? tmp$_22.defaultStringDefinitionType : null, StringDefinitionType$FUNCTION_getInstance()) && this.nodeId !== ((tmp$_25 = (tmp$_24 = (tmp$_23 = this.parent) != null ? tmp$_23.children : null) != null ? last(tmp$_24) : null) != null ? tmp$_25.nodeId : null);
        if (tmp$_28) {
          tmp$_28 = !first(this.children).children.isEmpty();
        }
        tmp$_27 = tmp$_28;
      }
      tmp$_26 = tmp$_27;
    }
     else
      tmp$_26 = false;
    return tmp$_26 && (this.parentIsNotFraction_0() || !isTex);
  };
  ExpressionNode.prototype.parentIsNotFraction_0 = function () {
    var tmp$, tmp$_0, tmp$_1;
    return !equals((tmp$ = this.parent) != null ? tmp$.value : null, '/') || ((tmp$_1 = (tmp$_0 = this.parent) != null ? tmp$_0.children : null) != null ? tmp$_1.size : null) !== 2;
  };
  ExpressionNode.prototype.isNodeValueEquals_em03xr$ = function (expressionNode) {
    return equals(this.getNodeValueString(), expressionNode.getNodeValueString());
  };
  ExpressionNode.prototype.isNodeSubtreeIdentifiersEquals_em03xr$ = function (expressionNode) {
    return equals(this.computeIdentifier_5osufp$(), expressionNode.computeIdentifier_5osufp$());
  };
  ExpressionNode.prototype.isConstant = function () {
    var tmp$;
    if (this.children.isEmpty()) {
      return this.isNumberValue();
    }
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (!child.isConstant())
        return false;
    }
    return true;
  };
  ExpressionNode.prototype.isComputableConstant = function () {
    return this.isConstant() && this.children.size > 0;
  };
  function ExpressionNode$sortChildrenAscendingIdentifiers$lambda(it) {
    return it.identifier;
  }
  ExpressionNode.prototype.sortChildrenAscendingIdentifiers = function () {
    var tmp$, tmp$_0;
    if (this.nodeType === NodeType$FUNCTION_getInstance() && ((tmp$_0 = (tmp$ = this.functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.isCommutativeWithNullWeight : null) === true) {
      var $receiver = this.children;
      if ($receiver.size > 1) {
        sortWith($receiver, new Comparator$ObjectLiteral_2(compareBy$lambda_0(ExpressionNode$sortChildrenAscendingIdentifiers$lambda)));
      }
    }
  };
  function ExpressionNode$sortChildrenAscendingNodeIds$lambda(it) {
    return it.nodeId;
  }
  ExpressionNode.prototype.sortChildrenAscendingNodeIds = function () {
    var tmp$;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.sortChildrenAscendingNodeIds();
    }
    var $receiver = this.children;
    if ($receiver.size > 1) {
      sortWith($receiver, new Comparator$ObjectLiteral_2(compareBy$lambda_0(ExpressionNode$sortChildrenAscendingNodeIds$lambda)));
    }
  };
  function ExpressionNode$sortChildrenByNodeIdsOrder$lambda(closure$nodeIdsPositionsMap) {
    return function (o1, o2) {
      return ensureNotNull(closure$nodeIdsPositionsMap.get_11rb$(o1.nodeId)) - ensureNotNull(closure$nodeIdsPositionsMap.get_11rb$(o2.nodeId)) | 0;
    };
  }
  ExpressionNode.prototype.sortChildrenByNodeIdsOrder_orwq1h$ = function (nodeIdsPositionsMap) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.sortChildrenByNodeIdsOrder_orwq1h$(nodeIdsPositionsMap);
    }
    var tmp$_2 = ((tmp$_1 = (tmp$_0 = this.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) === true;
    if (tmp$_2) {
      var $receiver = this.children;
      var all$result;
      all$break: do {
        var tmp$_3;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          all$result = true;
          break all$break;
        }
        tmp$_3 = $receiver.iterator();
        while (tmp$_3.hasNext()) {
          var element = tmp$_3.next();
          if (!nodeIdsPositionsMap.containsKey_11rb$(element.nodeId)) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      tmp$_2 = all$result;
    }
    if (tmp$_2) {
      sortWith(this.children, new Comparator$ObjectLiteral_3(ExpressionNode$sortChildrenByNodeIdsOrder$lambda(nodeIdsPositionsMap)));
    }
  };
  function ExpressionNode$sortChildrenForExpressionSubstitutionComparison$lambda(it) {
    return it.isNumberValue() ? '1' + it.identifier : it.nodeType === NodeType$FUNCTION_getInstance() && !it.haveComplexNode() ? '2' + it.value : it.nodeType === NodeType$FUNCTION_getInstance() && it.haveComplexNode() ? '3' + it.value : !equals(it.value, 'sys_def_i_complex') ? '4' : '5';
  }
  ExpressionNode.prototype.sortChildrenForExpressionSubstitutionComparison = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.sortChildrenForExpressionSubstitutionComparison();
    }
    if (this.nodeType === NodeType$FUNCTION_getInstance() && ((tmp$_1 = (tmp$_0 = this.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) === true) {
      var $receiver = this.children;
      if ($receiver.size > 1) {
        sortWith($receiver, new Comparator$ObjectLiteral_2(compareBy$lambda_0(ExpressionNode$sortChildrenForExpressionSubstitutionComparison$lambda)));
      }
    }
    return this;
  };
  ExpressionNode.prototype.cloneWithSortingChildrenForExpressionSubstitutionComparison = function () {
    return this.clone().sortChildrenForExpressionSubstitutionComparison();
  };
  ExpressionNode.prototype.getCountOfNodes = function () {
    var tmp$;
    var sum = 0;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + element.getCountOfNodes() | 0;
    }
    return 1 + sum | 0;
  };
  ExpressionNode.prototype.getMaxMinNumberOfPointsForEquality = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      return 1;
    }
     else {
      var $receiver = this.children;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$_3;
      tmp$_3 = $receiver.iterator();
      while (tmp$_3.hasNext()) {
        var item = tmp$_3.next();
        destination.add_11rb$(item.getMaxMinNumberOfPointsForEquality());
      }
      var maxMinNumberOfPointsForEquality = (tmp$ = max(destination)) != null ? tmp$ : 1;
      var b = (tmp$_2 = (tmp$_1 = (tmp$_0 = this.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.minNumberOfPointsForEquality : null) != null ? tmp$_2 : 1;
      return Math_0.max(maxMinNumberOfPointsForEquality, b);
    }
  };
  ExpressionNode.prototype.containsVariables_ywdfdh$ = function (names) {
    if (names === void 0)
      names = emptySet();
    var tmp$;
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      if (toDoubleOrNull(this.value) == null && (names.isEmpty() || names.contains_11rb$(this.value)))
        return true;
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        if (child.containsVariables_ywdfdh$(names))
          return true;
      }
    }
    return false;
  };
  ExpressionNode.prototype.haveComplexNode = function () {
    var tmp$;
    if (equals(this.value, 'sys_def_i_complex')) {
      return true;
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        if (child.haveComplexNode())
          return true;
      }
    }
    return false;
  };
  ExpressionNode.prototype.getVariableNames_ywdfdh$ = function (withoutNames) {
    if (withoutNames === void 0)
      withoutNames = emptySet();
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    var result = LinkedHashSet_init();
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      if (toDoubleOrNull(this.value) == null && !equals(this.value, 'sys_def_i_complex') && !withoutNames.contains_11rb$(this.value)) {
        result.add_11rb$(this.value);
      }
    }
     else {
      if (((tmp$_1 = (tmp$_0 = (tmp$ = this.functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.numberOfDefinitionArguments : null) != null ? tmp$_1 : 0) > 0) {
        tmp$_2 = this.enrichNodeDefinitionArgumentsNames_0(withoutNames);
      }
       else
        tmp$_2 = withoutNames;
      var extraNames = tmp$_2;
      tmp$_6 = (tmp$_5 = (tmp$_4 = (tmp$_3 = this.functionStringDefinition) != null ? tmp$_3.function : null) != null ? tmp$_4.numberOfDefinitionArguments : null) != null ? tmp$_5 : 0;
      tmp$_7 = get_lastIndex(this.children);
      for (var i = tmp$_6; i <= tmp$_7; i++) {
        result.addAll_brywnq$(this.children.get_za3lpa$(i).getVariableNames_ywdfdh$(extraNames));
      }
    }
    return result;
  };
  ExpressionNode.prototype.countNumberOfVariablesInMap_2wsk9e$ = function (counter) {
    var tmp$, tmp$_0;
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      if (counter.keys.contains_11rb$(this.value)) {
        var key = this.value;
        var value = ((tmp$ = counter.get_11rb$(this.value)) != null ? tmp$ : 0) + 1 | 0;
        counter.put_xwzc9p$(key, value);
      }
    }
    tmp$_0 = this.children.iterator();
    while (tmp$_0.hasNext()) {
      var child = tmp$_0.next();
      child.countNumberOfVariablesInMap_2wsk9e$(counter);
    }
  };
  ExpressionNode.prototype.getNonZeroVariables_ywdfdh$ = function (withoutNames) {
    if (withoutNames === void 0)
      withoutNames = emptySet();
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    var result = LinkedHashSet_init();
    if (equals(this.value, '/') && this.children.size === 2 && last(this.children).nodeType === NodeType$VARIABLE_getInstance() && !equals(last(this.children).value, '') && toDoubleOrNull(last(this.children).value) == null && !equals(last(this.children).value, 'sys_def_i_complex')) {
      result.add_11rb$(last(this.children).value);
    }
    if (((tmp$_1 = (tmp$_0 = (tmp$ = this.functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.numberOfDefinitionArguments : null) != null ? tmp$_1 : 0) > 0) {
      tmp$_2 = this.enrichNodeDefinitionArgumentsNames_0(withoutNames);
    }
     else
      tmp$_2 = withoutNames;
    var extraNames = tmp$_2;
    tmp$_6 = (tmp$_5 = (tmp$_4 = (tmp$_3 = this.functionStringDefinition) != null ? tmp$_3.function : null) != null ? tmp$_4.numberOfDefinitionArguments : null) != null ? tmp$_5 : 0;
    tmp$_7 = get_lastIndex(this.children);
    for (var i = tmp$_6; i <= tmp$_7; i++) {
      result.addAll_brywnq$(this.children.get_za3lpa$(i).getNonZeroVariables_ywdfdh$(extraNames));
    }
    return result;
  };
  ExpressionNode.prototype.enrichNodeDefinitionArgumentsNames_0 = function (withoutNames) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var newWithoutNames = LinkedHashSet_init();
    tmp$_2 = (tmp$_1 = (tmp$_0 = (tmp$ = this.functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.numberOfDefinitionArguments : null) != null ? tmp$_1 : 0;
    for (var i = 0; i < tmp$_2; i++) {
      newWithoutNames.add_11rb$(this.children.get_za3lpa$(i).value);
    }
    newWithoutNames.addAll_brywnq$(withoutNames);
    return newWithoutNames;
  };
  ExpressionNode.prototype.containsFunctions = function () {
    var tmp$;
    if (this.nodeType === NodeType$FUNCTION_getInstance() && !equals(this.value, '')) {
      return false;
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        if (child.containsFunctions()) {
          return false;
        }
      }
    }
    return true;
  };
  ExpressionNode.prototype.containsFunction_bm4lxs$ = function (name, numberOfArgs) {
    var tmp$;
    if (this.nodeType === NodeType$FUNCTION_getInstance() && equals(this.value, name) && this.children.size === numberOfArgs) {
      return true;
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        if (child.containsFunction_bm4lxs$(name, numberOfArgs)) {
          return true;
        }
      }
    }
    return false;
  };
  ExpressionNode.prototype.isBoolExpression_ywdfdh$ = function (boolFunctions) {
    return !intersect(this.getContainedFunctions(), boolFunctions).isEmpty();
  };
  ExpressionNode.prototype.getContainedFunctions = function () {
    var tmp$;
    var result = LinkedHashSet_init();
    if (!this.children.isEmpty()) {
      if (!isBlank(this.value)) {
        result.add_11rb$(this.value);
      }
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        result.addAll_brywnq$(child.getContainedFunctions());
      }
    }
    return result;
  };
  ExpressionNode.prototype.topOperationIsPossibleMainFunction_61zpoe$ = function (topOperation) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    return equals((tmp$_0 = (tmp$ = this.functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.notObligateMainFunction() : null, topOperation) || (((tmp$_2 = (tmp$_1 = this.linkOnOriginalTreeNode) != null ? tmp$_1.children : null) != null ? tmp$_2.size : null) === 1 && ((tmp$_4 = (tmp$_3 = this.functionStringDefinition) != null ? tmp$_3.function : null) != null ? tmp$_4.numberOfArguments : null) === -1 && ((tmp$_6 = (tmp$_5 = this.functionStringDefinition) != null ? tmp$_5.function : null) != null ? tmp$_6.mainFunctionIsCommutativeWithNullWeight : null) === true);
  };
  ExpressionNode.prototype.getContainedChildOperationNodeIds_61zpoe$ = function (topOperation) {
    var tmp$;
    var result = LinkedHashSet_init();
    if (this.children.isEmpty() || !this.topOperationIsPossibleMainFunction_61zpoe$(topOperation)) {
      result.add_11rb$(this.nodeId);
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        result.addAll_brywnq$(child.getContainedChildOperationNodeIds_61zpoe$(topOperation));
      }
    }
    return result;
  };
  ExpressionNode.prototype.getAllChildrenNodeIds = function () {
    var tmp$;
    var result = LinkedHashSet_init();
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      result.add_11rb$(child.nodeId);
      result.addAll_brywnq$(child.getAllChildrenNodeIds());
    }
    return result;
  };
  ExpressionNode.prototype.allParentsMainFunctionIs_61zpoe$ = function (topOperation) {
    var tmp$;
    if (!this.topOperationIsPossibleMainFunction_61zpoe$(topOperation)) {
      return this.children.isEmpty();
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        if (!child.allParentsMainFunctionIs_61zpoe$(topOperation)) {
          return false;
        }
      }
    }
    return true;
  };
  ExpressionNode.prototype.listWhichParentsFunctionIs_61zpoe$ = function (topOperation) {
    var tmp$;
    if (this.children.isEmpty()) {
      return listOf(ensureNotNull(this.linkOnOriginalTreeNode));
    }
     else if (!equals(this.value, topOperation)) {
      return emptyList();
    }
     else {
      var result = ArrayList_init();
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        result.addAll_brywnq$(child.listWhichParentsFunctionIs_61zpoe$(topOperation));
      }
      return result;
    }
  };
  ExpressionNode.prototype.getContainedVariables = function () {
    var tmp$;
    var result = LinkedHashSet_init();
    if (this.children.isEmpty()) {
      if (!equals(this.value, '\u03C0') && toDoubleOrNull(this.value) == null) {
        result.add_11rb$(this.value);
      }
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        result.addAll_brywnq$(child.getContainedVariables());
      }
    }
    return result;
  };
  ExpressionNode.prototype.getContainedVariables_ywdfdh$ = function (variables) {
    var tmp$;
    var result = LinkedHashSet_init();
    if (this.children.isEmpty()) {
      if (toDoubleOrNull(this.value) == null) {
        if (variables.contains_11rb$(this.value)) {
          result.add_11rb$(this.value);
        }
      }
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        result.addAll_brywnq$(child.getContainedVariables_ywdfdh$(variables));
      }
    }
    return result;
  };
  ExpressionNode.prototype.getNotContainedVariables_ywdfdh$ = function (variables) {
    var tmp$;
    var result = LinkedHashSet_init();
    if (this.children.isEmpty()) {
      if (toDoubleOrNull(this.value) == null) {
        if (!variables.contains_11rb$(this.value)) {
          result.add_11rb$(this.value);
        }
      }
    }
     else {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        result.addAll_brywnq$(child.getNotContainedVariables_ywdfdh$(variables));
      }
    }
    return result;
  };
  ExpressionNode.prototype.canContainDivisions = function () {
    var tmp$, tmp$_0;
    if (equals(this.value, '/')) {
      return true;
    }
    if (equals(this.value, '^') && this.children.size > 1) {
      tmp$ = get_lastIndex(this.children);
      for (var i = 2; i <= tmp$; i++) {
        if (this.children.get_za3lpa$(i).nodeType === NodeType$FUNCTION_getInstance())
          return true;
      }
    }
    tmp$_0 = this.children.iterator();
    while (tmp$_0.hasNext()) {
      var child = tmp$_0.next();
      return child.canContainDivisions();
    }
    return false;
  };
  ExpressionNode.prototype.getDepth = function () {
    var tmp$;
    var result = 1;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var a = result;
      var b = child.getDepth() + 1 | 0;
      result = Math_0.max(a, b);
    }
    return result;
  };
  ExpressionNode.prototype.getMaxConstant = function () {
    var tmp$, tmp$_0;
    var result = 0.0;
    if (this.children.isEmpty()) {
      result = abs_0((tmp$ = toDoubleOrNull(this.value)) != null ? tmp$ : 0.0);
    }
    tmp$_0 = this.children.iterator();
    while (tmp$_0.hasNext()) {
      var child = tmp$_0.next();
      var a = result;
      var b = abs_0(child.getMaxConstant());
      result = Math_0.max(a, b);
    }
    return result;
  };
  ExpressionNode.prototype.toString = function () {
    return this.computeIdentifier_5osufp$();
  };
  ExpressionNode.prototype.toStringWithPositions = function () {
    return this.computeIdentifierWithPositions_5osufp$();
  };
  ExpressionNode.prototype.normalizeSubTree_f8z7ch$ = function (currentDeep, nameArgsMap, sorted) {
    if (currentDeep === void 0)
      currentDeep = 0;
    if (nameArgsMap === void 0) {
      nameArgsMap = LinkedHashMap_init_0();
    }
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.nodeType === NodeType$FUNCTION_getInstance()) {
      var numberOfDefinitionArguments = (tmp$_1 = (tmp$_0 = (tmp$ = this.functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.numberOfDefinitionArguments : null) != null ? tmp$_1 : 0;
      var childrenNameArgs = ArrayList_init();
      var previousNameArgsMap = LinkedHashMap_init_0();
      for (var i = 0; i < numberOfDefinitionArguments; i++) {
        childrenNameArgs.add_11rb$('' + this.children.get_za3lpa$(i).value);
        var currentNameArgMap = nameArgsMap.get_11rb$(this.children.get_za3lpa$(i).value);
        if (currentNameArgMap != null)
          previousNameArgsMap.put_xwzc9p$(this.children.get_za3lpa$(i).value, currentNameArgMap);
        nameArgsMap.put_xwzc9p$(this.children.get_za3lpa$(i).value, 'sys_twf_name_var_value_' + currentDeep + '_' + i);
      }
      tmp$_2 = this.children.iterator();
      while (tmp$_2.hasNext()) {
        var child = tmp$_2.next();
        child.normalizeSubTree_f8z7ch$(currentDeep + 1 | 0, nameArgsMap, sorted);
      }
      if (sorted) {
        this.sortChildrenAscendingIdentifiers();
      }
      this.computeIdentifier_5osufp$();
      tmp$_3 = childrenNameArgs.iterator();
      while (tmp$_3.hasNext()) {
        var name = tmp$_3.next();
        nameArgsMap.remove_11rb$(name);
      }
      nameArgsMap.putAll_a2k3zr$(previousNameArgsMap);
    }
     else {
      var newValue = nameArgsMap.get_11rb$(this.value);
      if (newValue != null)
        this.value = newValue;
    }
    return this;
  };
  ExpressionNode.prototype.variableReplacement_y0zsll$ = function (replacements) {
    if (replacements === void 0) {
      replacements = LinkedHashMap_init_0();
    }
    var tmp$;
    if (this.nodeType === NodeType$FUNCTION_getInstance()) {
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        child.variableReplacement_y0zsll$(replacements);
      }
    }
     else {
      var newValue = replacements.get_11rb$(this.value);
      if (newValue != null)
        this.value = newValue;
    }
    return this;
  };
  ExpressionNode.prototype.clone = function () {
    var tmp$;
    var result = this.copy_4anocu$();
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      result.addChild_em03xr$(child.clone());
    }
    return result;
  };
  ExpressionNode.prototype.wrap = function () {
    if (this.nodeType === NodeType$FUNCTION_getInstance() && equals(this.value, '')) {
      return this;
    }
    var result = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    result.addChild_em03xr$(this);
    return result;
  };
  ExpressionNode.prototype.cloneAndWrap = function () {
    var result = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    result.addChild_em03xr$(this.clone());
    return result;
  };
  ExpressionNode.prototype.containsNestedSameFunctions = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (((tmp$_2 = (tmp$_1 = (tmp$_0 = this.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) != null ? tmp$_2 : false) && equals(this.value, child.value)) {
        return true;
      }
      if (child.containsNestedSameFunctions())
        return true;
    }
    return false;
  };
  ExpressionNode.prototype.cloneWithExpandingNestedSameFunctions = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var result = this.copy_4anocu$();
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var childCopy = child.cloneWithExpandingNestedSameFunctions();
      if (((tmp$_2 = (tmp$_1 = (tmp$_0 = this.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) != null ? tmp$_2 : false) && equals(this.value, childCopy.value)) {
        tmp$_3 = childCopy.children.iterator();
        while (tmp$_3.hasNext()) {
          var childCopyChild = tmp$_3.next();
          result.addChild_em03xr$(childCopyChild);
        }
      }
       else {
        result.addChild_em03xr$(childCopy);
      }
    }
    return result;
  };
  ExpressionNode.prototype.cloneAndSimplifyByCommutativeNormalizeAndComputeSimplePlaces_wq2kg4$ = function (compiledConfiguration, selectedNodeIds) {
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration();
    if (selectedNodeIds === void 0) {
      selectedNodeIds = [];
    }
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if ((selectedNodeIds.length === 0 || !containsAny_0(this.getAllChildrenNodeIds(), selectedNodeIds)) && calcComplexity(this) <= compiledConfiguration.simpleComputationRuleParams.maxCalcComplexity && !this.containsVariables_ywdfdh$()) {
      var computed = computeNodeIfSimple(this, compiledConfiguration.simpleComputationRuleParams);
      if (computed != null) {
        var actualNodeId = this.nodeId;
        var $receiver = compiledConfiguration.createExpressionVariableNode_14dthe$(computed);
        $receiver.nodeId = actualNodeId;
        return $receiver;
      }
    }
    var result = this.copy_4anocu$();
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var simplifiedChild = child.cloneAndSimplifyByCommutativeNormalizeAndComputeSimplePlaces_wq2kg4$(compiledConfiguration, selectedNodeIds);
      if (equals(simplifiedChild.value, this.value) && ((tmp$_1 = (tmp$_0 = this.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeightPartSelectable : null) === true && !contains_2(selectedNodeIds, simplifiedChild.nodeId)) {
        tmp$_2 = simplifiedChild.children.iterator();
        while (tmp$_2.hasNext()) {
          var childOfChild = tmp$_2.next();
          result.addChild_em03xr$(childOfChild.cloneAndSimplifyByCommutativeNormalizeAndComputeSimplePlaces_wq2kg4$(compiledConfiguration, selectedNodeIds));
        }
      }
       else {
        result.addChild_em03xr$(simplifiedChild);
      }
    }
    return result;
  };
  ExpressionNode.prototype.cloneAndSimplifyByComputeSimplePlaces_el1bjq$ = function (simpleComputationRuleParams, selectedNodeIds) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    if (selectedNodeIds === void 0) {
      selectedNodeIds = [];
    }
    var tmp$;
    if ((selectedNodeIds.length === 0 || !containsAny_0(this.getAllChildrenNodeIds(), selectedNodeIds)) && calcComplexity(this) <= simpleComputationRuleParams.maxCalcComplexity && !this.containsVariables_ywdfdh$()) {
      var computed = computeNodeIfSimple(this, simpleComputationRuleParams);
      if (computed != null) {
        return new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(computed), void 0, void 0, void 0, void 0, void 0, void 0, this.nodeId);
      }
    }
    var result = this.copy_4anocu$();
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      result.addChild_em03xr$(child.cloneAndSimplifyByComputeSimplePlaces_el1bjq$(simpleComputationRuleParams, selectedNodeIds));
    }
    return result;
  };
  ExpressionNode.prototype.dropBracketNodesIfOperationsSame = function () {
    var tmp$, tmp$_0;
    var newChildren = ArrayList_init();
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.dropBracketNodesIfOperationsSame();
      if (equals(child.value, this.value) && !equals(this.value, '') && this.functionStringDefinition != null && ensureNotNull(this.functionStringDefinition).function.numberOfArguments < 0 && ensureNotNull(this.functionStringDefinition).function.isCommutativeWithNullWeightPartSelectable) {
        tmp$_0 = child.children.iterator();
        while (tmp$_0.hasNext()) {
          var childChild = tmp$_0.next();
          newChildren.add_11rb$(childChild);
          childChild.parent = this;
        }
      }
       else {
        newChildren.add_11rb$(child);
      }
    }
    this.children = newChildren;
  };
  ExpressionNode.prototype.cloneWithDeepSubstitutions_qhbxfl$ = function (nameArgsMap) {
    var tmp$;
    if (this.nodeType === NodeType$FUNCTION_getInstance()) {
      var result = this.copy_4anocu$();
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        result.addChild_em03xr$(child.cloneWithDeepSubstitutions_qhbxfl$(nameArgsMap));
      }
      return result;
    }
     else {
      var newNode = nameArgsMap.get_11rb$(this.value);
      if (newNode != null)
        return newNode.cloneWithNormalization_1g1bdl$(void 0, false);
      else
        return this.copy_4anocu$();
    }
  };
  ExpressionNode.prototype.cloneWithNormalization_1g1bdl$ = function (nameArgsMap, sorted) {
    if (nameArgsMap === void 0) {
      nameArgsMap = LinkedHashMap_init_0();
    }
    return this.clone().normalizeSubTree_f8z7ch$(void 0, nameArgsMap, sorted);
  };
  ExpressionNode.prototype.cloneWithVariableReplacement_y0zsll$ = function (replacements) {
    return this.clone().variableReplacement_y0zsll$(replacements);
  };
  ExpressionNode.prototype.isNodeSubtreeEquals_cw9fud$ = function (expressionNode, nameArgsMap) {
    if (nameArgsMap === void 0) {
      nameArgsMap = LinkedHashMap_init_0();
    }
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    var actualValue = (tmp$ = nameArgsMap.get_11rb$(this.value)) != null ? tmp$ : this.value;
    var result = equals(actualValue, expressionNode.value);
    if (this.nodeType === NodeType$FUNCTION_getInstance()) {
      if (this.children.size !== expressionNode.children.size || ((tmp$_1 = (tmp$_0 = this.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.numberOfDefinitionArguments : null) != ((tmp$_3 = (tmp$_2 = expressionNode.functionStringDefinition) != null ? tmp$_2.function : null) != null ? tmp$_3.numberOfDefinitionArguments : null))
        return false;
      var numberOfDefinitionArguments = (tmp$_6 = (tmp$_5 = (tmp$_4 = this.functionStringDefinition) != null ? tmp$_4.function : null) != null ? tmp$_5.numberOfDefinitionArguments : null) != null ? tmp$_6 : 0;
      var childrenNameArgs = ArrayList_init();
      var previousNameArgsMap = LinkedHashMap_init_0();
      for (var i = 0; i < numberOfDefinitionArguments; i++) {
        childrenNameArgs.add_11rb$('' + this.children.get_za3lpa$(i).value);
        var currentNameArgMap = nameArgsMap.get_11rb$(this.children.get_za3lpa$(i).value);
        if (currentNameArgMap != null)
          previousNameArgsMap.put_xwzc9p$(this.children.get_za3lpa$(i).value, currentNameArgMap);
        nameArgsMap.put_xwzc9p$(this.children.get_za3lpa$(i).value, expressionNode.children.get_za3lpa$(i).value);
      }
      tmp$_7 = this.children.size;
      for (var i_0 = 0; i_0 < tmp$_7; i_0++) {
        if (!this.children.get_za3lpa$(i_0).isNodeSubtreeEquals_cw9fud$(expressionNode.children.get_za3lpa$(i_0), nameArgsMap))
          return false;
      }
      tmp$_8 = childrenNameArgs.iterator();
      while (tmp$_8.hasNext()) {
        var name = tmp$_8.next();
        nameArgsMap.remove_11rb$(name);
      }
      nameArgsMap.putAll_a2k3zr$(previousNameArgsMap);
    }
    return result;
  };
  ExpressionNode.prototype.isNodeMatchesNumber_61zpoe$ = function (numberValue) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = toDoubleOrNull(numberValue);
    if (tmp$ == null) {
      return false;
    }
    var matchingValue = tmp$;
    if (this.nodeType === NodeType$VARIABLE_getInstance()) {
      tmp$_0 = toDoubleOrNull(this.value);
      if (tmp$_0 == null) {
        return false;
      }
      tmp$_2 = tmp$_0;
    }
     else if (calcComplexity(this) < 4 && !this.containsVariables_ywdfdh$()) {
      tmp$_1 = computeNodeIfSimple(this);
      if (tmp$_1 == null) {
        return false;
      }
      tmp$_2 = tmp$_1;
    }
     else
      return false;
    var expressionValue = tmp$_2;
    return abs_0(expressionValue - matchingValue) < 1.19E-6;
  };
  ExpressionNode.prototype.containsFunctionBesides_ywdfdh$ = function (definedFunctionNameNumberOfArgsSet) {
    var tmp$;
    if (this.nodeType === NodeType$FUNCTION_getInstance()) {
      if (!definedFunctionNameNumberOfArgsSet.contains_11rb$(this.value + '_' + toString(this.children.size)) && !definedFunctionNameNumberOfArgsSet.contains_11rb$(this.value + '_-1')) {
        return true;
      }
      tmp$ = this.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        if (child.containsFunctionBesides_ywdfdh$(definedFunctionNameNumberOfArgsSet)) {
          return true;
        }
      }
    }
    return false;
  };
  ExpressionNode.prototype.replaceNotDefinedFunctionsOnVariables_lvgqkd$ = function (functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet, expressionComparator, hasBoolFunctions) {
    if (expressionComparator === void 0)
      expressionComparator = null;
    if (hasBoolFunctions === void 0)
      hasBoolFunctions = false;
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.replaceNotDefinedFunctionsOnVariables_lvgqkd$(functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet, expressionComparator, hasBoolFunctions);
    }
    var tmp$_2 = this.nodeType === NodeType$FUNCTION_getInstance();
    if (tmp$_2) {
      tmp$_2 = !isBlank(this.value);
    }
    if (tmp$_2 && !definedFunctionNameNumberOfArgsSet.contains_11rb$(this.value + '_' + toString(this.children.size)) && !definedFunctionNameNumberOfArgsSet.contains_11rb$(this.value + '_-1')) {
      var nodeExists = false;
      tmp$_0 = functionIdentifierToVariableMap.entries.iterator();
      while (tmp$_0.hasNext()) {
        var tmp$_3 = tmp$_0.next();
        var expression = tmp$_3.key;
        var variable = tmp$_3.value;
        if (this.children.size === expression.children.size) {
          if (expressionComparator != null && expressionComparator.compiledConfiguration.comparisonSettings.useTestingToCompareFunctionArgumentsInProbabilityComparison && !hasBoolFunctions) {
            if (expressionComparator.baseOperationsDefinitions.definedFunctionNameNumberOfArgsSet.contains_11rb$(this.value + '_' + toString(this.children.size)) || expressionComparator.baseOperationsDefinitions.definedFunctionNameNumberOfArgsSet.contains_11rb$(this.value + '_-1')) {
              if (expressionComparator.probabilityTestComparison_je0ger$(this, expression, ComparisonType$EQUAL_getInstance())) {
                nodeExists = true;
                this.setVariable_61zpoe$(variable);
                break;
              }
            }
             else {
              var hasDifferentArgs = false;
              tmp$_1 = get_lastIndex(this.children);
              for (var i = 0; i <= tmp$_1; i++) {
                if (!expressionComparator.probabilityTestComparison_je0ger$(this.children.get_za3lpa$(i), expression.children.get_za3lpa$(i), ComparisonType$EQUAL_getInstance())) {
                  hasDifferentArgs = true;
                  break;
                }
              }
              if (!hasDifferentArgs) {
                nodeExists = true;
                this.setVariable_61zpoe$(variable);
                break;
              }
            }
          }
           else {
            if (this.isNodeSubtreeEquals_cw9fud$(expression)) {
              nodeExists = true;
              this.setVariable_61zpoe$(variable);
              break;
            }
          }
        }
      }
      if (!nodeExists) {
        var variableName = 'sys_def_var_replace_fun_' + functionIdentifierToVariableMap.size;
        var key = this.clone();
        functionIdentifierToVariableMap.put_xwzc9p$(key, variableName);
        this.setVariable_61zpoe$(variableName);
      }
    }
  };
  ExpressionNode.prototype.checkAndDeleteIifExistsInMultiplicationContext = function () {
    var tmp$;
    if (equals(this.value, '*')) {
      tmp$ = get_lastIndex(this.children);
      for (var idx = 0; idx <= tmp$; idx++) {
        if (equals(this.children.get_za3lpa$(idx).value, 'sys_def_i_complex')) {
          if (this.children.size === 1) {
            this.children.get_za3lpa$(0).value = '1';
          }
           else {
            this.children.removeAt_za3lpa$(idx);
          }
          return true;
        }
         else {
          if (this.children.get_za3lpa$(idx).checkAndDeleteIifExistsInMultiplicationContext() === true) {
            return true;
          }
        }
      }
    }
     else if (equals(this.value, '/')) {
      if (equals(this.children.get_za3lpa$(0).value, 'sys_def_i_complex')) {
        this.children.get_za3lpa$(0).value = '1';
        return true;
      }
       else {
        if (this.children.get_za3lpa$(0).checkAndDeleteIifExistsInMultiplicationContext() === true) {
          return true;
        }
      }
    }
    return false;
  };
  ExpressionNode.prototype.normalizeMultiplicativeTreeWithI = function () {
    var tmp$;
    tmp$ = get_lastIndex(this.children);
    for (var i = 0; i <= tmp$; i++) {
      var containsI = this.children.get_za3lpa$(i).checkAndDeleteIifExistsInMultiplicationContext();
      if (containsI) {
        if (equals(this.children.get_za3lpa$(i).value, '*')) {
          this.children.get_za3lpa$(i).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), 'sys_def_i_complex'));
        }
         else {
          var newChild = new ExpressionNode(NodeType$FUNCTION_getInstance(), '*');
          newChild.addChild_em03xr$(this.children.get_za3lpa$(i));
          newChild.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), 'sys_def_i_complex'));
          this.setChildOnPosition_gk94xr$(newChild, i);
        }
      }
    }
  };
  ExpressionNode.prototype.iMultiplicativeNormForm = function () {
    var tmp$;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (equals(child.value, '*') || equals(child.value, '/')) {
        this.normalizeMultiplicativeTreeWithI();
      }
       else {
        child.iMultiplicativeNormForm();
      }
    }
    return this;
  };
  ExpressionNode.prototype.cloneWithIMultipleNorm = function () {
    return this.clone().iMultiplicativeNormForm();
  };
  ExpressionNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionNode',
    interfaces: []
  };
  ExpressionNode.prototype.component1 = function () {
    return this.nodeType;
  };
  ExpressionNode.prototype.component2 = function () {
    return this.value;
  };
  ExpressionNode.prototype.component3 = function () {
    return this.startPosition;
  };
  ExpressionNode.prototype.component4 = function () {
    return this.endPosition;
  };
  ExpressionNode.prototype.component5 = function () {
    return this.subValue;
  };
  ExpressionNode.prototype.component6 = function () {
    return this.parent;
  };
  ExpressionNode.prototype.component7 = function () {
    return this.functionStringDefinition;
  };
  ExpressionNode.prototype.component8 = function () {
    return this.identifier;
  };
  ExpressionNode.prototype.component9 = function () {
    return this.nodeId;
  };
  ExpressionNode.prototype.component10 = function () {
    return this.distanceToRoot;
  };
  ExpressionNode.prototype.component11 = function () {
    return this.expressionStrictureIdentifier;
  };
  ExpressionNode.prototype.component12 = function () {
    return this.lastAppliedSubstitution;
  };
  ExpressionNode.prototype.component13 = function () {
    return this.lastModifiedStepId;
  };
  ExpressionNode.prototype.copy_4anocu$ = function (nodeType, value, startPosition, endPosition, subValue, parent, functionStringDefinition, identifier, nodeId, distanceToRoot, expressionStrictureIdentifier, lastAppliedSubstitution, lastModifiedStepId) {
    return new ExpressionNode(nodeType === void 0 ? this.nodeType : nodeType, value === void 0 ? this.value : value, startPosition === void 0 ? this.startPosition : startPosition, endPosition === void 0 ? this.endPosition : endPosition, subValue === void 0 ? this.subValue : subValue, parent === void 0 ? this.parent : parent, functionStringDefinition === void 0 ? this.functionStringDefinition : functionStringDefinition, identifier === void 0 ? this.identifier : identifier, nodeId === void 0 ? this.nodeId : nodeId, distanceToRoot === void 0 ? this.distanceToRoot : distanceToRoot, expressionStrictureIdentifier === void 0 ? this.expressionStrictureIdentifier : expressionStrictureIdentifier, lastAppliedSubstitution === void 0 ? this.lastAppliedSubstitution : lastAppliedSubstitution, lastModifiedStepId === void 0 ? this.lastModifiedStepId : lastModifiedStepId);
  };
  ExpressionNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.nodeType) | 0;
    result = result * 31 + Kotlin.hashCode(this.value) | 0;
    result = result * 31 + Kotlin.hashCode(this.startPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.endPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.subValue) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    result = result * 31 + Kotlin.hashCode(this.functionStringDefinition) | 0;
    result = result * 31 + Kotlin.hashCode(this.identifier) | 0;
    result = result * 31 + Kotlin.hashCode(this.nodeId) | 0;
    result = result * 31 + Kotlin.hashCode(this.distanceToRoot) | 0;
    result = result * 31 + Kotlin.hashCode(this.expressionStrictureIdentifier) | 0;
    result = result * 31 + Kotlin.hashCode(this.lastAppliedSubstitution) | 0;
    result = result * 31 + Kotlin.hashCode(this.lastModifiedStepId) | 0;
    return result;
  };
  ExpressionNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.nodeType, other.nodeType) && Kotlin.equals(this.value, other.value) && Kotlin.equals(this.startPosition, other.startPosition) && Kotlin.equals(this.endPosition, other.endPosition) && Kotlin.equals(this.subValue, other.subValue) && Kotlin.equals(this.parent, other.parent) && Kotlin.equals(this.functionStringDefinition, other.functionStringDefinition) && Kotlin.equals(this.identifier, other.identifier) && Kotlin.equals(this.nodeId, other.nodeId) && Kotlin.equals(this.distanceToRoot, other.distanceToRoot) && Kotlin.equals(this.expressionStrictureIdentifier, other.expressionStrictureIdentifier) && Kotlin.equals(this.lastAppliedSubstitution, other.lastAppliedSubstitution) && Kotlin.equals(this.lastModifiedStepId, other.lastModifiedStepId)))));
  };
  function ExpressionNodeConstructor(functionConfiguration, compiledImmediateVariableReplacements) {
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    if (compiledImmediateVariableReplacements === void 0) {
      compiledImmediateVariableReplacements = emptyMap();
    }
    this.functionConfiguration = functionConfiguration;
    this.compiledImmediateVariableReplacements = compiledImmediateVariableReplacements;
  }
  ExpressionNodeConstructor.prototype.construct_61zpoe$ = function (identifier) {
    var tmp$;
    if (isBlank(identifier)) {
      return new ExpressionNode(NodeType$ERROR_getInstance(), 'No expression found', 0, 1);
    }
    if (identifier.charCodeAt(0) === 40 && last_0(identifier) === 41) {
      var endIndex = get_lastIndex_0(identifier);
      tmp$ = this.constructRecursive_0(identifier.substring(1, endIndex), 1);
    }
     else {
      tmp$ = this.constructRecursive_0(identifier, 0);
    }
    var child = tmp$;
    if (child.nodeType === NodeType$ERROR_getInstance()) {
      return child;
    }
    var newNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '', void 0, void 0, void 0, void 0, void 0, identifier);
    newNode.addChild_em03xr$(child);
    return newNode;
  };
  ExpressionNodeConstructor.prototype.constructRecursive_0 = function (identifier, startPosition) {
    if (startPosition === void 0)
      startPosition = 0;
    var tmp$, tmp$_0;
    if (identifier.length === 0) {
      return new ExpressionNode(NodeType$ERROR_getInstance(), 'Something expected', startPosition, startPosition + 1 | 0);
    }
    var indexOfFirst$result;
    indexOfFirst$break: do {
      var tmp$_1, tmp$_0_0, tmp$_1_0, tmp$_2;
      tmp$_1 = get_indices(identifier);
      tmp$_0_0 = tmp$_1.first;
      tmp$_1_0 = tmp$_1.last;
      tmp$_2 = tmp$_1.step;
      for (var index = tmp$_0_0; index <= tmp$_1_0; index += tmp$_2) {
        if (unboxChar(toBoxedChar(identifier.charCodeAt(index))) === 40) {
          indexOfFirst$result = index;
          break indexOfFirst$break;
        }
      }
      indexOfFirst$result = -1;
    }
     while (false);
    var openBracketIndex = indexOfFirst$result;
    if (openBracketIndex >= 0) {
      var newNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), identifier.substring(0, openBracketIndex), void 0, void 0, void 0, void 0, void 0, identifier);
      var openBracketCount = 0;
      var currentChildIdentifier = new StringBuilder('');
      tmp$ = identifier.length;
      for (var i = openBracketIndex + 1 | 0; i < tmp$; i++) {
        if (openBracketCount === 0 && (identifier.charCodeAt(i) === 59 || identifier.charCodeAt(i) === 41)) {
          var child = this.constructRecursive_0(currentChildIdentifier.toString(), startPosition + i - currentChildIdentifier.length | 0);
          if (child.nodeType === NodeType$ERROR_getInstance()) {
            return child;
          }
          newNode.addChild_em03xr$(child);
          currentChildIdentifier = new StringBuilder('');
        }
         else {
          currentChildIdentifier.append_s8itvh$(identifier.charCodeAt(i));
        }
        if (identifier.charCodeAt(i) === 40) {
          openBracketCount = openBracketCount + 1 | 0;
        }
         else if (identifier.charCodeAt(i) === 41)
          tmp$_0 = openBracketCount, openBracketCount = tmp$_0 - 1 | 0;
        if (openBracketCount < -1) {
          return new ExpressionNode(NodeType$ERROR_getInstance(), "Unexpected ')'", startPosition + i | 0, startPosition + i + 1 | 0);
        }
      }
      if (openBracketCount >= 0) {
        return new ExpressionNode(NodeType$ERROR_getInstance(), 'closing bracket missing', startPosition + identifier.length - 1 | 0, startPosition + identifier.length | 0);
      }
      if (newNode.value.length > 0 || newNode.children.size > 1) {
        newNode.functionStringDefinition = this.functionConfiguration.fastFindStringDefinitionByNameAndNumberOfArguments_bm4lxs$(newNode.value, newNode.children.size);
        if (newNode.functionStringDefinition == null) {
          return new ExpressionNode(NodeType$ERROR_getInstance(), "Unknown function: '" + newNode.value + "' with '" + toString(newNode.children.size) + "' arguments", startPosition, startPosition + openBracketIndex | 0);
        }
      }
      return newNode;
    }
     else {
      var indexOfFirst$result_0;
      indexOfFirst$break: do {
        var tmp$_3, tmp$_0_1, tmp$_1_1, tmp$_2_0;
        tmp$_3 = get_indices(identifier);
        tmp$_0_1 = tmp$_3.first;
        tmp$_1_1 = tmp$_3.last;
        tmp$_2_0 = tmp$_3.step;
        for (var index_0 = tmp$_0_1; index_0 <= tmp$_1_1; index_0 += tmp$_2_0) {
          if (!isNameOrNumberPart(unboxChar(toBoxedChar(identifier.charCodeAt(index_0))))) {
            indexOfFirst$result_0 = index_0;
            break indexOfFirst$break;
          }
        }
        indexOfFirst$result_0 = -1;
      }
       while (false);
      var notDigitVariableSymbolIndex = indexOfFirst$result_0;
      if (notDigitVariableSymbolIndex >= 0) {
        return new ExpressionNode(NodeType$ERROR_getInstance(), "Wrong variable symbol '" + String.fromCharCode(identifier.charCodeAt(notDigitVariableSymbolIndex)) + "'", startPosition + notDigitVariableSymbolIndex | 0, startPosition + notDigitVariableSymbolIndex + 1 | 0);
      }
      var newValue = this.compiledImmediateVariableReplacements.get_11rb$(identifier);
      if (newValue != null)
        return new ExpressionNode(NodeType$VARIABLE_getInstance(), newValue, void 0, void 0, void 0, void 0, void 0, identifier);
      else
        return new ExpressionNode(NodeType$VARIABLE_getInstance(), identifier, void 0, void 0, void 0, void 0, void 0, identifier);
    }
  };
  ExpressionNodeConstructor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionNodeConstructor',
    interfaces: []
  };
  function normalizeExpressionsForComparison(left, right) {
    var tmp$;
    if (left.nodeType === NodeType$FUNCTION_getInstance() && equals(left.value, ''))
      tmp$ = new Pair(left, right);
    else if (right.nodeType === NodeType$FUNCTION_getInstance() && equals(right.value, ''))
      tmp$ = new Pair(left.wrap(), right);
    else
      return new Pair(left, right);
    var ordered = tmp$;
    if (ordered.second.nodeType !== NodeType$FUNCTION_getInstance() || !equals(ordered.second.value, '')) {
      var tmp$_0 = ordered.first;
      var $receiver = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
      $receiver.addChild_em03xr$(ordered.second);
      return new Pair(tmp$_0, $receiver);
    }
     else
      return ordered;
  }
  function subtractionTree(minuend, subtrahend) {
    var result = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    result.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '+'));
    first(result.children).addChild_em03xr$(first(minuend.children).clone());
    first(result.children).addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
    last(first(result.children).children).addChild_em03xr$(first(subtrahend.children).clone());
    return result;
  }
  function divisionTree(dividend, divider) {
    var result = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    result.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '/'));
    first(result.children).addChild_em03xr$(first(dividend.children).clone());
    first(result.children).addChild_em03xr$(first(divider.children).clone());
    return result;
  }
  function addRootNodeToExpression(expression) {
    var root = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    root.addChild_em03xr$(expression);
    root.computeIdentifier_5osufp$();
    return root;
  }
  var zero;
  var one;
  function patternDoubleMinus($receiver) {
    var tmp$;
    tmp$ = $receiver.children.iterator();
    loop_label: while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (equals(child.value, '-')) {
        var $receiver_0 = child.children;
        var any$result;
        any$break: do {
          var tmp$_0;
          if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
            any$result = false;
            break any$break;
          }
          tmp$_0 = $receiver_0.iterator();
          loop_label_0: while (tmp$_0.hasNext()) {
            var element = tmp$_0.next();
            var tmp$_1 = equals(element.value, '+') && element.children.size === 1;
            if (tmp$_1) {
              var $receiver_1 = element.children;
              var any$result_0;
              any$break_0: do {
                var tmp$_2;
                if (Kotlin.isType($receiver_1, Collection) && $receiver_1.isEmpty()) {
                  any$result_0 = false;
                  break any$break_0;
                }
                tmp$_2 = $receiver_1.iterator();
                while (tmp$_2.hasNext()) {
                  var element_0 = tmp$_2.next();
                  if (equals(element_0.value, '-')) {
                    any$result_0 = true;
                    break any$break_0;
                  }
                }
                any$result_0 = false;
              }
               while (false);
              tmp$_1 = any$result_0;
            }
            if (tmp$_1) {
              any$result = true;
              break any$break;
            }
          }
          any$result = false;
        }
         while (false);
        if (any$result) {
          return true;
        }
      }
      if (patternDoubleMinus(child)) {
        return true;
      }
    }
    return false;
  }
  function patternStartWithUnaryMinus($receiver) {
    var cur = $receiver;
    while ((equals(cur.value, '') || equals(cur.value, '+')) && cur.children.size === 1) {
      cur = cur.children.get_za3lpa$(0);
    }
    return equals(cur.value, '-') && cur.children.size === 1;
  }
  function patternUnaryMinus($receiver) {
    var tmp$;
    if (!patternStartWithUnaryMinus($receiver)) {
      tmp$ = $receiver.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        if (patternUnaryMinus(child)) {
          return true;
        }
      }
      return false;
    }
    return true;
  }
  function patternDoubleMinusInFraction($receiver) {
    var tmp$;
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (equals(child.value, '/')) {
        if (patternStartWithUnaryMinus(child.children.get_za3lpa$(0)) && patternStartWithUnaryMinus(child.children.get_za3lpa$(1))) {
          return true;
        }
      }
      if (patternDoubleMinusInFraction(child)) {
        return true;
      }
    }
    return false;
  }
  function patternThreeLevelsInFraction($receiver) {
    var tmp$;
    if (equals($receiver.value, '/')) {
      if (equals($receiver.children.get_za3lpa$(0).value, '/') || equals($receiver.children.get_za3lpa$(1).value, '/')) {
        return true;
      }
    }
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (patternThreeLevelsInFraction(child)) {
        return true;
      }
    }
    return false;
  }
  function patternTooManyLevelsInFraction($receiver) {
    var tmp$;
    if (equals($receiver.value, '/')) {
      if (patternThreeLevelsInFraction($receiver.children.get_za3lpa$(0)) || patternThreeLevelsInFraction($receiver.children.get_za3lpa$(1))) {
        return true;
      }
    }
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (patternTooManyLevelsInFraction(child)) {
        return true;
      }
    }
    return false;
  }
  function patternFractionExist($receiver) {
    var tmp$;
    if (equals($receiver.value, '/')) {
      return true;
    }
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (patternFractionExist(child)) {
        return true;
      }
    }
    return false;
  }
  function patternThreeLevelsExist($receiver) {
    var tmp$;
    if (equals($receiver.value, '/')) {
      if (patternFractionExist($receiver.children.get_za3lpa$(0)) || patternFractionExist($receiver.children.get_za3lpa$(1))) {
        return true;
      }
    }
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (patternThreeLevelsExist(child)) {
        return true;
      }
    }
    return false;
  }
  function patternTooManyLevelsExist($receiver) {
    var tmp$;
    if (equals($receiver.value, '/')) {
      if (patternThreeLevelsExist($receiver.children.get_za3lpa$(0)) || patternThreeLevelsExist($receiver.children.get_za3lpa$(1))) {
        return true;
      }
    }
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (patternTooManyLevelsExist(child)) {
        return true;
      }
    }
    return false;
  }
  function patternConstMulConst($receiver) {
    var tmp$;
    if (equals($receiver.value, '*')) {
      if ($receiver.children.get_za3lpa$(0).getContainedFunctions().isEmpty() && $receiver.children.get_za3lpa$(1).getContainedFunctions().isEmpty()) {
        return true;
      }
    }
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (patternConstMulConst(child)) {
        return true;
      }
    }
    return false;
  }
  function Comparator$ObjectLiteral_4(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_4.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_4.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_1 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  var PARENT_BRACKETS_EXPANSION;
  var REDUCE_FRACTION;
  function nodeIdsPositionsMap(nodeIds) {
    var tmp$;
    var nodeIdsMap = LinkedHashMap_init_0();
    tmp$ = get_lastIndex_1(nodeIds);
    for (var i = 0; i <= tmp$; i++) {
      nodeIdsMap.put_xwzc9p$(nodeIds[i], i);
    }
    return nodeIdsMap;
  }
  function nodeIdsToNodeLinksInSameOrder($receiver, nodeIds, nodeIdsMap) {
    if (nodeIdsMap === void 0)
      nodeIdsMap = nodeIdsPositionsMap(nodeIds);
    var list = ArrayList_init_0(nodeIds.length);
    for (var index = 0; index < nodeIds.length; index++) {
      list.add_11rb$(new ExpressionNode(NodeType$EMPTY_getInstance(), ''));
    }
    var result = list;
    nodeIdsToNodeLinksInSameOrderRecursivePart($receiver, nodeIdsMap, result);
    return result;
  }
  function nodeIdsToNodeLinksInSameOrderRecursivePart($receiver, nodeIdsMap, result) {
    var tmp$;
    var index = nodeIdsMap.get_11rb$($receiver.nodeId);
    if (index != null) {
      result.set_wxm5ur$(index, $receiver);
    }
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      nodeIdsToNodeLinksInSameOrderRecursivePart(child, nodeIdsMap, result);
    }
  }
  function findLowestSubtreeTopOfNodes($receiver, nodes) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = firstOrNull_1(nodes);
    if (tmp$ == null) {
      return null;
    }
    var currentSubtree = tmp$;
    var nodeChains = toMutableList(nodes);
    var subtreeOfNodesFound = false;
    while (!subtreeOfNodesFound) {
      subtreeOfNodesFound = true;
      tmp$_0 = get_lastIndex(nodeChains);
      for (var i = 0; i <= tmp$_0; i++) {
        while (nodeChains.get_za3lpa$(i).distanceToRoot > currentSubtree.distanceToRoot) {
          tmp$_1 = nodeChains.get_za3lpa$(i).parent;
          if (tmp$_1 == null) {
            return null;
          }
          nodeChains.set_wxm5ur$(i, tmp$_1);
        }
        if (nodeChains.get_za3lpa$(i).distanceToRoot === currentSubtree.distanceToRoot && nodeChains.get_za3lpa$(i).nodeId !== currentSubtree.nodeId) {
          tmp$_2 = nodeChains.get_za3lpa$(i).parent;
          if (tmp$_2 == null) {
            return null;
          }
          nodeChains.set_wxm5ur$(i, tmp$_2);
        }
        if (nodeChains.get_za3lpa$(i).distanceToRoot < currentSubtree.distanceToRoot) {
          currentSubtree = nodeChains.get_za3lpa$(i);
          subtreeOfNodesFound = false;
        }
      }
    }
    return currentSubtree;
  }
  function findLowestSubtreeWithNodes($receiver, nodes, onlyHigherSelection, nestedNodesInSelection) {
    if (nestedNodesInSelection === void 0)
      nestedNodesInSelection = mutableListOf([false]);
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var currentSubtree = null;
    var destination = ArrayList_init_0(collectionSizeOrDefault(nodes, 10));
    var tmp$_4;
    tmp$_4 = nodes.iterator();
    while (tmp$_4.hasNext()) {
      var item = tmp$_4.next();
      destination.add_11rb$(item.nodeId);
    }
    var nodeIdsSet = toSet(destination);
    var nodeChains = toMutableList(nodes);
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault(nodeChains, 10));
    var tmp$_5;
    tmp$_5 = nodeChains.iterator();
    while (tmp$_5.hasNext()) {
      var item_0 = tmp$_5.next();
      var tmp$_6 = destination_0.add_11rb$;
      var res = onlyHigherSelection ? item_0.copy_4anocu$() : item_0.clone();
      res.linkOnOriginalTreeNode = item_0;
      tmp$_6.call(destination_0, res);
    }
    var nodeSelectedChains = toMutableList(destination_0);
    var destination_1 = ArrayList_init_0(collectionSizeOrDefault(nodeSelectedChains, 10));
    var tmp$_7;
    tmp$_7 = nodeSelectedChains.iterator();
    while (tmp$_7.hasNext()) {
      var item_1 = tmp$_7.next();
      destination_1.add_11rb$(new Pair(ensureNotNull(item_1).nodeId, item_1));
    }
    var treeParts = toMutableMap(toMap(destination_1));
    var subtreeOfNodesFound = false;
    while (!subtreeOfNodesFound) {
      subtreeOfNodesFound = true;
      tmp$ = get_lastIndex(nodeChains);
      loop_label: for (var i = 0; i <= tmp$; i++) {
        if (nodeSelectedChains.get_za3lpa$(i) == null || (currentSubtree != null && nodeChains.get_za3lpa$(i).nodeId === currentSubtree.nodeId))
          continue loop_label;
        if (currentSubtree != null && (nodeChains.get_za3lpa$(i).distanceToRoot > currentSubtree.distanceToRoot || !equals((tmp$_1 = (tmp$_0 = nodeChains.get_za3lpa$(i).functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.mainFunction : null, nodeChains.get_za3lpa$(i).value) || (nodeChains.get_za3lpa$(i).distanceToRoot === currentSubtree.distanceToRoot && nodeChains.get_za3lpa$(i).nodeId !== currentSubtree.nodeId))) {
          tmp$_2 = nodeChains.get_za3lpa$(i).parent;
          if (tmp$_2 == null) {
            return null;
          }
          nodeChains.set_wxm5ur$(i, tmp$_2);
          if (nestedNodesInSelection.isEmpty() && nodeIdsSet.contains_11rb$(nodeChains.get_za3lpa$(i).nodeId)) {
            nestedNodesInSelection.add_11rb$(true);
          }
          var suchPart = treeParts.get_11rb$(nodeChains.get_za3lpa$(i).nodeId);
          if (suchPart != null) {
            var $receiver_0 = suchPart.children;
            var all$result;
            all$break: do {
              var tmp$_8;
              if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
                all$result = true;
                break all$break;
              }
              tmp$_8 = $receiver_0.iterator();
              while (tmp$_8.hasNext()) {
                var element = tmp$_8.next();
                if (!(element.nodeId !== ensureNotNull(nodeSelectedChains.get_za3lpa$(i)).nodeId)) {
                  all$result = false;
                  break all$break;
                }
              }
              all$result = true;
            }
             while (false);
            if (all$result)
              suchPart.addChild_em03xr$(ensureNotNull(nodeSelectedChains.get_za3lpa$(i)));
            nodeSelectedChains.set_wxm5ur$(i, null);
          }
           else {
            var $receiver_1 = nodeChains.get_za3lpa$(i).copy_4anocu$();
            $receiver_1.linkOnOriginalTreeNode = nodeChains.get_za3lpa$(i);
            var newChainParent = $receiver_1;
            newChainParent.addChild_em03xr$(ensureNotNull(nodeSelectedChains.get_za3lpa$(i)));
            nodeSelectedChains.set_wxm5ur$(i, newChainParent);
            treeParts.put_xwzc9p$(nodeChains.get_za3lpa$(i).nodeId, ensureNotNull(nodeSelectedChains.get_za3lpa$(i)));
          }
          subtreeOfNodesFound = false;
        }
         else if (currentSubtree == null || nodeChains.get_za3lpa$(i).distanceToRoot < currentSubtree.distanceToRoot) {
          currentSubtree = ensureNotNull(nodeSelectedChains.get_za3lpa$(i));
          subtreeOfNodesFound = false;
        }
         else {
          tmp$_3 = get_lastIndex(ensureNotNull(nodeSelectedChains.get_za3lpa$(i)).children);
          for (var j = 0; j <= tmp$_3; j++) {
            currentSubtree.addChild_em03xr$(ensureNotNull(nodeSelectedChains.get_za3lpa$(i)).children.get_za3lpa$(j));
          }
          nodeSelectedChains.set_wxm5ur$(i, null);
        }
      }
    }
    if (currentSubtree != null) {
      currentSubtree.sortChildrenAscendingNodeIds();
    }
    return currentSubtree;
  }
  function cloneWithoutSelectedNodes($receiver, selectedTopNodeIds) {
    var tmp$;
    if (selectedTopNodeIds.contains_11rb$($receiver.nodeId)) {
      return new ExpressionNode(NodeType$EMPTY_getInstance(), '');
    }
    var result = $receiver.copy_4anocu$();
    if (result.nodeType === NodeType$VARIABLE_getInstance()) {
      return result;
    }
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var newChild = cloneWithoutSelectedNodes(child, selectedTopNodeIds);
      if (newChild.nodeType !== NodeType$EMPTY_getInstance()) {
        result.addChild_em03xr$(newChild);
      }
       else if (equals($receiver.value, '/')) {
        result.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
      }
    }
    if (ensureNotNull(result.functionStringDefinition).function.numberOfArguments === -1 && result.children.size === 0) {
      return new ExpressionNode(NodeType$EMPTY_getInstance(), '');
    }
     else if (ensureNotNull(result.functionStringDefinition).function.numberOfArguments > 0 && ensureNotNull(result.functionStringDefinition).function.numberOfArguments < result.children.size) {
      return new ExpressionNode(NodeType$EMPTY_getInstance(), '');
    }
    return result;
  }
  function ForwardInverseExtensionType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ForwardInverseExtensionType_initFields() {
    ForwardInverseExtensionType_initFields = function () {
    };
    ForwardInverseExtensionType$ADD_SUBTRACT_instance = new ForwardInverseExtensionType('ADD_SUBTRACT', 0);
    ForwardInverseExtensionType$MULTIPLY_DIVIDE_instance = new ForwardInverseExtensionType('MULTIPLY_DIVIDE', 1);
    ForwardInverseExtensionType$POW_ROOT_instance = new ForwardInverseExtensionType('POW_ROOT', 2);
    ForwardInverseExtensionType$EXPONENTIATE_LOGARITHM_instance = new ForwardInverseExtensionType('EXPONENTIATE_LOGARITHM', 3);
    ForwardInverseExtensionType$LOGIC_ABSORPTION_instance = new ForwardInverseExtensionType('LOGIC_ABSORPTION', 4);
    ForwardInverseExtensionType$XOR_instance = new ForwardInverseExtensionType('XOR', 5);
    ForwardInverseExtensionType$ONE_TO_instance = new ForwardInverseExtensionType('ONE_TO', 6);
    ForwardInverseExtensionType$ZERO_TO_instance = new ForwardInverseExtensionType('ZERO_TO', 7);
  }
  var ForwardInverseExtensionType$ADD_SUBTRACT_instance;
  function ForwardInverseExtensionType$ADD_SUBTRACT_getInstance() {
    ForwardInverseExtensionType_initFields();
    return ForwardInverseExtensionType$ADD_SUBTRACT_instance;
  }
  var ForwardInverseExtensionType$MULTIPLY_DIVIDE_instance;
  function ForwardInverseExtensionType$MULTIPLY_DIVIDE_getInstance() {
    ForwardInverseExtensionType_initFields();
    return ForwardInverseExtensionType$MULTIPLY_DIVIDE_instance;
  }
  var ForwardInverseExtensionType$POW_ROOT_instance;
  function ForwardInverseExtensionType$POW_ROOT_getInstance() {
    ForwardInverseExtensionType_initFields();
    return ForwardInverseExtensionType$POW_ROOT_instance;
  }
  var ForwardInverseExtensionType$EXPONENTIATE_LOGARITHM_instance;
  function ForwardInverseExtensionType$EXPONENTIATE_LOGARITHM_getInstance() {
    ForwardInverseExtensionType_initFields();
    return ForwardInverseExtensionType$EXPONENTIATE_LOGARITHM_instance;
  }
  var ForwardInverseExtensionType$LOGIC_ABSORPTION_instance;
  function ForwardInverseExtensionType$LOGIC_ABSORPTION_getInstance() {
    ForwardInverseExtensionType_initFields();
    return ForwardInverseExtensionType$LOGIC_ABSORPTION_instance;
  }
  var ForwardInverseExtensionType$XOR_instance;
  function ForwardInverseExtensionType$XOR_getInstance() {
    ForwardInverseExtensionType_initFields();
    return ForwardInverseExtensionType$XOR_instance;
  }
  var ForwardInverseExtensionType$ONE_TO_instance;
  function ForwardInverseExtensionType$ONE_TO_getInstance() {
    ForwardInverseExtensionType_initFields();
    return ForwardInverseExtensionType$ONE_TO_instance;
  }
  var ForwardInverseExtensionType$ZERO_TO_instance;
  function ForwardInverseExtensionType$ZERO_TO_getInstance() {
    ForwardInverseExtensionType_initFields();
    return ForwardInverseExtensionType$ZERO_TO_instance;
  }
  ForwardInverseExtensionType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ForwardInverseExtensionType',
    interfaces: [Enum]
  };
  function ForwardInverseExtensionType$values() {
    return [ForwardInverseExtensionType$ADD_SUBTRACT_getInstance(), ForwardInverseExtensionType$MULTIPLY_DIVIDE_getInstance(), ForwardInverseExtensionType$POW_ROOT_getInstance(), ForwardInverseExtensionType$EXPONENTIATE_LOGARITHM_getInstance(), ForwardInverseExtensionType$LOGIC_ABSORPTION_getInstance(), ForwardInverseExtensionType$XOR_getInstance(), ForwardInverseExtensionType$ONE_TO_getInstance(), ForwardInverseExtensionType$ZERO_TO_getInstance()];
  }
  ForwardInverseExtensionType.values = ForwardInverseExtensionType$values;
  function ForwardInverseExtensionType$valueOf(name) {
    switch (name) {
      case 'ADD_SUBTRACT':
        return ForwardInverseExtensionType$ADD_SUBTRACT_getInstance();
      case 'MULTIPLY_DIVIDE':
        return ForwardInverseExtensionType$MULTIPLY_DIVIDE_getInstance();
      case 'POW_ROOT':
        return ForwardInverseExtensionType$POW_ROOT_getInstance();
      case 'EXPONENTIATE_LOGARITHM':
        return ForwardInverseExtensionType$EXPONENTIATE_LOGARITHM_getInstance();
      case 'LOGIC_ABSORPTION':
        return ForwardInverseExtensionType$LOGIC_ABSORPTION_getInstance();
      case 'XOR':
        return ForwardInverseExtensionType$XOR_getInstance();
      case 'ONE_TO':
        return ForwardInverseExtensionType$ONE_TO_getInstance();
      case 'ZERO_TO':
        return ForwardInverseExtensionType$ZERO_TO_getInstance();
      default:throwISE('No enum constant mathhelper.twf.expressiontree.ForwardInverseExtensionType.' + name);
    }
  }
  ForwardInverseExtensionType.valueOf_61zpoe$ = ForwardInverseExtensionType$valueOf;
  function ForwardInverseExtension(forwardInverseExtensionType, argument) {
    this.forwardInverseExtensionType = forwardInverseExtensionType;
    this.argument = argument;
  }
  ForwardInverseExtension.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ForwardInverseExtension',
    interfaces: []
  };
  ForwardInverseExtension.prototype.component1 = function () {
    return this.forwardInverseExtensionType;
  };
  ForwardInverseExtension.prototype.component2 = function () {
    return this.argument;
  };
  ForwardInverseExtension.prototype.copy_51omla$ = function (forwardInverseExtensionType, argument) {
    return new ForwardInverseExtension(forwardInverseExtensionType === void 0 ? this.forwardInverseExtensionType : forwardInverseExtensionType, argument === void 0 ? this.argument : argument);
  };
  ForwardInverseExtension.prototype.toString = function () {
    return 'ForwardInverseExtension(forwardInverseExtensionType=' + Kotlin.toString(this.forwardInverseExtensionType) + (', argument=' + Kotlin.toString(this.argument)) + ')';
  };
  ForwardInverseExtension.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.forwardInverseExtensionType) | 0;
    result = result * 31 + Kotlin.hashCode(this.argument) | 0;
    return result;
  };
  ForwardInverseExtension.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.forwardInverseExtensionType, other.forwardInverseExtensionType) && Kotlin.equals(this.argument, other.argument)))));
  };
  function SubstitutionSelectionData(originalExpression, selectedNodeIds, compiledConfiguration, expressionToTransform, selectedNodeIdsMap, selectedNodes, topOfSelection, topOfSelectionParent, topOfSelectionIndex, lowestSubtree, lowestSubtreeHigh, notSelectedSubtreeTopOriginalTree, notSelectedSubtreeTopArguments, selectedSubtreeTopArguments, selectedSubtreeTopArgumentsInSelectionOrder, nestedNodesInSelection) {
    if (expressionToTransform === void 0)
      expressionToTransform = originalExpression.clone();
    if (selectedNodeIdsMap === void 0)
      selectedNodeIdsMap = nodeIdsPositionsMap(selectedNodeIds);
    if (selectedNodes === void 0)
      selectedNodes = nodeIdsToNodeLinksInSameOrder(expressionToTransform, selectedNodeIds, selectedNodeIdsMap);
    if (topOfSelection === void 0)
      topOfSelection = null;
    if (topOfSelectionParent === void 0)
      topOfSelectionParent = null;
    if (topOfSelectionIndex === void 0)
      topOfSelectionIndex = 0;
    if (lowestSubtree === void 0)
      lowestSubtree = null;
    if (lowestSubtreeHigh === void 0)
      lowestSubtreeHigh = null;
    if (notSelectedSubtreeTopOriginalTree === void 0)
      notSelectedSubtreeTopOriginalTree = null;
    if (notSelectedSubtreeTopArguments === void 0)
      notSelectedSubtreeTopArguments = null;
    if (selectedSubtreeTopArguments === void 0)
      selectedSubtreeTopArguments = null;
    if (selectedSubtreeTopArgumentsInSelectionOrder === void 0)
      selectedSubtreeTopArgumentsInSelectionOrder = null;
    if (nestedNodesInSelection === void 0)
      nestedNodesInSelection = false;
    this.originalExpression = originalExpression;
    this.selectedNodeIds = selectedNodeIds;
    this.compiledConfiguration = compiledConfiguration;
    this.expressionToTransform = expressionToTransform;
    this.selectedNodeIdsMap = selectedNodeIdsMap;
    this.selectedNodes = selectedNodes;
    this.topOfSelection = topOfSelection;
    this.topOfSelectionParent = topOfSelectionParent;
    this.topOfSelectionIndex = topOfSelectionIndex;
    this.lowestSubtree = lowestSubtree;
    this.lowestSubtreeHigh = lowestSubtreeHigh;
    this.notSelectedSubtreeTopOriginalTree = notSelectedSubtreeTopOriginalTree;
    this.notSelectedSubtreeTopArguments = notSelectedSubtreeTopArguments;
    this.selectedSubtreeTopArguments = selectedSubtreeTopArguments;
    this.selectedSubtreeTopArgumentsInSelectionOrder = selectedSubtreeTopArgumentsInSelectionOrder;
    this.nestedNodesInSelection = nestedNodesInSelection;
  }
  SubstitutionSelectionData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubstitutionSelectionData',
    interfaces: []
  };
  SubstitutionSelectionData.prototype.component1 = function () {
    return this.originalExpression;
  };
  SubstitutionSelectionData.prototype.component2 = function () {
    return this.selectedNodeIds;
  };
  SubstitutionSelectionData.prototype.component3 = function () {
    return this.compiledConfiguration;
  };
  SubstitutionSelectionData.prototype.component4 = function () {
    return this.expressionToTransform;
  };
  SubstitutionSelectionData.prototype.component5 = function () {
    return this.selectedNodeIdsMap;
  };
  SubstitutionSelectionData.prototype.component6 = function () {
    return this.selectedNodes;
  };
  SubstitutionSelectionData.prototype.component7 = function () {
    return this.topOfSelection;
  };
  SubstitutionSelectionData.prototype.component8 = function () {
    return this.topOfSelectionParent;
  };
  SubstitutionSelectionData.prototype.component9 = function () {
    return this.topOfSelectionIndex;
  };
  SubstitutionSelectionData.prototype.component10 = function () {
    return this.lowestSubtree;
  };
  SubstitutionSelectionData.prototype.component11 = function () {
    return this.lowestSubtreeHigh;
  };
  SubstitutionSelectionData.prototype.component12 = function () {
    return this.notSelectedSubtreeTopOriginalTree;
  };
  SubstitutionSelectionData.prototype.component13 = function () {
    return this.notSelectedSubtreeTopArguments;
  };
  SubstitutionSelectionData.prototype.component14 = function () {
    return this.selectedSubtreeTopArguments;
  };
  SubstitutionSelectionData.prototype.component15 = function () {
    return this.selectedSubtreeTopArgumentsInSelectionOrder;
  };
  SubstitutionSelectionData.prototype.component16 = function () {
    return this.nestedNodesInSelection;
  };
  SubstitutionSelectionData.prototype.copy_gpumhe$ = function (originalExpression, selectedNodeIds, compiledConfiguration, expressionToTransform, selectedNodeIdsMap, selectedNodes, topOfSelection, topOfSelectionParent, topOfSelectionIndex, lowestSubtree, lowestSubtreeHigh, notSelectedSubtreeTopOriginalTree, notSelectedSubtreeTopArguments, selectedSubtreeTopArguments, selectedSubtreeTopArgumentsInSelectionOrder, nestedNodesInSelection) {
    return new SubstitutionSelectionData(originalExpression === void 0 ? this.originalExpression : originalExpression, selectedNodeIds === void 0 ? this.selectedNodeIds : selectedNodeIds, compiledConfiguration === void 0 ? this.compiledConfiguration : compiledConfiguration, expressionToTransform === void 0 ? this.expressionToTransform : expressionToTransform, selectedNodeIdsMap === void 0 ? this.selectedNodeIdsMap : selectedNodeIdsMap, selectedNodes === void 0 ? this.selectedNodes : selectedNodes, topOfSelection === void 0 ? this.topOfSelection : topOfSelection, topOfSelectionParent === void 0 ? this.topOfSelectionParent : topOfSelectionParent, topOfSelectionIndex === void 0 ? this.topOfSelectionIndex : topOfSelectionIndex, lowestSubtree === void 0 ? this.lowestSubtree : lowestSubtree, lowestSubtreeHigh === void 0 ? this.lowestSubtreeHigh : lowestSubtreeHigh, notSelectedSubtreeTopOriginalTree === void 0 ? this.notSelectedSubtreeTopOriginalTree : notSelectedSubtreeTopOriginalTree, notSelectedSubtreeTopArguments === void 0 ? this.notSelectedSubtreeTopArguments : notSelectedSubtreeTopArguments, selectedSubtreeTopArguments === void 0 ? this.selectedSubtreeTopArguments : selectedSubtreeTopArguments, selectedSubtreeTopArgumentsInSelectionOrder === void 0 ? this.selectedSubtreeTopArgumentsInSelectionOrder : selectedSubtreeTopArgumentsInSelectionOrder, nestedNodesInSelection === void 0 ? this.nestedNodesInSelection : nestedNodesInSelection);
  };
  SubstitutionSelectionData.prototype.toString = function () {
    return 'SubstitutionSelectionData(originalExpression=' + Kotlin.toString(this.originalExpression) + (', selectedNodeIds=' + Kotlin.toString(this.selectedNodeIds)) + (', compiledConfiguration=' + Kotlin.toString(this.compiledConfiguration)) + (', expressionToTransform=' + Kotlin.toString(this.expressionToTransform)) + (', selectedNodeIdsMap=' + Kotlin.toString(this.selectedNodeIdsMap)) + (', selectedNodes=' + Kotlin.toString(this.selectedNodes)) + (', topOfSelection=' + Kotlin.toString(this.topOfSelection)) + (', topOfSelectionParent=' + Kotlin.toString(this.topOfSelectionParent)) + (', topOfSelectionIndex=' + Kotlin.toString(this.topOfSelectionIndex)) + (', lowestSubtree=' + Kotlin.toString(this.lowestSubtree)) + (', lowestSubtreeHigh=' + Kotlin.toString(this.lowestSubtreeHigh)) + (', notSelectedSubtreeTopOriginalTree=' + Kotlin.toString(this.notSelectedSubtreeTopOriginalTree)) + (', notSelectedSubtreeTopArguments=' + Kotlin.toString(this.notSelectedSubtreeTopArguments)) + (', selectedSubtreeTopArguments=' + Kotlin.toString(this.selectedSubtreeTopArguments)) + (', selectedSubtreeTopArgumentsInSelectionOrder=' + Kotlin.toString(this.selectedSubtreeTopArgumentsInSelectionOrder)) + (', nestedNodesInSelection=' + Kotlin.toString(this.nestedNodesInSelection)) + ')';
  };
  SubstitutionSelectionData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.originalExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.selectedNodeIds) | 0;
    result = result * 31 + Kotlin.hashCode(this.compiledConfiguration) | 0;
    result = result * 31 + Kotlin.hashCode(this.expressionToTransform) | 0;
    result = result * 31 + Kotlin.hashCode(this.selectedNodeIdsMap) | 0;
    result = result * 31 + Kotlin.hashCode(this.selectedNodes) | 0;
    result = result * 31 + Kotlin.hashCode(this.topOfSelection) | 0;
    result = result * 31 + Kotlin.hashCode(this.topOfSelectionParent) | 0;
    result = result * 31 + Kotlin.hashCode(this.topOfSelectionIndex) | 0;
    result = result * 31 + Kotlin.hashCode(this.lowestSubtree) | 0;
    result = result * 31 + Kotlin.hashCode(this.lowestSubtreeHigh) | 0;
    result = result * 31 + Kotlin.hashCode(this.notSelectedSubtreeTopOriginalTree) | 0;
    result = result * 31 + Kotlin.hashCode(this.notSelectedSubtreeTopArguments) | 0;
    result = result * 31 + Kotlin.hashCode(this.selectedSubtreeTopArguments) | 0;
    result = result * 31 + Kotlin.hashCode(this.selectedSubtreeTopArgumentsInSelectionOrder) | 0;
    result = result * 31 + Kotlin.hashCode(this.nestedNodesInSelection) | 0;
    return result;
  };
  SubstitutionSelectionData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.originalExpression, other.originalExpression) && Kotlin.equals(this.selectedNodeIds, other.selectedNodeIds) && Kotlin.equals(this.compiledConfiguration, other.compiledConfiguration) && Kotlin.equals(this.expressionToTransform, other.expressionToTransform) && Kotlin.equals(this.selectedNodeIdsMap, other.selectedNodeIdsMap) && Kotlin.equals(this.selectedNodes, other.selectedNodes) && Kotlin.equals(this.topOfSelection, other.topOfSelection) && Kotlin.equals(this.topOfSelectionParent, other.topOfSelectionParent) && Kotlin.equals(this.topOfSelectionIndex, other.topOfSelectionIndex) && Kotlin.equals(this.lowestSubtree, other.lowestSubtree) && Kotlin.equals(this.lowestSubtreeHigh, other.lowestSubtreeHigh) && Kotlin.equals(this.notSelectedSubtreeTopOriginalTree, other.notSelectedSubtreeTopOriginalTree) && Kotlin.equals(this.notSelectedSubtreeTopArguments, other.notSelectedSubtreeTopArguments) && Kotlin.equals(this.selectedSubtreeTopArguments, other.selectedSubtreeTopArguments) && Kotlin.equals(this.selectedSubtreeTopArgumentsInSelectionOrder, other.selectedSubtreeTopArgumentsInSelectionOrder) && Kotlin.equals(this.nestedNodesInSelection, other.nestedNodesInSelection)))));
  };
  function simpleCommutativeOperationSelectionHandling(substitutionSelectionData) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (substitutionSelectionData.selectedNodeIds.length > 1 && substitutionSelectionData.lowestSubtreeHigh != null) {
      tmp$_1 = (tmp$_0 = (tmp$ = ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.isCommutativeWithNullWeight : null;
      if (tmp$_1 == null) {
        return;
      }
      var tmp$_3 = tmp$_1;
      if (!tmp$_3) {
        var tmp$_4 = substitutionSelectionData.selectedNodeIds.length === 2;
        if (tmp$_4) {
          var $receiver = ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).getChildNodesOnDepthOrWhileOperation_okkhzr$(2, listOf_0(['*', '/']));
          var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
          var tmp$_5;
          tmp$_5 = $receiver.iterator();
          while (tmp$_5.hasNext()) {
            var item = tmp$_5.next();
            destination.add_11rb$(item.nodeId);
          }
          tmp$_4 = destination.containsAll_brywnq$(toList(substitutionSelectionData.selectedNodeIds));
        }
        tmp$_3 = (tmp$_4 && equals(ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).value, '/'));
      }
      tmp$_2 = tmp$_3;
    }
     else
      tmp$_2 = false;
    if (tmp$_2) {
      var topOperation = ensureNotNull(ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).functionStringDefinition).function.notObligateMainFunction();
      substitutionSelectionData.notSelectedSubtreeTopOriginalTree = cloneWithoutSelectedNodes(ensureNotNull(substitutionSelectionData.topOfSelection), ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).getContainedChildOperationNodeIds_61zpoe$(topOperation));
      substitutionSelectionData.notSelectedSubtreeTopArguments = topOperationNode(topOperation, ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).value, substitutionSelectionData);
      if (!equals(ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).value, '/')) {
        ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).addChild_em03xr$(new ExpressionNode(NodeType$EMPTY_getInstance(), 'place_for_result'));
      }
      substitutionSelectionData.selectedSubtreeTopArguments = topOperationNode(topOperation, ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).value, substitutionSelectionData);
      substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder = topOperationNode(topOperation, ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).value, substitutionSelectionData);
      var tmp$_6 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder);
      var array = Array_0(substitutionSelectionData.selectedNodeIds.length);
      var tmp$_7;
      tmp$_7 = array.length - 1 | 0;
      for (var i = 0; i <= tmp$_7; i++) {
        array[i] = new ExpressionNode(NodeType$EMPTY_getInstance(), '');
      }
      tmp$_6.children = toMutableList_0(array);
      simpleCommutativeOperationSelectionHandlingRecursivePart(ensureNotNull(substitutionSelectionData.lowestSubtreeHigh), substitutionSelectionData, topOperation);
      var tmp$_8 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder);
      var $receiver_0 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children;
      var destination_0 = ArrayList_init();
      var tmp$_9;
      tmp$_9 = $receiver_0.iterator();
      while (tmp$_9.hasNext()) {
        var element = tmp$_9.next();
        if (element.nodeType !== NodeType$EMPTY_getInstance())
          destination_0.add_11rb$(element);
      }
      tmp$_8.children = toMutableList(destination_0);
    }
     else {
      substitutionSelectionData.selectedSubtreeTopArguments = substitutionSelectionData.topOfSelection;
      while (ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).value.length === 0 && ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).children.size === 1) {
        substitutionSelectionData.selectedSubtreeTopArguments = first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).children);
      }
      substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder = substitutionSelectionData.selectedSubtreeTopArguments;
    }
  }
  function topOperationNode(topOperation, value, substitutionSelectionData) {
    if (!equals(value, '/')) {
      var $receiver = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$(topOperation, -1);
      $receiver.linkOnOriginalTreeNode = ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).linkOnOriginalTreeNode;
      return $receiver;
    }
     else {
      var $receiver_0 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
      $receiver_0.linkOnOriginalTreeNode = ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).linkOnOriginalTreeNode;
      var $receiver_1 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
      $receiver_1.linkOnOriginalTreeNode = ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).linkOnOriginalTreeNode;
      $receiver_0.addChild_em03xr$($receiver_1);
      var $receiver_2 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
      $receiver_2.linkOnOriginalTreeNode = ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).linkOnOriginalTreeNode;
      $receiver_0.addChild_em03xr$($receiver_2);
      return $receiver_0;
    }
  }
  function simpleCommutativeOperationSelectionHandlingRecursivePart($receiver, substitutionSelectionData, topOperation, hasMinus, hasDivision) {
    if (hasMinus === void 0)
      hasMinus = false;
    if (hasDivision === void 0)
      hasDivision = false;
    var tmp$, tmp$_0, tmp$_1;
    var originalNode = ensureNotNull($receiver.linkOnOriginalTreeNode);
    var $receiver_0 = $receiver.children;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_2;
    tmp$_2 = $receiver_0.iterator();
    while (tmp$_2.hasNext()) {
      var item = tmp$_2.next();
      destination.add_11rb$(new Pair(item.nodeId, item));
    }
    var selectedNodeIdsMap = toMap(destination);
    tmp$ = get_lastIndex(originalNode.children);
    for (var i = 0; i <= tmp$; i++) {
      var updatedHasDivision = hasDivision ^ (i > 0 && equals($receiver.value, '/'));
      var child = originalNode.children.get_za3lpa$(i);
      var childSelectionNode = selectedNodeIdsMap.get_11rb$(child.nodeId);
      if (childSelectionNode == null) {
        var newChild = createNewArgument(hasMinus, child, substitutionSelectionData);
        minusDivisionSafetyAddChild(ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments), substitutionSelectionData.compiledConfiguration, newChild, updatedHasDivision);
      }
       else {
        if (!childSelectionNode.children.isEmpty() && (equals((tmp$_1 = (tmp$_0 = childSelectionNode.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.notObligateMainFunction() : null, topOperation) || (childSelectionNode.children.size === 1 && equals(childSelectionNode.value, '+') && equals(first(childSelectionNode.children).value, '-')))) {
          simpleCommutativeOperationSelectionHandlingRecursivePart(childSelectionNode, substitutionSelectionData, topOperation, hasMinus ^ equals(childSelectionNode.value, '-'), updatedHasDivision);
        }
         else {
          var newChild_0 = createNewArgument(hasMinus, child, substitutionSelectionData);
          minusDivisionSafetyAddChild(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments), substitutionSelectionData.compiledConfiguration, newChild_0, updatedHasDivision);
          if (!equals(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).value, '/')) {
            minusDivisionSafetySetChildOnPosition(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder), substitutionSelectionData.compiledConfiguration, newChild_0.clone(), findPositionOfClosedSelectedNode(child, substitutionSelectionData), updatedHasDivision);
          }
        }
      }
    }
  }
  function createNewArgument(hasMinus, child, substitutionSelectionData) {
    if (hasMinus) {
      if (hasMinus && equals(child.value, '-') && child.children.size === 1) {
        return first(child.children).clone();
      }
       else {
        return generateMinusNode(ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).value, substitutionSelectionData.compiledConfiguration, child.clone());
      }
    }
     else {
      return child.clone();
    }
  }
  function minusDivisionSafetyAddChild($receiver, compiledConfiguration, child, hasDivision) {
    var tmp$;
    if (equals(child.value, '-') && !equals($receiver.value, '+')) {
      var $receiver_0 = compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
      $receiver_0.addChild_em03xr$(child);
      tmp$ = $receiver_0;
    }
     else {
      tmp$ = child;
    }
    var newChild = tmp$;
    if (!equals($receiver.value, '/')) {
      if (hasDivision) {
        var $receiver_1 = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
        $receiver_1.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
        $receiver_1.addChild_em03xr$(newChild);
        $receiver.addChild_em03xr$($receiver_1);
      }
       else {
        $receiver.addChild_em03xr$(newChild);
      }
    }
     else {
      if (hasDivision) {
        last($receiver.children).addChild_em03xr$(newChild);
      }
       else {
        first($receiver.children).addChild_em03xr$(newChild);
      }
    }
  }
  function minusDivisionSafetySetChildOnPosition($receiver, compiledConfiguration, child, position, hasDivision) {
    var tmp$;
    if (equals(child.value, '-') && !equals($receiver.value, '+')) {
      var $receiver_0 = compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
      $receiver_0.addChild_em03xr$(child);
      tmp$ = $receiver_0;
    }
     else {
      tmp$ = child;
    }
    var newChild = tmp$;
    if (hasDivision) {
      var $receiver_1 = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
      $receiver_1.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
      $receiver_1.addChild_em03xr$(newChild);
      $receiver.setChildOnPosition_gk94xr$($receiver_1, position);
    }
     else {
      $receiver.setChildOnPosition_gk94xr$(newChild, position);
    }
  }
  function generateMinusNode(currentNodeValue, compiledConfiguration, child) {
    if (equals(currentNodeValue, '+')) {
      var $receiver = compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1);
      $receiver.addChild_em03xr$(child.clone());
      return $receiver;
    }
     else {
      var $receiver_0 = compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
      $receiver_0.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
      last($receiver_0.children).addChild_em03xr$(child.clone());
      return $receiver_0;
    }
  }
  function findPositionOfClosedSelectedNode($receiver, substitutionSelectionData) {
    var tmp$;
    var result = substitutionSelectionData.selectedNodeIdsMap.get_11rb$($receiver.nodeId);
    if (result != null)
      return result;
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      result = findPositionOfClosedSelectedNode(child, substitutionSelectionData);
      if (result >= 0)
        return result;
    }
    return -1;
  }
  function fillSubstitutionSelectionData(substitutionSelectionData) {
    var tmp$;
    substitutionSelectionData.topOfSelection = findLowestSubtreeTopOfNodes(substitutionSelectionData.expressionToTransform, substitutionSelectionData.selectedNodes);
    substitutionSelectionData.topOfSelectionParent = (tmp$ = substitutionSelectionData.topOfSelection) != null ? tmp$.parent : null;
    substitutionSelectionData.topOfSelectionIndex = indexOf(ensureNotNull(substitutionSelectionData.topOfSelectionParent).children, substitutionSelectionData.topOfSelection);
    var nestedNodesInSelection = ArrayList_init();
    substitutionSelectionData.lowestSubtree = findLowestSubtreeWithNodes(substitutionSelectionData.expressionToTransform, substitutionSelectionData.selectedNodes, false, nestedNodesInSelection);
    if (nestedNodesInSelection.contains_11rb$(true)) {
      substitutionSelectionData.nestedNodesInSelection = true;
    }
    substitutionSelectionData.lowestSubtreeHigh = findLowestSubtreeWithNodes(substitutionSelectionData.expressionToTransform, substitutionSelectionData.selectedNodes, true);
    simpleCommutativeOperationSelectionHandling(substitutionSelectionData);
  }
  function findConfiguredSubstitutionsApplications(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, withExtendingSubstitutions, alreadyAddedSubstitutionCodes) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    if (withExtendingSubstitutions === void 0)
      withExtendingSubstitutions = true;
    if (alreadyAddedSubstitutionCodes === void 0) {
      alreadyAddedSubstitutionCodes = emptySet();
    }
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var result = ArrayList_init();
    tmp$ = substitutionSelectionData.compiledConfiguration.compiledExpressionTreeTransformationRules.iterator();
    while (tmp$.hasNext()) {
      var transformation = tmp$.next();
      if (alreadyAddedSubstitutionCodes.contains_11rb$(transformation.code)) {
        continue;
      }
      if ((!withExtendingSubstitutions || substitutionSelectionData.selectedNodes.size > 1) && transformation.isExtending) {
        continue;
      }
      tmp$_0 = checkLeftCondition(substitutionSelectionData, transformation, fastestAppropriateVersion);
      if (tmp$_0 == null) {
        continue;
      }
      var substitutionInstance = tmp$_0;
      if (substitutionInstance.isApplicable) {
        tmp$_1 = transformation.applyRight_b48iti$(substitutionInstance);
        if (tmp$_1 == null) {
          continue;
        }
        var applicationToSelectedPartResult = tmp$_1;
        addApplicationToResults(withReadyApplicationResult, substitutionSelectionData, simplifyNotSelectedTopArguments, applicationToSelectedPartResult, result, transformation, (tmp$_2 = transformation.code) != null ? tmp$_2 : 'ConfiguredSubstitution', (tmp$_3 = transformation.priority) != null ? tmp$_3 : 50);
      }
    }
    return result;
  }
  function generateParentBracketsExpansionSubstitution(substitutionSelectionData) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    var result = ArrayList_init();
    if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$(PARENT_BRACKETS_EXPANSION)) {
      var subst = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$(PARENT_BRACKETS_EXPANSION));
      if (substitutionSelectionData.selectedNodes.size === 1 && equals((tmp$ = firstOrNull_1(substitutionSelectionData.selectedNodes)) != null ? tmp$.value : null, (tmp$_1 = (tmp$_0 = firstOrNull_1(substitutionSelectionData.selectedNodes)) != null ? tmp$_0.parent : null) != null ? tmp$_1.value : null) && ((tmp$_4 = (tmp$_3 = (tmp$_2 = firstOrNull_1(substitutionSelectionData.selectedNodes)) != null ? tmp$_2.functionStringDefinition : null) != null ? tmp$_3.function : null) != null ? tmp$_4.isCommutativeWithNullWeight : null) === true) {
        var inBracketsNode = first(substitutionSelectionData.selectedNodes);
        var inBracketsNodeParent = ensureNotNull(inBracketsNode.parent);
        var inBracketsNodeIndex = inBracketsNodeParent.children.indexOf_11rb$(inBracketsNode);
        var newParent = inBracketsNodeParent.copy_4anocu$();
        for (var i = 0; i < inBracketsNodeIndex; i++) {
          newParent.addChild_em03xr$(inBracketsNodeParent.children.get_za3lpa$(i).clone());
        }
        tmp$_5 = inBracketsNode.children.iterator();
        while (tmp$_5.hasNext()) {
          var child = tmp$_5.next();
          newParent.addChild_em03xr$(child.clone());
        }
        tmp$_6 = get_lastIndex(inBracketsNodeParent.children);
        for (var i_0 = inBracketsNodeIndex + 1 | 0; i_0 <= tmp$_6; i_0++) {
          newParent.addChild_em03xr$(inBracketsNodeParent.children.get_za3lpa$(i_0).clone());
        }
        tmp$_7 = inBracketsNodeParent.parent;
        if (tmp$_7 == null) {
          return result;
        }
        var parentOfParent = tmp$_7;
        var parentNodeIndex = parentOfParent.children.indexOf_11rb$(inBracketsNodeParent);
        parentOfParent.setChildOnPosition_gk94xr$(newParent, parentNodeIndex);
        var $receiver = substitutionSelectionData.expressionToTransform.clone();
        normalizeExpressionToUsualForm($receiver, substitutionSelectionData.compiledConfiguration);
        var resultExpression = $receiver;
        parentOfParent.setChildOnPosition_gk94xr$(inBracketsNodeParent, parentNodeIndex);
        var swapSubstitution = new ExpressionSubstitution(addRootNodeToExpression(inBracketsNodeParent.clone()), addRootNodeToExpression(newParent), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
        result.add_11rb$(new SubstitutionApplication(swapSubstitution, substitutionSelectionData.originalExpression, inBracketsNodeParent.clone(), resultExpression, newParent, PARENT_BRACKETS_EXPANSION, (tmp$_8 = subst.priority) != null ? tmp$_8 : 1));
      }
    }
    return result;
  }
  function generateMinusInOutBracketsSubstitution(substitutionSelectionData) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11;
    var result = ArrayList_init();
    if (substitutionSelectionData.selectedNodes.size === 1 && equals((tmp$_1 = (tmp$_0 = (tmp$ = firstOrNull_1(substitutionSelectionData.selectedNodes)) != null ? tmp$.functionStringDefinition : null) != null ? tmp$_0.function : null) != null ? tmp$_1.mainFunction : null, '+') && substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('MinusInOutBrackets')) {
      var subst = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('MinusInOutBrackets'));
      if (equals((tmp$_2 = firstOrNull_1(substitutionSelectionData.selectedNodes)) != null ? tmp$_2.value : null, '+')) {
        tmp$_7 = first(substitutionSelectionData.selectedNodes);
      }
       else if (equals((tmp$_3 = firstOrNull_1(substitutionSelectionData.selectedNodes)) != null ? tmp$_3.value : null, '-') && equals((tmp$_6 = (tmp$_5 = (tmp$_4 = firstOrNull_1(substitutionSelectionData.selectedNodes)) != null ? tmp$_4.children : null) != null ? firstOrNull_1(tmp$_5) : null) != null ? tmp$_6.value : null, '+')) {
        tmp$_7 = first(first(substitutionSelectionData.selectedNodes).children);
      }
       else
        return emptyList();
      var inBracketsNode = tmp$_7;
      var newInBracketsNode = inBracketsNode.copy_4anocu$();
      tmp$_8 = inBracketsNode.children.iterator();
      while (tmp$_8.hasNext()) {
        var child = tmp$_8.next();
        if (equals(child.value, '-')) {
          newInBracketsNode.addChild_em03xr$(first(child.children).clone());
        }
         else {
          var $receiver = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1);
          $receiver.addChild_em03xr$(child.clone());
          newInBracketsNode.addChild_em03xr$($receiver);
        }
      }
      var inBracketsNodeParent = ensureNotNull(inBracketsNode.parent);
      if (equals(inBracketsNodeParent.value, '-')) {
        var $receiver_0 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
        $receiver_0.addChild_em03xr$(inBracketsNodeParent.clone());
        var left = $receiver_0;
        var originalExpression = substitutionSelectionData.originalExpression.clone();
        tmp$_9 = inBracketsNodeParent.parent;
        if (tmp$_9 == null) {
          return result;
        }
        var parentOfParent = tmp$_9;
        var parentNodeIndex = parentOfParent.children.indexOf_11rb$(inBracketsNodeParent);
        parentOfParent.setChildOnPosition_gk94xr$(newInBracketsNode, parentNodeIndex);
        var $receiver_1 = substitutionSelectionData.expressionToTransform.clone();
        normalizeExpressionToUsualForm($receiver_1, substitutionSelectionData.compiledConfiguration);
        var resultExpression = $receiver_1;
        parentOfParent.setChildOnPosition_gk94xr$(inBracketsNodeParent, parentNodeIndex);
        var minusInBracketsSubstitution = new ExpressionSubstitution(addRootNodeToExpression(left), addRootNodeToExpression(newInBracketsNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
        result.add_11rb$(new SubstitutionApplication(minusInBracketsSubstitution, originalExpression, left, resultExpression, newInBracketsNode, 'MinusInBrackets', (tmp$_10 = subst.priority) != null ? tmp$_10 : 60));
      }
       else {
        var $receiver_2 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1);
        $receiver_2.addChild_em03xr$(newInBracketsNode.clone());
        var right = {v: $receiver_2};
        if (!equals(inBracketsNodeParent.value, '+')) {
          var $receiver_3 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
          $receiver_3.addChild_em03xr$(right.v.clone());
          right.v = $receiver_3;
        }
        var originalExpression_0 = substitutionSelectionData.originalExpression.clone();
        var inBracketsNodeIndex = inBracketsNodeParent.children.indexOf_11rb$(inBracketsNode);
        inBracketsNodeParent.setChildOnPosition_gk94xr$(right.v, inBracketsNodeIndex);
        var $receiver_4 = substitutionSelectionData.expressionToTransform.clone();
        normalizeExpressionToUsualForm($receiver_4, substitutionSelectionData.compiledConfiguration);
        var resultExpression_0 = $receiver_4;
        inBracketsNodeParent.setChildOnPosition_gk94xr$(inBracketsNode, inBracketsNodeIndex);
        if (equals(right.v.value, '-')) {
          var $receiver_5 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
          $receiver_5.addChild_em03xr$(right.v.clone());
          right.v = $receiver_5;
        }
        var minusOutBracketsSubstitution = new ExpressionSubstitution(addRootNodeToExpression(inBracketsNode), addRootNodeToExpression(right.v), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
        result.add_11rb$(new SubstitutionApplication(minusOutBracketsSubstitution, originalExpression_0, inBracketsNode, resultExpression_0, right.v, 'MinusFromBrackets', (tmp$_11 = subst.priority) != null ? tmp$_11 : 60));
      }
    }
    return result;
  }
  function generatePermutationSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16;
    var result = ArrayList_init();
    if (substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder != null && ((tmp$_1 = (tmp$_0 = (tmp$ = substitutionSelectionData.selectedSubtreeTopArguments) != null ? tmp$.functionStringDefinition : null) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) === true && !substitutionSelectionData.nestedNodesInSelection) {
      tmp$_7 = substitutionSelectionData.lowestSubtreeHigh;
      tmp$_6 = (tmp$_5 = (tmp$_4 = (tmp$_3 = (tmp$_2 = substitutionSelectionData.lowestSubtreeHigh) != null ? tmp$_2.functionStringDefinition : null) != null ? tmp$_3.function : null) != null ? tmp$_4.mainFunction : null) != null ? tmp$_5 : '';
      var userSelectedDirectlyChildrenOfCommutativeNode = (tmp$_8 = tmp$_7 != null ? tmp$_7.allParentsMainFunctionIs_61zpoe$(tmp$_6) : null) != null ? tmp$_8 : false;
      var swapSubstitutionSuggested = false;
      if (substitutionSelectionData.selectedNodes.size === 2 && userSelectedDirectlyChildrenOfCommutativeNode && substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('ArgumentsSwap')) {
        var subst = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('ArgumentsSwap'));
        var selectedHighList = ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).listWhichParentsFunctionIs_61zpoe$(ensureNotNull(ensureNotNull(substitutionSelectionData.lowestSubtreeHigh).functionStringDefinition).function.mainFunction);
        if (selectedHighList.size === 2) {
          var originalExpression = substitutionSelectionData.originalExpression.clone();
          var firstNode = first(selectedHighList);
          tmp$_9 = firstNode.parent;
          if (tmp$_9 == null) {
            return result;
          }
          var firstNodeParent = tmp$_9;
          var firstNodeIndex = firstNodeParent.children.indexOf_11rb$(firstNode);
          var secondNode = last(selectedHighList);
          tmp$_10 = secondNode.parent;
          if (tmp$_10 == null) {
            return result;
          }
          var secondNodeParent = tmp$_10;
          var secondNodeIndex = secondNodeParent.children.indexOf_11rb$(secondNode);
          firstNodeParent.setChildOnPosition_gk94xr$(secondNode, firstNodeIndex);
          secondNodeParent.setChildOnPosition_gk94xr$(firstNode, secondNodeIndex);
          var swapResult = ensureNotNull(substitutionSelectionData.topOfSelection).clone();
          var $receiver = substitutionSelectionData.expressionToTransform.clone();
          normalizeExpressionToUsualForm($receiver, substitutionSelectionData.compiledConfiguration);
          var resultExpression = $receiver;
          firstNodeParent.setChildOnPosition_gk94xr$(firstNode, firstNodeIndex);
          secondNodeParent.setChildOnPosition_gk94xr$(secondNode, secondNodeIndex);
          var swapSubstitution = new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(swapResult), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
          result.add_11rb$(new SubstitutionApplication(swapSubstitution, originalExpression, ensureNotNull(substitutionSelectionData.topOfSelection).clone(), resultExpression, swapResult, 'Swap', (tmp$_11 = subst.priority) != null ? tmp$_11 : 10));
          swapSubstitutionSuggested = true;
        }
      }
      if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('ArgumentsPermutation')) {
        var subst_0 = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('ArgumentsPermutation'));
        if (!swapSubstitutionSuggested && substitutionSelectionData.notSelectedSubtreeTopArguments != null && ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).children.size === 1 && ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).children.size === 2) {
          var $receiver_0 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone();
          reverse($receiver_0.children);
          var selectedPartTransformationResultInSelectedOrderInBrackets = $receiver_0;
          addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, selectedPartTransformationResultInSelectedOrderInBrackets, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(selectedPartTransformationResultInSelectedOrderInBrackets), void 0, void 0, subst_0.code, subst_0.nameEn, subst_0.nameRu), 'ArgumentsPermutation', (tmp$_12 = subst_0.priority) != null ? tmp$_12 : 90);
        }
         else if (substitutionSelectionData.notSelectedSubtreeTopArguments != null && ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).children.size > 1 || (!swapSubstitutionSuggested && !equals(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).toString(), ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).toString()))) {
          if (ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).children.size > 1) {
            var $receiver_1 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).copy_4anocu$();
            $receiver_1.addChild_em03xr$(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).clone());
            tmp$_13 = $receiver_1;
          }
           else {
            tmp$_13 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder);
          }
          var selectedPartTransformationResultInSelectedOrderInBrackets_0 = tmp$_13;
          addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, selectedPartTransformationResultInSelectedOrderInBrackets_0, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(selectedPartTransformationResultInSelectedOrderInBrackets_0), void 0, void 0, subst_0.code, subst_0.nameEn, subst_0.nameRu, void 0, void 0, void 0, void 0, subst_0.priority), 'SelectedOrderExtraction', (tmp$_14 = subst_0.priority) != null ? tmp$_14 : 90);
          if (!equals(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).toString(), ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).toString()) && (substitutionSelectionData.notSelectedSubtreeTopArguments != null && ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).children.size > 1) && !equals(ensureNotNull(substitutionSelectionData.topOfSelection).toString(), ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).toString()) && substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('ArgumentsPermutationInOriginalOrder')) {
            subst_0 = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('ArgumentsPermutationInOriginalOrder'));
            if (ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).children.size > 1) {
              var $receiver_2 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).copy_4anocu$();
              $receiver_2.addChild_em03xr$(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone());
              tmp$_15 = $receiver_2;
            }
             else {
              tmp$_15 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments);
            }
            var selectedPartTransformationResultInOriginalOrderInBrackets = tmp$_15;
            addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, selectedPartTransformationResultInOriginalOrderInBrackets, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(selectedPartTransformationResultInOriginalOrderInBrackets), void 0, void 0, subst_0.code, subst_0.nameEn, subst_0.nameRu, void 0, void 0, void 0, void 0, subst_0.priority), 'OriginalOrderExtraction', (tmp$_16 = subst_0.priority) != null ? tmp$_16 : 90);
          }
        }
      }
    }
    return result;
  }
  function ExpressionStrictureIdentifierCounter(expressionStrictureIdentifier, count) {
    if (count === void 0)
      count = 1;
    this.expressionStrictureIdentifier = expressionStrictureIdentifier;
    this.count = count;
  }
  ExpressionStrictureIdentifierCounter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionStrictureIdentifierCounter',
    interfaces: []
  };
  ExpressionStrictureIdentifierCounter.prototype.component1 = function () {
    return this.expressionStrictureIdentifier;
  };
  ExpressionStrictureIdentifierCounter.prototype.component2 = function () {
    return this.count;
  };
  ExpressionStrictureIdentifierCounter.prototype.copy_vm0tsd$ = function (expressionStrictureIdentifier, count) {
    return new ExpressionStrictureIdentifierCounter(expressionStrictureIdentifier === void 0 ? this.expressionStrictureIdentifier : expressionStrictureIdentifier, count === void 0 ? this.count : count);
  };
  ExpressionStrictureIdentifierCounter.prototype.toString = function () {
    return 'ExpressionStrictureIdentifierCounter(expressionStrictureIdentifier=' + Kotlin.toString(this.expressionStrictureIdentifier) + (', count=' + Kotlin.toString(this.count)) + ')';
  };
  ExpressionStrictureIdentifierCounter.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.expressionStrictureIdentifier) | 0;
    result = result * 31 + Kotlin.hashCode(this.count) | 0;
    return result;
  };
  ExpressionStrictureIdentifierCounter.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.expressionStrictureIdentifier, other.expressionStrictureIdentifier) && Kotlin.equals(this.count, other.count)))));
  };
  function generateReduceArithmeticSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, alreadyAddedSubstitutionCodes) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    if (alreadyAddedSubstitutionCodes === void 0) {
      alreadyAddedSubstitutionCodes = emptySet();
    }
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    var result = ArrayList_init();
    if (substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder != null && ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.size > 1) {
      ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).fillStructureStringIdentifiers_5osufp$();
      var plusOperation = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).value;
      var dotOperation = dotOperationByPlus(plusOperation, ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children);
      if (!isBlank(dotOperation) && substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('TwoSidesArithmeticReduce') && (!equals(plusOperation, 'xor') || substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('XorDistribution'))) {
        var possibleMultipliersSet = tryToAddMonomReduceTransformation(plusOperation, dotOperation, substitutionSelectionData, false, simplifyNotSelectedTopArguments, result);
        tryToAddMonomReduceTransformation(plusOperation, dotOperation, substitutionSelectionData, true, simplifyNotSelectedTopArguments, result, possibleMultipliersSet);
      }
      if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('ReduceArithmetic')) {
        var subst = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('ReduceArithmetic'));
        if (equals(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).value, '+')) {
          var possibleDenominator = getOperandsFrom2ArgsNode(first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children), '/', 1, new ExpressionNode(NodeType$EMPTY_getInstance(), ''));
          if (ensureNotNull(possibleDenominator).nodeType !== NodeType$EMPTY_getInstance()) {
            tmp$ = get_lastIndex(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children);
            for (var i = 1; i <= tmp$; i++) {
              if (!equals(possibleDenominator != null ? possibleDenominator.expressionStrictureIdentifier : null, getOperandsFrom2ArgsNode(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.get_za3lpa$(i), '/', 1, new ExpressionNode(NodeType$EMPTY_getInstance(), '')).expressionStrictureIdentifier)) {
                possibleDenominator = null;
                break;
              }
            }
            if (possibleDenominator != null) {
              var degNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
              var prodNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
              tmp$_0 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.iterator();
              while (tmp$_0.hasNext()) {
                var child = tmp$_0.next();
                prodNode.addChild_em03xr$(getOperandsFrom2ArgsNode(child, '/', 0, null, substitutionSelectionData).clone());
              }
              degNode.addChild_em03xr$(prodNode);
              degNode.addChild_em03xr$(possibleDenominator.clone());
              addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, degNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(degNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority), 'ReduceArithmetic', (tmp$_1 = subst.priority) != null ? tmp$_1 : 5);
            }
          }
        }
        if (equals(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).value, '*')) {
          var possibleDegree = getOperandsFrom2ArgsNode(first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children), '^', 0, null);
          tmp$_2 = get_lastIndex(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children);
          for (var i_0 = 1; i_0 <= tmp$_2; i_0++) {
            if (!equals(possibleDegree != null ? possibleDegree.expressionStrictureIdentifier : null, getOperandsFrom2ArgsNode(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.get_za3lpa$(i_0), '^', 0, null).expressionStrictureIdentifier)) {
              possibleDegree = null;
              break;
            }
          }
          if (possibleDegree != null) {
            var degNode_0 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
            degNode_0.addChild_em03xr$(possibleDegree.clone());
            var sumNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
            tmp$_3 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.iterator();
            while (tmp$_3.hasNext()) {
              var child_0 = tmp$_3.next();
              sumNode.addChild_em03xr$(getOperandsFrom2ArgsNode(child_0, '^', 1, new ExpressionNode(NodeType$VARIABLE_getInstance(), '1')).clone());
            }
            degNode_0.addChild_em03xr$(sumNode);
            addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, degNode_0, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(degNode_0), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority), 'ReduceArithmetic', (tmp$_4 = subst.priority) != null ? tmp$_4 : 5);
          }
        }
        if (equals(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).value, '*')) {
          var possibleDegree_0 = getOperandsFrom2ArgsNode(first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children), '^', 1, new ExpressionNode(NodeType$EMPTY_getInstance(), ''));
          if (ensureNotNull(possibleDegree_0).nodeType !== NodeType$EMPTY_getInstance()) {
            tmp$_5 = get_lastIndex(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children);
            for (var i_1 = 1; i_1 <= tmp$_5; i_1++) {
              if (!equals(possibleDegree_0 != null ? possibleDegree_0.expressionStrictureIdentifier : null, getOperandsFrom2ArgsNode(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.get_za3lpa$(i_1), '^', 1, new ExpressionNode(NodeType$EMPTY_getInstance(), '')).expressionStrictureIdentifier)) {
                possibleDegree_0 = null;
                break;
              }
            }
            if (possibleDegree_0 != null) {
              var degNode_1 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
              var prodNode_0 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
              tmp$_6 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.iterator();
              while (tmp$_6.hasNext()) {
                var child_1 = tmp$_6.next();
                prodNode_0.addChild_em03xr$(getOperandsFrom2ArgsNode(child_1, '^', 0, null).clone());
              }
              degNode_1.addChild_em03xr$(prodNode_0);
              degNode_1.addChild_em03xr$(possibleDegree_0.clone());
              addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, degNode_1, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(degNode_1), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority), 'ReduceArithmetic', (tmp$_7 = subst.priority) != null ? tmp$_7 : 5);
            }
          }
        }
      }
    }
    var tmp$_8;
    var set = HashSet_init();
    var list = ArrayList_init();
    tmp$_8 = result.iterator();
    while (tmp$_8.hasNext()) {
      var e = tmp$_8.next();
      var key = e.resultExpression;
      if (set.add_11rb$(key))
        list.add_11rb$(e);
    }
    return list;
  }
  function tryToAddMonomReduceTransformation(plusOperation, dotOperation, substitutionSelectionData, useExpanded, simplifyNotSelectedTopArguments, result, otherMultipliers) {
    if (otherMultipliers === void 0)
      otherMultipliers = emptyList();
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    tmp$ = substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('TwoSidesArithmeticReduce');
    if (tmp$ == null) {
      return emptyList();
    }
    var subst = tmp$;
    var possibleMultipliersSet = getMultipliersFromNode(plusOperation, dotOperation, first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children), useExpanded);
    tmp$_0 = get_lastIndex(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children);
    for (var i = 1; i <= tmp$_0; i++) {
      var childMultipliers = getMultipliersFromNode(plusOperation, dotOperation, ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.get_za3lpa$(i), useExpanded);
      tmp$_1 = possibleMultipliersSet.iterator();
      loop_label: while (tmp$_1.hasNext()) {
        var possibleMultiplier = tmp$_1.next();
        var firstOrNull$result;
        firstOrNull$break: do {
          var tmp$_6;
          tmp$_6 = childMultipliers.iterator();
          while (tmp$_6.hasNext()) {
            var element = tmp$_6.next();
            var tmp$_7;
            if ((tmp$_7 = element.expressionStrictureIdentifier) != null ? tmp$_7.equals(possibleMultiplier.expressionStrictureIdentifier) : null) {
              firstOrNull$result = element;
              break firstOrNull$break;
            }
          }
          firstOrNull$result = null;
        }
         while (false);
        var maxCount = (tmp$_3 = (tmp$_2 = firstOrNull$result) != null ? tmp$_2.count : null) != null ? tmp$_3 : 0;
        var a = possibleMultiplier.count;
        possibleMultiplier.count = Math_0.min(a, maxCount);
      }
      var $receiver = possibleMultipliersSet;
      var destination = ArrayList_init();
      var tmp$_8;
      tmp$_8 = $receiver.iterator();
      while (tmp$_8.hasNext()) {
        var element_0 = tmp$_8.next();
        if (element_0.count > 0)
          destination.add_11rb$(element_0);
      }
      possibleMultipliersSet = destination;
      if (possibleMultipliersSet.isEmpty()) {
        break;
      }
    }
    if (!possibleMultipliersSet.isEmpty()) {
      var $receiver_0 = possibleMultipliersSet;
      var destination_0 = ArrayList_init();
      var tmp$_9;
      tmp$_9 = $receiver_0.iterator();
      while (tmp$_9.hasNext()) {
        var element_1 = tmp$_9.next();
        var tmp$_10;
        var originalOrderIdentifier = '(^(' + element_1.expressionStrictureIdentifier.originalOrderIdentifier + ';' + element_1.count + '))';
        var commutativeSortedIdentifier = '(^(' + element_1.expressionStrictureIdentifier.commutativeSortedIdentifier + ';' + element_1.count + '))';
        var selected = false;
        tmp$_10 = substitutionSelectionData.selectedNodes.iterator();
        while (tmp$_10.hasNext()) {
          var node = tmp$_10.next();
          var nodeIdentifier = node.toString();
          if (contains_1(originalOrderIdentifier, nodeIdentifier) || contains_1(commutativeSortedIdentifier, nodeIdentifier)) {
            selected = true;
            break;
          }
        }
        if (selected)
          destination_0.add_11rb$(element_1);
      }
      var onlySelectedMultipliers = destination_0;
      if (!onlySelectedMultipliers.isEmpty()) {
        possibleMultipliersSet = onlySelectedMultipliers;
      }
      if (otherMultipliers.isEmpty() || !otherMultipliers.containsAll_brywnq$(possibleMultipliersSet)) {
        var prodNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$(dotOperation, -1);
        var dotZero = ensureNotNull(ensureNotNull(prodNode.functionStringDefinition).function.fieldAddZero);
        var sumNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$(plusOperation, -1);
        handleAdditiveNodeAsReductionPart(plusOperation, dotOperation, dotZero, substitutionSelectionData, first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children), possibleMultipliersSet, sumNode, prodNode, useExpanded);
        tmp$_4 = get_lastIndex(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children);
        for (var i_0 = 1; i_0 <= tmp$_4; i_0++) {
          handleAdditiveNodeAsReductionPart(plusOperation, dotOperation, dotZero, substitutionSelectionData, ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.get_za3lpa$(i_0), possibleMultipliersSet, sumNode, null, useExpanded);
        }
        prodNode.addChild_em03xr$(sumNode);
        addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, prodNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(prodNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority), 'TwoSidesArithmeticReduce', (tmp$_5 = subst.priority) != null ? tmp$_5 : 5);
      }
    }
    return possibleMultipliersSet;
  }
  function generateReduceFractionSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, alreadyAddedSubstitutionCodes) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    if (alreadyAddedSubstitutionCodes === void 0) {
      alreadyAddedSubstitutionCodes = emptySet();
    }
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    var result = ArrayList_init();
    if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$(REDUCE_FRACTION) && !alreadyAddedSubstitutionCodes.contains_11rb$(REDUCE_FRACTION)) {
      var subst = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$(REDUCE_FRACTION));
      var tmp$_8 = substitutionSelectionData.selectedSubtreeTopArguments != null && substitutionSelectionData.notSelectedSubtreeTopArguments != null && equals(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).value, '/') && substitutionSelectionData.selectedNodeIds.length === 2;
      if (tmp$_8) {
        var $receiver = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).children;
        var all$result;
        all$break: do {
          var tmp$_9;
          if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
            all$result = true;
            break all$break;
          }
          tmp$_9 = $receiver.iterator();
          while (tmp$_9.hasNext()) {
            var element = tmp$_9.next();
            if (!(element.children.size === 1)) {
              all$result = false;
              break all$break;
            }
          }
          all$result = true;
        }
         while (false);
        tmp$_8 = all$result;
      }
      if (tmp$_8 && !substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.fastProbabilityCheckOnZero_em03xr$(last(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).children))) {
        var originalExpression = substitutionSelectionData.originalExpression.clone();
        ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).fillStructureStringIdentifiers_5osufp$();
        var numerator = first(first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).children).children);
        var denominator = first(last(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).children).children);
        var rightBase = ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments);
        if (equals(numerator.expressionStrictureIdentifier, denominator.expressionStrictureIdentifier)) {
          var $receiver_0 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
          $receiver_0.addChild_em03xr$(numerator);
          $receiver_0.addChild_em03xr$(denominator);
          var expressionSubstitution = new ExpressionSubstitution(addRootNodeToExpression($receiver_0), addRootNodeToExpression(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1')), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
          var applicationPlace = ensureNotNull(substitutionSelectionData.topOfSelection).clone();
          var applicationResultInPlace = normalizeReduceFractionResult(rightBase.clone());
          ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(applicationResultInPlace, substitutionSelectionData.topOfSelectionIndex);
          var $receiver_1 = substitutionSelectionData.expressionToTransform.clone();
          normalizeExpressionToUsualForm($receiver_1, substitutionSelectionData.compiledConfiguration);
          result.add_11rb$(new SubstitutionApplication(expressionSubstitution, originalExpression, applicationPlace, $receiver_1, applicationResultInPlace, REDUCE_FRACTION, (tmp$ = subst.priority) != null ? tmp$ : 5));
        }
         else if (numerator.isNumberValue() && denominator.isNumberValue()) {
          tmp$_0 = toDoubleOrNull(numerator.value);
          if (tmp$_0 == null) {
            return result;
          }
          var num = tmp$_0;
          tmp$_1 = toDoubleOrNull(denominator.value);
          if (tmp$_1 == null) {
            return result;
          }
          var denom = tmp$_1;
          var numDivDenom = numberToInt(num / denom);
          var denomDivNum = numberToInt(denom / num);
          if (substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.baseOperationsDefinitions.additivelyEqual_yvo9jy$(num, denom * numDivDenom)) {
            tmp$_2 = new ExpressionNode(NodeType$VARIABLE_getInstance(), numDivDenom.toString());
          }
           else if (substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.baseOperationsDefinitions.additivelyEqual_yvo9jy$(denom, num * denomDivNum)) {
            var $receiver_2 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
            $receiver_2.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
            $receiver_2.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), denomDivNum.toString()));
            tmp$_2 = $receiver_2;
          }
           else
            tmp$_2 = null;
          var resNode = tmp$_2;
          if (resNode != null) {
            var $receiver_3 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
            $receiver_3.addChild_em03xr$(numerator);
            $receiver_3.addChild_em03xr$(denominator);
            var expressionSubstitution_0 = new ExpressionSubstitution(addRootNodeToExpression($receiver_3), addRootNodeToExpression(resNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
            var applicationPlace_0 = ensureNotNull(substitutionSelectionData.topOfSelection).clone();
            var $receiver_4 = rightBase.clone();
            if (equals(resNode.value, '/')) {
              last($receiver_4.children).addChildOnPosition_gk94xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), denomDivNum.toString()), 0);
            }
             else {
              first($receiver_4.children).addChildOnPosition_gk94xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), numDivDenom.toString()), 0);
            }
            var applicationResultInPlace_0 = normalizeReduceFractionResult($receiver_4);
            ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(applicationResultInPlace_0, substitutionSelectionData.topOfSelectionIndex);
            var $receiver_5 = substitutionSelectionData.expressionToTransform.clone();
            normalizeExpressionToUsualForm($receiver_5, substitutionSelectionData.compiledConfiguration);
            result.add_11rb$(new SubstitutionApplication(expressionSubstitution_0, originalExpression, applicationPlace_0, $receiver_5, applicationResultInPlace_0, REDUCE_FRACTION, (tmp$_3 = subst.priority) != null ? tmp$_3 : 5));
          }
        }
         else if (equals(numerator.value, '^') && equals(denominator.value, '^') && numerator.children.size === 2 && denominator.children.size === 2 && equals(first(numerator.children).expressionStrictureIdentifier, first(denominator.children).expressionStrictureIdentifier)) {
          var numPow = toDoubleOrNull(last(numerator.children).value);
          var denomPow = toDoubleOrNull(last(denominator.children).value);
          if (numPow != null && denomPow != null) {
            if (numPow >= denomPow) {
              var pow = numPow - denomPow;
              if (substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.baseOperationsDefinitions.additivelyEqual_yvo9jy$(pow, 1.0)) {
                tmp$_4 = first(numerator.children).clone();
              }
               else {
                var $receiver_6 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
                $receiver_6.addChild_em03xr$(first(numerator.children).clone());
                $receiver_6.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(pow)));
                tmp$_4 = $receiver_6;
              }
            }
             else {
              var pow_0 = denomPow - numPow;
              var $receiver_7 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
              $receiver_7.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
              if (substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.baseOperationsDefinitions.additivelyEqual_yvo9jy$(pow_0, 1.0)) {
                $receiver_7.addChild_em03xr$(first(numerator.children).clone());
              }
               else {
                var $receiver_8 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
                $receiver_8.addChild_em03xr$(first(numerator.children).clone());
                $receiver_8.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(pow_0)));
                $receiver_7.addChild_em03xr$($receiver_8);
              }
              tmp$_4 = $receiver_7;
            }
            var resNode_0 = tmp$_4;
            var $receiver_9 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
            $receiver_9.addChild_em03xr$(numerator);
            $receiver_9.addChild_em03xr$(denominator);
            var expressionSubstitution_1 = new ExpressionSubstitution(addRootNodeToExpression($receiver_9), addRootNodeToExpression(resNode_0), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
            var applicationPlace_1 = ensureNotNull(substitutionSelectionData.topOfSelection).clone();
            var $receiver_10 = rightBase.clone();
            if (equals(resNode_0.value, '/')) {
              last($receiver_10.children).addChildOnPosition_gk94xr$(last(resNode_0.children).clone(), 0);
            }
             else {
              first($receiver_10.children).addChildOnPosition_gk94xr$(resNode_0.clone(), 0);
            }
            var applicationResultInPlace_1 = normalizeReduceFractionResult($receiver_10);
            ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(applicationResultInPlace_1, substitutionSelectionData.topOfSelectionIndex);
            var $receiver_11 = substitutionSelectionData.expressionToTransform.clone();
            normalizeExpressionToUsualForm($receiver_11, substitutionSelectionData.compiledConfiguration);
            result.add_11rb$(new SubstitutionApplication(expressionSubstitution_1, originalExpression, applicationPlace_1, $receiver_11, applicationResultInPlace_1, REDUCE_FRACTION, (tmp$_5 = subst.priority) != null ? tmp$_5 : 5));
          }
           else {
            var $receiver_12 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
            $receiver_12.addChild_em03xr$(first(numerator.children).clone());
            var $receiver_13 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
            $receiver_13.addChild_em03xr$(last(numerator.children));
            var $receiver_14 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1);
            $receiver_14.addChild_em03xr$(last(denominator.children));
            $receiver_13.addChild_em03xr$($receiver_14);
            $receiver_12.addChild_em03xr$($receiver_13);
            var resNodeNumerator = $receiver_12;
            var $receiver_15 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
            $receiver_15.addChild_em03xr$(numerator);
            $receiver_15.addChild_em03xr$(denominator);
            var expressionSubstitutionNumerator = new ExpressionSubstitution(addRootNodeToExpression($receiver_15), addRootNodeToExpression(resNodeNumerator), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
            var applicationPlaceNumerator = ensureNotNull(substitutionSelectionData.topOfSelection).clone();
            var $receiver_16 = rightBase.clone();
            first($receiver_16.children).addChild_em03xr$(resNodeNumerator.clone());
            var applicationResultInPlaceNumerator = normalizeReduceFractionResult($receiver_16);
            ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(applicationResultInPlaceNumerator, substitutionSelectionData.topOfSelectionIndex);
            var $receiver_17 = substitutionSelectionData.expressionToTransform.clone();
            normalizeExpressionToUsualForm($receiver_17, substitutionSelectionData.compiledConfiguration);
            result.add_11rb$(new SubstitutionApplication(expressionSubstitutionNumerator, originalExpression, applicationPlaceNumerator, $receiver_17, applicationResultInPlaceNumerator, REDUCE_FRACTION, (tmp$_6 = subst.priority) != null ? tmp$_6 : 5));
            var $receiver_18 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
            $receiver_18.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
            var $receiver_19 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
            $receiver_19.addChild_em03xr$(first(numerator.children).clone());
            var $receiver_20 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
            $receiver_20.addChild_em03xr$(last(denominator.children));
            var $receiver_21 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1);
            $receiver_21.addChild_em03xr$(last(numerator.children));
            $receiver_20.addChild_em03xr$($receiver_21);
            $receiver_19.addChild_em03xr$($receiver_20);
            $receiver_18.addChild_em03xr$($receiver_19);
            var resNodeDenominator = $receiver_18;
            var $receiver_22 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
            $receiver_22.addChild_em03xr$(numerator);
            $receiver_22.addChild_em03xr$(denominator);
            var expressionSubstitutionDenominator = new ExpressionSubstitution(addRootNodeToExpression($receiver_22), addRootNodeToExpression(resNodeDenominator), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
            var applicationPlaceDenominator = ensureNotNull(substitutionSelectionData.topOfSelection).clone();
            var $receiver_23 = rightBase.clone();
            last($receiver_23.children).addChild_em03xr$(last(resNodeDenominator.children).clone());
            var applicationResultInPlaceDenominator = normalizeReduceFractionResult($receiver_23);
            ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(applicationResultInPlaceDenominator, substitutionSelectionData.topOfSelectionIndex);
            var $receiver_24 = substitutionSelectionData.expressionToTransform.clone();
            normalizeExpressionToUsualForm($receiver_24, substitutionSelectionData.compiledConfiguration);
            result.add_11rb$(new SubstitutionApplication(expressionSubstitutionDenominator, originalExpression, applicationPlaceDenominator, $receiver_24, applicationResultInPlaceDenominator, REDUCE_FRACTION, (tmp$_7 = subst.priority) != null ? tmp$_7 : 5));
          }
        }
      }
    }
    return result;
  }
  function normalizeReduceFractionResult($receiver) {
    var $receiver_0 = $receiver.children;
    var all$result;
    all$break: do {
      var tmp$;
      if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
        all$result = true;
        break all$break;
      }
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!(element.children.size === 0)) {
          all$result = false;
          break all$break;
        }
      }
      all$result = true;
    }
     while (false);
    if (all$result) {
      $receiver.setVariable_61zpoe$('1');
    }
     else {
      if (first($receiver.children).children.size === 0) {
        first($receiver.children).setVariable_61zpoe$('1');
      }
       else if (first($receiver.children).children.size === 1) {
        $receiver.setChildOnPosition_gk94xr$(first(first($receiver.children).children), 0);
      }
      if (last($receiver.children).children.size === 0) {
        $receiver.value = first($receiver.children).value;
        $receiver.functionStringDefinition = first($receiver.children).functionStringDefinition;
        $receiver.children = first($receiver.children).children;
        var tmp$_0;
        tmp$_0 = $receiver.children.iterator();
        while (tmp$_0.hasNext()) {
          var element_0 = tmp$_0.next();
          element_0.parent = $receiver;
        }
      }
       else if (last($receiver.children).children.size === 1) {
        $receiver.setChildOnPosition_gk94xr$(first(last($receiver.children).children), 1);
      }
    }
    return $receiver;
  }
  function getOperandsFrom2ArgsNode(expressionNode, operation, operandIndex, ifNotReturn, substitutionSelectionData, hasMinus) {
    if (substitutionSelectionData === void 0)
      substitutionSelectionData = null;
    if (hasMinus === void 0)
      hasMinus = false;
    var tmp$;
    if (equals(expressionNode.value, '-')) {
      return getOperandsFrom2ArgsNode(first(expressionNode.children), operation, operandIndex, ifNotReturn, substitutionSelectionData, hasMinus ^ true);
    }
     else {
      if (equals(expressionNode.value, operation) && expressionNode.children.size === 2) {
        tmp$ = expressionNode.children.get_za3lpa$(operandIndex);
      }
       else {
        tmp$ = ifNotReturn != null ? ifNotReturn : expressionNode;
      }
      var result = tmp$;
      if (hasMinus && substitutionSelectionData != null) {
        var $receiver = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1);
        $receiver.addChild_em03xr$(result);
        return $receiver;
      }
       else
        return result;
    }
  }
  function getMultipliersFromNode(plusOperation, dotOperation, expressionNode, expandPow) {
    var tmp$;
    if (equals(expressionNode.value, '-') && equals(plusOperation, '+')) {
      return getMultipliersFromNode(plusOperation, dotOperation, first(expressionNode.children), expandPow);
    }
     else if (equals(expressionNode.value, dotOperation)) {
      var result = ArrayList_init();
      tmp$ = expressionNode.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        if (powExpandCondition(plusOperation, expandPow, child)) {
          var pow = toInt(last(child.children).value);
          addMultiplierIdentifierToList(result, first(child.children), pow);
        }
         else {
          addMultiplierIdentifierToList(result, child);
        }
      }
      return result;
    }
     else if (powExpandCondition(plusOperation, expandPow, expressionNode)) {
      var pow_0 = toInt(last(expressionNode.children).value);
      return listOf(new ExpressionStrictureIdentifierCounter(ensureNotNull(first(expressionNode.children).expressionStrictureIdentifier), pow_0));
    }
     else {
      return listOf(new ExpressionStrictureIdentifierCounter(ensureNotNull(expressionNode.expressionStrictureIdentifier)));
    }
  }
  function powExpandCondition(plusOperation, expandPow, child) {
    var tmp$ = expandPow && equals(child.value, '^') && equals(plusOperation, '+') && child.children.size === 2 && last(child.children).value.length < 2;
    if (tmp$) {
      var $receiver = last(child.children).value;
      var all$result;
      all$break: do {
        var tmp$_0;
        tmp$_0 = iterator($receiver);
        while (tmp$_0.hasNext()) {
          var element = unboxChar(tmp$_0.next());
          if (!isDigit(unboxChar(toBoxedChar(element)))) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      tmp$ = all$result;
    }
    return tmp$;
  }
  function addMultiplierIdentifierToList(result, node, count) {
    if (count === void 0)
      count = 1;
    var tmp$;
    var indexOfFirst$result;
    indexOfFirst$break: do {
      var tmp$_0;
      var index = 0;
      tmp$_0 = result.iterator();
      while (tmp$_0.hasNext()) {
        var item = tmp$_0.next();
        if (equals(node.expressionStrictureIdentifier, item.expressionStrictureIdentifier)) {
          indexOfFirst$result = index;
          break indexOfFirst$break;
        }
        index = index + 1 | 0;
      }
      indexOfFirst$result = -1;
    }
     while (false);
    var childIndex = indexOfFirst$result;
    if (childIndex < 0) {
      result.add_11rb$(new ExpressionStrictureIdentifierCounter(ensureNotNull(node.expressionStrictureIdentifier), count));
    }
     else {
      tmp$ = result.get_za3lpa$(childIndex);
      tmp$.count = tmp$.count + count | 0;
    }
  }
  function handleAdditiveNodeAsReductionPart(plusOperation, dotOperation, dotZero, substitutionSelectionData, expressionNode, multipliers, sumNode, prodNode, expandPow, hasMinus) {
    if (hasMinus === void 0)
      hasMinus = false;
    var tmp$, tmp$_0;
    if (equals(expressionNode.value, '-') && equals(plusOperation, '+')) {
      handleAdditiveNodeAsReductionPart(plusOperation, dotOperation, dotZero, substitutionSelectionData, first(expressionNode.children), multipliers, sumNode, prodNode, expandPow, hasMinus ^ true);
    }
     else if (equals(expressionNode.value, dotOperation)) {
      var multipliersCopy = ArrayList_init();
      tmp$ = multipliers.iterator();
      while (tmp$.hasNext()) {
        var multiplier = tmp$.next();
        multipliersCopy.add_11rb$(new ExpressionStrictureIdentifierCounter(multiplier.expressionStrictureIdentifier, multiplier.count));
      }
      var sumProdNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$(dotOperation, -1);
      tmp$_0 = expressionNode.children.iterator();
      while (tmp$_0.hasNext()) {
        var child = tmp$_0.next();
        if (powExpandCondition(plusOperation, expandPow, child)) {
          var pow = toInt(last(child.children).value);
          addMultiplierToSumProdNode(multipliersCopy, first(child.children), prodNode, substitutionSelectionData, sumProdNode, pow);
        }
         else {
          addMultiplierToSumProdNode(multipliersCopy, child, prodNode, substitutionSelectionData, sumProdNode, 1);
        }
      }
      if (sumProdNode.children.isEmpty()) {
        sumNode.addChild_em03xr$(minusNode(substitutionSelectionData, new ExpressionNode(NodeType$VARIABLE_getInstance(), dotZero), hasMinus));
      }
      if (sumProdNode.children.size === 1) {
        sumNode.addChild_em03xr$(minusNode(substitutionSelectionData, first(sumProdNode.children), hasMinus));
      }
       else if (sumProdNode.children.size > 1) {
        sumNode.addChild_em03xr$(minusNode(substitutionSelectionData, sumProdNode, hasMinus));
      }
    }
     else {
      if (powExpandCondition(plusOperation, expandPow, expressionNode)) {
        var pow_0 = toInt(last(expressionNode.children).value);
        var firstOrNull$result;
        firstOrNull$break: do {
          var tmp$_1;
          tmp$_1 = multipliers.iterator();
          while (tmp$_1.hasNext()) {
            var element = tmp$_1.next();
            if (equals(element.expressionStrictureIdentifier, first(expressionNode.children).expressionStrictureIdentifier)) {
              firstOrNull$result = element;
              break firstOrNull$break;
            }
          }
          firstOrNull$result = null;
        }
         while (false);
        var mul = firstOrNull$result;
        if (mul != null && pow_0 > mul.count) {
          sumNode.addChild_em03xr$(minusNode(substitutionSelectionData, powNode(substitutionSelectionData, expressionNode, pow_0 - mul.count | 0), hasMinus));
          prodNode != null ? (prodNode.addChild_em03xr$(minusNode(substitutionSelectionData, powNode(substitutionSelectionData, expressionNode, mul.count), hasMinus)), Unit) : null;
          return;
        }
      }
      sumNode.addChild_em03xr$(minusNode(substitutionSelectionData, new ExpressionNode(NodeType$VARIABLE_getInstance(), dotZero), hasMinus));
      prodNode != null ? (prodNode.addChild_em03xr$(minusNode(substitutionSelectionData, expressionNode, hasMinus)), Unit) : null;
    }
  }
  function addMultiplierToSumProdNode(multipliersCopy, node, prodNode, substitutionSelectionData, sumProdNode, count) {
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$;
      tmp$ = multipliersCopy.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (equals(element.expressionStrictureIdentifier, node.expressionStrictureIdentifier)) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }
      }
      firstOrNull$result = null;
    }
     while (false);
    var mul = firstOrNull$result;
    if (mul != null && mul.count >= count) {
      mul.count = mul.count - count | 0;
      prodNode != null ? (prodNode.addChild_em03xr$(powNode(substitutionSelectionData, node, count)), Unit) : null;
    }
     else if (mul != null && 0 < mul.count && mul.count < count) {
      prodNode != null ? (prodNode.addChild_em03xr$(powNode(substitutionSelectionData, node, mul.count)), Unit) : null;
      sumProdNode.addChild_em03xr$(powNode(substitutionSelectionData, node, count - mul.count | 0));
      mul.count = 0;
    }
     else {
      sumProdNode.addChild_em03xr$(powNode(substitutionSelectionData, node, count));
    }
  }
  function powNode(substitutionSelectionData, node, pow) {
    if (pow === 1) {
      return node.clone();
    }
     else {
      var $receiver = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
      $receiver.addChild_em03xr$(node.clone());
      $receiver.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), pow.toString()));
      return $receiver;
    }
  }
  function minusNode(substitutionSelectionData, node, hasMinus) {
    if (!hasMinus) {
      return node.clone();
    }
     else {
      var $receiver = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1);
      $receiver.addChild_em03xr$(node.clone());
      return $receiver;
    }
  }
  function generateZeroComputationSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18;
    var result = ArrayList_init();
    if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('ZeroComputation')) {
      var subst = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('ZeroComputation'));
      if (((tmp$_1 = (tmp$_0 = (tmp$ = substitutionSelectionData.topOfSelection) != null ? tmp$.functionStringDefinition : null) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) === true && ((tmp$_4 = (tmp$_3 = (tmp$_2 = substitutionSelectionData.topOfSelection) != null ? tmp$_2.functionStringDefinition : null) != null ? tmp$_3.function : null) != null ? tmp$_4.fieldAddZero : null) != null) {
        var topNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$(ensureNotNull(substitutionSelectionData.topOfSelection).value, -1);
        var zeroElementFound = false;
        tmp$_5 = ensureNotNull(substitutionSelectionData.topOfSelection).children.iterator();
        while (tmp$_5.hasNext()) {
          var child = tmp$_5.next();
          if (equals(child.value, ensureNotNull(ensureNotNull(ensureNotNull(substitutionSelectionData.topOfSelection).functionStringDefinition).function.fieldAddZero)) || (equals(ensureNotNull(substitutionSelectionData.topOfSelection).value, '+') && equals(child.value, '-') && equals((tmp$_6 = firstOrNull_1(child.children)) != null ? tmp$_6.value : null, ensureNotNull(ensureNotNull(ensureNotNull(substitutionSelectionData.topOfSelection).functionStringDefinition).function.fieldAddZero)))) {
            zeroElementFound = true;
          }
           else {
            topNode.addChild_em03xr$(child.clone());
          }
        }
        if (zeroElementFound) {
          if (topNode.children.isEmpty()) {
            topNode = substitutionSelectionData.compiledConfiguration.createExpressionVariableNode_61zpoe$(ensureNotNull(ensureNotNull(ensureNotNull(substitutionSelectionData.topOfSelection).functionStringDefinition).function.fieldAddZero));
          }
          var zeroComputationSubstitution = new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(topNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
          var originalExpression = substitutionSelectionData.originalExpression.clone();
          ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(topNode, substitutionSelectionData.topOfSelectionIndex);
          tmp$_7 = ensureNotNull(substitutionSelectionData.topOfSelection);
          var $receiver = substitutionSelectionData.expressionToTransform.clone();
          normalizeExpressionToUsualForm($receiver, substitutionSelectionData.compiledConfiguration);
          result.add_11rb$(new SubstitutionApplication(zeroComputationSubstitution, originalExpression, tmp$_7, $receiver, topNode, 'ZeroComputation', (tmp$_8 = subst.priority) != null ? tmp$_8 : 10));
          ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(ensureNotNull(substitutionSelectionData.topOfSelection), substitutionSelectionData.topOfSelectionIndex);
        }
      }
      var tmp$_19 = ((tmp$_11 = (tmp$_10 = (tmp$_9 = substitutionSelectionData.topOfSelection) != null ? tmp$_9.functionStringDefinition : null) != null ? tmp$_10.function : null) != null ? tmp$_11.isCommutativeWithNullWeight : null) === true && ((tmp$_14 = (tmp$_13 = (tmp$_12 = substitutionSelectionData.topOfSelection) != null ? tmp$_12.functionStringDefinition : null) != null ? tmp$_13.function : null) != null ? tmp$_14.fieldMulZero : null) != null;
      if (tmp$_19) {
        var tmp$_20;
        if ((tmp$_16 = (tmp$_15 = substitutionSelectionData.topOfSelection) != null ? tmp$_15.children : null) != null) {
          var any$result;
          any$break: do {
            var tmp$_21;
            if (Kotlin.isType(tmp$_16, Collection) && tmp$_16.isEmpty()) {
              any$result = false;
              break any$break;
            }
            tmp$_21 = tmp$_16.iterator();
            while (tmp$_21.hasNext()) {
              var element = tmp$_21.next();
              var tmp$_22, tmp$_23, tmp$_24;
              if (equals(element.value, (tmp$_24 = (tmp$_23 = (tmp$_22 = substitutionSelectionData.topOfSelection) != null ? tmp$_22.functionStringDefinition : null) != null ? tmp$_23.function : null) != null ? tmp$_24.fieldMulZero : null)) {
                any$result = true;
                break any$break;
              }
            }
            any$result = false;
          }
           while (false);
          tmp$_20 = any$result;
        }
         else
          tmp$_20 = null;
        tmp$_19 = tmp$_20 === true;
      }
      if (tmp$_19) {
        var topNode_0 = new ExpressionNode(NodeType$VARIABLE_getInstance(), ensureNotNull(ensureNotNull(ensureNotNull(substitutionSelectionData.topOfSelection).functionStringDefinition).function.fieldMulZero));
        var zeroComputationSubstitution_0 = new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(topNode_0), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
        var originalExpression_0 = substitutionSelectionData.originalExpression.clone();
        ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(topNode_0, substitutionSelectionData.topOfSelectionIndex);
        tmp$_17 = ensureNotNull(substitutionSelectionData.topOfSelection);
        var $receiver_0 = substitutionSelectionData.expressionToTransform.clone();
        normalizeExpressionToUsualForm($receiver_0, substitutionSelectionData.compiledConfiguration);
        result.add_11rb$(new SubstitutionApplication(zeroComputationSubstitution_0, originalExpression_0, tmp$_17, $receiver_0, topNode_0, 'ZeroComputation', (tmp$_18 = subst.priority) != null ? tmp$_18 : 10));
        ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(ensureNotNull(substitutionSelectionData.topOfSelection), substitutionSelectionData.topOfSelectionIndex);
      }
    }
    return result;
  }
  function generateOpeningBracketsSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10;
    var result = ArrayList_init();
    if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('OpeningBrackets')) {
      var subst = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('OpeningBrackets'));
      var tmp$_11 = ((tmp$_1 = (tmp$_0 = (tmp$ = substitutionSelectionData.topOfSelection) != null ? tmp$.functionStringDefinition : null) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) === true;
      if (tmp$_11) {
        var tmp$_12;
        if ((tmp$_3 = (tmp$_2 = substitutionSelectionData.topOfSelection) != null ? tmp$_2.children : null) != null) {
          var any$result;
          any$break: do {
            var tmp$_13;
            if (Kotlin.isType(tmp$_3, Collection) && tmp$_3.isEmpty()) {
              any$result = false;
              break any$break;
            }
            tmp$_13 = tmp$_3.iterator();
            while (tmp$_13.hasNext()) {
              var element = tmp$_13.next();
              var tmp$_14;
              if (equals(element.value, (tmp$_14 = substitutionSelectionData.topOfSelection) != null ? tmp$_14.value : null)) {
                any$result = true;
                break any$break;
              }
            }
            any$result = false;
          }
           while (false);
          tmp$_12 = any$result;
        }
         else
          tmp$_12 = null;
        tmp$_11 = tmp$_12 === true;
      }
      if (tmp$_11) {
        var topOperationChildren = ensureNotNull(substitutionSelectionData.topOfSelection).getChildNodesWhileOperation_mhpeer$(listOf(ensureNotNull(substitutionSelectionData.topOfSelection).value));
        if (topOperationChildren.size > 1) {
          var topNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$(ensureNotNull(substitutionSelectionData.topOfSelection).value, -1);
          tmp$_4 = topOperationChildren.iterator();
          while (tmp$_4.hasNext()) {
            var child = tmp$_4.next();
            topNode.addChild_em03xr$(child.clone());
          }
          var expandingSubstitution = new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(topNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
          var originalExpression = substitutionSelectionData.originalExpression.clone();
          ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(topNode, substitutionSelectionData.topOfSelectionIndex);
          tmp$_5 = ensureNotNull(substitutionSelectionData.topOfSelection);
          var $receiver = substitutionSelectionData.expressionToTransform.clone();
          normalizeExpressionToUsualForm($receiver, substitutionSelectionData.compiledConfiguration);
          result.add_11rb$(new SubstitutionApplication(expandingSubstitution, originalExpression, tmp$_5, $receiver, topNode, 'OpeningBrackets', (tmp$_6 = subst.priority) != null ? tmp$_6 : 60));
          ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(ensureNotNull(substitutionSelectionData.topOfSelection), substitutionSelectionData.topOfSelectionIndex);
        }
      }
      if (substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder != null && ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children.size === 2) {
        result.addAll_brywnq$(generalOpeningBracketsSubstitutions(substitutionSelectionData.originalExpression, substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder, substitutionSelectionData.topOfSelectionParent, substitutionSelectionData.topOfSelectionIndex, substitutionSelectionData.compiledConfiguration, substitutionSelectionData.expressionToTransform, substitutionSelectionData.notSelectedSubtreeTopArguments, substitutionSelectionData.notSelectedSubtreeTopOriginalTree, substitutionSelectionData.topOfSelection, simplifyNotSelectedTopArguments));
        if (equals(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).value, '^') && equals(first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children).value, '*') && first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children).children.size > 1) {
          var prodNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
          tmp$_7 = first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children).children.iterator();
          while (tmp$_7.hasNext()) {
            var lChild = tmp$_7.next();
            var powNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
            powNode.addChild_em03xr$(lChild.clone());
            powNode.addChild_em03xr$(last(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children).clone());
            prodNode.addChild_em03xr$(powNode);
          }
          addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, prodNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(prodNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority), 'OpeningBrackets', (tmp$_8 = subst.priority) != null ? tmp$_8 : 20);
        }
        if (equals(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).value, '^') && equals(last(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children).value, '+') && last(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children).children.size > 1) {
          var prodNode_0 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
          tmp$_9 = last(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children).children.iterator();
          while (tmp$_9.hasNext()) {
            var rChild = tmp$_9.next();
            var powNode_0 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
            powNode_0.addChild_em03xr$(first(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder).children).clone());
            if (equals(rChild.value, '-')) {
              powNode_0.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
              last(powNode_0.children).addChild_em03xr$(rChild.clone());
            }
             else {
              powNode_0.addChild_em03xr$(rChild.clone());
            }
            prodNode_0.addChild_em03xr$(powNode_0);
          }
          addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, prodNode_0, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(prodNode_0), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority), 'OpeningBrackets', (tmp$_10 = subst.priority) != null ? tmp$_10 : 20);
        }
      }
    }
    return result;
  }
  function generateSimpleComputationSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    var tmp$, tmp$_0;
    var result = ArrayList_init();
    if (substitutionSelectionData.compiledConfiguration.simpleComputationRuleParams.isIncluded && substitutionSelectionData.selectedSubtreeTopArguments != null && !ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).isNumberValue() && (substitutionSelectionData.selectedNodes.size === 1 || !equals((tmp$ = substitutionSelectionData.topOfSelection) != null ? tmp$.value : null, '/')) && calcComplexity(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments)) <= substitutionSelectionData.compiledConfiguration.simpleComputationRuleParams.maxCalcComplexity && subtract(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).getContainedFunctions(), substitutionSelectionData.compiledConfiguration.simpleComputationRuleParams.operationsMap.keys).isEmpty() && ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).getContainedVariables().isEmpty()) {
      tmp$_0 = computeNodeIfSimple(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments), substitutionSelectionData.compiledConfiguration.simpleComputationRuleParams);
      if (tmp$_0 == null) {
        return result;
      }
      var computed = tmp$_0;
      var computedNode = substitutionSelectionData.compiledConfiguration.createExpressionVariableNode_14dthe$(computed);
      addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, computedNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments).clone()), addRootNodeToExpression(computedNode), void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 5), TREE_COMPUTATION_DEFAULT, 5);
    }
    return result;
  }
  function generateNumberTransformationSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    var result = ArrayList_init();
    tmp$_1 = (tmp$_0 = (tmp$ = substitutionSelectionData.topOfSelection) != null ? tmp$.value : null) != null ? toDoubleOrNull(tmp$_0) : null;
    if (tmp$_1 == null) {
      return result;
    }
    var currentValue = tmp$_1;
    var intCurrentValue = numberToInt(currentValue);
    if (2 <= intCurrentValue && intCurrentValue <= 144 && toReal_0(intCurrentValue - currentValue).additivelyEqualToZero()) {
      if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('MultiplicationFactorization')) {
        var subst = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('MultiplicationFactorization'));
        var sqrtValue = numberToInt(Math_0.sqrt(currentValue));
        for (var i = 2; i <= sqrtValue; i++) {
          var div = intCurrentValue / i | 0;
          if (intCurrentValue === Kotlin.imul(i, div)) {
            var mulTreeNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '*');
            mulTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), i.toString()));
            mulTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), div.toString()));
            addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, mulTreeNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(mulTreeNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority), 'NumberTransformation', (tmp$_2 = subst.priority) != null ? tmp$_2 : 50);
          }
        }
      }
      if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('PowFactorization')) {
        var subst_0 = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('PowFactorization'));
        var maxPowValue = numberToInt(Math_0.log2(currentValue));
        for (var i_0 = 2; i_0 <= maxPowValue; i_0++) {
          var x = 1.0 / i_0;
          var base = Math_0.pow(currentValue, x);
          var baseInt = numberToInt(base);
          var tmp$_9 = toReal_0(baseInt - base).additivelyEqualToZero();
          if (tmp$_9) {
            tmp$_9 = intCurrentValue === numberToInt(Math_0.pow(base, i_0));
          }
          if (tmp$_9) {
            var degTreeNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '^');
            degTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), baseInt.toString()));
            degTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), i_0.toString()));
            addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, degTreeNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(degTreeNode), void 0, void 0, subst_0.code, subst_0.nameEn, subst_0.nameRu, void 0, void 0, void 0, void 0, subst_0.priority), 'NumberTransformation', (tmp$_3 = subst_0.priority) != null ? tmp$_3 : 50);
          }
        }
      }
    }
    if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('DecimalToFraction')) {
      var subst_1 = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('DecimalToFraction'));
      var xTenPow = tenPowToMakeZ(currentValue, substitutionSelectionData.compiledConfiguration.simpleComputationRuleParams);
      if (0 < xTenPow && xTenPow < substitutionSelectionData.compiledConfiguration.simpleComputationRuleParams.maxTenPowIterations) {
        var divTreeNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '/');
        var multiplier = Math_0.pow(10.0, xTenPow);
        divTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(currentValue * multiplier)));
        divTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), toShortString(multiplier)));
        addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, divTreeNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(divTreeNode), void 0, void 0, subst_1.code, subst_1.nameEn, subst_1.nameRu, void 0, void 0, void 0, void 0, subst_1.priority), 'NumberTransformation', (tmp$_4 = subst_1.priority) != null ? tmp$_4 : 60);
      }
    }
    if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('NumberPlusMinus1')) {
      var subst_2 = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('NumberPlusMinus1'));
      var plusTreeNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '+');
      plusTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionVariableNode_14dthe$(currentValue - 1));
      plusTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
      addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, plusTreeNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(plusTreeNode), void 0, void 0, subst_2.code, subst_2.nameEn, subst_2.nameRu, void 0, void 0, void 0, void 0, subst_2.priority), 'NumberTransformation', (tmp$_5 = subst_2.priority) != null ? tmp$_5 : 70);
      var minusTreeNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '+');
      minusTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionVariableNode_14dthe$(currentValue + 1));
      minusTreeNode.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
      last(minusTreeNode.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
      addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, minusTreeNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(minusTreeNode), void 0, void 0, subst_2.code, subst_2.nameEn, subst_2.nameRu, void 0, void 0, void 0, void 0, subst_2.priority), 'NumberTransformation', (tmp$_6 = subst_2.priority) != null ? tmp$_6 : 70);
    }
     else if (currentValue >= 0 && substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('PositiveNumberPlusMinus1')) {
      var subst_3 = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('PositiveNumberPlusMinus1'));
      if (currentValue >= 1) {
        var plusTreeNode_0 = new ExpressionNode(NodeType$FUNCTION_getInstance(), '+');
        plusTreeNode_0.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionVariableNode_14dthe$(currentValue - 1));
        plusTreeNode_0.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
        addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, plusTreeNode_0, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(plusTreeNode_0), void 0, void 0, subst_3.code, subst_3.nameEn, subst_3.nameRu, void 0, void 0, void 0, void 0, subst_3.priority), 'NumberTransformation', (tmp$_7 = subst_3.priority) != null ? tmp$_7 : 70);
      }
      var minusTreeNode_0 = new ExpressionNode(NodeType$FUNCTION_getInstance(), '+');
      minusTreeNode_0.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionVariableNode_14dthe$(currentValue + 1));
      minusTreeNode_0.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
      last(minusTreeNode_0.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
      addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, minusTreeNode_0, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(substitutionSelectionData.topOfSelection).clone()), addRootNodeToExpression(minusTreeNode_0), void 0, void 0, subst_3.code, subst_3.nameEn, subst_3.nameRu, void 0, void 0, void 0, void 0, subst_3.priority), 'NumberTransformation', (tmp$_8 = subst_3.priority) != null ? tmp$_8 : 70);
    }
    return result;
  }
  function generateComplicatingExtensionSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    var tmp$;
    var result = ArrayList_init();
    if (substitutionSelectionData.selectedNodes.size === 2) {
      var applicationPlace = first(substitutionSelectionData.selectedNodes);
      tmp$ = applicationPlace.parent;
      if (tmp$ == null) {
        return result;
      }
      var applicationPlaceParent = tmp$;
      var applicationPlaceIndex = applicationPlaceParent.children.indexOf_11rb$(applicationPlace);
      var applicationObject = last(substitutionSelectionData.selectedNodes);
      if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('AdditiveComplicatingExtension')) {
        var subst = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('AdditiveComplicatingExtension'));
        var additiveTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
        additiveTreeNode.addChild_em03xr$(applicationPlace.clone());
        additiveTreeNode.addChild_em03xr$(applicationObject.clone());
        additiveTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
        last(additiveTreeNode.children).addChild_em03xr$(applicationObject.clone());
        var additiveSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(additiveTreeNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority);
        AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, additiveTreeNode, additiveSubstitution, 'ComplicatingExtension');
      }
      if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('MultiplicativeComplicatingExtension') && !substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.fastProbabilityCheckOnZero_em03xr$(applicationObject)) {
        var subst_0 = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('MultiplicativeComplicatingExtension'));
        var multiplicativeTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
        multiplicativeTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1));
        last(multiplicativeTreeNode.children).addChild_em03xr$(applicationPlace.clone());
        last(multiplicativeTreeNode.children).addChild_em03xr$(applicationObject.clone());
        multiplicativeTreeNode.addChild_em03xr$(applicationObject.clone());
        var multiplicativeSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(multiplicativeTreeNode), void 0, void 0, subst_0.code, subst_0.nameEn, subst_0.nameRu, void 0, void 0, void 0, void 0, subst_0.priority);
        AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, multiplicativeTreeNode, multiplicativeSubstitution, 'ComplicatingExtension');
      }
      if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('SetComplicatingExtension')) {
        var subst_1 = ensureNotNull(substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('SetComplicatingExtension'));
        if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('Xor')) {
          var xorTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('xor', -1);
          xorTreeNode.addChild_em03xr$(applicationPlace.clone());
          xorTreeNode.addChild_em03xr$(applicationObject.clone());
          xorTreeNode.addChild_em03xr$(applicationObject.clone());
          var xorSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(xorTreeNode), void 0, void 0, 'XorExtension', 'Xor', '\u0418\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438', void 0, void 0, void 0, void 0, subst_1.priority);
          AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, xorTreeNode, xorSubstitution, xorSubstitution.code);
        }
        if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('AbsorptionComplicatingExtension')) {
          var andOrTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('and', -1);
          andOrTreeNode.addChild_em03xr$(applicationPlace.clone());
          andOrTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('or', -1));
          last(andOrTreeNode.children).addChild_em03xr$(applicationPlace.clone());
          last(andOrTreeNode.children).addChild_em03xr$(applicationObject.clone());
          var andOrSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(andOrTreeNode), void 0, void 0, subst_1.code, subst_1.nameEn, subst_1.nameRu, void 0, void 0, void 0, void 0, subst_1.priority);
          AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, andOrTreeNode, andOrSubstitution, 'ComplicatingExtension');
          var orAndTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('or', -1);
          orAndTreeNode.addChild_em03xr$(applicationPlace.clone());
          orAndTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('and', -1));
          last(orAndTreeNode.children).addChild_em03xr$(applicationPlace.clone());
          last(orAndTreeNode.children).addChild_em03xr$(applicationObject.clone());
          var orAndSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(orAndTreeNode), void 0, void 0, subst_1.code, subst_1.nameEn, subst_1.nameRu, void 0, void 0, void 0, void 0, subst_1.priority);
          AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, orAndTreeNode, orAndSubstitution, 'ComplicatingExtension');
        }
      }
    }
    return result;
  }
  function AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, newNode, substitution, substitutionType, substitutionApplicationError) {
    if (substitutionApplicationError === void 0)
      substitutionApplicationError = null;
    var tmp$, tmp$_0;
    applicationPlaceParent.setChildOnPosition_gk94xr$(newNode, applicationPlaceIndex);
    tmp$ = substitutionSelectionData.originalExpression.clone();
    var $receiver = substitutionSelectionData.expressionToTransform.clone();
    normalizeExpressionToUsualForm($receiver, substitutionSelectionData.compiledConfiguration);
    result.add_11rb$(new SubstitutionApplication(substitution, tmp$, applicationPlace, $receiver, newNode, substitutionType, (tmp$_0 = substitution.priority) != null ? tmp$_0 : 60, substitutionApplicationError));
    applicationPlaceParent.setChildOnPosition_gk94xr$(applicationPlace, applicationPlaceIndex);
  }
  function applySubstitution_0(substitutionSelectionData, expressionSubstitution, simplifyNotSelectedTopArguments) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var result = ArrayList_init();
    tmp$ = checkLeftCondition(substitutionSelectionData, expressionSubstitution, false);
    if (tmp$ == null) {
      return null;
    }
    var substitutionInstance = tmp$;
    if (substitutionInstance.isApplicable) {
      tmp$_0 = expressionSubstitution.applyRight_b48iti$(substitutionInstance);
      if (tmp$_0 == null) {
        return null;
      }
      var applicationToSelectedPartResult = tmp$_0;
      addApplicationToResults(true, substitutionSelectionData, simplifyNotSelectedTopArguments, applicationToSelectedPartResult, result, expressionSubstitution, (tmp$_1 = expressionSubstitution.code) != null ? tmp$_1 : '', (tmp$_2 = expressionSubstitution.priority) != null ? tmp$_2 : 100);
      return first(result).resultExpression;
    }
    return null;
  }
  function checkLeftCondition(substitutionSelectionData, expressionSubstitution, fastestAppropriateVersion) {
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = true;
    var tmp$, tmp$_0;
    if (substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder != null && !expressionSubstitution.changeOnlyOrder) {
      tmp$ = tryToGenerateApplicationSubstitutionInstance(substitutionSelectionData, ensureNotNull(substitutionSelectionData.selectedSubtreeTopArgumentsInSelectionOrder), expressionSubstitution);
    }
     else
      tmp$ = null;
    var substitutionInstance = tmp$;
    if (substitutionInstance == null || (!fastestAppropriateVersion && !substitutionInstance.isApplicable)) {
      tmp$_0 = substitutionSelectionData.selectedSubtreeTopArguments;
      if (tmp$_0 == null) {
        return null;
      }
      substitutionInstance = tryToGenerateApplicationSubstitutionInstance(substitutionSelectionData, tmp$_0, expressionSubstitution);
    }
    return substitutionInstance;
  }
  function tryToGenerateApplicationSubstitutionInstance(substitutionSelectionData, expression, substitution) {
    var result = substitution.checkLeftCondition_i8kf4x$(expression, substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator);
    if (!result.isApplicable && substitution.matchJumbledAndNested) {
      var simplifiedExpression = expression.cloneWithExpandingNestedSameFunctions();
      result = substitution.checkLeftCondition_i8kf4x$(simplifiedExpression, substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator);
    }
    return result;
  }
  function addApplicationToResults(withReadyApplicationResult, substitutionSelectionData, simplifyNotSelectedTopArguments, applicationToSelectedPartResult, result, transformation, substitutionType, priority, onSameBracketLevel) {
    if (onSameBracketLevel === void 0)
      onSameBracketLevel = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var originalExpression = substitutionSelectionData.originalExpression.clone();
    if (withReadyApplicationResult) {
      if (substitutionSelectionData.notSelectedSubtreeTopArguments != null) {
        if (onSameBracketLevel && equals(ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).value, applicationToSelectedPartResult.value)) {
          var $receiver = applicationToSelectedPartResult.clone();
          var tmp$_3, tmp$_4;
          if (simplifyNotSelectedTopArguments) {
            tmp$_3 = get_lastIndex(ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).children);
            for (var i = 1; i <= tmp$_3; i++) {
              $receiver.addChild_em03xr$(ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).children.get_za3lpa$(i));
            }
          }
           else {
            tmp$_4 = ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopOriginalTree).children.iterator();
            while (tmp$_4.hasNext()) {
              var child = tmp$_4.next();
              $receiver.addChild_em03xr$(child);
            }
          }
          tmp$_0 = $receiver;
        }
         else if (simplifyNotSelectedTopArguments) {
          var $receiver_0 = ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments);
          $receiver_0.setChildOnPosition_gk94xr$(applicationToSelectedPartResult, 0);
          tmp$_0 = $receiver_0;
        }
         else {
          var commutativeOperationNode = ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopArguments).copy_4anocu$();
          commutativeOperationNode.addChild_em03xr$(applicationToSelectedPartResult);
          tmp$ = ensureNotNull(substitutionSelectionData.notSelectedSubtreeTopOriginalTree).children.iterator();
          while (tmp$.hasNext()) {
            var child_0 = tmp$.next();
            commutativeOperationNode.addChild_em03xr$(child_0);
          }
          tmp$_0 = commutativeOperationNode;
        }
        var applicationResultNode = tmp$_0;
        if (substitutionSelectionData.topOfSelectionParent != null) {
          ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(applicationResultNode, substitutionSelectionData.topOfSelectionIndex);
        }
      }
       else {
        if (substitutionSelectionData.topOfSelectionParent != null) {
          ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(applicationToSelectedPartResult, substitutionSelectionData.topOfSelectionIndex);
        }
      }
    }
    tmp$_1 = ensureNotNull(substitutionSelectionData.selectedSubtreeTopArguments);
    if (withReadyApplicationResult) {
      var $receiver_1 = substitutionSelectionData.expressionToTransform.clone();
      normalizeExpressionToUsualForm($receiver_1, substitutionSelectionData.compiledConfiguration);
      tmp$_2 = $receiver_1;
    }
     else {
      tmp$_2 = new ExpressionNode(NodeType$EMPTY_getInstance(), "To get application result use argument 'withReadyApplicationResult' = 'true'");
    }
    result.add_11rb$(new SubstitutionApplication(transformation, originalExpression, tmp$_1, tmp$_2, applicationToSelectedPartResult, substitutionType, priority));
    ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(ensureNotNull(substitutionSelectionData.topOfSelection), substitutionSelectionData.topOfSelectionIndex);
  }
  function generateFormIndependentSubstitutionsBySelectedNodes(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    var result = ArrayList_init();
    result.addAll_brywnq$(generateSimpleComputationSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion));
    result.addAll_brywnq$(generateZeroComputationSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion));
    result.addAll_brywnq$(generateOpeningBracketsSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion));
    result.addAll_brywnq$(generatePermutationSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion));
    result.addAll_brywnq$(generateNumberTransformationSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion));
    result.addAll_brywnq$(generateComplicatingExtensionSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion));
    result.addAll_brywnq$(generateParentBracketsExpansionSubstitution(substitutionSelectionData));
    result.addAll_brywnq$(generateMinusInOutBracketsSubstitution(substitutionSelectionData));
    return result;
  }
  function generateFormDependentSubstitutionsBySelectedNodes(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, withExtendingSubstitutions, alreadyAddedSubstitutionCodes) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    if (withExtendingSubstitutions === void 0)
      withExtendingSubstitutions = true;
    var tmp$;
    var result = ArrayList_init();
    result.addAll_brywnq$(generateReduceArithmeticSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, alreadyAddedSubstitutionCodes));
    result.addAll_brywnq$(generateReduceFractionSubstitutions(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, alreadyAddedSubstitutionCodes));
    if (equals((tmp$ = substitutionSelectionData.topOfSelection) != null ? tmp$.value : null, '/') && substitutionSelectionData.selectedNodeIds.length === 2) {
      var tmp$_0 = substitutionSelectionData.originalExpression;
      var array = Array_0(1);
      var tmp$_1;
      tmp$_1 = array.length - 1 | 0;
      for (var i = 0; i <= tmp$_1; i++) {
        array[i] = ensureNotNull(substitutionSelectionData.topOfSelection).nodeId;
      }
      var divisionSubstitutionSelectionData = new SubstitutionSelectionData(tmp$_0, array, substitutionSelectionData.compiledConfiguration);
      fillSubstitutionSelectionData(divisionSubstitutionSelectionData);
      result.addAll_brywnq$(findConfiguredSubstitutionsApplications(divisionSubstitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, withExtendingSubstitutions, alreadyAddedSubstitutionCodes));
    }
     else {
      result.addAll_brywnq$(findConfiguredSubstitutionsApplications(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, withExtendingSubstitutions, alreadyAddedSubstitutionCodes));
    }
    return result;
  }
  function generateFormDependentSubstitutionsBySelectedNodesWithExpressionSimplifications(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, withExtendingSubstitutions) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    if (withExtendingSubstitutions === void 0)
      withExtendingSubstitutions = true;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var result = ArrayList_init();
    result.addAll_brywnq$(generateFormDependentSubstitutionsBySelectedNodes(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, withExtendingSubstitutions, emptySet()));
    var resultWithMaxSimplificationSubstitutions = ArrayList_init();
    tmp$_1 = (tmp$_0 = (tmp$ = substitutionSelectionData.topOfSelection) != null ? tmp$.clone() : null) != null ? tmp$_0.cloneAndSimplifyByCommutativeNormalizeAndComputeSimplePlaces_wq2kg4$(substitutionSelectionData.compiledConfiguration, substitutionSelectionData.selectedNodeIds) : null;
    if (tmp$_1 == null) {
      return result;
    }
    var topWithMaxSimplification = tmp$_1;
    if (((tmp$_2 = substitutionSelectionData.topOfSelectionParent) != null ? (tmp$_2.setChildOnPosition_gk94xr$(topWithMaxSimplification, substitutionSelectionData.topOfSelectionIndex), Unit) : null) == null)
      return result;
    var expression = substitutionSelectionData.expressionToTransform.clone();
    ensureNotNull(substitutionSelectionData.topOfSelectionParent).setChildOnPosition_gk94xr$(ensureNotNull(substitutionSelectionData.topOfSelection), substitutionSelectionData.topOfSelectionIndex);
    if (!equals(expression.toString(), substitutionSelectionData.originalExpression.toString())) {
      expression.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$(void 0, void 0, false);
      var additionalSubstitutionSelectionData = new SubstitutionSelectionData(expression, substitutionSelectionData.selectedNodeIds, substitutionSelectionData.compiledConfiguration);
      fillSubstitutionSelectionData(additionalSubstitutionSelectionData);
      var destination = ArrayList_init_0(collectionSizeOrDefault(result, 10));
      var tmp$_3;
      tmp$_3 = result.iterator();
      while (tmp$_3.hasNext()) {
        var item = tmp$_3.next();
        destination.add_11rb$(item.expressionSubstitution.code);
      }
      resultWithMaxSimplificationSubstitutions.addAll_brywnq$(generateFormDependentSubstitutionsBySelectedNodes(additionalSubstitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, withExtendingSubstitutions, toSet(destination)));
      var destination_0 = ArrayList_init_0(collectionSizeOrDefault(result, 10));
      var tmp$_4;
      tmp$_4 = result.iterator();
      while (tmp$_4.hasNext()) {
        var item_0 = tmp$_4.next();
        var tmp$_5, tmp$_6, tmp$_7;
        destination_0.add_11rb$(new Pair(item_0.expressionSubstitution.code, (tmp$_7 = (tmp$_6 = (tmp$_5 = firstOrNull_1(item_0.expressionSubstitution.right.children)) != null ? tmp$_5.children : null) != null ? tmp$_6.size : null) != null ? tmp$_7 : 0));
      }
      var alreadyAddedSubstitutions = toMap(destination_0);
      var destination_1 = ArrayList_init();
      var tmp$_8;
      tmp$_8 = resultWithMaxSimplificationSubstitutions.iterator();
      while (tmp$_8.hasNext()) {
        var element = tmp$_8.next();
        var tmp$_9, tmp$_10, tmp$_11;
        if (alreadyAddedSubstitutions.get_11rb$(element.expressionSubstitution.code) == null || !equals(alreadyAddedSubstitutions.get_11rb$(element.expressionSubstitution.code), (tmp$_11 = (tmp$_10 = (tmp$_9 = firstOrNull_1(element.expressionSubstitution.right.children)) != null ? tmp$_9.children : null) != null ? tmp$_10.size : null) != null ? tmp$_11 : 0))
          destination_1.add_11rb$(element);
      }
      result.addAll_brywnq$(destination_1);
    }
    return result;
  }
  function generateSubstitutionsBySelectedNodes$lambda(it) {
    return it.priority;
  }
  function generateSubstitutionsBySelectedNodes$lambda_0(it) {
    return it.priority;
  }
  function generateSubstitutionsBySelectedNodes(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, withFullExpressionChangingPart) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = false;
    if (fastestAppropriateVersion === void 0)
      fastestAppropriateVersion = false;
    if (withFullExpressionChangingPart === void 0)
      withFullExpressionChangingPart = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    var result = ArrayList_init();
    fillSubstitutionSelectionData(substitutionSelectionData);
    result.addAll_brywnq$(generateFormIndependentSubstitutionsBySelectedNodes(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion));
    result.addAll_brywnq$(generateFormDependentSubstitutionsBySelectedNodesWithExpressionSimplifications(substitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, true));
    if (result.size > 1) {
      sortWith(result, new Comparator$ObjectLiteral_4(compareBy$lambda_1(generateSubstitutionsBySelectedNodes$lambda)));
    }
    var resultWithAdditionalSubstitutions = ArrayList_init();
    if (substitutionSelectionData.selectedNodeIds.length > 1) {
      tmp$ = substitutionSelectionData.compiledConfiguration.compiledExpressionSimpleAdditionalTreeTransformationRules.iterator();
      while (tmp$.hasNext()) {
        var rule = tmp$.next();
        var expression = substitutionSelectionData.originalExpression.clone();
        var selectedNodes = nodeIdsToNodeLinksInSameOrder(expression, substitutionSelectionData.selectedNodeIds, nodeIdsPositionsMap(substitutionSelectionData.selectedNodeIds));
        var happenedReplacementsCount = 0;
        tmp$_0 = selectedNodes.iterator();
        while (tmp$_0.hasNext()) {
          var selectedNode = tmp$_0.next();
          if (!equals(selectedNode.value, first(rule.right.children).value) && !containsAny_0(selectedNode.getAllChildrenNodeIds(), substitutionSelectionData.selectedNodeIds)) {
            tmp$_1 = selectedNode.parent;
            if (tmp$_1 == null) {
              continue;
            }
            var selectedNodeParent = tmp$_1;
            var selectedNodeIndex = selectedNodeParent.children.indexOf_11rb$(selectedNode);
            var applicationResult = rule.checkAndApply_i8kf4x$(selectedNode, substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator);
            if (applicationResult != null) {
              selectedNodeParent.setChildOnPosition_gk94xr$(applicationResult, selectedNodeIndex);
              happenedReplacementsCount = happenedReplacementsCount + 1 | 0;
            }
          }
        }
        if (0 < happenedReplacementsCount && happenedReplacementsCount < selectedNodes.size) {
          expression.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$(1073741823, 0, false);
          var additionalSubstitutionSelectionData = new SubstitutionSelectionData(expression, substitutionSelectionData.selectedNodeIds, substitutionSelectionData.compiledConfiguration);
          fillSubstitutionSelectionData(additionalSubstitutionSelectionData);
          resultWithAdditionalSubstitutions.addAll_brywnq$(generateFormDependentSubstitutionsBySelectedNodesWithExpressionSimplifications(additionalSubstitutionSelectionData, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, false));
        }
      }
    }
     else if (equals((tmp$_3 = (tmp$_2 = firstOrNull_1(substitutionSelectionData.selectedNodes)) != null ? tmp$_2.parent : null) != null ? tmp$_3.value : null, '-') && equals((tmp$_6 = (tmp$_5 = (tmp$_4 = firstOrNull_1(substitutionSelectionData.selectedNodes)) != null ? tmp$_4.parent : null) != null ? tmp$_5.parent : null) != null ? tmp$_6.value : null, '+')) {
      var expression_0 = substitutionSelectionData.originalExpression.clone();
      var selectedNodes_0 = nodeIdsToNodeLinksInSameOrder(expression_0, substitutionSelectionData.selectedNodeIds, nodeIdsPositionsMap(substitutionSelectionData.selectedNodeIds));
      var dadPlusNode = ensureNotNull(ensureNotNull(first(selectedNodes_0).parent).parent);
      var parentMinusNode = ensureNotNull(first(selectedNodes_0).parent);
      var parentMinusNodeIndex = dadPlusNode.children.indexOf_11rb$(parentMinusNode);
      var $receiver = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
      $receiver.nodeId = first_2(substitutionSelectionData.selectedNodeIds);
      var addNode = $receiver;
      parentMinusNode.resetNodeIds();
      addNode.addChild_em03xr$(parentMinusNode);
      addNode.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$(1073741823, 0, false);
      dadPlusNode.setChildOnPosition_gk94xr$(addNode, parentMinusNodeIndex);
      var additionalSubstitutionSelectionData_0 = new SubstitutionSelectionData(expression_0, substitutionSelectionData.selectedNodeIds, substitutionSelectionData.compiledConfiguration);
      fillSubstitutionSelectionData(additionalSubstitutionSelectionData_0);
      var destination = ArrayList_init_0(collectionSizeOrDefault(result, 10));
      var tmp$_7;
      tmp$_7 = result.iterator();
      while (tmp$_7.hasNext()) {
        var item = tmp$_7.next();
        destination.add_11rb$(item.expressionSubstitution.code);
      }
      resultWithAdditionalSubstitutions.addAll_brywnq$(findConfiguredSubstitutionsApplications(additionalSubstitutionSelectionData_0, simplifyNotSelectedTopArguments, withReadyApplicationResult, fastestAppropriateVersion, false, toSet(destination)));
    }
    if (resultWithAdditionalSubstitutions.size > 1) {
      sortWith(resultWithAdditionalSubstitutions, new Comparator$ObjectLiteral_4(compareBy$lambda_1(generateSubstitutionsBySelectedNodes$lambda_0)));
    }
    result.addAll_brywnq$(resultWithAdditionalSubstitutions);
    var tmp$_8;
    var set = HashSet_init();
    var list = ArrayList_init();
    tmp$_8 = result.iterator();
    while (tmp$_8.hasNext()) {
      var e = tmp$_8.next();
      var key = e.resultExpression.identifier;
      if (set.add_11rb$(key))
        list.add_11rb$(e);
    }
    var destination_0 = ArrayList_init();
    var tmp$_9;
    tmp$_9 = list.iterator();
    while (tmp$_9.hasNext()) {
      var element = tmp$_9.next();
      !equals(element.expressionSubstitution.left.toString(), element.expressionSubstitution.right.toString());
      if (!equals(element.resultExpression.toString(), element.originalExpression.toString()))
        destination_0.add_11rb$(element);
    }
    return fullExpressionChangingPartNormalization(destination_0, withFullExpressionChangingPart);
  }
  function fullExpressionChangingPartNormalization(substitutionApplications, withFullExpressionChangingPart) {
    if (withFullExpressionChangingPart) {
      var tmp$;
      tmp$ = substitutionApplications.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!equals(element.originalExpressionChangingPart.value, '')) {
          var $receiver = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
          $receiver.parent = element.originalExpressionChangingPart.parent;
          $receiver.addChild_em03xr$(element.originalExpressionChangingPart);
          element.originalExpressionChangingPart = $receiver;
        }
        if (!equals(element.resultExpressionChangingPart.value, '')) {
          var $receiver_0 = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
          $receiver_0.parent = element.resultExpressionChangingPart.parent;
          $receiver_0.addChild_em03xr$(element.resultExpressionChangingPart);
          element.resultExpressionChangingPart = $receiver_0;
        }
      }
    }
    return substitutionApplications;
  }
  function generateSubstitutionsBySelectedNodesAndItsPolynomialRoot(substitutionSelectionData, polynomialRoot, withFullExpressionChangingPart) {
    var result = ArrayList_init();
    fillSubstitutionSelectionData(substitutionSelectionData);
    var tmp$;
    var set = HashSet_init();
    var list = ArrayList_init();
    tmp$ = result.iterator();
    while (tmp$.hasNext()) {
      var e = tmp$.next();
      var key = e.resultExpression.identifier;
      if (set.add_11rb$(key))
        list.add_11rb$(e);
    }
    var destination = ArrayList_init();
    var tmp$_0;
    tmp$_0 = list.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      !equals(element.expressionSubstitution.left.toString(), element.expressionSubstitution.right.toString());
      if (!equals(element.resultExpression.toString(), element.originalExpression.toString()))
        destination.add_11rb$(element);
    }
    return fullExpressionChangingPartNormalization(destination, withFullExpressionChangingPart);
  }
  function generateSubstitutionsBySelectedNodesAndItsForwardInverseExtension_0(substitutionSelectionData, forwardInverseExtension, withFullExpressionChangingPart) {
    var tmp$, tmp$_0;
    var result = ArrayList_init();
    fillSubstitutionSelectionData(substitutionSelectionData);
    if (substitutionSelectionData.selectedNodes.size === 1) {
      var applicationPlace = first(substitutionSelectionData.selectedNodes);
      tmp$ = applicationPlace.parent;
      if (tmp$ == null) {
        return result;
      }
      var applicationPlaceParent = tmp$;
      var applicationPlaceIndex = applicationPlaceParent.children.indexOf_11rb$(applicationPlace);
      var applicationObject = forwardInverseExtension.argument;
      switch (forwardInverseExtension.forwardInverseExtensionType.name) {
        case 'ADD_SUBTRACT':
          if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('AdditiveComplicatingExtension')) {
            var additiveTreeNodePlusMinus = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
            additiveTreeNodePlusMinus.addChild_em03xr$(applicationPlace.clone());
            additiveTreeNodePlusMinus.addChild_em03xr$(applicationObject.clone());
            additiveTreeNodePlusMinus.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
            last(additiveTreeNodePlusMinus.children).addChild_em03xr$(applicationObject.clone());
            var plusMinusSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(additiveTreeNodePlusMinus), void 0, void 0, 'PlusMinusComplicatingExtension', 'Plus Minus', '\u041F\u043B\u044E\u0441 \u043C\u0438\u043D\u0443\u0441', void 0, void 0, void 0, void 0, 10);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, additiveTreeNodePlusMinus, plusMinusSubstitution, plusMinusSubstitution.code);
            var additiveTreeNodeMinusPlus = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
            additiveTreeNodeMinusPlus.addChild_em03xr$(applicationPlace.clone());
            additiveTreeNodeMinusPlus.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
            last(additiveTreeNodeMinusPlus.children).addChild_em03xr$(applicationObject.clone());
            additiveTreeNodeMinusPlus.addChild_em03xr$(applicationObject.clone());
            var minusPlusSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(additiveTreeNodeMinusPlus), void 0, void 0, 'MinusPlusComplicatingExtension', 'Minus Plus', '\u041C\u0438\u043D\u0443\u0441 \u043F\u043B\u044E\u0441', void 0, void 0, void 0, void 0, 11);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, additiveTreeNodeMinusPlus, minusPlusSubstitution, minusPlusSubstitution.code);
          }

          break;
        case 'MULTIPLY_DIVIDE':
          if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('MultiplicativeComplicatingExtension')) {
            var mulDivNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
            mulDivNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1));
            last(mulDivNode.children).addChild_em03xr$(applicationPlace.clone());
            last(mulDivNode.children).addChild_em03xr$(applicationObject.clone());
            mulDivNode.addChild_em03xr$(applicationObject.clone());
            var mulDivSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(mulDivNode), void 0, void 0, 'MulDivComplicatingExtension', 'Mul Div', '\u0423\u043C\u043D\u043E\u0436\u0438\u0442\u044C \u043F\u043E\u0434\u0435\u043B\u0438\u0442\u044C', void 0, void 0, void 0, void 0, 10);
            if (substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.fastProbabilityCheckOnZero_em03xr$(applicationObject)) {
              tmp$_0 = new SubstitutionApplicationError('object is zero', '\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u043D\u0430 0', [], applicationObject);
            }
             else
              tmp$_0 = null;
            var error = tmp$_0;
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, mulDivNode, mulDivSubstitution, mulDivSubstitution.code, error);
          }

          break;
        case 'POW_ROOT':
          if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('PowRootComplicatingExtension') && !substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.fastProbabilityCheckOnZero_em03xr$(applicationObject)) {
            var applicationPlaceMoreZero = !substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.fastProbabilityCheckOnIncorrectTransformation_41dun6$(applicationPlace, zero, ComparisonType$LEFT_LESS_OR_EQUAL_getInstance());
            if (applicationObject.isIntNumber() || applicationPlaceMoreZero) {
              var powRootNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
              powRootNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
              last(powRootNode.children).addChild_em03xr$(applicationPlace.clone());
              last(powRootNode.children).addChild_em03xr$(applicationObject.clone());
              powRootNode.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '/'));
              last(powRootNode.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
              last(powRootNode.children).addChild_em03xr$(applicationObject.clone());
              var powRootSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(powRootNode), void 0, void 0, 'PowRootExtension', 'Pow Root', '\u0412\u043E\u0437\u0432\u0435\u0441\u0442\u0438 \u0438\u0437\u0432\u043B\u0435\u0447\u044C', void 0, void 0, void 0, void 0, 9);
              AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, powRootNode, powRootSubstitution, powRootSubstitution.code);
            }
            if (applicationObject.isOddNumber() || applicationPlaceMoreZero) {
              var rootPowNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
              rootPowNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
              last(rootPowNode.children).addChild_em03xr$(applicationPlace.clone());
              last(rootPowNode.children).addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1));
              last(last(rootPowNode.children).children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
              last(last(rootPowNode.children).children).addChild_em03xr$(applicationObject.clone());
              rootPowNode.addChild_em03xr$(applicationObject.clone());
              var rootPowSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(rootPowNode), void 0, void 0, 'rootPowExtension', 'Root Pow', '\u0418\u0437\u0432\u043B\u0435\u0447\u044C \u0432\u043E\u0437\u0432\u0435\u0441\u0442\u0438', void 0, void 0, void 0, void 0, 10);
              AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, rootPowNode, rootPowSubstitution, rootPowSubstitution.code);
            }
          }

          break;
        case 'EXPONENTIATE_LOGARITHM':
          if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('LogExpComplicatingExtension') && !substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.fastProbabilityCheckOnIncorrectTransformation_41dun6$(applicationObject, zero, ComparisonType$LEFT_LESS_OR_EQUAL_getInstance()) && !substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.fastProbabilityCheckOnIncorrectTransformation_41dun6$(applicationObject, one, ComparisonType$EQUAL_getInstance())) {
            var applicationPlaceMoreZero_0 = !substitutionSelectionData.compiledConfiguration.factComparator.expressionComparator.fastProbabilityCheckOnIncorrectTransformation_41dun6$(applicationPlace, zero, ComparisonType$LEFT_LESS_OR_EQUAL_getInstance());
            var expLogNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('log', 2);
            expLogNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1));
            last(expLogNode.children).addChild_em03xr$(applicationObject.clone());
            last(expLogNode.children).addChild_em03xr$(applicationPlace.clone());
            expLogNode.addChild_em03xr$(applicationObject.clone());
            var expLogSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(expLogNode), void 0, void 0, 'logExpExtension', 'Log Exp', 'Log Exp', void 0, void 0, void 0, void 0, 9);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, expLogNode, expLogSubstitution, expLogSubstitution.code);
            if (applicationPlaceMoreZero_0) {
              var logExpNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
              logExpNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('log', 2));
              last(logExpNode.children).addChild_em03xr$(applicationPlace.clone());
              last(logExpNode.children).addChild_em03xr$(applicationObject.clone());
              logExpNode.addChild_em03xr$(applicationObject.clone());
              var logExpSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(logExpNode), void 0, void 0, 'expLogExtension', 'Exp Log', 'Exp Log', void 0, void 0, void 0, void 0, 10);
              AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, logExpNode, logExpSubstitution, logExpSubstitution.code);
            }
          }

          break;
        case 'LOGIC_ABSORPTION':
          if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('AbsorptionComplicatingExtension')) {
            var andOrTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('and', -1);
            andOrTreeNode.addChild_em03xr$(applicationPlace.clone());
            andOrTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('or', -1));
            last(andOrTreeNode.children).addChild_em03xr$(applicationPlace.clone());
            last(andOrTreeNode.children).addChild_em03xr$(applicationObject.clone());
            var andOrSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(andOrTreeNode), void 0, void 0, 'OrAndExtension', 'Or And', '\u0418\u043B\u0438 \u0418', void 0, void 0, void 0, void 0, 10);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, andOrTreeNode, andOrSubstitution, andOrSubstitution.code);
            var orAndTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('or', -1);
            orAndTreeNode.addChild_em03xr$(applicationPlace.clone());
            orAndTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('and', -1));
            last(orAndTreeNode.children).addChild_em03xr$(applicationPlace.clone());
            last(orAndTreeNode.children).addChild_em03xr$(applicationObject.clone());
            var orAndSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(orAndTreeNode), void 0, void 0, 'OrAndExtension', 'And Or', '\u0418 \u0418\u043B\u0438', void 0, void 0, void 0, void 0, 11);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, orAndTreeNode, orAndSubstitution, orAndSubstitution.code);
          }

          break;
        case 'XOR':
          if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('SetComplicatingExtension')) {
            var xorTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('xor', -1);
            xorTreeNode.addChild_em03xr$(applicationPlace.clone());
            xorTreeNode.addChild_em03xr$(applicationObject.clone());
            xorTreeNode.addChild_em03xr$(applicationObject.clone());
            var xorSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(xorTreeNode), void 0, void 0, 'XorExtension', 'Xor', '\u0418\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438', void 0, void 0, void 0, void 0, 10);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, xorTreeNode, xorSubstitution, xorSubstitution.code);
            if (applicationPlace.isAdditivelyEqualTo_14dthe$(0.0)) {
              var xorTreeNode_0 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('xor', -1);
              xorTreeNode_0.addChild_em03xr$(applicationObject.clone());
              xorTreeNode_0.addChild_em03xr$(applicationObject.clone());
              var xorSubstitution_0 = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(xorTreeNode_0), void 0, void 0, 'XorExtension', 'Xor', '\u0418\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438', void 0, void 0, void 0, void 0, 10);
              AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, xorTreeNode_0, xorSubstitution_0, xorSubstitution_0.code);
            }
          }

          break;
        case 'ONE_TO':
          if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('SetComplicatingExtension') && applicationPlace.isAdditivelyEqualTo_14dthe$(1.0)) {
            var orTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('or', -1);
            orTreeNode.addChild_em03xr$(applicationPlace.clone());
            orTreeNode.addChild_em03xr$(applicationObject.clone());
            var orSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(orTreeNode), void 0, void 0, 'oneOrExtension', 'True Or X', '\u0418\u0441\u0442\u0438\u043D\u0430 \u0438\u043B\u0438 X', void 0, void 0, void 0, void 0, 10);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, orTreeNode, orSubstitution, orSubstitution.code);
            var xImplicXTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('implic', -1);
            xImplicXTreeNode.addChild_em03xr$(applicationObject.clone());
            xImplicXTreeNode.addChild_em03xr$(applicationObject.clone());
            var xImplicXSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(xImplicXTreeNode), void 0, void 0, 'xImplicXExtension', 'X if X', 'X \u0435\u0441\u043B\u0438 X', void 0, void 0, void 0, void 0, 10);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, xImplicXTreeNode, xImplicXSubstitution, xImplicXSubstitution.code);
            var xImplicOneTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('implic', -1);
            xImplicOneTreeNode.addChild_em03xr$(applicationObject.clone());
            xImplicOneTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionVariableNode_61zpoe$('1'));
            var xImplicOneSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(xImplicOneTreeNode), void 0, void 0, 'xImplicOneExtension', 'True if X', '\u0418\u0441\u0442\u0438\u043D\u0430 \u0435\u0441\u043B\u0438 X', void 0, void 0, void 0, void 0, 10);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, xImplicOneTreeNode, xImplicOneSubstitution, xImplicOneSubstitution.code);
          }

          break;
        case 'ZERO_TO':
          if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('SetComplicatingExtension') && applicationPlace.isAdditivelyEqualTo_14dthe$(0.0)) {
            var andTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('and', -1);
            andTreeNode.addChild_em03xr$(applicationPlace.clone());
            andTreeNode.addChild_em03xr$(applicationObject.clone());
            var andSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(andTreeNode), void 0, void 0, 'zeroAndExtension', 'False And X', '\u041B\u043E\u0436\u044C \u0438 X', void 0, void 0, void 0, void 0, 10);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, andTreeNode, andSubstitution, andSubstitution.code);
            var xorTreeNode_1 = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('xor', -1);
            xorTreeNode_1.addChild_em03xr$(applicationObject.clone());
            xorTreeNode_1.addChild_em03xr$(applicationObject.clone());
            var xorSubstitution_1 = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(xorTreeNode_1), void 0, void 0, 'XorExtension', 'Xor', '\u0418\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0435 \u0438\u043B\u0438', void 0, void 0, void 0, void 0, 10);
            AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, xorTreeNode_1, xorSubstitution_1, xorSubstitution_1.code);
            if (substitutionSelectionData.compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('SetMinusOrRelativeComplement')) {
              var xSetMinusXTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('set-', -1);
              xSetMinusXTreeNode.addChild_em03xr$(applicationObject.clone());
              xSetMinusXTreeNode.addChild_em03xr$(applicationObject.clone());
              var xSetMinusXSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(xSetMinusXTreeNode), void 0, void 0, 'xSetMinusXExtension', 'X minus X', 'X \u0431\u0435\u0437 X', void 0, void 0, void 0, void 0, 10);
              AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, xSetMinusXTreeNode, xSetMinusXSubstitution, xSetMinusXSubstitution.code);
              var zeroSetMinusXTreeNode = substitutionSelectionData.compiledConfiguration.createExpressionFunctionNode_twmih4$('set-', -1);
              zeroSetMinusXTreeNode.addChild_em03xr$(substitutionSelectionData.compiledConfiguration.createExpressionVariableNode_61zpoe$('0'));
              zeroSetMinusXTreeNode.addChild_em03xr$(applicationObject.clone());
              var zeroSetMinusXSubstitution = new ExpressionSubstitution(addRootNodeToExpression(applicationPlace.clone()), addRootNodeToExpression(zeroSetMinusXTreeNode), void 0, void 0, 'zeroSetMinusXExtension', 'False minus X', '\u041B\u043E\u0436\u044C \u0431\u0435\u0437 X', void 0, void 0, void 0, void 0, 10);
              AddApplicationPlaceExtensionSubstitution(result, substitutionSelectionData, applicationPlace, applicationPlaceParent, applicationPlaceIndex, zeroSetMinusXTreeNode, zeroSetMinusXSubstitution, zeroSetMinusXSubstitution.code);
            }
          }

          break;
      }
    }
    var tmp$_1;
    var set = HashSet_init();
    var list = ArrayList_init();
    tmp$_1 = result.iterator();
    while (tmp$_1.hasNext()) {
      var e = tmp$_1.next();
      var key = e.resultExpression.identifier;
      if (set.add_11rb$(key))
        list.add_11rb$(e);
    }
    var destination = ArrayList_init();
    var tmp$_2;
    tmp$_2 = list.iterator();
    while (tmp$_2.hasNext()) {
      var element = tmp$_2.next();
      !equals(element.expressionSubstitution.left.toString(), element.expressionSubstitution.right.toString());
      if (!equals(element.resultExpression.toString(), element.originalExpression.toString()))
        destination.add_11rb$(element);
    }
    return fullExpressionChangingPartNormalization(destination, withFullExpressionChangingPart);
  }
  function ExpressionStructurePart() {
  }
  ExpressionStructurePart.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ExpressionStructurePart',
    interfaces: []
  };
  function FunctionCondition(name, numberOfArgumentsInterval, internalFunctionCondition, internalVariableCondition, parent) {
    if (name === void 0)
      name = '';
    if (numberOfArgumentsInterval === void 0)
      numberOfArgumentsInterval = new NumberInterval();
    if (internalFunctionCondition === void 0)
      internalFunctionCondition = new FunctionsCondition();
    if (internalVariableCondition === void 0)
      internalVariableCondition = new VariablesCondition();
    if (parent === void 0)
      parent = null;
    this.name = name;
    this.numberOfArgumentsInterval = numberOfArgumentsInterval;
    this.internalFunctionCondition = internalFunctionCondition;
    this.internalVariableCondition = internalVariableCondition;
    this.parent = parent;
  }
  FunctionCondition.prototype.toString = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (this.name.length > 0) {
      tmp$ = 'name=' + this.name;
    }
     else {
      tmp$ = '';
    }
    if (this.numberOfArgumentsInterval.isNotEmpty()) {
      tmp$_0 = 'numberOfArgumentsInterval=' + this.numberOfArgumentsInterval;
    }
     else {
      tmp$_0 = '';
    }
    if (this.internalFunctionCondition.isNotEmpty()) {
      tmp$_1 = 'internalFunctionCondition=' + this.internalFunctionCondition;
    }
     else {
      tmp$_1 = '';
    }
    if (this.internalVariableCondition.isNotEmpty()) {
      tmp$_2 = 'internalVariableCondition=' + this.internalVariableCondition;
    }
     else {
      tmp$_2 = '';
    }
    return '[' + tmp$ + ',' + tmp$_0 + ',' + tmp$_1 + ',' + tmp$_2 + ']';
  };
  FunctionCondition.prototype.isEmpty = function () {
    return this.name.length === 0 && this.numberOfArgumentsInterval.isEmpty() && this.internalFunctionCondition.isEmpty() && !this.internalVariableCondition.isNotEmpty();
  };
  FunctionCondition.prototype.matchFunction_em03xr$ = function (node) {
    var tmp$;
    if (equals(this.name, node.value) && this.numberOfArgumentsInterval.matchNumber_14dthe$(node.children.size)) {
      var $receiver = node.getContainedVariables();
      var all$result;
      all$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          all$result = true;
          break all$break;
        }
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (!this.internalVariableCondition.matchVariable_61zpoe$(element)) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      if (all$result) {
        tmp$ = node.children.iterator();
        while (tmp$.hasNext()) {
          var child = tmp$.next();
          if (!this.internalFunctionCondition.matchFunction_em03xr$(child)) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  };
  FunctionCondition.prototype.matchFunctionByNameNumberOfArguments_em03xr$ = function (node) {
    return this.name.length === 0 && this.numberOfArgumentsInterval.isEmpty() && this.internalFunctionCondition.isEmpty() && !this.internalVariableCondition.isNotEmpty() || (equals(this.name, node.value) && this.numberOfArgumentsInterval.matchNumber_14dthe$(node.children.size));
  };
  FunctionCondition.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FunctionCondition',
    interfaces: [ExpressionStructurePart]
  };
  FunctionCondition.prototype.component1 = function () {
    return this.name;
  };
  FunctionCondition.prototype.component2 = function () {
    return this.numberOfArgumentsInterval;
  };
  FunctionCondition.prototype.component3 = function () {
    return this.internalFunctionCondition;
  };
  FunctionCondition.prototype.component4 = function () {
    return this.internalVariableCondition;
  };
  FunctionCondition.prototype.component5 = function () {
    return this.parent;
  };
  FunctionCondition.prototype.copy_9n0bvh$ = function (name, numberOfArgumentsInterval, internalFunctionCondition, internalVariableCondition, parent) {
    return new FunctionCondition(name === void 0 ? this.name : name, numberOfArgumentsInterval === void 0 ? this.numberOfArgumentsInterval : numberOfArgumentsInterval, internalFunctionCondition === void 0 ? this.internalFunctionCondition : internalFunctionCondition, internalVariableCondition === void 0 ? this.internalVariableCondition : internalVariableCondition, parent === void 0 ? this.parent : parent);
  };
  FunctionCondition.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.numberOfArgumentsInterval) | 0;
    result = result * 31 + Kotlin.hashCode(this.internalFunctionCondition) | 0;
    result = result * 31 + Kotlin.hashCode(this.internalVariableCondition) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    return result;
  };
  FunctionCondition.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.numberOfArgumentsInterval, other.numberOfArgumentsInterval) && Kotlin.equals(this.internalFunctionCondition, other.internalFunctionCondition) && Kotlin.equals(this.internalVariableCondition, other.internalVariableCondition) && Kotlin.equals(this.parent, other.parent)))));
  };
  function FunctionsCondition(treePermittedFunctions, treeForbiddenFunctions, parent) {
    if (treePermittedFunctions === void 0) {
      treePermittedFunctions = ArrayList_init();
    }
    if (treeForbiddenFunctions === void 0) {
      treeForbiddenFunctions = ArrayList_init();
    }
    if (parent === void 0)
      parent = null;
    this.treePermittedFunctions = treePermittedFunctions;
    this.treeForbiddenFunctions = treeForbiddenFunctions;
    this.parent = parent;
  }
  FunctionsCondition.prototype.toString = function () {
    var tmp$, tmp$_0;
    if (!this.treePermittedFunctions.isEmpty()) {
      tmp$ = 'treePermittedFunctions=' + this.treePermittedFunctions;
    }
     else {
      tmp$ = '';
    }
    if (!this.treeForbiddenFunctions.isEmpty()) {
      tmp$_0 = 'treeForbiddenFunctions=' + this.treeForbiddenFunctions;
    }
     else {
      tmp$_0 = '';
    }
    return '[' + tmp$ + ',' + tmp$_0 + ']';
  };
  FunctionsCondition.prototype.isEmpty = function () {
    return !this.isNotEmpty();
  };
  FunctionsCondition.prototype.isNotEmpty = function () {
    var tmp$ = !this.treePermittedFunctions.isEmpty();
    if (!tmp$) {
      tmp$ = !this.treeForbiddenFunctions.isEmpty();
    }
    return tmp$;
  };
  FunctionsCondition.prototype.mergeWithTopFunctionsCondition_nwot57$ = function (topFunctionsCondition) {
    if (this.isNotEmpty()) {
      this.treePermittedFunctions.addAll_brywnq$(topFunctionsCondition.treePermittedFunctions);
      this.treeForbiddenFunctions.addAll_brywnq$(topFunctionsCondition.treeForbiddenFunctions);
    }
  };
  FunctionsCondition.prototype.matchFunction_em03xr$ = function (node) {
    var tmp$ = this.isEmpty();
    if (!tmp$) {
      var $receiver = this.treeForbiddenFunctions;
      var any$result;
      any$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          any$result = false;
          break any$break;
        }
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (element.matchFunction_em03xr$(node)) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      tmp$ = any$result;
    }
    if (tmp$) {
      return false;
    }
     else if (this.treePermittedFunctions.isEmpty() || (this.treePermittedFunctions.size === 1 && first(this.treePermittedFunctions).isEmpty())) {
      return true;
    }
     else {
      var $receiver_0 = this.treePermittedFunctions;
      var any$result_0;
      any$break: do {
        var tmp$_1;
        if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
          any$result_0 = false;
          break any$break;
        }
        tmp$_1 = $receiver_0.iterator();
        while (tmp$_1.hasNext()) {
          var element_0 = tmp$_1.next();
          if (element_0.matchFunction_em03xr$(node)) {
            any$result_0 = true;
            break any$break;
          }
        }
        any$result_0 = false;
      }
       while (false);
      return any$result_0;
    }
  };
  FunctionsCondition.prototype.matchFunctionByNameNumberOfArguments_em03xr$ = function (node) {
    var tmp$ = this.isEmpty();
    if (!tmp$) {
      var $receiver = this.treeForbiddenFunctions;
      var any$result;
      any$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          any$result = false;
          break any$break;
        }
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (element.matchFunctionByNameNumberOfArguments_em03xr$(node)) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      tmp$ = any$result;
    }
    if (tmp$) {
      return false;
    }
     else if (this.treePermittedFunctions.isEmpty()) {
      return true;
    }
     else {
      var $receiver_0 = this.treePermittedFunctions;
      var any$result_0;
      any$break: do {
        var tmp$_1;
        if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
          any$result_0 = false;
          break any$break;
        }
        tmp$_1 = $receiver_0.iterator();
        while (tmp$_1.hasNext()) {
          var element_0 = tmp$_1.next();
          if (element_0.matchFunctionByNameNumberOfArguments_em03xr$(node)) {
            any$result_0 = true;
            break any$break;
          }
        }
        any$result_0 = false;
      }
       while (false);
      return any$result_0;
    }
  };
  FunctionsCondition.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FunctionsCondition',
    interfaces: [ExpressionStructurePart]
  };
  FunctionsCondition.prototype.component1 = function () {
    return this.treePermittedFunctions;
  };
  FunctionsCondition.prototype.component2 = function () {
    return this.treeForbiddenFunctions;
  };
  FunctionsCondition.prototype.component3 = function () {
    return this.parent;
  };
  FunctionsCondition.prototype.copy_y2iwwy$ = function (treePermittedFunctions, treeForbiddenFunctions, parent) {
    return new FunctionsCondition(treePermittedFunctions === void 0 ? this.treePermittedFunctions : treePermittedFunctions, treeForbiddenFunctions === void 0 ? this.treeForbiddenFunctions : treeForbiddenFunctions, parent === void 0 ? this.parent : parent);
  };
  FunctionsCondition.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.treePermittedFunctions) | 0;
    result = result * 31 + Kotlin.hashCode(this.treeForbiddenFunctions) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    return result;
  };
  FunctionsCondition.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.treePermittedFunctions, other.treePermittedFunctions) && Kotlin.equals(this.treeForbiddenFunctions, other.treeForbiddenFunctions) && Kotlin.equals(this.parent, other.parent)))));
  };
  function NumberInterval(numbersType, leftBorder, rightBorder, parent) {
    if (numbersType === void 0)
      numbersType = NumberIntervalType$NATURAL_getInstance();
    if (leftBorder === void 0)
      leftBorder = kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY;
    if (rightBorder === void 0)
      rightBorder = kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY;
    if (parent === void 0)
      parent = null;
    this.numbersType = numbersType;
    this.leftBorder = leftBorder;
    this.rightBorder = rightBorder;
    this.parent = parent;
  }
  NumberInterval.prototype.toString = function () {
    var tmp$;
    switch (this.numbersType.name) {
      case 'NATURAL':
        tmp$ = 'N';
        break;
      case 'INTEGER':
        tmp$ = 'Z';
        break;
      case 'REAL':
        tmp$ = 'R';
        break;
      default:tmp$ = 'N';
        break;
    }
    return replace('[' + this.leftBorder + ';' + this.rightBorder + ']:' + tmp$, 'Infinity', 'Inf');
  };
  NumberInterval.prototype.isEmpty = function () {
    return !this.isNotEmpty();
  };
  NumberInterval.prototype.isNotEmpty = function () {
    return this.leftBorder !== kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY || this.rightBorder !== kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY || this.numbersType !== NumberIntervalType$NATURAL_getInstance();
  };
  NumberInterval.prototype.matchNumber_14dthe$ = function (number) {
    if (this.leftBorder - BaseOperationsComputation$Companion_getInstance().epsilon < number && number < this.rightBorder + BaseOperationsComputation$Companion_getInstance().epsilon) {
      switch (this.numbersType.name) {
        case 'NATURAL':
        case 'SMALL_NATURAL':
          var tmp$ = BaseOperationsComputation$Companion_getInstance();
          var x = number + BaseOperationsComputation$Companion_getInstance().epsilon / 3;
          return tmp$.additivelyEqual_lu1900$(Math_0.floor(x), number) && 0.0 - BaseOperationsComputation$Companion_getInstance().epsilon < number;
        case 'INTEGER':
          var tmp$_0 = BaseOperationsComputation$Companion_getInstance();
          var x_0 = number + BaseOperationsComputation$Companion_getInstance().epsilon / 3;
          return tmp$_0.additivelyEqual_lu1900$(Math_0.floor(x_0), number);
        case 'REAL':
          return true;
        default:Kotlin.noWhenBranchMatched();
          break;
      }
    }
     else
      return false;
  };
  NumberInterval.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NumberInterval',
    interfaces: [ExpressionStructurePart]
  };
  NumberInterval.prototype.component1 = function () {
    return this.numbersType;
  };
  NumberInterval.prototype.component2 = function () {
    return this.leftBorder;
  };
  NumberInterval.prototype.component3 = function () {
    return this.rightBorder;
  };
  NumberInterval.prototype.component4 = function () {
    return this.parent;
  };
  NumberInterval.prototype.copy_kntbz$ = function (numbersType, leftBorder, rightBorder, parent) {
    return new NumberInterval(numbersType === void 0 ? this.numbersType : numbersType, leftBorder === void 0 ? this.leftBorder : leftBorder, rightBorder === void 0 ? this.rightBorder : rightBorder, parent === void 0 ? this.parent : parent);
  };
  NumberInterval.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.numbersType) | 0;
    result = result * 31 + Kotlin.hashCode(this.leftBorder) | 0;
    result = result * 31 + Kotlin.hashCode(this.rightBorder) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    return result;
  };
  NumberInterval.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.numbersType, other.numbersType) && Kotlin.equals(this.leftBorder, other.leftBorder) && Kotlin.equals(this.rightBorder, other.rightBorder) && Kotlin.equals(this.parent, other.parent)))));
  };
  function NumberCondition(intervals, parent) {
    if (intervals === void 0) {
      intervals = ArrayList_init();
    }
    if (parent === void 0)
      parent = null;
    this.intervals = intervals;
    this.parent = parent;
  }
  NumberCondition.prototype.toString = function () {
    return '[' + this.intervals.toString() + ']';
  };
  NumberCondition.prototype.isEmpty = function () {
    return !this.isNotEmpty();
  };
  NumberCondition.prototype.isNotEmpty = function () {
    var tmp$ = !this.intervals.isEmpty();
    if (tmp$) {
      var $receiver = this.intervals;
      var any$result;
      any$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          any$result = false;
          break any$break;
        }
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (element.isNotEmpty()) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      tmp$ = any$result;
    }
    return tmp$;
  };
  NumberCondition.prototype.matchNumber_14dthe$ = function (number) {
    var tmp$ = this.intervals.isEmpty();
    if (!tmp$) {
      var $receiver = this.intervals;
      var any$result;
      any$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          any$result = false;
          break any$break;
        }
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (element.matchNumber_14dthe$(number)) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      tmp$ = any$result;
    }
    return tmp$;
  };
  NumberCondition.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NumberCondition',
    interfaces: [ExpressionStructurePart]
  };
  NumberCondition.prototype.component1 = function () {
    return this.intervals;
  };
  NumberCondition.prototype.component2 = function () {
    return this.parent;
  };
  NumberCondition.prototype.copy_ene69h$ = function (intervals, parent) {
    return new NumberCondition(intervals === void 0 ? this.intervals : intervals, parent === void 0 ? this.parent : parent);
  };
  NumberCondition.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.intervals) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    return result;
  };
  NumberCondition.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.intervals, other.intervals) && Kotlin.equals(this.parent, other.parent)))));
  };
  function VariableCondition(intervals, variableName, parent) {
    if (intervals === void 0) {
      intervals = ArrayList_init();
    }
    if (variableName === void 0)
      variableName = '';
    if (parent === void 0)
      parent = null;
    this.intervals = intervals;
    this.variableName = variableName;
    this.parent = parent;
  }
  VariableCondition.prototype.hasNumberCondition = function () {
    return !this.intervals.isEmpty();
  };
  VariableCondition.prototype.hasVariableCondition = function () {
    return this.variableName.length > 0;
  };
  VariableCondition.prototype.intervalsToString = function () {
    if (!this.intervals.isEmpty()) {
      return 'intervals=' + this.intervals;
    }
     else {
      return '';
    }
  };
  VariableCondition.prototype.variableNameToString = function () {
    if (this.variableName.length > 0) {
      return 'variableName=' + this.variableName;
    }
     else {
      return '';
    }
  };
  VariableCondition.prototype.toString = function () {
    var tmp$, tmp$_0;
    if (!this.intervals.isEmpty()) {
      tmp$ = 'intervals=' + this.intervals;
    }
     else {
      tmp$ = '';
    }
    if (this.variableName.length > 0) {
      tmp$_0 = 'variableName=' + this.variableName;
    }
     else {
      tmp$_0 = '';
    }
    return '[' + tmp$ + ',' + tmp$_0 + ']';
  };
  VariableCondition.prototype.matchVariable_61zpoe$ = function (name) {
    var tmp$;
    tmp$ = toDoubleOrNull(name);
    if (tmp$ == null) {
      return equals(name, this.variableName);
    }
    var number = tmp$;
    var tmp$_0 = this.intervals.isEmpty();
    if (!tmp$_0) {
      var $receiver = this.intervals;
      var any$result;
      any$break: do {
        var tmp$_1;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          any$result = false;
          break any$break;
        }
        tmp$_1 = $receiver.iterator();
        while (tmp$_1.hasNext()) {
          var element = tmp$_1.next();
          if (element.matchNumber_14dthe$(number)) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      tmp$_0 = any$result;
    }
    return tmp$_0;
  };
  VariableCondition.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VariableCondition',
    interfaces: [ExpressionStructurePart]
  };
  VariableCondition.prototype.component1 = function () {
    return this.intervals;
  };
  VariableCondition.prototype.component2 = function () {
    return this.variableName;
  };
  VariableCondition.prototype.component3 = function () {
    return this.parent;
  };
  VariableCondition.prototype.copy_va7599$ = function (intervals, variableName, parent) {
    return new VariableCondition(intervals === void 0 ? this.intervals : intervals, variableName === void 0 ? this.variableName : variableName, parent === void 0 ? this.parent : parent);
  };
  VariableCondition.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.intervals) | 0;
    result = result * 31 + Kotlin.hashCode(this.variableName) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    return result;
  };
  VariableCondition.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.intervals, other.intervals) && Kotlin.equals(this.variableName, other.variableName) && Kotlin.equals(this.parent, other.parent)))));
  };
  function VariablesCondition(treePermittedVariables, treeForbiddenVariables, parent) {
    if (treePermittedVariables === void 0) {
      treePermittedVariables = ArrayList_init();
    }
    if (treeForbiddenVariables === void 0) {
      treeForbiddenVariables = ArrayList_init();
    }
    if (parent === void 0)
      parent = null;
    this.treePermittedVariables = treePermittedVariables;
    this.treeForbiddenVariables = treeForbiddenVariables;
    this.parent = parent;
  }
  VariablesCondition.prototype.toString = function () {
    var tmp$, tmp$_0;
    if (!this.treePermittedVariables.isEmpty()) {
      tmp$ = 'treePermittedVariables=' + this.treePermittedVariables;
    }
     else {
      tmp$ = '';
    }
    if (!this.treeForbiddenVariables.isEmpty()) {
      tmp$_0 = 'treeForbiddenVariables=' + this.treeForbiddenVariables.toString();
    }
     else {
      tmp$_0 = '';
    }
    return '[' + tmp$ + ',' + tmp$_0 + ']';
  };
  VariablesCondition.prototype.isNotEmpty = function () {
    var tmp$ = !this.treePermittedVariables.isEmpty();
    if (!tmp$) {
      tmp$ = !this.treeForbiddenVariables.isEmpty();
    }
    return tmp$;
  };
  VariablesCondition.prototype.mergeWithTopVariablesCondition_nlo5pj$ = function (topVariablesCondition) {
    this.treePermittedVariables.addAll_brywnq$(topVariablesCondition.treePermittedVariables);
    this.treeForbiddenVariables.addAll_brywnq$(topVariablesCondition.treeForbiddenVariables);
  };
  VariablesCondition.prototype.matchVariable_61zpoe$ = function (name) {
    var $receiver = this.treeForbiddenVariables;
    var any$result;
    any$break: do {
      var tmp$;
      if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
        any$result = false;
        break any$break;
      }
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.matchVariable_61zpoe$(name)) {
          any$result = true;
          break any$break;
        }
      }
      any$result = false;
    }
     while (false);
    if (any$result) {
      return false;
    }
     else if (this.treePermittedVariables.isEmpty()) {
      return true;
    }
     else {
      var $receiver_0 = this.treePermittedVariables;
      var any$result_0;
      any$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
          any$result_0 = false;
          break any$break;
        }
        tmp$_0 = $receiver_0.iterator();
        while (tmp$_0.hasNext()) {
          var element_0 = tmp$_0.next();
          if (element_0.matchVariable_61zpoe$(name)) {
            any$result_0 = true;
            break any$break;
          }
        }
        any$result_0 = false;
      }
       while (false);
      return any$result_0;
    }
  };
  VariablesCondition.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VariablesCondition',
    interfaces: [ExpressionStructurePart]
  };
  VariablesCondition.prototype.component1 = function () {
    return this.treePermittedVariables;
  };
  VariablesCondition.prototype.component2 = function () {
    return this.treeForbiddenVariables;
  };
  VariablesCondition.prototype.component3 = function () {
    return this.parent;
  };
  VariablesCondition.prototype.copy_edlom2$ = function (treePermittedVariables, treeForbiddenVariables, parent) {
    return new VariablesCondition(treePermittedVariables === void 0 ? this.treePermittedVariables : treePermittedVariables, treeForbiddenVariables === void 0 ? this.treeForbiddenVariables : treeForbiddenVariables, parent === void 0 ? this.parent : parent);
  };
  VariablesCondition.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.treePermittedVariables) | 0;
    result = result * 31 + Kotlin.hashCode(this.treeForbiddenVariables) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    return result;
  };
  VariablesCondition.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.treePermittedVariables, other.treePermittedVariables) && Kotlin.equals(this.treeForbiddenVariables, other.treeForbiddenVariables) && Kotlin.equals(this.parent, other.parent)))));
  };
  function ChildrenCondition(childNodes, count, parent) {
    if (childNodes === void 0) {
      childNodes = ArrayList_init();
    }
    if (count === void 0)
      count = new NumberCondition();
    if (parent === void 0)
      parent = null;
    this.childNodes = childNodes;
    this.count = count;
    this.parent = parent;
  }
  ChildrenCondition.prototype.toString = function () {
    var tmp$, tmp$_0;
    if (this.count.isNotEmpty()) {
      tmp$ = 'count=' + this.count;
    }
     else {
      tmp$ = '';
    }
    if (!this.childNodes.isEmpty()) {
      tmp$_0 = 'childNodes=' + this.childNodes;
    }
     else {
      tmp$_0 = '';
    }
    return '[' + tmp$ + ',' + tmp$_0 + ']';
  };
  ChildrenCondition.prototype.isEmpty = function () {
    return !this.isNotEmpty();
  };
  ChildrenCondition.prototype.isNotEmpty = function () {
    return !this.childNodes.isEmpty() || this.count.isNotEmpty();
  };
  ChildrenCondition.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ChildrenCondition',
    interfaces: [ExpressionStructurePart]
  };
  ChildrenCondition.prototype.component1 = function () {
    return this.childNodes;
  };
  ChildrenCondition.prototype.component2 = function () {
    return this.count;
  };
  ChildrenCondition.prototype.component3 = function () {
    return this.parent;
  };
  ChildrenCondition.prototype.copy_fseuw8$ = function (childNodes, count, parent) {
    return new ChildrenCondition(childNodes === void 0 ? this.childNodes : childNodes, count === void 0 ? this.count : count, parent === void 0 ? this.parent : parent);
  };
  ChildrenCondition.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.childNodes) | 0;
    result = result * 31 + Kotlin.hashCode(this.count) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    return result;
  };
  ChildrenCondition.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.childNodes, other.childNodes) && Kotlin.equals(this.count, other.count) && Kotlin.equals(this.parent, other.parent)))));
  };
  function ExpressionStructureConditionNode(nodeFunctions, treeFunctions, treeVariables, children, functionsJoinedWithVariables, parent) {
    if (nodeFunctions === void 0)
      nodeFunctions = new FunctionsCondition();
    if (treeFunctions === void 0)
      treeFunctions = new FunctionsCondition();
    if (treeVariables === void 0)
      treeVariables = new VariablesCondition();
    if (children === void 0) {
      children = ArrayList_init();
    }
    if (functionsJoinedWithVariables === void 0) {
      functionsJoinedWithVariables = LinkedHashSet_init();
    }
    if (parent === void 0)
      parent = null;
    this.nodeFunctions = nodeFunctions;
    this.treeFunctions = treeFunctions;
    this.treeVariables = treeVariables;
    this.children = children;
    this.functionsJoinedWithVariables = functionsJoinedWithVariables;
    this.parent = parent;
  }
  ExpressionStructureConditionNode.prototype.toString = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.nodeFunctions.isNotEmpty()) {
      tmp$ = 'nodeFunctions=' + this.nodeFunctions;
    }
     else {
      tmp$ = '';
    }
    if (this.treeFunctions.isNotEmpty()) {
      tmp$_0 = 'treeFunctions=' + this.treeFunctions;
    }
     else {
      tmp$_0 = '';
    }
    if (this.treeVariables.isNotEmpty()) {
      tmp$_1 = 'treeVariables=' + this.treeVariables;
    }
     else {
      tmp$_1 = '';
    }
    if (!this.children.isEmpty()) {
      tmp$_2 = 'children=' + this.children;
    }
     else {
      tmp$_2 = '';
    }
    if (!this.functionsJoinedWithVariables.isEmpty()) {
      tmp$_3 = ',functionsJoinedWithVariables=' + this.functionsJoinedWithVariables;
    }
     else {
      tmp$_3 = '';
    }
    return '{ ' + tmp$ + ',' + tmp$_0 + ',' + tmp$_1 + ',' + tmp$_2 + tmp$_3 + ' }';
  };
  ExpressionStructureConditionNode.prototype.forwardTreeFunctionVariablesConditions_4bkwgp$ = function (topFunctionsCondition, topVariablesCondition, topFunctionsJoinedWithVariables) {
    if (topFunctionsCondition === void 0)
      topFunctionsCondition = new FunctionsCondition();
    if (topVariablesCondition === void 0)
      topVariablesCondition = new VariablesCondition();
    if (topFunctionsJoinedWithVariables === void 0) {
      topFunctionsJoinedWithVariables = emptySet();
    }
    var tmp$, tmp$_0;
    this.treeFunctions.mergeWithTopFunctionsCondition_nwot57$(topFunctionsCondition);
    this.treeVariables.mergeWithTopVariablesCondition_nlo5pj$(topVariablesCondition);
    this.functionsJoinedWithVariables.addAll_brywnq$(topFunctionsJoinedWithVariables);
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      tmp$_0 = child.childNodes.iterator();
      while (tmp$_0.hasNext()) {
        var node = tmp$_0.next();
        node.forwardTreeFunctionVariablesConditions_4bkwgp$(this.treeFunctions, this.treeVariables, this.functionsJoinedWithVariables);
      }
    }
  };
  ExpressionStructureConditionNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionStructureConditionNode',
    interfaces: [ExpressionStructurePart]
  };
  ExpressionStructureConditionNode.prototype.component1 = function () {
    return this.nodeFunctions;
  };
  ExpressionStructureConditionNode.prototype.component2 = function () {
    return this.treeFunctions;
  };
  ExpressionStructureConditionNode.prototype.component3 = function () {
    return this.treeVariables;
  };
  ExpressionStructureConditionNode.prototype.component4 = function () {
    return this.children;
  };
  ExpressionStructureConditionNode.prototype.component5 = function () {
    return this.functionsJoinedWithVariables;
  };
  ExpressionStructureConditionNode.prototype.component6 = function () {
    return this.parent;
  };
  ExpressionStructureConditionNode.prototype.copy_w0b3w2$ = function (nodeFunctions, treeFunctions, treeVariables, children, functionsJoinedWithVariables, parent) {
    return new ExpressionStructureConditionNode(nodeFunctions === void 0 ? this.nodeFunctions : nodeFunctions, treeFunctions === void 0 ? this.treeFunctions : treeFunctions, treeVariables === void 0 ? this.treeVariables : treeVariables, children === void 0 ? this.children : children, functionsJoinedWithVariables === void 0 ? this.functionsJoinedWithVariables : functionsJoinedWithVariables, parent === void 0 ? this.parent : parent);
  };
  ExpressionStructureConditionNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.nodeFunctions) | 0;
    result = result * 31 + Kotlin.hashCode(this.treeFunctions) | 0;
    result = result * 31 + Kotlin.hashCode(this.treeVariables) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    result = result * 31 + Kotlin.hashCode(this.functionsJoinedWithVariables) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    return result;
  };
  ExpressionStructureConditionNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.nodeFunctions, other.nodeFunctions) && Kotlin.equals(this.treeFunctions, other.treeFunctions) && Kotlin.equals(this.treeVariables, other.treeVariables) && Kotlin.equals(this.children, other.children) && Kotlin.equals(this.functionsJoinedWithVariables, other.functionsJoinedWithVariables) && Kotlin.equals(this.parent, other.parent)))));
  };
  function checkExpressionStructure(rootNode, structureNode) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (rootNode.nodeType === NodeType$VARIABLE_getInstance()) {
      var tmp$_4 = structureNode.treeVariables.matchVariable_61zpoe$(rootNode.value);
      if (tmp$_4) {
        var tmp$_5 = structureNode.children.isEmpty();
        if (!tmp$_5) {
          var $receiver = structureNode.children;
          var any$result;
          any$break: do {
            var tmp$_6;
            if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
              any$result = false;
              break any$break;
            }
            tmp$_6 = $receiver.iterator();
            while (tmp$_6.hasNext()) {
              var element = tmp$_6.next();
              if (element.count.matchNumber_14dthe$(0.0)) {
                any$result = true;
                break any$break;
              }
            }
            any$result = false;
          }
           while (false);
          tmp$_5 = any$result;
        }
        tmp$_4 = tmp$_5;
      }
      return tmp$_4;
    }
    var tmp$_7 = structureNode.functionsJoinedWithVariables.contains_11rb$(rootNode.value);
    if (tmp$_7) {
      var $receiver_0 = rootNode.children;
      var all$result;
      all$break: do {
        var tmp$_8;
        if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
          all$result = true;
          break all$break;
        }
        tmp$_8 = $receiver_0.iterator();
        while (tmp$_8.hasNext()) {
          var element_0 = tmp$_8.next();
          if (!(element_0.nodeType === NodeType$VARIABLE_getInstance())) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      tmp$_7 = all$result;
    }
    if (tmp$_7) {
      var $receiver_1 = rootNode.children;
      var all$result_0;
      all$break: do {
        var tmp$_9;
        if (Kotlin.isType($receiver_1, Collection) && $receiver_1.isEmpty()) {
          all$result_0 = true;
          break all$break;
        }
        tmp$_9 = $receiver_1.iterator();
        loop_label: while (tmp$_9.hasNext()) {
          var element_1 = tmp$_9.next();
          var tmp$_10 = structureNode.treeVariables.matchVariable_61zpoe$(element_1.value);
          if (tmp$_10) {
            var tmp$_11 = structureNode.children.isEmpty();
            if (!tmp$_11) {
              var $receiver_2 = structureNode.children;
              var any$result_0;
              any$break: do {
                var tmp$_12;
                if (Kotlin.isType($receiver_2, Collection) && $receiver_2.isEmpty()) {
                  any$result_0 = false;
                  break any$break;
                }
                tmp$_12 = $receiver_2.iterator();
                while (tmp$_12.hasNext()) {
                  var element_2 = tmp$_12.next();
                  if (element_2.count.matchNumber_14dthe$(0.0)) {
                    any$result_0 = true;
                    break any$break;
                  }
                }
                any$result_0 = false;
              }
               while (false);
              tmp$_11 = any$result_0;
            }
            tmp$_10 = tmp$_11;
          }
          if (!tmp$_10) {
            all$result_0 = false;
            break all$break;
          }
        }
        all$result_0 = true;
      }
       while (false);
      return all$result_0;
    }
    if (equals(rootNode.value, '') || (listOf_0(['+', '*', '^']).contains_11rb$(rootNode.value) && rootNode.children.size === 1)) {
      tmp$ = firstOrNull_1(rootNode.children);
      if (tmp$ == null) {
        return true;
      }
      return checkExpressionStructure(tmp$, structureNode);
    }
    if (!structureNode.nodeFunctions.matchFunctionByNameNumberOfArguments_em03xr$(rootNode)) {
      var $receiver_3 = structureNode.children;
      var any$result_1;
      any$break: do {
        var tmp$_13;
        if (Kotlin.isType($receiver_3, Collection) && $receiver_3.isEmpty()) {
          any$result_1 = false;
          break any$break;
        }
        tmp$_13 = $receiver_3.iterator();
        loop_label: while (tmp$_13.hasNext()) {
          var element_3 = tmp$_13.next();
          var $receiver_4 = element_3.childNodes;
          var any$result_2;
          any$break_0: do {
            var tmp$_14;
            if (Kotlin.isType($receiver_4, Collection) && $receiver_4.isEmpty()) {
              any$result_2 = false;
              break any$break_0;
            }
            tmp$_14 = $receiver_4.iterator();
            while (tmp$_14.hasNext()) {
              var element_4 = tmp$_14.next();
              if (checkExpressionStructure(rootNode, element_4)) {
                any$result_2 = true;
                break any$break_0;
              }
            }
            any$result_2 = false;
          }
           while (false);
          if (any$result_2) {
            any$result_1 = true;
            break any$break;
          }
        }
        any$result_1 = false;
      }
       while (false);
      return any$result_1;
    }
    if (structureNode.treeVariables.isNotEmpty()) {
      var variables = rootNode.getContainedVariables();
      var any$result_3;
      any$break: do {
        var tmp$_15;
        if (Kotlin.isType(variables, Collection) && variables.isEmpty()) {
          any$result_3 = false;
          break any$break;
        }
        tmp$_15 = variables.iterator();
        loop_label: while (tmp$_15.hasNext()) {
          var element_5 = tmp$_15.next();
          var variableName = element_5;
          var $receiver_5 = structureNode.treeVariables.treeForbiddenVariables;
          var any$result_4;
          any$break_0: do {
            var tmp$_16;
            if (Kotlin.isType($receiver_5, Collection) && $receiver_5.isEmpty()) {
              any$result_4 = false;
              break any$break_0;
            }
            tmp$_16 = $receiver_5.iterator();
            while (tmp$_16.hasNext()) {
              var element_6 = tmp$_16.next();
              if (element_6.matchVariable_61zpoe$(variableName)) {
                any$result_4 = true;
                break any$break_0;
              }
            }
            any$result_4 = false;
          }
           while (false);
          if (any$result_4) {
            any$result_3 = true;
            break any$break;
          }
        }
        any$result_3 = false;
      }
       while (false);
      if (any$result_3) {
        return false;
      }
      var tmp$_17 = !structureNode.treeVariables.treePermittedVariables.isEmpty();
      if (tmp$_17) {
        var all$result_1;
        all$break: do {
          var tmp$_18;
          if (Kotlin.isType(variables, Collection) && variables.isEmpty()) {
            all$result_1 = true;
            break all$break;
          }
          tmp$_18 = variables.iterator();
          loop_label: while (tmp$_18.hasNext()) {
            var element_7 = tmp$_18.next();
            var variableName_0 = element_7;
            var $receiver_6 = structureNode.treeVariables.treePermittedVariables;
            var any$result_5;
            any$break: do {
              var tmp$_19;
              if (Kotlin.isType($receiver_6, Collection) && $receiver_6.isEmpty()) {
                any$result_5 = false;
                break any$break;
              }
              tmp$_19 = $receiver_6.iterator();
              while (tmp$_19.hasNext()) {
                var element_8 = tmp$_19.next();
                if (element_8.matchVariable_61zpoe$(variableName_0)) {
                  any$result_5 = true;
                  break any$break;
                }
              }
              any$result_5 = false;
            }
             while (false);
            if (!any$result_5) {
              all$result_1 = false;
              break all$break;
            }
          }
          all$result_1 = true;
        }
         while (false);
        tmp$_17 = !all$result_1;
      }
      if (tmp$_17) {
        return false;
      }
    }
    var array = Array_0(structureNode.children.size);
    var tmp$_20;
    tmp$_20 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_20; i++) {
      array[i] = 0;
    }
    var childrenMatches = array;
    tmp$_0 = rootNode.children.iterator();
    loop_label: while (tmp$_0.hasNext()) {
      var child = tmp$_0.next();
      var matched = false;
      tmp$_1 = get_lastIndex(structureNode.children);
      for (var i_0 = 0; i_0 <= tmp$_1; i_0++) {
        if (!structureNode.children.get_za3lpa$(i_0).childNodes.isEmpty()) {
          tmp$_2 = structureNode.children.get_za3lpa$(i_0).childNodes.iterator();
          while (tmp$_2.hasNext()) {
            var childStructureNode = tmp$_2.next();
            if (checkExpressionStructure(child, childStructureNode)) {
              childrenMatches[i_0] = childrenMatches[i_0] + 1 | 0;
              matched = true;
              break;
            }
          }
          if (!matched) {
            return false;
          }
        }
         else {
          childrenMatches[i_0] = childrenMatches[i_0] + 1 | 0;
        }
      }
      if (!matched) {
        var tmp$_21 = child.nodeType === NodeType$VARIABLE_getInstance();
        if (!tmp$_21) {
          var tmp$_22 = structureNode.functionsJoinedWithVariables.contains_11rb$(child.value);
          if (tmp$_22) {
            var $receiver_7 = child.children;
            var all$result_2;
            all$break: do {
              var tmp$_23;
              if (Kotlin.isType($receiver_7, Collection) && $receiver_7.isEmpty()) {
                all$result_2 = true;
                break all$break;
              }
              tmp$_23 = $receiver_7.iterator();
              while (tmp$_23.hasNext()) {
                var element_9 = tmp$_23.next();
                if (!(element_9.nodeType === NodeType$VARIABLE_getInstance())) {
                  all$result_2 = false;
                  break all$break;
                }
              }
              all$result_2 = true;
            }
             while (false);
            tmp$_22 = all$result_2;
          }
          tmp$_21 = tmp$_22;
        }
        if (!tmp$_21) {
          if (!structureNode.treeFunctions.matchFunction_em03xr$(child)) {
            return false;
          }
        }
      }
    }
    tmp$_3 = get_lastIndex(structureNode.children);
    for (var i_1 = 0; i_1 <= tmp$_3; i_1++) {
      if (!structureNode.children.get_za3lpa$(i_1).count.matchNumber_14dthe$(childrenMatches[i_1])) {
        return false;
      }
    }
    return true;
  }
  function ExpressionStructureConditionConstructor(compiledConfiguration) {
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration();
    this.compiledConfiguration = compiledConfiguration;
    var $receiver = this.compiledConfiguration.functionConfiguration.functionProperties;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item.function);
    }
    var destination_0 = ArrayList_init();
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      var tmp$_1, tmp$_2;
      if (!((tmp$_2 = (tmp$_1 = firstOrNull_0(element)) != null ? isLetterOrDigitOrUnderscore(unboxChar(tmp$_1)) : null) != null ? tmp$_2 : true))
        destination_0.add_11rb$(element);
    }
    this.nameSymbols = joinToString(destination_0, '');
    this.tokenSeparator = toBoxedChar(58);
    this.listSeparator = toBoxedChar(44);
    this.childrenListSeparator = toBoxedChar(59);
    this.openChildBracket = toBoxedChar(40);
    this.closeChildBracket = toBoxedChar(41);
    this.freeValueSign = toBoxedChar(63);
    this.negativeSign = toBoxedChar(33);
  }
  ExpressionStructureConditionConstructor.prototype.parse_61zpoe$ = function (pattern) {
    var resultExpressionStructureConditionNode = new ExpressionStructureConditionNode();
    this.parseExpressionStructureConditionNode_yabhgt$(pattern, 0, resultExpressionStructureConditionNode);
    resultExpressionStructureConditionNode.forwardTreeFunctionVariablesConditions_4bkwgp$();
    return resultExpressionStructureConditionNode;
  };
  function ExpressionStructureConditionConstructor$parseExpressionStructureConditionNode$lambda(it) {
    return isNameOrNumberPart(unboxChar(it));
  }
  ExpressionStructureConditionConstructor.prototype.parseExpressionStructureConditionNode_yabhgt$ = function (pattern, startPosition, result) {
    var currentPosition = startPosition;
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    if (currentPosition < pattern.length && (this.isFunctionNameOrNumberPart_0(pattern.charCodeAt(currentPosition)) || pattern.charCodeAt(currentPosition) === unboxChar(this.freeValueSign) || pattern.charCodeAt(currentPosition) === unboxChar(this.negativeSign))) {
      currentPosition = this.parseFunctionsCondition_hh3zbl$(pattern, currentPosition, result.nodeFunctions);
      if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.childrenListSeparator)) {
        return currentPosition + 1 | 0;
      }
      if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.tokenSeparator)) {
        currentPosition = currentPosition + 1 | 0;
      }
    }
    var previousPosition = currentPosition;
    while (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) !== unboxChar(this.tokenSeparator) && pattern.charCodeAt(currentPosition) !== unboxChar(this.closeChildBracket)) {
      result.children.add_11rb$(new ChildrenCondition(void 0, void 0, result));
      currentPosition = this.parseChildCondition_l1zx1x$(pattern, currentPosition, last(result.children));
      if (last(result.children).isEmpty()) {
        result.children.removeAt_za3lpa$(get_lastIndex(result.children));
      }
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (currentPosition < pattern.length && (pattern.charCodeAt(currentPosition) === unboxChar(this.listSeparator) || pattern.charCodeAt(currentPosition) === unboxChar(this.childrenListSeparator))) {
        currentPosition = currentPosition + 1 | 0;
        currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      }
      if (previousPosition === currentPosition) {
        currentPosition = currentPosition + 1 | 0;
      }
      previousPosition = currentPosition;
    }
    if (currentPosition < pattern.length && (pattern.charCodeAt(currentPosition) === unboxChar(this.childrenListSeparator) || pattern.charCodeAt(currentPosition) === unboxChar(this.closeChildBracket))) {
      return currentPosition + 1 | 0;
    }
    currentPosition = currentPosition + 1 | 0;
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    currentPosition = this.parseFunctionsCondition_hh3zbl$(pattern, currentPosition, result.treeFunctions);
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.childrenListSeparator)) {
      return currentPosition + 1 | 0;
    }
    currentPosition = currentPosition + 1 | 0;
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    currentPosition = this.parseVariablesCondition_hs4mr9$(pattern, currentPosition, result.treeVariables);
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.childrenListSeparator)) {
      return currentPosition + 1 | 0;
    }
    currentPosition = currentPosition + 1 | 0;
    previousPosition = currentPosition;
    while (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) !== unboxChar(this.tokenSeparator) && pattern.charCodeAt(currentPosition) !== unboxChar(this.closeChildBracket)) {
      var value = StringBuilder_init_0();
      currentPosition = this.parseValue_71bf4$(pattern, currentPosition, value, ExpressionStructureConditionConstructor$parseExpressionStructureConditionNode$lambda);
      result.functionsJoinedWithVariables.add_11rb$(value.toString());
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.listSeparator)) {
        currentPosition = currentPosition + 1 | 0;
        currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      }
      if (previousPosition === currentPosition) {
        currentPosition = currentPosition + 1 | 0;
      }
      previousPosition = currentPosition;
    }
    return currentPosition;
  };
  function ExpressionStructureConditionConstructor$parseChildCondition$lambda(this$ExpressionStructureConditionConstructor) {
    return function (it) {
      return isWhitespace(unboxChar(it)) || unboxChar(it) === unboxChar(this$ExpressionStructureConditionConstructor.closeChildBracket) || unboxChar(it) === unboxChar(this$ExpressionStructureConditionConstructor.openChildBracket);
    };
  }
  ExpressionStructureConditionConstructor.prototype.parseChildCondition_l1zx1x$ = function (pattern, startPosition, result) {
    var currentPosition = startPosition;
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.freeValueSign) || isNumberPart(pattern.charCodeAt(currentPosition))) {
      currentPosition = this.parseNumberCondition_ujeau7$(pattern, currentPosition, result.count);
    }
     else {
      result.count = new NumberCondition(ArrayList_init(), result);
      result.count.intervals.add_11rb$(new NumberInterval(void 0, void 0, void 0, result.count));
    }
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) !== unboxChar(this.openChildBracket)) {
      return currentPosition;
    }
    currentPosition = currentPosition + 1 | 0;
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    var previousPosition = currentPosition;
    while (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) !== unboxChar(this.childrenListSeparator) && pattern.charCodeAt(currentPosition) !== unboxChar(this.tokenSeparator)) {
      result.childNodes.add_11rb$(new ExpressionStructureConditionNode(void 0, void 0, void 0, void 0, void 0, result));
      currentPosition = this.parseExpressionStructureConditionNode_yabhgt$(pattern, currentPosition, last(result.childNodes));
      currentPosition = this.parseSpaces_jrmu5i$(pattern, currentPosition, ExpressionStructureConditionConstructor$parseChildCondition$lambda(this));
      if (previousPosition === currentPosition) {
        currentPosition = currentPosition + 1 | 0;
      }
      previousPosition = currentPosition;
    }
    return currentPosition;
  };
  ExpressionStructureConditionConstructor.prototype.parseFunctionsCondition_hh3zbl$ = function (pattern, startPosition, result) {
    var tmp$;
    var currentPosition = startPosition;
    var currentNotNumber = 0;
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    var previousPosition = currentPosition;
    while (currentPosition < pattern.length && (this.isFunctionNameOrNumberPart_0(pattern.charCodeAt(currentPosition)) || pattern.charCodeAt(currentPosition) === unboxChar(this.freeValueSign) || pattern.charCodeAt(currentPosition) === unboxChar(this.negativeSign))) {
      if (pattern.charCodeAt(currentPosition) === unboxChar(this.negativeSign)) {
        currentNotNumber = currentNotNumber + 1 | 0;
        currentPosition = currentPosition + 1 | 0;
        currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
        continue;
      }
      if (currentNotNumber % 2 === 0) {
        result.treePermittedFunctions.add_11rb$(new FunctionCondition(void 0, void 0, void 0, void 0, result));
        tmp$ = last(result.treePermittedFunctions);
      }
       else {
        result.treeForbiddenFunctions.add_11rb$(new FunctionCondition(void 0, void 0, void 0, void 0, result));
        tmp$ = last(result.treeForbiddenFunctions);
      }
      var functionCondition = tmp$;
      currentNotNumber = 0;
      currentPosition = this.parseFunctionCondition_qbpkj6$(pattern, currentPosition, functionCondition);
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.listSeparator)) {
        currentPosition = currentPosition + 1 | 0;
      }
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (previousPosition === currentPosition) {
        currentPosition = currentPosition + 1 | 0;
      }
      previousPosition = currentPosition;
    }
    return currentPosition;
  };
  function ExpressionStructureConditionConstructor$parseFunctionCondition$lambda(this$ExpressionStructureConditionConstructor) {
    return function (it) {
      return this$ExpressionStructureConditionConstructor.isFunctionNameOrNumberPart_0(unboxChar(it));
    };
  }
  function ExpressionStructureConditionConstructor$parseFunctionCondition$lambda_0(this$ExpressionStructureConditionConstructor) {
    return function (it) {
      return isNamePart(unboxChar(it)) || unboxChar(it) === unboxChar(this$ExpressionStructureConditionConstructor.listSeparator);
    };
  }
  ExpressionStructureConditionConstructor.prototype.parseFunctionCondition_qbpkj6$ = function (pattern, startPosition, result) {
    var currentPosition = startPosition;
    var value = StringBuilder_init_0();
    currentPosition = this.parseValue_71bf4$(pattern, currentPosition, value, ExpressionStructureConditionConstructor$parseFunctionCondition$lambda(this));
    result.name = value.toString();
    currentPosition = this.parseSpaces_jrmu5i$(pattern, currentPosition, ExpressionStructureConditionConstructor$parseFunctionCondition$lambda_0(this));
    if (currentPosition < pattern.length && isNumberPart(pattern.charCodeAt(currentPosition))) {
      currentPosition = this.parseNumberInterval_oy3ou7$(pattern, currentPosition, result.numberOfArgumentsInterval);
    }
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) !== unboxChar(this.openChildBracket)) {
      return currentPosition;
    }
    currentPosition = currentPosition + 1 | 0;
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) !== unboxChar(this.closeChildBracket)) {
      currentPosition = this.parseFunctionsCondition_hh3zbl$(pattern, currentPosition, result.internalFunctionCondition);
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.tokenSeparator)) {
        currentPosition = currentPosition + 1 | 0;
        currentPosition = this.parseVariablesCondition_hs4mr9$(pattern, currentPosition, result.internalVariableCondition);
        currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      }
      if (currentPosition >= pattern.length || pattern.charCodeAt(currentPosition) !== unboxChar(this.closeChildBracket)) {
        this.throwCloseChildBracketExpectException_0(currentPosition);
      }
    }
    return currentPosition + 1 | 0;
  };
  ExpressionStructureConditionConstructor.prototype.parseVariablesCondition_hs4mr9$ = function (pattern, startPosition, result) {
    var tmp$;
    var currentPosition = startPosition;
    var currentNotNumber = 0;
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    var previousPosition = currentPosition;
    while (currentPosition < pattern.length && (isNamePart(pattern.charCodeAt(currentPosition)) || pattern.charCodeAt(currentPosition) === unboxChar(this.freeValueSign) || pattern.charCodeAt(currentPosition) === unboxChar(this.negativeSign))) {
      if (pattern.charCodeAt(currentPosition) === unboxChar(this.negativeSign)) {
        currentNotNumber = currentNotNumber + 1 | 0;
        currentPosition = currentPosition + 1 | 0;
        currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
        continue;
      }
      var nextPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition + 1 | 0);
      if (pattern.charCodeAt(currentPosition) === unboxChar(this.freeValueSign) && (nextPosition >= pattern.length || listOf_0([this.listSeparator, this.childrenListSeparator, this.openChildBracket, this.closeChildBracket, this.tokenSeparator]).contains_11rb$(toBoxedChar(pattern.charCodeAt(nextPosition))))) {
        currentPosition = currentPosition + 1 | 0;
        currentPosition = nextPosition;
        continue;
      }
      if (currentNotNumber % 2 === 0) {
        result.treePermittedVariables.add_11rb$(new VariableCondition(void 0, void 0, result));
        tmp$ = last(result.treePermittedVariables);
      }
       else {
        result.treeForbiddenVariables.add_11rb$(new VariableCondition(void 0, void 0, result));
        tmp$ = last(result.treeForbiddenVariables);
      }
      var variableCondition = tmp$;
      currentPosition = this.parseVariableCondition_h645xq$(pattern, currentPosition, variableCondition);
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.listSeparator)) {
        currentPosition = currentPosition + 1 | 0;
      }
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (previousPosition === currentPosition) {
        currentPosition = currentPosition + 1 | 0;
      }
      previousPosition = currentPosition;
    }
    return currentPosition;
  };
  function ExpressionStructureConditionConstructor$parseVariableCondition$lambda(it) {
    return isNamePart(unboxChar(it));
  }
  ExpressionStructureConditionConstructor.prototype.parseVariableCondition_h645xq$ = function (pattern, startPosition, result) {
    var currentPosition = startPosition;
    if (pattern.charCodeAt(currentPosition) === unboxChar(this.freeValueSign) || isNumberPart(pattern.charCodeAt(currentPosition))) {
      result.intervals.add_11rb$(new NumberInterval(void 0, void 0, void 0, result));
      currentPosition = this.parseNumberInterval_oy3ou7$(pattern, currentPosition, last(result.intervals));
    }
     else {
      var value = StringBuilder_init_0();
      currentPosition = this.parseValue_71bf4$(pattern, currentPosition, value, ExpressionStructureConditionConstructor$parseVariableCondition$lambda);
      result.variableName = value.toString();
    }
    return currentPosition;
  };
  ExpressionStructureConditionConstructor.prototype.parseNumberCondition_ujeau7$ = function (pattern, startPosition, result) {
    var currentPosition = startPosition;
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    var previousPosition = currentPosition;
    while (currentPosition < pattern.length && (isNumberPart(pattern.charCodeAt(currentPosition)) || pattern.charCodeAt(currentPosition) === unboxChar(this.freeValueSign))) {
      result.intervals.add_11rb$(new NumberInterval(void 0, void 0, void 0, result));
      currentPosition = this.parseNumberInterval_oy3ou7$(pattern, currentPosition, last(result.intervals));
      if (last(result.intervals).isEmpty()) {
        result.intervals.removeAt_za3lpa$(get_lastIndex(result.intervals));
      }
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === unboxChar(this.listSeparator)) {
        currentPosition = currentPosition + 1 | 0;
      }
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (previousPosition === currentPosition) {
        currentPosition = currentPosition + 1 | 0;
      }
      previousPosition = currentPosition;
    }
    return currentPosition;
  };
  function ExpressionStructureConditionConstructor$parseNumberInterval$lambda(it) {
    return isNumberPart(unboxChar(it));
  }
  function ExpressionStructureConditionConstructor$parseNumberInterval$lambda_0(it) {
    return isNumberPart(unboxChar(it));
  }
  ExpressionStructureConditionConstructor.prototype.parseNumberInterval_oy3ou7$ = function (pattern, startPosition, result) {
    var tmp$, tmp$_0;
    var currentPosition = startPosition;
    if (pattern.charCodeAt(currentPosition) === unboxChar(this.freeValueSign)) {
      result.leftBorder = kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY;
      result.rightBorder = kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY;
      currentPosition = currentPosition + 1 | 0;
    }
     else {
      if (isNumberPart(pattern.charCodeAt(currentPosition))) {
        var numberValue = StringBuilder_init_0();
        currentPosition = this.parseValue_71bf4$(pattern, currentPosition, numberValue, ExpressionStructureConditionConstructor$parseNumberInterval$lambda);
        tmp$ = toDoubleOrNull(numberValue.toString());
        if (tmp$ == null) {
          return this.throwNumberExpectException_0(currentPosition);
        }
        result.leftBorder = tmp$;
        result.rightBorder = result.leftBorder;
      }
       else
        this.throwNumberExpectException_0(currentPosition);
    }
    if (currentPosition < pattern.length && isLetter(pattern.charCodeAt(currentPosition))) {
      switch (pattern.charCodeAt(currentPosition)) {
        case 78:
          result.numbersType = NumberIntervalType$NATURAL_getInstance();
          break;
        case 90:
          result.numbersType = NumberIntervalType$INTEGER_getInstance();
          break;
        case 82:
          result.numbersType = NumberIntervalType$REAL_getInstance();
          break;
        default:return this.throwNumberExpectException_0(currentPosition);
      }
      currentPosition = currentPosition + 1 | 0;
    }
    currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
    if (currentPosition < pattern.length && pattern.charCodeAt(currentPosition) === 45) {
      currentPosition = currentPosition + 1 | 0;
      currentPosition = this.parseWhitespaces_bm4lxs$(pattern, currentPosition);
      if (currentPosition >= pattern.length)
        return this.throwNumberExpectException_0(currentPosition);
      if (pattern.charCodeAt(currentPosition) === unboxChar(this.freeValueSign)) {
        result.rightBorder = kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY;
        currentPosition = currentPosition + 1 | 0;
      }
       else {
        if (isNumberPart(pattern.charCodeAt(currentPosition))) {
          var numberValue_0 = StringBuilder_init_0();
          currentPosition = this.parseValue_71bf4$(pattern, currentPosition, numberValue_0, ExpressionStructureConditionConstructor$parseNumberInterval$lambda_0);
          tmp$_0 = toDoubleOrNull(numberValue_0.toString());
          if (tmp$_0 == null) {
            return this.throwNumberExpectException_0(currentPosition);
          }
          result.rightBorder = tmp$_0;
        }
         else
          this.throwNumberExpectException_0(currentPosition);
      }
      if (currentPosition < pattern.length && isLetter(pattern.charCodeAt(currentPosition))) {
        switch (pattern.charCodeAt(currentPosition)) {
          case 90:
            result.numbersType = NumberIntervalType$INTEGER_getInstance();
            break;
          case 82:
            result.numbersType = NumberIntervalType$REAL_getInstance();
            break;
          default:return this.throwNumberExpectException_0(currentPosition);
        }
        currentPosition = currentPosition + 1 | 0;
      }
    }
    return currentPosition;
  };
  ExpressionStructureConditionConstructor.prototype.parseWhitespaces_bm4lxs$ = function (pattern, startPosition) {
    var currentPosition = startPosition;
    while (currentPosition < pattern.length && isWhitespace(pattern.charCodeAt(currentPosition))) {
      currentPosition = currentPosition + 1 | 0;
    }
    return currentPosition;
  };
  ExpressionStructureConditionConstructor.prototype.parseSpaces_jrmu5i$ = function (pattern, startPosition, condition) {
    var currentPosition = startPosition;
    while (currentPosition < pattern.length && condition(toBoxedChar(pattern.charCodeAt(currentPosition)))) {
      currentPosition = currentPosition + 1 | 0;
    }
    return currentPosition;
  };
  ExpressionStructureConditionConstructor.prototype.parseValue_71bf4$ = function (pattern, startPosition, value, condition) {
    var currentPosition = startPosition;
    while (currentPosition < pattern.length && condition(toBoxedChar(pattern.charCodeAt(currentPosition)))) {
      value.append_s8itvh$(pattern.charCodeAt(currentPosition));
      currentPosition = currentPosition + 1 | 0;
    }
    return currentPosition;
  };
  ExpressionStructureConditionConstructor.prototype.isFunctionNameOrNumberPart_0 = function ($receiver) {
    return isLetterOrDigitOrUnderscore($receiver) || contains_0(this.nameSymbols, $receiver);
  };
  ExpressionStructureConditionConstructor.prototype.throwExpectException_0 = function (expectType, position) {
    throw IllegalArgumentException_init(expectType + " expected on position '" + position + "'");
  };
  ExpressionStructureConditionConstructor.prototype.throwOpenChildBracketExpectException_0 = function (position) {
    return this.throwExpectException_0("'('", position);
  };
  ExpressionStructureConditionConstructor.prototype.throwCloseChildBracketExpectException_0 = function (position) {
    return this.throwExpectException_0("')'", position);
  };
  ExpressionStructureConditionConstructor.prototype.throwNumberExpectException_0 = function (position) {
    return this.throwExpectException_0('Number', position);
  };
  ExpressionStructureConditionConstructor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionStructureConditionConstructor',
    interfaces: []
  };
  var additionalFactUsedVarName;
  function SubstitutionInstanceVarType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SubstitutionInstanceVarType_initFields() {
    SubstitutionInstanceVarType_initFields = function () {
    };
    SubstitutionInstanceVarType$EXPR_VAR_instance = new SubstitutionInstanceVarType('EXPR_VAR', 0);
    SubstitutionInstanceVarType$EXPR_FUNC_instance = new SubstitutionInstanceVarType('EXPR_FUNC', 1);
    SubstitutionInstanceVarType$COMPARABLE_VAR_instance = new SubstitutionInstanceVarType('COMPARABLE_VAR', 2);
    SubstitutionInstanceVarType$INFO_instance = new SubstitutionInstanceVarType('INFO', 3);
  }
  var SubstitutionInstanceVarType$EXPR_VAR_instance;
  function SubstitutionInstanceVarType$EXPR_VAR_getInstance() {
    SubstitutionInstanceVarType_initFields();
    return SubstitutionInstanceVarType$EXPR_VAR_instance;
  }
  var SubstitutionInstanceVarType$EXPR_FUNC_instance;
  function SubstitutionInstanceVarType$EXPR_FUNC_getInstance() {
    SubstitutionInstanceVarType_initFields();
    return SubstitutionInstanceVarType$EXPR_FUNC_instance;
  }
  var SubstitutionInstanceVarType$COMPARABLE_VAR_instance;
  function SubstitutionInstanceVarType$COMPARABLE_VAR_getInstance() {
    SubstitutionInstanceVarType_initFields();
    return SubstitutionInstanceVarType$COMPARABLE_VAR_instance;
  }
  var SubstitutionInstanceVarType$INFO_instance;
  function SubstitutionInstanceVarType$INFO_getInstance() {
    SubstitutionInstanceVarType_initFields();
    return SubstitutionInstanceVarType$INFO_instance;
  }
  SubstitutionInstanceVarType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubstitutionInstanceVarType',
    interfaces: [Enum]
  };
  function SubstitutionInstanceVarType$values() {
    return [SubstitutionInstanceVarType$EXPR_VAR_getInstance(), SubstitutionInstanceVarType$EXPR_FUNC_getInstance(), SubstitutionInstanceVarType$COMPARABLE_VAR_getInstance(), SubstitutionInstanceVarType$INFO_getInstance()];
  }
  SubstitutionInstanceVarType.values = SubstitutionInstanceVarType$values;
  function SubstitutionInstanceVarType$valueOf(name) {
    switch (name) {
      case 'EXPR_VAR':
        return SubstitutionInstanceVarType$EXPR_VAR_getInstance();
      case 'EXPR_FUNC':
        return SubstitutionInstanceVarType$EXPR_FUNC_getInstance();
      case 'COMPARABLE_VAR':
        return SubstitutionInstanceVarType$COMPARABLE_VAR_getInstance();
      case 'INFO':
        return SubstitutionInstanceVarType$INFO_getInstance();
      default:throwISE('No enum constant mathhelper.twf.expressiontree.SubstitutionInstanceVarType.' + name);
    }
  }
  SubstitutionInstanceVarType.valueOf_61zpoe$ = SubstitutionInstanceVarType$valueOf;
  function ExpressionSubstitutionNormType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ExpressionSubstitutionNormType_initFields() {
    ExpressionSubstitutionNormType_initFields = function () {
    };
    ExpressionSubstitutionNormType$ORIGINAL_instance = new ExpressionSubstitutionNormType('ORIGINAL', 0);
    ExpressionSubstitutionNormType$SORTED_instance = new ExpressionSubstitutionNormType('SORTED', 1);
    ExpressionSubstitutionNormType$I_MULTIPLICATED_instance = new ExpressionSubstitutionNormType('I_MULTIPLICATED', 2);
    ExpressionSubstitutionNormType$SORTED_AND_I_MULTIPLICATED_instance = new ExpressionSubstitutionNormType('SORTED_AND_I_MULTIPLICATED', 3);
  }
  var ExpressionSubstitutionNormType$ORIGINAL_instance;
  function ExpressionSubstitutionNormType$ORIGINAL_getInstance() {
    ExpressionSubstitutionNormType_initFields();
    return ExpressionSubstitutionNormType$ORIGINAL_instance;
  }
  var ExpressionSubstitutionNormType$SORTED_instance;
  function ExpressionSubstitutionNormType$SORTED_getInstance() {
    ExpressionSubstitutionNormType_initFields();
    return ExpressionSubstitutionNormType$SORTED_instance;
  }
  var ExpressionSubstitutionNormType$I_MULTIPLICATED_instance;
  function ExpressionSubstitutionNormType$I_MULTIPLICATED_getInstance() {
    ExpressionSubstitutionNormType_initFields();
    return ExpressionSubstitutionNormType$I_MULTIPLICATED_instance;
  }
  var ExpressionSubstitutionNormType$SORTED_AND_I_MULTIPLICATED_instance;
  function ExpressionSubstitutionNormType$SORTED_AND_I_MULTIPLICATED_getInstance() {
    ExpressionSubstitutionNormType_initFields();
    return ExpressionSubstitutionNormType$SORTED_AND_I_MULTIPLICATED_instance;
  }
  ExpressionSubstitutionNormType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionSubstitutionNormType',
    interfaces: [Enum]
  };
  function ExpressionSubstitutionNormType$values() {
    return [ExpressionSubstitutionNormType$ORIGINAL_getInstance(), ExpressionSubstitutionNormType$SORTED_getInstance(), ExpressionSubstitutionNormType$I_MULTIPLICATED_getInstance(), ExpressionSubstitutionNormType$SORTED_AND_I_MULTIPLICATED_getInstance()];
  }
  ExpressionSubstitutionNormType.values = ExpressionSubstitutionNormType$values;
  function ExpressionSubstitutionNormType$valueOf(name) {
    switch (name) {
      case 'ORIGINAL':
        return ExpressionSubstitutionNormType$ORIGINAL_getInstance();
      case 'SORTED':
        return ExpressionSubstitutionNormType$SORTED_getInstance();
      case 'I_MULTIPLICATED':
        return ExpressionSubstitutionNormType$I_MULTIPLICATED_getInstance();
      case 'SORTED_AND_I_MULTIPLICATED':
        return ExpressionSubstitutionNormType$SORTED_AND_I_MULTIPLICATED_getInstance();
      default:throwISE('No enum constant mathhelper.twf.expressiontree.ExpressionSubstitutionNormType.' + name);
    }
  }
  ExpressionSubstitutionNormType.valueOf_61zpoe$ = ExpressionSubstitutionNormType$valueOf;
  function SubstitutionInstanceVar(name, type, time) {
    this.name = name;
    this.type = type;
    this.time = time;
  }
  SubstitutionInstanceVar.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubstitutionInstanceVar',
    interfaces: []
  };
  SubstitutionInstanceVar.prototype.component1 = function () {
    return this.name;
  };
  SubstitutionInstanceVar.prototype.component2 = function () {
    return this.type;
  };
  SubstitutionInstanceVar.prototype.component3 = function () {
    return this.time;
  };
  SubstitutionInstanceVar.prototype.copy_et60ym$ = function (name, type, time) {
    return new SubstitutionInstanceVar(name === void 0 ? this.name : name, type === void 0 ? this.type : type, time === void 0 ? this.time : time);
  };
  SubstitutionInstanceVar.prototype.toString = function () {
    return 'SubstitutionInstanceVar(name=' + Kotlin.toString(this.name) + (', type=' + Kotlin.toString(this.type)) + (', time=' + Kotlin.toString(this.time)) + ')';
  };
  SubstitutionInstanceVar.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    return result;
  };
  SubstitutionInstanceVar.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.type, other.type) && Kotlin.equals(this.time, other.time)))));
  };
  function VarNamesTimeStorage(time) {
    if (time === void 0)
      time = 0;
    this.time = time;
    this.varsList = ArrayList_init();
  }
  VarNamesTimeStorage.prototype.addVarName_i6eyy4$ = function (name, type) {
    return this.addVarName_xzowow$(new SubstitutionInstanceVar(name, type, this.time));
  };
  VarNamesTimeStorage.prototype.addVarName_xzowow$ = function (substitutionInstanceVar) {
    var tmp$;
    this.varsList.add_11rb$(substitutionInstanceVar);
    return tmp$ = this.time, this.time = tmp$ + 1 | 0, tmp$;
  };
  VarNamesTimeStorage.prototype.popVarsAfter_za3lpa$ = function (time) {
    var $receiver = this.varsList;
    var tmp$;
    var first = ArrayList_init();
    var second = ArrayList_init();
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (element.time >= time) {
        first.add_11rb$(element);
      }
       else {
        second.add_11rb$(element);
      }
    }
    var parts = new Pair(first, second);
    this.varsList = toMutableList(parts.second);
    return parts.first;
  };
  VarNamesTimeStorage.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VarNamesTimeStorage',
    interfaces: []
  };
  function MatchedNode(matchedFactIndex, nodeType, children) {
    if (matchedFactIndex === void 0)
      matchedFactIndex = 2147483647;
    if (nodeType === void 0)
      nodeType = ComparableTransformationPartType$EMPTY_getInstance();
    if (children === void 0) {
      children = ArrayList_init();
    }
    this.matchedFactIndex = matchedFactIndex;
    this.nodeType = nodeType;
    this.children = children;
  }
  MatchedNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MatchedNode',
    interfaces: []
  };
  MatchedNode.prototype.component1 = function () {
    return this.matchedFactIndex;
  };
  MatchedNode.prototype.component2 = function () {
    return this.nodeType;
  };
  MatchedNode.prototype.component3 = function () {
    return this.children;
  };
  MatchedNode.prototype.copy_qbzqap$ = function (matchedFactIndex, nodeType, children) {
    return new MatchedNode(matchedFactIndex === void 0 ? this.matchedFactIndex : matchedFactIndex, nodeType === void 0 ? this.nodeType : nodeType, children === void 0 ? this.children : children);
  };
  MatchedNode.prototype.toString = function () {
    return 'MatchedNode(matchedFactIndex=' + Kotlin.toString(this.matchedFactIndex) + (', nodeType=' + Kotlin.toString(this.nodeType)) + (', children=' + Kotlin.toString(this.children)) + ')';
  };
  MatchedNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.matchedFactIndex) | 0;
    result = result * 31 + Kotlin.hashCode(this.nodeType) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    return result;
  };
  MatchedNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.matchedFactIndex, other.matchedFactIndex) && Kotlin.equals(this.nodeType, other.nodeType) && Kotlin.equals(this.children, other.children)))));
  };
  function SubstitutionInstance(isApplicable, varRuleNameToExpressionValueMap, varRuleFunctionNameArgsToExpressionMap, varRuleNameToComparableTransformationsPartMap, varNamesTimeStorage, correspondingIndexes) {
    if (isApplicable === void 0)
      isApplicable = true;
    if (varRuleNameToExpressionValueMap === void 0) {
      varRuleNameToExpressionValueMap = LinkedHashMap_init_0();
    }
    if (varRuleFunctionNameArgsToExpressionMap === void 0) {
      varRuleFunctionNameArgsToExpressionMap = LinkedHashMap_init_0();
    }
    if (varRuleNameToComparableTransformationsPartMap === void 0) {
      varRuleNameToComparableTransformationsPartMap = LinkedHashMap_init_0();
    }
    if (varNamesTimeStorage === void 0)
      varNamesTimeStorage = new VarNamesTimeStorage();
    if (correspondingIndexes === void 0)
      correspondingIndexes = new MatchedNode();
    this.isApplicable = isApplicable;
    this.varRuleNameToExpressionValueMap_0 = varRuleNameToExpressionValueMap;
    this.varRuleFunctionNameArgsToExpressionMap_0 = varRuleFunctionNameArgsToExpressionMap;
    this.varRuleNameToComparableTransformationsPartMap_0 = varRuleNameToComparableTransformationsPartMap;
    this.varNamesTimeStorage = varNamesTimeStorage;
    this.correspondingIndexes = correspondingIndexes;
  }
  function SubstitutionInstance$logValue$lambda(closure$message) {
    return function () {
      return closure$message() + ", isApplicable: '";
    };
  }
  function SubstitutionInstance$logValue$lambda_0() {
    return "', matchedFactIndex: '";
  }
  function SubstitutionInstance$logValue$lambda_1() {
    return "'";
  }
  function SubstitutionInstance$logValue$lambda_2(it) {
    return it.key + " = '" + it.value.toString() + "'";
  }
  function SubstitutionInstance$logValue$lambda_3() {
    return "NameToExpressionValue: '''";
  }
  function SubstitutionInstance$logValue$lambda_4() {
    return "'''";
  }
  function SubstitutionInstance$logValue$lambda_5(it) {
    return it.key + " = '" + it.value.toString() + "'";
  }
  function SubstitutionInstance$logValue$lambda_6() {
    return "FunctionNameArgsToExpression: '''";
  }
  function SubstitutionInstance$logValue$lambda_7() {
    return "'''";
  }
  function SubstitutionInstance$logValue$lambda_8(it) {
    return it.key + " = '" + it.value.toString() + "'";
  }
  function SubstitutionInstance$logValue$lambda_9() {
    return "NameToFact: '''";
  }
  function SubstitutionInstance$logValue$lambda_10() {
    return "'''";
  }
  SubstitutionInstance.prototype.logValue_2gmaed$ = function (message, messageType, level) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    log_1.add_jcldl0$(this.isApplicable, this.correspondingIndexes.matchedFactIndex, SubstitutionInstance$logValue$lambda(message), SubstitutionInstance$logValue$lambda_0, SubstitutionInstance$logValue$lambda_1);
    log_1.add_ww6hhz$(joinToString(this.varRuleNameToExpressionValueMap_0.entries, ', ', void 0, void 0, void 0, void 0, SubstitutionInstance$logValue$lambda_2), SubstitutionInstance$logValue$lambda_3, SubstitutionInstance$logValue$lambda_4, level + 1 | 0, void 0, messageType);
    log_1.add_ww6hhz$(joinToString(this.varRuleFunctionNameArgsToExpressionMap_0.entries, ', ', void 0, void 0, void 0, void 0, SubstitutionInstance$logValue$lambda_5), SubstitutionInstance$logValue$lambda_6, SubstitutionInstance$logValue$lambda_7, level + 1 | 0, void 0, messageType);
    log_1.add_ww6hhz$(joinToString(this.varRuleNameToComparableTransformationsPartMap_0.entries, ', ', void 0, void 0, void 0, void 0, SubstitutionInstance$logValue$lambda_8), SubstitutionInstance$logValue$lambda_9, SubstitutionInstance$logValue$lambda_10, level + 1 | 0, void 0, messageType);
  };
  SubstitutionInstance.prototype.dropExtraVarsAfter_za3lpa$ = function (time) {
    var tmp$;
    var extraVars = this.varNamesTimeStorage.popVarsAfter_za3lpa$(time);
    tmp$ = extraVars.iterator();
    while (tmp$.hasNext()) {
      var extraVar = tmp$.next();
      switch (extraVar.type.name) {
        case 'EXPR_VAR':
          this.varRuleNameToExpressionValueMap_0.remove_11rb$(extraVar.name);
          break;
        case 'EXPR_FUNC':
          this.varRuleFunctionNameArgsToExpressionMap_0.remove_11rb$(extraVar.name);
          break;
        case 'COMPARABLE_VAR':
          this.varRuleNameToComparableTransformationsPartMap_0.remove_11rb$(extraVar.name);
          break;
      }
    }
  };
  SubstitutionInstance.prototype.putExprVar_sth3hf$ = function (a, b) {
    this.putComparableVar_3lmvpp$(a, new Expression(0, 0, b));
  };
  SubstitutionInstance.prototype.putExprFunc_sth3hf$ = function (a, b) {
    this.varRuleFunctionNameArgsToExpressionMap_0.put_xwzc9p$(a, b);
    this.varNamesTimeStorage.addVarName_i6eyy4$(a, SubstitutionInstanceVarType$EXPR_FUNC_getInstance());
  };
  SubstitutionInstance.prototype.putComparableVar_3lmvpp$ = function (a, b) {
    var tmp$;
    this.varRuleNameToComparableTransformationsPartMap_0.put_xwzc9p$(a, b);
    this.varNamesTimeStorage.addVarName_i6eyy4$(a, SubstitutionInstanceVarType$COMPARABLE_VAR_getInstance());
    if (b.type() === ComparableTransformationPartType$EXPRESSION_getInstance()) {
      this.varRuleNameToExpressionValueMap_0.put_xwzc9p$(a, (Kotlin.isType(tmp$ = b, Expression) ? tmp$ : throwCCE()).data);
      this.varNamesTimeStorage.addVarName_i6eyy4$(a, SubstitutionInstanceVarType$EXPR_VAR_getInstance());
    }
  };
  SubstitutionInstance.prototype.getExprVar_61zpoe$ = function (a) {
    return this.varRuleNameToExpressionValueMap_0.get_11rb$(a);
  };
  SubstitutionInstance.prototype.removeExprVar_61zpoe$ = function (a) {
    return this.varRuleNameToExpressionValueMap_0.remove_11rb$(a);
  };
  SubstitutionInstance.prototype.getExprFunc_61zpoe$ = function (a) {
    return this.varRuleFunctionNameArgsToExpressionMap_0.get_11rb$(a);
  };
  SubstitutionInstance.prototype.getComparableVar_61zpoe$ = function (a) {
    return this.varRuleNameToComparableTransformationsPartMap_0.get_11rb$(a);
  };
  SubstitutionInstance.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubstitutionInstance',
    interfaces: []
  };
  SubstitutionInstance.prototype.component1 = function () {
    return this.isApplicable;
  };
  SubstitutionInstance.prototype.component2_0 = function () {
    return this.varRuleNameToExpressionValueMap_0;
  };
  SubstitutionInstance.prototype.component3_0 = function () {
    return this.varRuleFunctionNameArgsToExpressionMap_0;
  };
  SubstitutionInstance.prototype.component4_0 = function () {
    return this.varRuleNameToComparableTransformationsPartMap_0;
  };
  SubstitutionInstance.prototype.component5 = function () {
    return this.varNamesTimeStorage;
  };
  SubstitutionInstance.prototype.component6 = function () {
    return this.correspondingIndexes;
  };
  SubstitutionInstance.prototype.copy_wi7and$ = function (isApplicable, varRuleNameToExpressionValueMap, varRuleFunctionNameArgsToExpressionMap, varRuleNameToComparableTransformationsPartMap, varNamesTimeStorage, correspondingIndexes) {
    return new SubstitutionInstance(isApplicable === void 0 ? this.isApplicable : isApplicable, varRuleNameToExpressionValueMap === void 0 ? this.varRuleNameToExpressionValueMap_0 : varRuleNameToExpressionValueMap, varRuleFunctionNameArgsToExpressionMap === void 0 ? this.varRuleFunctionNameArgsToExpressionMap_0 : varRuleFunctionNameArgsToExpressionMap, varRuleNameToComparableTransformationsPartMap === void 0 ? this.varRuleNameToComparableTransformationsPartMap_0 : varRuleNameToComparableTransformationsPartMap, varNamesTimeStorage === void 0 ? this.varNamesTimeStorage : varNamesTimeStorage, correspondingIndexes === void 0 ? this.correspondingIndexes : correspondingIndexes);
  };
  SubstitutionInstance.prototype.toString = function () {
    return 'SubstitutionInstance(isApplicable=' + Kotlin.toString(this.isApplicable) + (', varRuleNameToExpressionValueMap=' + Kotlin.toString(this.varRuleNameToExpressionValueMap_0)) + (', varRuleFunctionNameArgsToExpressionMap=' + Kotlin.toString(this.varRuleFunctionNameArgsToExpressionMap_0)) + (', varRuleNameToComparableTransformationsPartMap=' + Kotlin.toString(this.varRuleNameToComparableTransformationsPartMap_0)) + (', varNamesTimeStorage=' + Kotlin.toString(this.varNamesTimeStorage)) + (', correspondingIndexes=' + Kotlin.toString(this.correspondingIndexes)) + ')';
  };
  SubstitutionInstance.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.isApplicable) | 0;
    result = result * 31 + Kotlin.hashCode(this.varRuleNameToExpressionValueMap_0) | 0;
    result = result * 31 + Kotlin.hashCode(this.varRuleFunctionNameArgsToExpressionMap_0) | 0;
    result = result * 31 + Kotlin.hashCode(this.varRuleNameToComparableTransformationsPartMap_0) | 0;
    result = result * 31 + Kotlin.hashCode(this.varNamesTimeStorage) | 0;
    result = result * 31 + Kotlin.hashCode(this.correspondingIndexes) | 0;
    return result;
  };
  SubstitutionInstance.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.isApplicable, other.isApplicable) && Kotlin.equals(this.varRuleNameToExpressionValueMap_0, other.varRuleNameToExpressionValueMap_0) && Kotlin.equals(this.varRuleFunctionNameArgsToExpressionMap_0, other.varRuleFunctionNameArgsToExpressionMap_0) && Kotlin.equals(this.varRuleNameToComparableTransformationsPartMap_0, other.varRuleNameToComparableTransformationsPartMap_0) && Kotlin.equals(this.varNamesTimeStorage, other.varNamesTimeStorage) && Kotlin.equals(this.correspondingIndexes, other.correspondingIndexes)))));
  };
  function SubstitutionPlace(nodeParent, nodeChildIndex, substitutionInstance, originalValue, originalExpression) {
    this.nodeParent = nodeParent;
    this.nodeChildIndex = nodeChildIndex;
    this.substitutionInstance = substitutionInstance;
    this.originalValue = originalValue;
    this.originalExpression = originalExpression;
  }
  SubstitutionPlace.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubstitutionPlace',
    interfaces: []
  };
  SubstitutionPlace.prototype.component1 = function () {
    return this.nodeParent;
  };
  SubstitutionPlace.prototype.component2 = function () {
    return this.nodeChildIndex;
  };
  SubstitutionPlace.prototype.component3 = function () {
    return this.substitutionInstance;
  };
  SubstitutionPlace.prototype.component4 = function () {
    return this.originalValue;
  };
  SubstitutionPlace.prototype.component5 = function () {
    return this.originalExpression;
  };
  SubstitutionPlace.prototype.copy_tafic4$ = function (nodeParent, nodeChildIndex, substitutionInstance, originalValue, originalExpression) {
    return new SubstitutionPlace(nodeParent === void 0 ? this.nodeParent : nodeParent, nodeChildIndex === void 0 ? this.nodeChildIndex : nodeChildIndex, substitutionInstance === void 0 ? this.substitutionInstance : substitutionInstance, originalValue === void 0 ? this.originalValue : originalValue, originalExpression === void 0 ? this.originalExpression : originalExpression);
  };
  SubstitutionPlace.prototype.toString = function () {
    return 'SubstitutionPlace(nodeParent=' + Kotlin.toString(this.nodeParent) + (', nodeChildIndex=' + Kotlin.toString(this.nodeChildIndex)) + (', substitutionInstance=' + Kotlin.toString(this.substitutionInstance)) + (', originalValue=' + Kotlin.toString(this.originalValue)) + (', originalExpression=' + Kotlin.toString(this.originalExpression)) + ')';
  };
  SubstitutionPlace.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.nodeParent) | 0;
    result = result * 31 + Kotlin.hashCode(this.nodeChildIndex) | 0;
    result = result * 31 + Kotlin.hashCode(this.substitutionInstance) | 0;
    result = result * 31 + Kotlin.hashCode(this.originalValue) | 0;
    result = result * 31 + Kotlin.hashCode(this.originalExpression) | 0;
    return result;
  };
  SubstitutionPlace.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.nodeParent, other.nodeParent) && Kotlin.equals(this.nodeChildIndex, other.nodeChildIndex) && Kotlin.equals(this.substitutionInstance, other.substitutionInstance) && Kotlin.equals(this.originalValue, other.originalValue) && Kotlin.equals(this.originalExpression, other.originalExpression)))));
  };
  function ExpressionSubstitution(left, right, weight, basedOnTaskContext, code, nameEn, nameRu, comparisonType, leftFunctions, rightFunctions, matchJumbledAndNested, priority, changeOnlyOrder, simpleAdditional, isExtending, normalizationType, difficultyInTaskAutoGeneration, weightInTaskAutoGeneration, useWhenPostprocessGeneratedExpression, tagsForTaskGenerator, isCopy) {
    ExpressionSubstitution$Companion_getInstance();
    if (weight === void 0)
      weight = 1.0;
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (code === void 0)
      code = '';
    if (nameEn === void 0)
      nameEn = '';
    if (nameRu === void 0)
      nameRu = '';
    if (comparisonType === void 0)
      comparisonType = ComparisonType$EQUAL_getInstance();
    if (leftFunctions === void 0)
      leftFunctions = left.getContainedFunctions();
    if (rightFunctions === void 0)
      rightFunctions = right.getContainedFunctions();
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = false;
    if (priority === void 0)
      priority = null;
    if (changeOnlyOrder === void 0)
      changeOnlyOrder = false;
    if (simpleAdditional === void 0)
      simpleAdditional = false;
    if (isExtending === void 0)
      isExtending = false;
    if (normalizationType === void 0)
      normalizationType = ExpressionSubstitutionNormType$ORIGINAL_getInstance();
    if (difficultyInTaskAutoGeneration === void 0)
      difficultyInTaskAutoGeneration = 1.0;
    if (weightInTaskAutoGeneration === void 0)
      weightInTaskAutoGeneration = 1.0;
    if (useWhenPostprocessGeneratedExpression === void 0)
      useWhenPostprocessGeneratedExpression = false;
    if (tagsForTaskGenerator === void 0) {
      tagsForTaskGenerator = emptyList();
    }
    if (isCopy === void 0)
      isCopy = false;
    this.left = left;
    this.right = right;
    this.weight = weight;
    this.basedOnTaskContext = basedOnTaskContext;
    this.code = code;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.comparisonType = comparisonType;
    this.leftFunctions = leftFunctions;
    this.rightFunctions = rightFunctions;
    this.matchJumbledAndNested = matchJumbledAndNested;
    this.priority = priority;
    this.changeOnlyOrder = changeOnlyOrder;
    this.simpleAdditional = simpleAdditional;
    this.isExtending = isExtending;
    this.normalizationType = normalizationType;
    this.difficultyInTaskAutoGeneration = difficultyInTaskAutoGeneration;
    this.weightInTaskAutoGeneration = weightInTaskAutoGeneration;
    this.useWhenPostprocessGeneratedExpression = useWhenPostprocessGeneratedExpression;
    this.tagsForTaskGenerator = tagsForTaskGenerator;
    if (!this.changeOnlyOrder) {
      var $receiver = this.left.clone();
      $receiver.normalizeSubTree_f8z7ch$(void 0, void 0, true);
      var leftSorted = $receiver;
      var $receiver_0 = this.right.clone();
      $receiver_0.normalizeSubTree_f8z7ch$(void 0, void 0, true);
      var rightSorted = $receiver_0;
      this.changeOnlyOrder = equals(leftSorted.toString(), rightSorted.toString());
    }
    if (!isCopy) {
      this.right.setLastAppliedSubstitutionForAllNodes_1plxii$(this);
    }
    this.identifier = '';
  }
  ExpressionSubstitution.prototype.copy_ru8ki6$ = function (isCopy, newWeightInTaskAutoGeneration) {
    if (isCopy === void 0)
      isCopy = false;
    if (newWeightInTaskAutoGeneration === void 0)
      newWeightInTaskAutoGeneration = null;
    return new ExpressionSubstitution(this.left, this.right, this.weight, this.basedOnTaskContext, this.code, this.nameEn, this.nameRu, this.comparisonType, this.leftFunctions, this.rightFunctions, this.matchJumbledAndNested, this.priority, this.changeOnlyOrder, this.simpleAdditional, this.isExtending, this.normalizationType, this.difficultyInTaskAutoGeneration, newWeightInTaskAutoGeneration != null ? newWeightInTaskAutoGeneration : this.weightInTaskAutoGeneration, this.useWhenPostprocessGeneratedExpression, this.tagsForTaskGenerator, isCopy);
  };
  ExpressionSubstitution.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.identifier) || recomputeIfComputed) {
      this.identifier = '[' + this.left.computeIdentifier_5osufp$() + '->' + this.right.computeIdentifier_5osufp$() + ']';
    }
    return this.identifier;
  };
  ExpressionSubstitution.prototype.setStepIdForRight_za3lpa$ = function (stepId) {
    this.right.setStepIdForAllNodes_za3lpa$(stepId);
  };
  ExpressionSubstitution.prototype.isAppropriateToFunctions_ywdfdh$ = function (functions) {
    var tmp$ = this.leftFunctions.isEmpty();
    if (!tmp$) {
      tmp$ = !intersect(this.leftFunctions, functions).isEmpty();
    }
    return tmp$;
  };
  ExpressionSubstitution.prototype.checkCondition_vurz5v$ = function (expressionNode, conditionNode, substitutionInstance, expressionComparator, nameArgsMap) {
    if (nameArgsMap === void 0) {
      nameArgsMap = LinkedHashMap_init_0();
    }
    var tmp$;
    ExpressionSubstitution$Companion_getInstance().checkConditionCompanion_tiu7wf$(expressionNode, conditionNode, substitutionInstance, nameArgsMap, this.basedOnTaskContext, this.matchJumbledAndNested);
    if (substitutionInstance.isApplicable && expressionComparator != null) {
      var nonZeroVariables = this.right.getNonZeroVariables_ywdfdh$();
      tmp$ = nonZeroVariables.iterator();
      while (tmp$.hasNext()) {
        var nonZeroVariable = tmp$.next();
        var nonZeroVariableValue = substitutionInstance.getExprVar_61zpoe$(nonZeroVariable);
        if (nonZeroVariableValue == null) {
          return;
        }
        if (expressionComparator.fastProbabilityCheckOnZero_em03xr$(nonZeroVariableValue)) {
          substitutionInstance.isApplicable = false;
        }
      }
    }
  };
  function ExpressionSubstitution$Companion() {
    ExpressionSubstitution$Companion_instance = this;
  }
  ExpressionSubstitution$Companion.prototype.checkConditionCompanion_tiu7wf$ = function (expressionNode, conditionNode, substitutionInstance, nameArgsMap, basedOnTaskContext, matchJumbledAndNested, onlyCheckListFlag) {
    if (nameArgsMap === void 0) {
      nameArgsMap = LinkedHashMap_init_0();
    }
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = false;
    if (onlyCheckListFlag === void 0)
      onlyCheckListFlag = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18;
    if (conditionNode.isNumberValue()) {
      if (expressionNode.nodeType === NodeType$VARIABLE_getInstance()) {
        tmp$_1 = expressionNode.value;
      }
       else if (calcComplexity(expressionNode) < 4 && !expressionNode.containsVariables_ywdfdh$()) {
        tmp$_1 = (tmp$_0 = (tmp$ = computeNodeIfSimple(expressionNode)) != null ? tmp$.toString() : null) != null ? tmp$_0 : '';
      }
       else
        tmp$_1 = '';
      var expressionValue = tmp$_1;
      if (expressionValue.length === 0 || !isNumberValuesEqual(expressionValue, conditionNode.value)) {
        if (onlyCheckListFlag == null) {
          substitutionInstance.isApplicable = false;
        }
         else {
          onlyCheckListFlag.add_11rb$(false);
        }
        return;
      }
    }
     else if (conditionNode.children.size > 0) {
      if (this.isNameForRulesDesignation_0(basedOnTaskContext, conditionNode)) {
        if (onlyCheckListFlag != null)
          return;
        var actualNameArgsMap = LinkedHashMap_init_0();
        var conditionChildrenMap = LinkedHashMap_init_0();
        tmp$_2 = get_lastIndex(conditionNode.children);
        for (var j = 0; j <= tmp$_2; j++)
          conditionChildrenMap.put_xwzc9p$(conditionNode.children.get_za3lpa$(j).value, 'sys_def_func_agr_' + j);
        tmp$_3 = nameArgsMap.entries.iterator();
        while (tmp$_3.hasNext()) {
          var tmp$_19 = tmp$_3.next();
          var key = tmp$_19.key;
          var value = tmp$_19.value;
          var orderValue = conditionChildrenMap.get_11rb$(value);
          if (orderValue != null)
            actualNameArgsMap.put_xwzc9p$(key, orderValue);
        }
        var functionValue = substitutionInstance.getExprFunc_61zpoe$(conditionNode.value + '_' + toString(conditionNode.children.size));
        if (functionValue == null) {
          substitutionInstance.putExprFunc_sth3hf$(conditionNode.value + '_' + toString(conditionNode.children.size), expressionNode.cloneWithNormalization_1g1bdl$(actualNameArgsMap, false));
        }
         else {
          if (!expressionNode.isNodeSubtreeEquals_cw9fud$(functionValue, actualNameArgsMap)) {
            substitutionInstance.isApplicable = false;
            return;
          }
        }
      }
       else {
        if (conditionNode.children.size < expressionNode.children.size || (conditionNode.children.size !== expressionNode.children.size && (((tmp$_5 = (tmp$_4 = conditionNode.functionStringDefinition) != null ? tmp$_4.function : null) != null ? tmp$_5.fieldAddZero : null) == null || ((tmp$_7 = (tmp$_6 = conditionNode.functionStringDefinition) != null ? tmp$_6.function : null) != null ? tmp$_7.isCommutativeWithNullWeight : null) !== true || !matchJumbledAndNested)) || !conditionNode.isNodeValueEquals_em03xr$(expressionNode)) {
          if (onlyCheckListFlag == null) {
            substitutionInstance.isApplicable = false;
          }
           else {
            onlyCheckListFlag.add_11rb$(false);
          }
          return;
        }
        var argumentStartIndex = (tmp$_10 = (tmp$_9 = (tmp$_8 = conditionNode.functionStringDefinition) != null ? tmp$_8.function : null) != null ? tmp$_9.numberOfDefinitionArguments : null) != null ? tmp$_10 : 0;
        if (argumentStartIndex !== 0 && onlyCheckListFlag != null)
          return;
        for (var i = 0; i < argumentStartIndex; i++) {
          nameArgsMap.put_xwzc9p$(expressionNode.children.get_za3lpa$(i).value, conditionNode.children.get_za3lpa$(i).value);
        }
        if (matchJumbledAndNested && ((tmp$_13 = (tmp$_12 = (tmp$_11 = conditionNode.functionStringDefinition) != null ? tmp$_11.function : null) != null ? tmp$_12.isCommutativeWithNullWeight : null) != null ? tmp$_13 : false)) {
          var usedNodes = LinkedHashSet_init();
          var expressionStartNodeIndex = argumentStartIndex;
          tmp$_14 = get_lastIndex(conditionNode.children);
          for (var i_0 = argumentStartIndex; i_0 <= tmp$_14; i_0++) {
            var isMatched = false;
            tmp$_15 = get_lastIndex(expressionNode.children);
            for (var j_0 = expressionStartNodeIndex; j_0 <= tmp$_15; j_0++) {
              if (usedNodes.contains_11rb$(j_0))
                continue;
              var checkListFlag = ArrayList_init();
              this.checkConditionCompanion_tiu7wf$(expressionNode.children.get_za3lpa$(j_0), conditionNode.children.get_za3lpa$(i_0), substitutionInstance, nameArgsMap, basedOnTaskContext, matchJumbledAndNested, checkListFlag);
              if (!checkListFlag.isEmpty()) {
                continue;
              }
              this.checkConditionCompanion_tiu7wf$(expressionNode.children.get_za3lpa$(j_0), conditionNode.children.get_za3lpa$(i_0), substitutionInstance, nameArgsMap, basedOnTaskContext, matchJumbledAndNested);
              if (!substitutionInstance.isApplicable)
                return;
              if (j_0 === expressionStartNodeIndex) {
                expressionStartNodeIndex = expressionStartNodeIndex + 1 | 0;
              }
               else {
                usedNodes.add_11rb$(j_0);
              }
              isMatched = true;
              break;
            }
            if (!basedOnTaskContext && !isMatched && ((tmp$_17 = (tmp$_16 = conditionNode.functionStringDefinition) != null ? tmp$_16.function : null) != null ? tmp$_17.fieldAddZero : null) != null && conditionNode.children.get_za3lpa$(i_0).nodeType === NodeType$VARIABLE_getInstance() && !conditionNode.children.get_za3lpa$(i_0).isNumberValue()) {
              var varValue = substitutionInstance.getExprVar_61zpoe$(conditionNode.children.get_za3lpa$(i_0).value);
              if (varValue == null) {
                isMatched = true;
                if (onlyCheckListFlag == null && !equals(conditionNode.children.get_za3lpa$(i_0).value, 'sys_def_i_complex')) {
                  substitutionInstance.putExprVar_sth3hf$(conditionNode.children.get_za3lpa$(i_0).value, new ExpressionNode(NodeType$VARIABLE_getInstance(), ensureNotNull(ensureNotNull(conditionNode.functionStringDefinition).function.fieldAddZero)));
                }
              }
               else {
                if (varValue.isNodeSubtreeEquals_cw9fud$(new ExpressionNode(NodeType$VARIABLE_getInstance(), ensureNotNull(ensureNotNull(conditionNode.functionStringDefinition).function.fieldAddZero)))) {
                  isMatched = true;
                }
              }
            }
            if (!isMatched) {
              if (onlyCheckListFlag == null) {
                substitutionInstance.isApplicable = false;
              }
               else {
                onlyCheckListFlag.add_11rb$(false);
              }
              return;
            }
          }
        }
         else {
          tmp$_18 = get_lastIndex(expressionNode.children);
          for (var i_1 = argumentStartIndex; i_1 <= tmp$_18; i_1++) {
            if (onlyCheckListFlag != null) {
              this.checkConditionCompanion_tiu7wf$(expressionNode.children.get_za3lpa$(i_1), conditionNode.children.get_za3lpa$(i_1), substitutionInstance, nameArgsMap, basedOnTaskContext, matchJumbledAndNested, onlyCheckListFlag);
              if (!onlyCheckListFlag.isEmpty()) {
                return;
              }
            }
            this.checkConditionCompanion_tiu7wf$(expressionNode.children.get_za3lpa$(i_1), conditionNode.children.get_za3lpa$(i_1), substitutionInstance, nameArgsMap, basedOnTaskContext, matchJumbledAndNested);
            if (!substitutionInstance.isApplicable)
              return;
          }
        }
        for (var i_2 = 0; i_2 < argumentStartIndex; i_2++) {
          nameArgsMap.remove_11rb$(expressionNode.children.get_za3lpa$(i_2).value);
        }
      }
    }
     else {
      if (basedOnTaskContext) {
        if (!conditionNode.isNodeSubtreeEquals_cw9fud$(expressionNode)) {
          if (onlyCheckListFlag == null) {
            substitutionInstance.isApplicable = false;
          }
           else {
            onlyCheckListFlag.add_11rb$(false);
          }
        }
        return;
      }
       else {
        var varValue_0 = substitutionInstance.getExprVar_61zpoe$(conditionNode.value);
        if (varValue_0 == null) {
          if (equals(conditionNode.value, 'sys_def_i_complex') && !equals(expressionNode.value, 'sys_def_i_complex')) {
            if (onlyCheckListFlag == null) {
              substitutionInstance.isApplicable = false;
            }
             else {
              onlyCheckListFlag.add_11rb$(false);
            }
            return;
          }
          if (onlyCheckListFlag != null)
            return;
          substitutionInstance.putExprVar_sth3hf$(conditionNode.value, expressionNode);
        }
         else {
          if (!varValue_0.isNodeSubtreeEquals_cw9fud$(expressionNode)) {
            if (onlyCheckListFlag == null) {
              substitutionInstance.isApplicable = false;
            }
             else {
              onlyCheckListFlag.add_11rb$(false);
            }
            return;
          }
        }
      }
    }
  };
  ExpressionSubstitution$Companion.prototype.isNameForRulesDesignation_0 = function (basedOnTaskContext, conditionNode) {
    return !basedOnTaskContext && conditionNode.functionStringDefinition != null && ensureNotNull(conditionNode.functionStringDefinition).function.isNameForRuleDesignations;
  };
  ExpressionSubstitution$Companion.prototype.applyRightCompanion_kkx7l8$ = function (substitutionInstance, right) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14;
    if (right.value.length === 0 && right.children.size === 1) {
      return this.applyRightCompanion_kkx7l8$(substitutionInstance, right.children.get_za3lpa$(0));
    }
     else if (right.isNumberValue()) {
      return right.copy_4anocu$();
    }
     else if (right.children.size !== 0) {
      if ((tmp$_1 = (tmp$_0 = (tmp$ = right.functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.isNameForRuleDesignations : null) != null ? tmp$_1 : false) {
        var actualNameArgsMap = LinkedHashMap_init_0();
        var conditionChildrenMap = LinkedHashMap_init_0();
        var functionNameArgsToExpressionMap = LinkedHashMap_init_0();
        tmp$_2 = get_lastIndex(right.children);
        for (var j = 0; j <= tmp$_2; j++) {
          tmp$_4 = (tmp$_3 = substitutionInstance.getExprVar_61zpoe$(right.children.get_za3lpa$(j).value)) != null ? tmp$_3.cloneWithNormalization_1g1bdl$(void 0, false) : null;
          if (tmp$_4 == null) {
            return null;
          }
          functionNameArgsToExpressionMap.put_xwzc9p$('sys_def_func_agr_' + j, tmp$_4);
        }
        var tmp$_15;
        if ((tmp$_7 = (tmp$_6 = (tmp$_5 = substitutionInstance.getExprFunc_61zpoe$(right.value + '_' + toString(right.children.size))) != null ? tmp$_5.cloneWithDeepSubstitutions_qhbxfl$(functionNameArgsToExpressionMap) : null) != null ? tmp$_6.normalizeSubTree_f8z7ch$(void 0, void 0, false) : null) != null) {
          var tmp$_16;
          if ((tmp$_16 = right.lastAppliedSubstitution) != null) {
            tmp$_7.setLastAppliedSubstitutionForAllNodes_1plxii$(tmp$_16);
          }
          tmp$_15 = tmp$_7;
        }
         else
          tmp$_15 = null;
        tmp$_8 = tmp$_15;
        if (tmp$_8 == null) {
          return null;
        }
        return tmp$_8;
      }
       else {
        var argumentStartIndex = (tmp$_11 = (tmp$_10 = (tmp$_9 = right.functionStringDefinition) != null ? tmp$_9.function : null) != null ? tmp$_10.numberOfDefinitionArguments : null) != null ? tmp$_11 : 0;
        for (var i = 0; i < argumentStartIndex; i++) {
          substitutionInstance.putExprVar_sth3hf$(right.children.get_za3lpa$(i).value, right.children.get_za3lpa$(i));
        }
        var result = right.copy_4anocu$();
        tmp$_12 = get_lastIndex(right.children);
        for (var i_0 = 0; i_0 <= tmp$_12; i_0++) {
          tmp$_13 = this.applyRightCompanion_kkx7l8$(substitutionInstance, right.children.get_za3lpa$(i_0));
          if (tmp$_13 == null) {
            return null;
          }
          result.addChild_em03xr$(tmp$_13);
        }
        for (var i_1 = 0; i_1 < argumentStartIndex; i_1++) {
          substitutionInstance.removeExprVar_61zpoe$(right.children.get_za3lpa$(i_1).value);
        }
        return result;
      }
    }
     else {
      return ((tmp$_14 = substitutionInstance.getExprVar_61zpoe$(right.value)) != null ? tmp$_14 : right).cloneWithNormalization_1g1bdl$(void 0, false);
    }
  };
  ExpressionSubstitution$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ExpressionSubstitution$Companion_instance = null;
  function ExpressionSubstitution$Companion_getInstance() {
    if (ExpressionSubstitution$Companion_instance === null) {
      new ExpressionSubstitution$Companion();
    }
    return ExpressionSubstitution$Companion_instance;
  }
  ExpressionSubstitution.prototype.checkLeftCondition_i8kf4x$ = function (expressionNode, expressionComparator) {
    if (expressionComparator === void 0)
      expressionComparator = null;
    var substitutionInstance = new SubstitutionInstance();
    this.checkCondition_vurz5v$(expressionNode, this.left.children.get_za3lpa$(0), substitutionInstance, expressionComparator);
    return substitutionInstance;
  };
  ExpressionSubstitution.prototype.findAllPossibleSubstitutionPlaces_0 = function (root, originalExpression, expressionComparator, result) {
    var tmp$;
    tmp$ = root.children.size;
    for (var i = 0; i < tmp$; i++) {
      this.findAllPossibleSubstitutionPlaces_0(root.children.get_za3lpa$(i), originalExpression, expressionComparator, result);
      var substitutionInstance = this.checkLeftCondition_i8kf4x$(root.children.get_za3lpa$(i), expressionComparator);
      if (substitutionInstance.isApplicable) {
        result.add_11rb$(new SubstitutionPlace(root, i, substitutionInstance, root.children.get_za3lpa$(i), originalExpression));
      }
    }
  };
  ExpressionSubstitution.prototype.findAllPossibleSubstitutionPlaces_i8kf4x$ = function (root, expressionComparator) {
    var result = ArrayList_init();
    this.findAllPossibleSubstitutionPlaces_0(root, root, expressionComparator, result);
    return result;
  };
  ExpressionSubstitution.prototype.applySubstitution_3grqus$ = function (substitutionPlaces, expressionComparator) {
    if (expressionComparator === void 0)
      expressionComparator = null;
    var tmp$;
    tmp$ = substitutionPlaces.iterator();
    while (tmp$.hasNext()) {
      var substitutionPlace = tmp$.next();
      var newValue = this.checkAndApply_i8kf4x$(substitutionPlace.nodeParent.children.get_za3lpa$(substitutionPlace.nodeChildIndex), expressionComparator);
      if (newValue != null) {
        substitutionPlace.nodeParent.children.set_wxm5ur$(substitutionPlace.nodeChildIndex, newValue);
        substitutionPlace.nodeParent.normalizeParentLinks();
      }
    }
  };
  ExpressionSubstitution.prototype.applySubstitutionByBitMask_uet8du$ = function (substitutionPlaces, bitMask) {
    var tmp$, tmp$_0;
    var changedNodeIds = ArrayList_init();
    tmp$ = substitutionPlaces.size;
    for (var i = 0; i < tmp$; i++) {
      var substitutionPlace = substitutionPlaces.get_za3lpa$(i);
      substitutionPlace.nodeParent.children.set_wxm5ur$(substitutionPlace.nodeChildIndex, substitutionPlace.originalValue);
    }
    tmp$_0 = substitutionPlaces.size;
    for (var i_0 = 0; i_0 < tmp$_0; i_0++) {
      var substitutionPlace_0 = substitutionPlaces.get_za3lpa$(i_0);
      if ((bitMask & 1 << i_0) === 0)
        continue;
      var newValue = this.applyRight_b48iti$(substitutionPlace_0.substitutionInstance);
      if (newValue != null) {
        changedNodeIds.add_11rb$(substitutionPlace_0.nodeParent.children.get_za3lpa$(substitutionPlace_0.nodeChildIndex).nodeId);
        substitutionPlace_0.nodeParent.children.set_wxm5ur$(substitutionPlace_0.nodeChildIndex, newValue);
      }
    }
    return changedNodeIds;
  };
  ExpressionSubstitution.prototype.applyRight_b48iti$ = function (substitutionInstance, right, topNodeId) {
    if (right === void 0)
      right = this.right.children.get_za3lpa$(0);
    if (topNodeId === void 0)
      topNodeId = -1;
    var tmp$;
    var tmp$_0;
    if ((tmp$ = ExpressionSubstitution$Companion_getInstance().applyRightCompanion_kkx7l8$(substitutionInstance, right)) != null) {
      tmp$.resetNodeIds();
      tmp$.nodeId = topNodeId;
      tmp$_0 = tmp$;
    }
     else
      tmp$_0 = null;
    return tmp$_0;
  };
  ExpressionSubstitution.prototype.checkAndApply_i8kf4x$ = function (expressionNode, expressionComparator) {
    if (expressionComparator === void 0)
      expressionComparator = null;
    var substitutionInstance = this.checkLeftCondition_i8kf4x$(expressionNode, expressionComparator);
    if (substitutionInstance.isApplicable) {
      return this.applyRight_b48iti$(substitutionInstance, void 0, expressionNode.nodeId);
    }
     else
      return null;
  };
  ExpressionSubstitution.prototype.isNormalType = function () {
    return !contains_1(this.code, '__to__');
  };
  ExpressionSubstitution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionSubstitution',
    interfaces: []
  };
  function applyAllFunctionSubstitutions($receiver, compiledSubstitutions) {
    var tmp$;
    var i = 0;
    while (i < $receiver.children.size) {
      applyAllFunctionSubstitutions($receiver.children.get_za3lpa$(i), compiledSubstitutions);
      var substitution = compiledSubstitutions.get_11rb$($receiver.children.get_za3lpa$(i).value + '_' + toString($receiver.children.get_za3lpa$(i).children.size));
      if (substitution != null) {
        $receiver.children.set_wxm5ur$(i, (tmp$ = substitution.checkAndApply_i8kf4x$($receiver.children.get_za3lpa$(i), null)) != null ? tmp$ : $receiver.children.get_za3lpa$(i));
      }
      i = i + 1 | 0;
    }
    $receiver.normalizeParentLinks();
  }
  function applyAllSubstitutions($receiver, expressionSubstitutions) {
    var tmp$;
    tmp$ = expressionSubstitutions.iterator();
    while (tmp$.hasNext()) {
      var substitution = tmp$.next();
      var substitutionPlaces = substitution.findAllPossibleSubstitutionPlaces_i8kf4x$($receiver, null);
      substitution.applySubstitution_3grqus$(substitutionPlaces, null);
    }
    $receiver.normalizeParentLinks();
  }
  function applyAllImmediateSubstitutions($receiver, compiledConfiguration) {
    $receiver.variableReplacement_y0zsll$(compiledConfiguration.compiledImmediateVariableReplacements);
    applyAllSubstitutions($receiver, compiledConfiguration.compiledImmediateTreeTransformationRules);
  }
  function SubstitutionApplication(expressionSubstitution, originalExpression, originalExpressionChangingPart, resultExpression, resultExpressionChangingPart, substitutionType, priority, error) {
    if (error === void 0)
      error = null;
    this.expressionSubstitution = expressionSubstitution;
    this.originalExpression = originalExpression;
    this.originalExpressionChangingPart = originalExpressionChangingPart;
    this.resultExpression = resultExpression;
    this.resultExpressionChangingPart = resultExpressionChangingPart;
    this.substitutionType = substitutionType;
    this.priority = priority;
    this.error = error;
  }
  SubstitutionApplication.prototype.toString = function () {
    if (this.error == null) {
      return '' + ("result: '" + this.resultExpression.toPlainTextView_8ellkq$() + "'" + '\n') + ("expressionSubstitution.left: '" + this.expressionSubstitution.left.toString() + "'" + '\n') + ("expressionSubstitution.right: '" + this.expressionSubstitution.right.toString() + "'" + '\n') + ("originalExpression: '" + this.originalExpression.toString() + "'" + '\n') + ("originalExpressionChangingPart: '" + this.originalExpressionChangingPart.toString() + "'" + '\n') + ("resultExpression: '" + this.resultExpression.toString() + "'" + '\n') + ("resultExpressionChangingPart: '" + this.resultExpressionChangingPart.toString() + "'" + '\n') + ("substitutionType: '" + this.substitutionType + "'" + '\n') + ("priority: '" + this.priority + "'");
    }
     else {
      return '';
    }
  };
  SubstitutionApplication.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubstitutionApplication',
    interfaces: []
  };
  SubstitutionApplication.prototype.component1 = function () {
    return this.expressionSubstitution;
  };
  SubstitutionApplication.prototype.component2 = function () {
    return this.originalExpression;
  };
  SubstitutionApplication.prototype.component3 = function () {
    return this.originalExpressionChangingPart;
  };
  SubstitutionApplication.prototype.component4 = function () {
    return this.resultExpression;
  };
  SubstitutionApplication.prototype.component5 = function () {
    return this.resultExpressionChangingPart;
  };
  SubstitutionApplication.prototype.component6 = function () {
    return this.substitutionType;
  };
  SubstitutionApplication.prototype.component7 = function () {
    return this.priority;
  };
  SubstitutionApplication.prototype.component8 = function () {
    return this.error;
  };
  SubstitutionApplication.prototype.copy_9knfqz$ = function (expressionSubstitution, originalExpression, originalExpressionChangingPart, resultExpression, resultExpressionChangingPart, substitutionType, priority, error) {
    return new SubstitutionApplication(expressionSubstitution === void 0 ? this.expressionSubstitution : expressionSubstitution, originalExpression === void 0 ? this.originalExpression : originalExpression, originalExpressionChangingPart === void 0 ? this.originalExpressionChangingPart : originalExpressionChangingPart, resultExpression === void 0 ? this.resultExpression : resultExpression, resultExpressionChangingPart === void 0 ? this.resultExpressionChangingPart : resultExpressionChangingPart, substitutionType === void 0 ? this.substitutionType : substitutionType, priority === void 0 ? this.priority : priority, error === void 0 ? this.error : error);
  };
  SubstitutionApplication.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.expressionSubstitution) | 0;
    result = result * 31 + Kotlin.hashCode(this.originalExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.originalExpressionChangingPart) | 0;
    result = result * 31 + Kotlin.hashCode(this.resultExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.resultExpressionChangingPart) | 0;
    result = result * 31 + Kotlin.hashCode(this.substitutionType) | 0;
    result = result * 31 + Kotlin.hashCode(this.priority) | 0;
    result = result * 31 + Kotlin.hashCode(this.error) | 0;
    return result;
  };
  SubstitutionApplication.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.expressionSubstitution, other.expressionSubstitution) && Kotlin.equals(this.originalExpression, other.originalExpression) && Kotlin.equals(this.originalExpressionChangingPart, other.originalExpressionChangingPart) && Kotlin.equals(this.resultExpression, other.resultExpression) && Kotlin.equals(this.resultExpressionChangingPart, other.resultExpressionChangingPart) && Kotlin.equals(this.substitutionType, other.substitutionType) && Kotlin.equals(this.priority, other.priority) && Kotlin.equals(this.error, other.error)))));
  };
  function addSubstitutionToDiff($receiver, compareWith, expressionSubstitution) {
    var tmp$;
    if (!equals($receiver.value, compareWith.value) || $receiver.children.size !== compareWith.children.size) {
      $receiver.lastAppliedSubstitution = expressionSubstitution;
      return;
    }
    tmp$ = zip($receiver.children, compareWith.children).iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var child = tmp$_0.component1()
      , compareChild = tmp$_0.component2();
      addSubstitutionToDiff(child, compareChild, expressionSubstitution);
    }
  }
  function addSubstitutionToResultExpression($receiver) {
    addSubstitutionToDiff($receiver.resultExpression, $receiver.originalExpression, $receiver.expressionSubstitution);
  }
  function addStepIdToDiff($receiver, compareWith, stepId) {
    var tmp$;
    if (!equals($receiver.value, compareWith.value) || $receiver.children.size !== compareWith.children.size) {
      $receiver.lastModifiedStepId = stepId;
      return;
    }
    tmp$ = zip($receiver.children, compareWith.children).iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var child = tmp$_0.component1()
      , compareChild = tmp$_0.component2();
      addStepIdToDiff(child, compareChild, stepId);
    }
  }
  function addStepIdToResultExpression($receiver, stepId) {
    addStepIdToDiff($receiver.resultExpression, $receiver.originalExpression, stepId);
  }
  function MathMlTagTreeNode(type, value, startPosition, endPosition, parent, stringDefinitionType, isNumberRead, needDoubleChild, needOneMoreBracket, isLatexArgument, texArgumentType) {
    if (startPosition === void 0)
      startPosition = -1;
    if (endPosition === void 0)
      endPosition = -1;
    if (parent === void 0)
      parent = null;
    if (stringDefinitionType === void 0)
      stringDefinitionType = StringDefinitionType$FUNCTION_getInstance();
    if (isNumberRead === void 0)
      isNumberRead = false;
    if (needDoubleChild === void 0)
      needDoubleChild = false;
    if (needOneMoreBracket === void 0)
      needOneMoreBracket = false;
    if (isLatexArgument === void 0)
      isLatexArgument = false;
    if (texArgumentType === void 0)
      texArgumentType = MathMlTagTreeNode$TexArgumentType$USUAL_getInstance();
    this.type = type;
    this.value = value;
    this.startPosition = startPosition;
    this.endPosition = endPosition;
    this.parent = parent;
    this.stringDefinitionType = stringDefinitionType;
    this.isNumberRead = isNumberRead;
    this.needDoubleChild = needDoubleChild;
    this.needOneMoreBracket = needOneMoreBracket;
    this.isLatexArgument = isLatexArgument;
    this.texArgumentType = texArgumentType;
    this.children = ArrayList_init();
  }
  function MathMlTagTreeNode$Type(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function MathMlTagTreeNode$Type_initFields() {
    MathMlTagTreeNode$Type_initFields = function () {
    };
    MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_instance = new MathMlTagTreeNode$Type('EXPRESSION_PART_STRING', 0);
    MathMlTagTreeNode$Type$MATH_ML_FUNCTION_instance = new MathMlTagTreeNode$Type('MATH_ML_FUNCTION', 1);
    MathMlTagTreeNode$Type$BRACKET_FUNCTION_instance = new MathMlTagTreeNode$Type('BRACKET_FUNCTION', 2);
    MathMlTagTreeNode$Type$NAME_instance = new MathMlTagTreeNode$Type('NAME', 3);
    MathMlTagTreeNode$Type$OPERATION_instance = new MathMlTagTreeNode$Type('OPERATION', 4);
  }
  var MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_instance;
  function MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance() {
    MathMlTagTreeNode$Type_initFields();
    return MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_instance;
  }
  var MathMlTagTreeNode$Type$MATH_ML_FUNCTION_instance;
  function MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance() {
    MathMlTagTreeNode$Type_initFields();
    return MathMlTagTreeNode$Type$MATH_ML_FUNCTION_instance;
  }
  var MathMlTagTreeNode$Type$BRACKET_FUNCTION_instance;
  function MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance() {
    MathMlTagTreeNode$Type_initFields();
    return MathMlTagTreeNode$Type$BRACKET_FUNCTION_instance;
  }
  var MathMlTagTreeNode$Type$NAME_instance;
  function MathMlTagTreeNode$Type$NAME_getInstance() {
    MathMlTagTreeNode$Type_initFields();
    return MathMlTagTreeNode$Type$NAME_instance;
  }
  var MathMlTagTreeNode$Type$OPERATION_instance;
  function MathMlTagTreeNode$Type$OPERATION_getInstance() {
    MathMlTagTreeNode$Type_initFields();
    return MathMlTagTreeNode$Type$OPERATION_instance;
  }
  MathMlTagTreeNode$Type.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Type',
    interfaces: [Enum]
  };
  function MathMlTagTreeNode$Type$values() {
    return [MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance(), MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance(), MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), MathMlTagTreeNode$Type$NAME_getInstance(), MathMlTagTreeNode$Type$OPERATION_getInstance()];
  }
  MathMlTagTreeNode$Type.values = MathMlTagTreeNode$Type$values;
  function MathMlTagTreeNode$Type$valueOf(name) {
    switch (name) {
      case 'EXPRESSION_PART_STRING':
        return MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance();
      case 'MATH_ML_FUNCTION':
        return MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance();
      case 'BRACKET_FUNCTION':
        return MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance();
      case 'NAME':
        return MathMlTagTreeNode$Type$NAME_getInstance();
      case 'OPERATION':
        return MathMlTagTreeNode$Type$OPERATION_getInstance();
      default:throwISE('No enum constant mathhelper.twf.expressiontree.MathMlTagTreeNode.Type.' + name);
    }
  }
  MathMlTagTreeNode$Type.valueOf_61zpoe$ = MathMlTagTreeNode$Type$valueOf;
  function MathMlTagTreeNode$TexArgumentType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function MathMlTagTreeNode$TexArgumentType_initFields() {
    MathMlTagTreeNode$TexArgumentType_initFields = function () {
    };
    MathMlTagTreeNode$TexArgumentType$USUAL_instance = new MathMlTagTreeNode$TexArgumentType('USUAL', 0);
    MathMlTagTreeNode$TexArgumentType$UNDERLINED_instance = new MathMlTagTreeNode$TexArgumentType('UNDERLINED', 1);
    MathMlTagTreeNode$TexArgumentType$POW_instance = new MathMlTagTreeNode$TexArgumentType('POW', 2);
  }
  var MathMlTagTreeNode$TexArgumentType$USUAL_instance;
  function MathMlTagTreeNode$TexArgumentType$USUAL_getInstance() {
    MathMlTagTreeNode$TexArgumentType_initFields();
    return MathMlTagTreeNode$TexArgumentType$USUAL_instance;
  }
  var MathMlTagTreeNode$TexArgumentType$UNDERLINED_instance;
  function MathMlTagTreeNode$TexArgumentType$UNDERLINED_getInstance() {
    MathMlTagTreeNode$TexArgumentType_initFields();
    return MathMlTagTreeNode$TexArgumentType$UNDERLINED_instance;
  }
  var MathMlTagTreeNode$TexArgumentType$POW_instance;
  function MathMlTagTreeNode$TexArgumentType$POW_getInstance() {
    MathMlTagTreeNode$TexArgumentType_initFields();
    return MathMlTagTreeNode$TexArgumentType$POW_instance;
  }
  MathMlTagTreeNode$TexArgumentType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TexArgumentType',
    interfaces: [Enum]
  };
  function MathMlTagTreeNode$TexArgumentType$values() {
    return [MathMlTagTreeNode$TexArgumentType$USUAL_getInstance(), MathMlTagTreeNode$TexArgumentType$UNDERLINED_getInstance(), MathMlTagTreeNode$TexArgumentType$POW_getInstance()];
  }
  MathMlTagTreeNode$TexArgumentType.values = MathMlTagTreeNode$TexArgumentType$values;
  function MathMlTagTreeNode$TexArgumentType$valueOf(name) {
    switch (name) {
      case 'USUAL':
        return MathMlTagTreeNode$TexArgumentType$USUAL_getInstance();
      case 'UNDERLINED':
        return MathMlTagTreeNode$TexArgumentType$UNDERLINED_getInstance();
      case 'POW':
        return MathMlTagTreeNode$TexArgumentType$POW_getInstance();
      default:throwISE('No enum constant mathhelper.twf.expressiontree.MathMlTagTreeNode.TexArgumentType.' + name);
    }
  }
  MathMlTagTreeNode$TexArgumentType.valueOf_61zpoe$ = MathMlTagTreeNode$TexArgumentType$valueOf;
  MathMlTagTreeNode.prototype.addChild_a7hfz6$ = function (newNode) {
    this.children.add_11rb$(newNode);
    newNode.parent = this;
  };
  MathMlTagTreeNode.prototype.getNodeString = function () {
    var tmp$;
    if (this.children.size === 0)
      return this.value;
    var value = this.value + '{';
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      value += child.getNodeString() + String.fromCharCode(toBoxedChar(59));
    }
    if (last_0(value) === 59) {
      var $receiver = value;
      var endIndex = get_lastIndex_0(value);
      value = $receiver.substring(0, endIndex);
    }
    value += String.fromCharCode(125);
    return value;
  };
  MathMlTagTreeNode.prototype.toString = function () {
    return this.getNodeString();
  };
  MathMlTagTreeNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MathMlTagTreeNode',
    interfaces: []
  };
  MathMlTagTreeNode.prototype.component1 = function () {
    return this.type;
  };
  MathMlTagTreeNode.prototype.component2 = function () {
    return this.value;
  };
  MathMlTagTreeNode.prototype.component3 = function () {
    return this.startPosition;
  };
  MathMlTagTreeNode.prototype.component4 = function () {
    return this.endPosition;
  };
  MathMlTagTreeNode.prototype.component5 = function () {
    return this.parent;
  };
  MathMlTagTreeNode.prototype.component6 = function () {
    return this.stringDefinitionType;
  };
  MathMlTagTreeNode.prototype.component7 = function () {
    return this.isNumberRead;
  };
  MathMlTagTreeNode.prototype.component8 = function () {
    return this.needDoubleChild;
  };
  MathMlTagTreeNode.prototype.component9 = function () {
    return this.needOneMoreBracket;
  };
  MathMlTagTreeNode.prototype.component10 = function () {
    return this.isLatexArgument;
  };
  MathMlTagTreeNode.prototype.component11 = function () {
    return this.texArgumentType;
  };
  MathMlTagTreeNode.prototype.copy_6krzgf$ = function (type, value, startPosition, endPosition, parent, stringDefinitionType, isNumberRead, needDoubleChild, needOneMoreBracket, isLatexArgument, texArgumentType) {
    return new MathMlTagTreeNode(type === void 0 ? this.type : type, value === void 0 ? this.value : value, startPosition === void 0 ? this.startPosition : startPosition, endPosition === void 0 ? this.endPosition : endPosition, parent === void 0 ? this.parent : parent, stringDefinitionType === void 0 ? this.stringDefinitionType : stringDefinitionType, isNumberRead === void 0 ? this.isNumberRead : isNumberRead, needDoubleChild === void 0 ? this.needDoubleChild : needDoubleChild, needOneMoreBracket === void 0 ? this.needOneMoreBracket : needOneMoreBracket, isLatexArgument === void 0 ? this.isLatexArgument : isLatexArgument, texArgumentType === void 0 ? this.texArgumentType : texArgumentType);
  };
  MathMlTagTreeNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.value) | 0;
    result = result * 31 + Kotlin.hashCode(this.startPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.endPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    result = result * 31 + Kotlin.hashCode(this.stringDefinitionType) | 0;
    result = result * 31 + Kotlin.hashCode(this.isNumberRead) | 0;
    result = result * 31 + Kotlin.hashCode(this.needDoubleChild) | 0;
    result = result * 31 + Kotlin.hashCode(this.needOneMoreBracket) | 0;
    result = result * 31 + Kotlin.hashCode(this.isLatexArgument) | 0;
    result = result * 31 + Kotlin.hashCode(this.texArgumentType) | 0;
    return result;
  };
  MathMlTagTreeNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.value, other.value) && Kotlin.equals(this.startPosition, other.startPosition) && Kotlin.equals(this.endPosition, other.endPosition) && Kotlin.equals(this.parent, other.parent) && Kotlin.equals(this.stringDefinitionType, other.stringDefinitionType) && Kotlin.equals(this.isNumberRead, other.isNumberRead) && Kotlin.equals(this.needDoubleChild, other.needDoubleChild) && Kotlin.equals(this.needOneMoreBracket, other.needOneMoreBracket) && Kotlin.equals(this.isLatexArgument, other.isLatexArgument) && Kotlin.equals(this.texArgumentType, other.texArgumentType)))));
  };
  function swap($receiver, index1, index2) {
    var tmp = $receiver.get_za3lpa$(index1);
    $receiver.set_wxm5ur$(index1, $receiver.get_za3lpa$(index2));
    $receiver.set_wxm5ur$(index2, tmp);
  }
  function ExpressionParserNode(type, value, startPosition, endPosition, subValue, parent, functionStringDefinition) {
    if (startPosition === void 0)
      startPosition = -1;
    if (endPosition === void 0)
      endPosition = -1;
    if (subValue === void 0)
      subValue = '';
    if (parent === void 0)
      parent = null;
    if (functionStringDefinition === void 0)
      functionStringDefinition = null;
    this.type = type;
    this.value = value;
    this.startPosition = startPosition;
    this.endPosition = endPosition;
    this.subValue = subValue;
    this.parent = parent;
    this.functionStringDefinition = functionStringDefinition;
    this.children = ArrayList_init();
  }
  function ExpressionParserNode$Type(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ExpressionParserNode$Type_initFields() {
    ExpressionParserNode$Type_initFields = function () {
    };
    ExpressionParserNode$Type$FUNCTION_instance = new ExpressionParserNode$Type('FUNCTION', 0);
    ExpressionParserNode$Type$VARIABLE_instance = new ExpressionParserNode$Type('VARIABLE', 1);
    ExpressionParserNode$Type$BINARY_OPERATION_instance = new ExpressionParserNode$Type('BINARY_OPERATION', 2);
    ExpressionParserNode$Type$UNARY_OPERATION_instance = new ExpressionParserNode$Type('UNARY_OPERATION', 3);
  }
  var ExpressionParserNode$Type$FUNCTION_instance;
  function ExpressionParserNode$Type$FUNCTION_getInstance() {
    ExpressionParserNode$Type_initFields();
    return ExpressionParserNode$Type$FUNCTION_instance;
  }
  var ExpressionParserNode$Type$VARIABLE_instance;
  function ExpressionParserNode$Type$VARIABLE_getInstance() {
    ExpressionParserNode$Type_initFields();
    return ExpressionParserNode$Type$VARIABLE_instance;
  }
  var ExpressionParserNode$Type$BINARY_OPERATION_instance;
  function ExpressionParserNode$Type$BINARY_OPERATION_getInstance() {
    ExpressionParserNode$Type_initFields();
    return ExpressionParserNode$Type$BINARY_OPERATION_instance;
  }
  var ExpressionParserNode$Type$UNARY_OPERATION_instance;
  function ExpressionParserNode$Type$UNARY_OPERATION_getInstance() {
    ExpressionParserNode$Type_initFields();
    return ExpressionParserNode$Type$UNARY_OPERATION_instance;
  }
  ExpressionParserNode$Type.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Type',
    interfaces: [Enum]
  };
  function ExpressionParserNode$Type$values() {
    return [ExpressionParserNode$Type$FUNCTION_getInstance(), ExpressionParserNode$Type$VARIABLE_getInstance(), ExpressionParserNode$Type$BINARY_OPERATION_getInstance(), ExpressionParserNode$Type$UNARY_OPERATION_getInstance()];
  }
  ExpressionParserNode$Type.values = ExpressionParserNode$Type$values;
  function ExpressionParserNode$Type$valueOf(name) {
    switch (name) {
      case 'FUNCTION':
        return ExpressionParserNode$Type$FUNCTION_getInstance();
      case 'VARIABLE':
        return ExpressionParserNode$Type$VARIABLE_getInstance();
      case 'BINARY_OPERATION':
        return ExpressionParserNode$Type$BINARY_OPERATION_getInstance();
      case 'UNARY_OPERATION':
        return ExpressionParserNode$Type$UNARY_OPERATION_getInstance();
      default:throwISE('No enum constant mathhelper.twf.expressiontree.ExpressionParserNode.Type.' + name);
    }
  }
  ExpressionParserNode$Type.valueOf_61zpoe$ = ExpressionParserNode$Type$valueOf;
  ExpressionParserNode.prototype.addChild_75veaa$ = function (newNode) {
    this.children.add_11rb$(newNode);
    newNode.parent = this;
  };
  ExpressionParserNode.prototype.getFirstListNodeAfterFunction_6taknv$ = function (functionMet) {
    if (functionMet === void 0)
      functionMet = false;
    if (this.children.isEmpty()) {
      return functionMet ? this : null;
    }
     else {
      var tmp$ = this.children.get_za3lpa$(0);
      var tmp$_0 = functionMet;
      if (!tmp$_0) {
        var tmp$_1 = this.type === ExpressionParserNode$Type$FUNCTION_getInstance();
        if (tmp$_1) {
          tmp$_1 = this.value.length > 0;
        }
        tmp$_0 = tmp$_1;
      }
      return tmp$.getFirstListNodeAfterFunction_6taknv$(tmp$_0);
    }
  };
  ExpressionParserNode.prototype.isFunction = function () {
    return this.type === ExpressionParserNode$Type$FUNCTION_getInstance() || this.type === ExpressionParserNode$Type$BINARY_OPERATION_getInstance() || this.type === ExpressionParserNode$Type$UNARY_OPERATION_getInstance();
  };
  ExpressionParserNode.prototype.getNonEmptyChildren_5bxoqt$ = function (resultChildren, actualStartPosition, actualEndPosition) {
    if (actualStartPosition === void 0)
      actualStartPosition = -1;
    if (actualEndPosition === void 0)
      actualEndPosition = -1;
    var tmp$;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (child.startPosition < 0) {
        child.startPosition = actualStartPosition;
      }
      if (child.endPosition < 0) {
        child.endPosition = actualEndPosition;
      }
      if (child.value.length > 0) {
        resultChildren.add_11rb$(child);
      }
       else {
        child.getNonEmptyChildren_5bxoqt$(resultChildren, child.startPosition, child.endPosition);
      }
    }
  };
  ExpressionParserNode.prototype.getNodeString = function () {
    var tmp$;
    if (this.children.size === 0)
      return this.value;
    var value = this.value + '(';
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      value += child.getNodeString() + String.fromCharCode(toBoxedChar(59));
    }
    value += String.fromCharCode(41);
    return value;
  };
  ExpressionParserNode.prototype.toString = function () {
    return this.getNodeString();
  };
  ExpressionParserNode.prototype.getMinPriorityOfBinaryOperationsWithoutOperands = function () {
    var tmp$;
    if (this.type === ExpressionParserNode$Type$BINARY_OPERATION_getInstance() && this.children.size === 0)
      return ensureNotNull(this.functionStringDefinition).function.priority;
    var minPriority = kotlin_js_internal_DoubleCompanionObject.MAX_VALUE;
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var priority = child.getMinPriorityOfBinaryOperationsWithoutOperands();
      if (priority < minPriority)
        minPriority = priority;
    }
    return minPriority;
  };
  ExpressionParserNode.prototype.resolveBinaryOperationsWithPriorityRecursive_qa7ax3$ = function (priority, functionConfiguration) {
    var tmp$, tmp$_0;
    var operationWithMinPriority = new ExpressionParserNode(ExpressionParserNode$Type$BINARY_OPERATION_getInstance(), '', this.startPosition, this.endPosition);
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      child.resolveBinaryOperationsWithPriorityRecursive_qa7ax3$(priority, functionConfiguration);
      if (child.type === ExpressionParserNode$Type$BINARY_OPERATION_getInstance() && ensureNotNull(child.functionStringDefinition).function.priority <= priority && child.children.size === 0) {
        operationWithMinPriority.functionStringDefinition = functionConfiguration.fastFindStringDefinitionByNameAndNumberOfArguments_bm4lxs$(ensureNotNull(child.functionStringDefinition).function.mainFunction, ensureNotNull(child.functionStringDefinition).function.numberOfArguments);
        operationWithMinPriority.value = ensureNotNull(child.functionStringDefinition).function.mainFunction;
      }
    }
    if (operationWithMinPriority.value.length === 0)
      return;
    operationWithMinPriority.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), ''));
    tmp$_0 = this.children.iterator();
    while (tmp$_0.hasNext()) {
      var child_0 = tmp$_0.next();
      if (child_0.type === ExpressionParserNode$Type$BINARY_OPERATION_getInstance() && equals(ensureNotNull(child_0.functionStringDefinition).function.mainFunction, operationWithMinPriority.value)) {
        if (equals(ensureNotNull(child_0.functionStringDefinition).function.function, operationWithMinPriority.value)) {
          operationWithMinPriority.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), ''));
        }
         else {
          operationWithMinPriority.addChild_75veaa$(child_0);
        }
      }
       else {
        last(operationWithMinPriority.children).addChild_75veaa$(child_0);
      }
    }
    this.children.clear();
    this.addChild_75veaa$(operationWithMinPriority);
  };
  ExpressionParserNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionParserNode',
    interfaces: []
  };
  ExpressionParserNode.prototype.component1 = function () {
    return this.type;
  };
  ExpressionParserNode.prototype.component2 = function () {
    return this.value;
  };
  ExpressionParserNode.prototype.component3 = function () {
    return this.startPosition;
  };
  ExpressionParserNode.prototype.component4 = function () {
    return this.endPosition;
  };
  ExpressionParserNode.prototype.component5 = function () {
    return this.subValue;
  };
  ExpressionParserNode.prototype.component6 = function () {
    return this.parent;
  };
  ExpressionParserNode.prototype.component7 = function () {
    return this.functionStringDefinition;
  };
  ExpressionParserNode.prototype.copy_b1re41$ = function (type, value, startPosition, endPosition, subValue, parent, functionStringDefinition) {
    return new ExpressionParserNode(type === void 0 ? this.type : type, value === void 0 ? this.value : value, startPosition === void 0 ? this.startPosition : startPosition, endPosition === void 0 ? this.endPosition : endPosition, subValue === void 0 ? this.subValue : subValue, parent === void 0 ? this.parent : parent, functionStringDefinition === void 0 ? this.functionStringDefinition : functionStringDefinition);
  };
  ExpressionParserNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.value) | 0;
    result = result * 31 + Kotlin.hashCode(this.startPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.endPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.subValue) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    result = result * 31 + Kotlin.hashCode(this.functionStringDefinition) | 0;
    return result;
  };
  ExpressionParserNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.value, other.value) && Kotlin.equals(this.startPosition, other.startPosition) && Kotlin.equals(this.endPosition, other.endPosition) && Kotlin.equals(this.subValue, other.subValue) && Kotlin.equals(this.parent, other.parent) && Kotlin.equals(this.functionStringDefinition, other.functionStringDefinition)))));
  };
  function ExpressionTreeParser(originalExpression, nameForRuleDesignationsPossible, functionConfiguration, compiledImmediateVariableReplacements, isMathML) {
    ExpressionTreeParser$Companion_getInstance();
    if (nameForRuleDesignationsPossible === void 0)
      nameForRuleDesignationsPossible = false;
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    if (compiledImmediateVariableReplacements === void 0) {
      compiledImmediateVariableReplacements = emptyMap();
    }
    if (isMathML === void 0) {
      var tmp$;
      var tmp$_0 = startsWith(trim(Kotlin.isCharSequence(tmp$ = originalExpression) ? tmp$ : throwCCE()).toString(), '<');
      if (!tmp$_0) {
        var tmp$_1;
        tmp$_0 = endsWith_0(trim(Kotlin.isCharSequence(tmp$_1 = originalExpression) ? tmp$_1 : throwCCE()).toString(), '>');
      }
      isMathML = tmp$_0 || contains_1(originalExpression, '&#');
    }
    this.originalExpression = originalExpression;
    this.nameForRuleDesignationsPossible = nameForRuleDesignationsPossible;
    this.functionConfiguration = functionConfiguration;
    this.compiledImmediateVariableReplacements = compiledImmediateVariableReplacements;
    this.isMathML = isMathML;
    this.newLinePlaces = findNewLinePlaces(this.originalExpression);
    this.expression = texStringPrefiltering(removeNewLinesFromExpression(this.originalExpression));
    this.bracketCompleteTagTree_0 = new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', 0, this.originalExpression.length);
    this.parsedTree_0 = new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', 0, this.originalExpression.length);
    this.parsedTreeWithMultiples_0 = new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', 0, this.originalExpression.length);
    this.rootNotPrioritized_0 = new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '', 0, this.originalExpression.length);
    this.rootNotPrioritizedUnaries_0 = new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '', 0, this.originalExpression.length);
    this.rootNotPrioritizedWithComplexes_0 = new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '', 0, this.originalExpression.length);
    this.rootNotPrioritizedWithMultiplications_0 = new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '', 0, this.originalExpression.length);
    this.root = new ExpressionNode(NodeType$FUNCTION_getInstance(), '', 0, this.originalExpression.length);
    this.currentPosition_0 = 0;
    this.completeBinarySigns_0 = listOf_0(['&amp;', '->', '-<\/mo><mo>&gt;']);
    this.isNeedReplace_0 = true;
    this.SorPLevels_0 = ArrayList_init();
    this.notReplacementVariables_0 = LinkedHashMap_init_0();
    this.complexVar_0 = 'sys_def_i_complex';
    this.lenOfComplexVar_0 = this.complexVar_0.length;
  }
  function ExpressionTreeParser$ParserState(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ExpressionTreeParser$ParserState_initFields() {
    ExpressionTreeParser$ParserState_initFields = function () {
    };
    ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_instance = new ExpressionTreeParser$ParserState('WAIT_FOR_NUMBER', 0);
    ExpressionTreeParser$ParserState$NUMBER_READ_instance = new ExpressionTreeParser$ParserState('NUMBER_READ', 1);
  }
  var ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_instance;
  function ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_getInstance() {
    ExpressionTreeParser$ParserState_initFields();
    return ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_instance;
  }
  var ExpressionTreeParser$ParserState$NUMBER_READ_instance;
  function ExpressionTreeParser$ParserState$NUMBER_READ_getInstance() {
    ExpressionTreeParser$ParserState_initFields();
    return ExpressionTreeParser$ParserState$NUMBER_READ_instance;
  }
  ExpressionTreeParser$ParserState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ParserState',
    interfaces: [Enum]
  };
  function ExpressionTreeParser$ParserState$values() {
    return [ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_getInstance(), ExpressionTreeParser$ParserState$NUMBER_READ_getInstance()];
  }
  ExpressionTreeParser$ParserState.values = ExpressionTreeParser$ParserState$values;
  function ExpressionTreeParser$ParserState$valueOf(name) {
    switch (name) {
      case 'WAIT_FOR_NUMBER':
        return ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_getInstance();
      case 'NUMBER_READ':
        return ExpressionTreeParser$ParserState$NUMBER_READ_getInstance();
      default:throwISE('No enum constant mathhelper.twf.expressiontree.ExpressionTreeParser.ParserState.' + name);
    }
  }
  ExpressionTreeParser$ParserState.valueOf_61zpoe$ = ExpressionTreeParser$ParserState$valueOf;
  function ExpressionTreeParser$TokenParserState(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ExpressionTreeParser$TokenParserState_initFields() {
    ExpressionTreeParser$TokenParserState_initFields = function () {
    };
    ExpressionTreeParser$TokenParserState$UNDEFINED_instance = new ExpressionTreeParser$TokenParserState('UNDEFINED', 0);
    ExpressionTreeParser$TokenParserState$UNARY_OPERATION_instance = new ExpressionTreeParser$TokenParserState('UNARY_OPERATION', 1);
    ExpressionTreeParser$TokenParserState$BINARY_OPERATION_instance = new ExpressionTreeParser$TokenParserState('BINARY_OPERATION', 2);
    ExpressionTreeParser$TokenParserState$NUMBER_instance = new ExpressionTreeParser$TokenParserState('NUMBER', 3);
    ExpressionTreeParser$TokenParserState$NAME_instance = new ExpressionTreeParser$TokenParserState('NAME', 4);
    ExpressionTreeParser$TokenParserState$NAME_BREAK_instance = new ExpressionTreeParser$TokenParserState('NAME_BREAK', 5);
    ExpressionTreeParser$TokenParserState$COMMA_instance = new ExpressionTreeParser$TokenParserState('COMMA', 6);
  }
  var ExpressionTreeParser$TokenParserState$UNDEFINED_instance;
  function ExpressionTreeParser$TokenParserState$UNDEFINED_getInstance() {
    ExpressionTreeParser$TokenParserState_initFields();
    return ExpressionTreeParser$TokenParserState$UNDEFINED_instance;
  }
  var ExpressionTreeParser$TokenParserState$UNARY_OPERATION_instance;
  function ExpressionTreeParser$TokenParserState$UNARY_OPERATION_getInstance() {
    ExpressionTreeParser$TokenParserState_initFields();
    return ExpressionTreeParser$TokenParserState$UNARY_OPERATION_instance;
  }
  var ExpressionTreeParser$TokenParserState$BINARY_OPERATION_instance;
  function ExpressionTreeParser$TokenParserState$BINARY_OPERATION_getInstance() {
    ExpressionTreeParser$TokenParserState_initFields();
    return ExpressionTreeParser$TokenParserState$BINARY_OPERATION_instance;
  }
  var ExpressionTreeParser$TokenParserState$NUMBER_instance;
  function ExpressionTreeParser$TokenParserState$NUMBER_getInstance() {
    ExpressionTreeParser$TokenParserState_initFields();
    return ExpressionTreeParser$TokenParserState$NUMBER_instance;
  }
  var ExpressionTreeParser$TokenParserState$NAME_instance;
  function ExpressionTreeParser$TokenParserState$NAME_getInstance() {
    ExpressionTreeParser$TokenParserState_initFields();
    return ExpressionTreeParser$TokenParserState$NAME_instance;
  }
  var ExpressionTreeParser$TokenParserState$NAME_BREAK_instance;
  function ExpressionTreeParser$TokenParserState$NAME_BREAK_getInstance() {
    ExpressionTreeParser$TokenParserState_initFields();
    return ExpressionTreeParser$TokenParserState$NAME_BREAK_instance;
  }
  var ExpressionTreeParser$TokenParserState$COMMA_instance;
  function ExpressionTreeParser$TokenParserState$COMMA_getInstance() {
    ExpressionTreeParser$TokenParserState_initFields();
    return ExpressionTreeParser$TokenParserState$COMMA_instance;
  }
  ExpressionTreeParser$TokenParserState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TokenParserState',
    interfaces: [Enum]
  };
  function ExpressionTreeParser$TokenParserState$values() {
    return [ExpressionTreeParser$TokenParserState$UNDEFINED_getInstance(), ExpressionTreeParser$TokenParserState$UNARY_OPERATION_getInstance(), ExpressionTreeParser$TokenParserState$BINARY_OPERATION_getInstance(), ExpressionTreeParser$TokenParserState$NUMBER_getInstance(), ExpressionTreeParser$TokenParserState$NAME_getInstance(), ExpressionTreeParser$TokenParserState$NAME_BREAK_getInstance(), ExpressionTreeParser$TokenParserState$COMMA_getInstance()];
  }
  ExpressionTreeParser$TokenParserState.values = ExpressionTreeParser$TokenParserState$values;
  function ExpressionTreeParser$TokenParserState$valueOf(name) {
    switch (name) {
      case 'UNDEFINED':
        return ExpressionTreeParser$TokenParserState$UNDEFINED_getInstance();
      case 'UNARY_OPERATION':
        return ExpressionTreeParser$TokenParserState$UNARY_OPERATION_getInstance();
      case 'BINARY_OPERATION':
        return ExpressionTreeParser$TokenParserState$BINARY_OPERATION_getInstance();
      case 'NUMBER':
        return ExpressionTreeParser$TokenParserState$NUMBER_getInstance();
      case 'NAME':
        return ExpressionTreeParser$TokenParserState$NAME_getInstance();
      case 'NAME_BREAK':
        return ExpressionTreeParser$TokenParserState$NAME_BREAK_getInstance();
      case 'COMMA':
        return ExpressionTreeParser$TokenParserState$COMMA_getInstance();
      default:throwISE('No enum constant mathhelper.twf.expressiontree.ExpressionTreeParser.TokenParserState.' + name);
    }
  }
  ExpressionTreeParser$TokenParserState.valueOf_61zpoe$ = ExpressionTreeParser$TokenParserState$valueOf;
  ExpressionTreeParser.prototype.normalisePositionInParseError_0 = function (parserError) {
    var tmp$;
    var shift = 0;
    tmp$ = this.newLinePlaces.iterator();
    while (tmp$.hasNext()) {
      var i = tmp$.next();
      if (parserError.position >= i) {
        shift = shift + 1 | 0;
      }
    }
    var endPosition = parserError.endPosition < 0 ? parserError.endPosition : parserError.endPosition + Kotlin.imul(shift, StringExtension$Companion_getInstance().newLineMspace.length) | 0;
    this.root.nodeType = NodeType$ERROR_getInstance();
    this.root.startPosition = parserError.position + Kotlin.imul(shift, StringExtension$Companion_getInstance().newLineMspace.length) | 0;
    this.root.endPosition = endPosition;
    this.root.value = parserError.description;
    return new ParserError(parserError.position + Kotlin.imul(shift, StringExtension$Companion_getInstance().newLineMspace.length) | 0, parserError.description, endPosition);
  };
  ExpressionTreeParser.prototype.parse = function () {
    var parseMathMlTagTreeError = this.parseMathMlTagTree_0();
    if (parseMathMlTagTreeError != null)
      return this.normalisePositionInParseError_0(parseMathMlTagTreeError);
    var parseLeaveStringExpressionPartsError = this.parseLeaveStringExpressionParts_0(this.bracketCompleteTagTree_0, this.parsedTree_0);
    if (parseLeaveStringExpressionPartsError != null)
      return this.normalisePositionInParseError_0(parseLeaveStringExpressionPartsError);
    if (this.isMathML) {
      var multipleFunctionsHandlingError = this.multipleFunctionsHandling_0(this.parsedTree_0, this.parsedTreeWithMultiples_0);
      if (multipleFunctionsHandlingError != null)
        return this.normalisePositionInParseError_0(multipleFunctionsHandlingError);
    }
     else {
      this.parsedTreeWithMultiples_0 = this.parsedTree_0;
    }
    var mathMlTreeToExpressionTreeError = this.mathMlTreeToExpressionTree_0(this.parsedTreeWithMultiples_0, this.rootNotPrioritized_0);
    if (mathMlTreeToExpressionTreeError != null)
      return this.normalisePositionInParseError_0(mathMlTreeToExpressionTreeError);
    var combineUnaryError = this.combineUnary_0(this.rootNotPrioritized_0, this.rootNotPrioritizedUnaries_0);
    if (combineUnaryError != null)
      return this.normalisePositionInParseError_0(combineUnaryError);
    var replaceComplexOneError = this.replaceComplexOne_0(this.rootNotPrioritizedUnaries_0, this.rootNotPrioritizedWithComplexes_0);
    if (replaceComplexOneError != null)
      return this.normalisePositionInParseError_0(replaceComplexOneError);
    var addMultiplicationsError = this.addMultiplications_0(this.rootNotPrioritizedWithComplexes_0, this.rootNotPrioritizedWithMultiplications_0);
    if (addMultiplicationsError != null)
      return this.normalisePositionInParseError_0(addMultiplicationsError);
    this.resolveBinaryOperations_0(this.rootNotPrioritizedWithMultiplications_0);
    this.toExpressionTree_0(this.rootNotPrioritizedWithMultiplications_0, this.root);
    this.root.correctPositions();
    this.root.computeIdentifier_5osufp$();
    this.root.variableReplacement_y0zsll$(this.compiledImmediateVariableReplacements);
    this.root.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$();
    return null;
  };
  function ExpressionTreeParser$parseMathMlTagTree$lambda(it) {
    return isLetter(unboxChar(it));
  }
  function ExpressionTreeParser$parseMathMlTagTree$lambda_0(it) {
    return unboxChar(it) !== 62;
  }
  ExpressionTreeParser.prototype.parseMathMlTagTree_0 = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    if (isBlank(this.expression)) {
      return new ParserError(0, 'No expression found');
    }
    var actualParent = this.bracketCompleteTagTree_0;
    var numberOfOpenBrackets = 0;
    var currentPosition = 0;
    var value = '';
    var inTag = false;
    var skipMrowCount = 0;
    actualParent.startPosition = currentPosition;
    while (currentPosition < this.expression.length) {
      if (isWhiteSpace(this.expression, currentPosition)) {
        currentPosition = currentPosition + 1 | 0;
        continue;
      }
      var startPosition = currentPosition;
      if (this.isMathML && this.expression.charCodeAt(currentPosition) === 60 && (this.isComplicatedTag_0(this.expression, currentPosition) || actualParent.type === MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance())) {
        var tagStartPosition = currentPosition;
        currentPosition = currentPosition + 1 | 0;
        if (remainingExpressionStartsWith('/', this.expression, currentPosition)) {
          currentPosition = currentPosition + 1 | 0;
          value = readFromRemainingExpressionWhile(ExpressionTreeParser$parseMathMlTagTree$lambda, this.expression, currentPosition);
          currentPosition = currentPosition + value.length | 0;
          if (!startsWith_0(value, 109)) {
            var other = value;
            value = String.fromCharCode(109) + other;
          }
          currentPosition = skipFromRemainingExpressionWhile(ExpressionTreeParser$parseMathMlTagTree$lambda_0, this.expression, currentPosition);
          if (equals(value, 'mrow') && skipMrowCount > 0 && !equals(substringBefore(actualParent.value, 95), 'mrow')) {
            skipMrowCount = skipMrowCount - 1 | 0;
          }
           else {
            if (!equals(substringBefore(actualParent.value, 95), value)) {
              if (!equals(value, 'mrow')) {
                return new ParserError(startPosition, "Unexpected: '<\/" + value + "'");
              }
            }
             else {
              actualParent.endPosition = tagStartPosition;
              if (equals(value, 'mrow') && !actualParent.needDoubleChild) {
                var node = actualParent;
                var parent = ensureNotNull(actualParent.parent);
                parent.children.removeAt_za3lpa$(get_lastIndex(parent.children));
                parent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', startPosition));
                last(parent.children).addChild_a7hfz6$(node);
                actualParent = parent;
              }
               else {
                actualParent = ensureNotNull(actualParent.parent);
              }
            }
          }
          currentPosition = currentPosition + 1 | 0;
        }
         else {
          currentPosition = currentPosition - 1 | 0;
          var actualTag = readOpenTagStringIfItPresent(this.expression, currentPosition);
          var tagData = getTagAttributes(ensureNotNull(actualTag));
          var openValue = (tmp$ = tagData.get_11rb$('open')) != null ? replace(tmp$, '"', '') : null;
          var closeValue = (tmp$_0 = tagData.get_11rb$('close')) != null ? replace(tmp$_0, '"', '') : null;
          tmp$_2 = ensureNotNull(tagData.get_11rb$('name'));
          if (openValue != null) {
            tmp$_1 = '_' + toString(openValue);
          }
           else {
            tmp$_1 = '';
          }
          if (closeValue != null) {
            tmp$_3 = '__' + toString(closeValue);
          }
           else {
            tmp$_3 = '';
          }
          value = tmp$_2 + tmp$_1 + tmp$_3;
          var nameNotStartWithM = false;
          if (!startsWith_0(value, 109)) {
            var other_0 = value;
            value = String.fromCharCode(109) + other_0;
            nameNotStartWithM = true;
          }
          if (equals(value, 'mrow') && !ExpressionTreeParser$Companion_getInstance().mathMlTags.contains_11rb$(actualParent.value)) {
            currentPosition = currentPosition + ensureNotNull(actualTag).length | 0;
            skipMrowCount = skipMrowCount + 1 | 0;
          }
           else {
            currentPosition = currentPosition + ensureNotNull(actualTag).length | 0;
            var newParentNode = equals(value, 'msqrt') || equals(value, 'mrow') || equals(value, 'math') || equals(value, 'mfenced_|__|') ? new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), value, startPosition) : new MathMlTagTreeNode(MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance(), value, startPosition);
            var tmp$_8 = nameNotStartWithM;
            if (tmp$_8) {
              tmp$_8 = !actualParent.children.isEmpty();
            }
            if (tmp$_8) {
              if (last(actualParent.children).type === MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance() && (endsWith_0(last(actualParent.children).value, '<\/mi>') || endsWith_0(last(actualParent.children).value, '<\/mn>') || endsWith_0(last(actualParent.children).value, '<\/mo>')) && lastIndexOfAny(last(actualParent.children).value, listOf_0(['<mi>', '<mo>', '<mn>'])) > 0) {
                var lastSignIndex = lastIndexOfAny(last(actualParent.children).value, listOf_0(['<mi>', '<mo>', '<mn>']));
                var suffix = last(actualParent.children).value.substring(lastSignIndex);
                last(actualParent.children).value = removeSuffix(last(actualParent.children).value, suffix);
                actualParent.addChild_a7hfz6$(newParentNode);
                actualParent = last(actualParent.children);
                actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance(), suffix, currentPosition, currentPosition));
              }
               else {
                var currentLastChild = last(actualParent.children);
                actualParent.children.removeAt_za3lpa$(get_lastIndex(actualParent.children));
                actualParent.addChild_a7hfz6$(newParentNode);
                actualParent = last(actualParent.children);
                actualParent.addChild_a7hfz6$(currentLastChild);
              }
            }
             else {
              actualParent.addChild_a7hfz6$(newParentNode);
              actualParent = last(actualParent.children);
            }
          }
        }
      }
       else if (this.expression.charCodeAt(currentPosition) === 40 || this.expression.charCodeAt(currentPosition) === 123) {
        actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', startPosition, void 0, void 0, void 0, void 0, void 0, void 0, this.expression.charCodeAt(currentPosition) === 123));
        actualParent = last(actualParent.children);
        numberOfOpenBrackets = numberOfOpenBrackets + 1 | 0;
        currentPosition = currentPosition + 1 | 0;
      }
       else if (this.expression.charCodeAt(currentPosition) === 41 || this.expression.charCodeAt(currentPosition) === 125) {
        if (actualParent.needOneMoreBracket) {
          actualParent.endPosition = currentPosition + 1 | 0;
          actualParent = ensureNotNull(actualParent.parent);
        }
        if (actualParent.type !== MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance()) {
          if (equals(actualParent.value, 'mo')) {
            var upFunctionNode = ensureNotNull(actualParent.parent);
            var upBracketNode = ensureNotNull(upFunctionNode.parent);
            upBracketNode.children.removeAt_za3lpa$(get_lastIndex(upBracketNode.children));
            var parent_0 = ensureNotNull(upBracketNode.parent);
            parent_0.children.removeAt_za3lpa$(get_lastIndex(parent_0.children));
            upBracketNode.parent = null;
            parent_0.addChild_a7hfz6$(upFunctionNode);
            upBracketNode.endPosition = currentPosition + 1 | 0;
            actualParent.addChild_a7hfz6$(upBracketNode);
          }
           else
            return new ParserError(startPosition, "Unexpected ')'");
        }
         else if (!actualParent.needDoubleChild) {
          var node_0 = actualParent;
          actualParent.endPosition = currentPosition + 1 | 0;
          tmp$_4 = actualParent.parent;
          if (tmp$_4 == null) {
            return new ParserError(startPosition, "Unexpected ')'");
          }
          var parent_1 = tmp$_4;
          parent_1.children.removeAt_za3lpa$(get_lastIndex(parent_1.children));
          parent_1.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', startPosition, currentPosition + 1 | 0));
          last(parent_1.children).addChild_a7hfz6$(node_0);
          actualParent = parent_1;
        }
         else {
          actualParent.endPosition = currentPosition + 1 | 0;
          tmp$_5 = actualParent.parent;
          if (tmp$_5 == null) {
            return new ParserError(startPosition, "Unexpected ')'");
          }
          actualParent = tmp$_5;
        }
        numberOfOpenBrackets = numberOfOpenBrackets - 1 | 0;
        currentPosition = currentPosition + 1 | 0;
      }
       else if (this.expression.charCodeAt(currentPosition) === 44) {
        if (actualParent.needOneMoreBracket) {
          actualParent.endPosition = currentPosition;
          actualParent = ensureNotNull(actualParent.parent);
        }
        tmp$_6 = actualParent.parent;
        if (tmp$_6 == null) {
          return new ParserError(startPosition, "Unexpected ','");
        }
        var parent_2 = tmp$_6;
        if (!actualParent.needDoubleChild && parent_2.type === MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance()) {
          parent_2.children.removeAt_za3lpa$(get_lastIndex(parent_2.children));
          parent_2.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', actualParent.startPosition, currentPosition));
          last(parent_2.children).addChild_a7hfz6$(actualParent);
          actualParent = last(parent_2.children);
          actualParent.needDoubleChild = true;
        }
        if (actualParent.type !== MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance())
          return new ParserError(startPosition, "Unexpected ','");
        currentPosition = currentPosition + 1 | 0;
      }
       else if (this.expression.charCodeAt(currentPosition) === 61) {
        if (actualParent.needOneMoreBracket) {
          actualParent.endPosition = currentPosition;
          actualParent = ensureNotNull(actualParent.parent);
        }
        if (actualParent.type !== MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance())
          return new ParserError(startPosition, "Unexpected '='");
        currentPosition = currentPosition + 1 | 0;
      }
       else {
        while (currentPosition < this.expression.length && (inTag || (!this.isComplicatedTag_0(this.expression, currentPosition) && this.expression.charCodeAt(currentPosition) !== 40 && this.expression.charCodeAt(currentPosition) !== 41 && this.expression.charCodeAt(currentPosition) !== 123 && this.expression.charCodeAt(currentPosition) !== 125 && this.expression.charCodeAt(currentPosition) !== 44 && this.expression.charCodeAt(currentPosition) !== 61 && (this.expression.charCodeAt(currentPosition) !== 60 || actualParent.type !== MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance())))) {
          if (this.expression.charCodeAt(currentPosition) === 60)
            inTag = true;
          if (this.expression.charCodeAt(currentPosition) === 62)
            inTag = false;
          if (remainingExpressionStartsWith('\\left(', this.expression, currentPosition)) {
            currentPosition = currentPosition + 5 | 0;
            continue;
          }
           else if (remainingExpressionStartsWith('\\right)', this.expression, currentPosition)) {
            currentPosition = currentPosition + 6 | 0;
            continue;
          }
          value += String.fromCharCode(this.expression.charCodeAt(currentPosition));
          currentPosition = currentPosition + 1 | 0;
        }
        if (currentPosition < this.expression.length && this.expression.charCodeAt(currentPosition) === 61 && actualParent.isLatexArgument) {
          actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance(), value, startPosition, currentPosition));
          actualParent.endPosition = currentPosition;
          tmp$_7 = actualParent.parent;
          if (tmp$_7 == null) {
            return new ParserError(startPosition, "Unexpected '='");
          }
          var parent_3 = tmp$_7;
          parent_3.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', startPosition, void 0, void 0, void 0, void 0, void 0, void 0, true));
          actualParent = last(parent_3.children);
          currentPosition = currentPosition + 1 | 0;
        }
         else {
          if (currentPosition < this.expression.length && (this.expression.charCodeAt(currentPosition) === 44 || this.expression.charCodeAt(currentPosition) === 61 || this.expression.charCodeAt(currentPosition) === 41)) {
            if (actualParent.needOneMoreBracket) {
              actualParent.endPosition = currentPosition;
              actualParent = ensureNotNull(actualParent.parent);
            }
          }
          if (currentPosition < this.expression.length && (this.expression.charCodeAt(currentPosition) === 44 || this.expression.charCodeAt(currentPosition) === 61 || actualParent.needDoubleChild)) {
            if (actualParent.children.isEmpty() || actualParent.needDoubleChild || last(actualParent.children).type === MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance()) {
              actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', startPosition));
            }
            actualParent.needDoubleChild = true;
            last(actualParent.children).addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance(), value, startPosition, currentPosition));
            if (this.expression.charCodeAt(currentPosition) === 40) {
              actualParent = last(actualParent.children);
              actualParent.needOneMoreBracket = true;
            }
          }
           else {
            if (!isBlank(value)) {
              actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance(), value, startPosition, currentPosition));
            }
          }
        }
      }
      value = '';
    }
    if (numberOfOpenBrackets > 0)
      return new ParserError(this.expression.length - 1 | 0, 'closing bracket missing');
    if (actualParent !== this.bracketCompleteTagTree_0)
      return new ParserError(this.expression.length - 1 | 0, 'data not ended');
    actualParent.endPosition = currentPosition;
    return null;
  };
  function ExpressionTreeParser$parseLeaveStringExpressionParts$lambda(it) {
    return unboxChar(it) !== 62;
  }
  function ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_0(it) {
    return isLatinLetter(unboxChar(it));
  }
  function ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_1(it) {
    return unboxChar(it) !== 62;
  }
  function ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_2(it) {
    return unboxChar(it) !== 62;
  }
  function ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_3(it) {
    return unboxChar(it) !== 59;
  }
  function ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_4(it) {
    return unboxChar(it) !== 62;
  }
  function ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_5(it) {
    return unboxChar(it) !== 59;
  }
  function ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_6(it) {
    return unboxChar(it) !== 59;
  }
  ExpressionTreeParser.prototype.parseLeaveStringExpressionParts_0 = function (oldTreeActualParent, newTreeActualParent) {
    var state = ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_getInstance();
    var newTreeActualParent_0 = newTreeActualParent;
    if (equals(newTreeActualParent_0.value, 'mrow')) {
      newTreeActualParent_0 = ensureNotNull(newTreeActualParent_0.parent);
      newTreeActualParent_0.children.removeAt_za3lpa$(get_lastIndex(newTreeActualParent_0.children));
    }
    var newNodeCurrentPosition = 0;
    var leavedActualParentExpectedArgumentsCount = 0;
    var nextTexArgumentType = MathMlTagTreeNode$TexArgumentType$USUAL_getInstance();
    var additionPowArgumentExpected = false;
    var nodeIndex = 0;
    while (nodeIndex < oldTreeActualParent.children.size) {
      var node = oldTreeActualParent.children.get_za3lpa$(nodeIndex);
      var isNewTexFunction = false;
      if (node.type === MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance()) {
        var actualParent = newTreeActualParent_0;
        var currentPosition = newNodeCurrentPosition;
        var value = '';
        node.value = node.value + ' ';
        while (currentPosition < node.value.length) {
          if (isWhiteSpace(node.value, currentPosition)) {
            currentPosition = currentPosition + 1 | 0;
            continue;
          }
          if (this.isMathML && remainingExpressionStartsWith('&#xA0;', node.value, currentPosition)) {
            currentPosition = currentPosition + 6 | 0;
            continue;
          }
          if (remainingExpressionStartsWith('\\text', node.value, currentPosition)) {
            currentPosition = currentPosition + 5 | 0;
            continue;
          }
          if (this.isMathML && node.value.charCodeAt(currentPosition) === 60 && !this.isComplicatedTag_0(node.value, currentPosition)) {
            currentPosition = skipFromRemainingExpressionWhile(ExpressionTreeParser$parseLeaveStringExpressionParts$lambda, node.value, currentPosition);
            currentPosition = currentPosition + 1 | 0;
            continue;
          }
          if (leavedActualParentExpectedArgumentsCount > 0) {
            var isFunctionArgumentPart = leavedActualParentExpectedArgumentsCount === 1;
            if (isTexArgumentsSeparator(node.value.charCodeAt(currentPosition))) {
              if (node.value.charCodeAt(currentPosition) === 94) {
                nextTexArgumentType = MathMlTagTreeNode$TexArgumentType$POW_getInstance();
                if (additionPowArgumentExpected) {
                  leavedActualParentExpectedArgumentsCount = leavedActualParentExpectedArgumentsCount + 1 | 0;
                  additionPowArgumentExpected = false;
                }
              }
               else if (node.value.charCodeAt(currentPosition) === 95) {
                nextTexArgumentType = MathMlTagTreeNode$TexArgumentType$UNDERLINED_getInstance();
              }
              isFunctionArgumentPart = true;
              currentPosition = currentPosition + 1 | 0;
            }
            if (currentPosition >= node.value.length || isWhiteSpace(node.value, currentPosition)) {
              currentPosition = currentPosition + 1 | 0;
              continue;
            }
            if (isFunctionArgumentPart) {
              actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$NAME_getInstance(), String.fromCharCode(node.value.charCodeAt(currentPosition)), node.startPosition + currentPosition | 0, node.startPosition + currentPosition + 1 | 0, void 0, void 0, void 0, void 0, void 0, void 0, nextTexArgumentType));
              nextTexArgumentType = MathMlTagTreeNode$TexArgumentType$USUAL_getInstance();
              leavedActualParentExpectedArgumentsCount = leavedActualParentExpectedArgumentsCount - 1 | 0;
              isNewTexFunction = true;
              if (leavedActualParentExpectedArgumentsCount === 0) {
                if (newTreeActualParent_0.parent != null) {
                  newTreeActualParent_0 = ensureNotNull(newTreeActualParent_0.parent);
                  actualParent = newTreeActualParent_0;
                }
                 else {
                  return new ParserError(node.startPosition + currentPosition | 0, 'Expected for closing bracket');
                }
              }
              currentPosition = currentPosition + 1 | 0;
              continue;
            }
          }
          var startPosition = currentPosition;
          if (node.value.charCodeAt(currentPosition) === 92 && (currentPosition + 1 | 0) < node.value.length && isLatinLetter(node.value.charCodeAt(currentPosition + 1 | 0))) {
            var other = readFromRemainingExpressionWhile(ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_0, node.value, currentPosition + 1 | 0);
            var texName = String.fromCharCode(92) + other;
            var texFunction = this.functionConfiguration.slashToSpaceFunctionDefinitionsMap.get_11rb$(texName);
            if (texFunction != null) {
              currentPosition = currentPosition + texName.length | 0;
              actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), texName, node.startPosition + startPosition | 0, node.startPosition + currentPosition - 1 | 0, void 0, texFunction.definitionType));
              leavedActualParentExpectedArgumentsCount = texFunction.definitionArgumentsCount;
              additionPowArgumentExpected = texFunction.powSeparatedAsPow;
              if (leavedActualParentExpectedArgumentsCount > 0) {
                newTreeActualParent_0 = last(actualParent.children);
                actualParent = newTreeActualParent_0;
                isNewTexFunction = true;
              }
              continue;
            }
            var variable = texToUnicode.get_11rb$(texName);
            if (variable != null) {
              currentPosition = currentPosition + texName.length | 0;
              actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$NAME_getInstance(), variable, node.startPosition + startPosition | 0, node.startPosition + startPosition - 1 | 0));
              state = ExpressionTreeParser$ParserState$NUMBER_READ_getInstance();
              continue;
            }
          }
          var completeSign = this.getCompleteSign_0(node.value, currentPosition);
          if (completeSign != null) {
            currentPosition = currentPosition + completeSign.first.length | 0;
            state = ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_getInstance();
            actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$OPERATION_getInstance(), ensureNotNull(completeSign).first, node.startPosition + startPosition | 0, node.startPosition + currentPosition - 1 | 0, void 0, completeSign.second));
            if (completeSign.second === StringDefinitionType$BINARY_OPERATION_getInstance()) {
              state = ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_getInstance();
            }
          }
           else if (isBinarySignPart(node.value.charCodeAt(currentPosition), prevCharOrSpace(node.value, currentPosition), this.isMathML, this.functionConfiguration.hasUpAnd())) {
            value += String.fromCharCode(node.value.charCodeAt(currentPosition));
            currentPosition = currentPosition + 1 | 0;
            while (currentPosition < node.value.length) {
              if (this.isMathML && node.value.charCodeAt(currentPosition) === 60 && !this.isComplicatedTag_0(node.value, currentPosition)) {
                currentPosition = skipFromRemainingExpressionWhile(ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_1, node.value, currentPosition);
                currentPosition = currentPosition + 1 | 0;
                continue;
              }
              if (isBinarySignPart(node.value.charCodeAt(currentPosition), prevCharOrSpace(node.value, currentPosition), this.isMathML, this.functionConfiguration.hasUpAnd()) && this.getTexFunction_0(node.value, currentPosition) == null) {
                value += String.fromCharCode(node.value.charCodeAt(currentPosition));
                currentPosition = currentPosition + 1 | 0;
              }
               else {
                actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$OPERATION_getInstance(), value, node.startPosition + startPosition | 0, node.startPosition + currentPosition - 1 | 0, void 0, StringDefinitionType$BINARY_OPERATION_getInstance()));
                break;
              }
            }
            state = ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_getInstance();
          }
           else if (isUnarySignPart(node.value.charCodeAt(currentPosition))) {
            var stringDefinitionType = state === ExpressionTreeParser$ParserState$WAIT_FOR_NUMBER_getInstance() ? StringDefinitionType$UNARY_LEFT_OPERATION_getInstance() : StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance();
            value += String.fromCharCode(node.value.charCodeAt(currentPosition));
            currentPosition = currentPosition + 1 | 0;
            while (currentPosition < node.value.length) {
              if (this.isMathML && node.value.charCodeAt(currentPosition) === 60 && !this.isComplicatedTag_0(node.value, currentPosition)) {
                currentPosition = skipFromRemainingExpressionWhile(ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_2, node.value, currentPosition);
                currentPosition = currentPosition + 1 | 0;
                continue;
              }
              if (isUnarySignPart(node.value.charCodeAt(currentPosition)) && this.functionConfiguration.isPrefixOfUnarySignLongerOneSymbol_opqyph$(value + String.fromCharCode(toBoxedChar(node.value.charCodeAt(currentPosition))), stringDefinitionType)) {
                value += String.fromCharCode(node.value.charCodeAt(currentPosition));
                currentPosition = currentPosition + 1 | 0;
              }
               else {
                actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$OPERATION_getInstance(), value, node.startPosition + startPosition | 0, node.startPosition + currentPosition - 1 | 0, void 0, stringDefinitionType));
                break;
              }
            }
          }
           else if (isNamePart(node.value.charCodeAt(currentPosition)) || (node.value.charCodeAt(currentPosition) === 38 && this.isMathML)) {
            state = ExpressionTreeParser$ParserState$NUMBER_READ_getInstance();
            if (isNamePart(node.value.charCodeAt(currentPosition))) {
              value += String.fromCharCode(node.value.charCodeAt(currentPosition));
              currentPosition = currentPosition + 1 | 0;
            }
             else {
              var specialSymbol = readFromRemainingExpressionWhile(ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_3, node.value, currentPosition);
              currentPosition = currentPosition + (specialSymbol.length + 1) | 0;
              value += specialSymbol + ';';
            }
            while (currentPosition < node.value.length) {
              if (this.isMathML && node.value.charCodeAt(currentPosition) === 60 && !this.isComplicatedTag_0(node.value, currentPosition)) {
                currentPosition = skipFromRemainingExpressionWhile(ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_4, node.value, currentPosition);
                currentPosition = currentPosition + 1 | 0;
                continue;
              }
              if (isNamePart(node.value.charCodeAt(currentPosition)) || node.value.charCodeAt(currentPosition) === 46 || (node.value.charCodeAt(currentPosition) === 38 && this.isMathML)) {
                if (node.value.charCodeAt(currentPosition) !== 38) {
                  value += String.fromCharCode(node.value.charCodeAt(currentPosition));
                  currentPosition = currentPosition + 1 | 0;
                }
                 else {
                  var specialSymbol_0 = readFromRemainingExpressionWhile(ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_5, node.value, currentPosition);
                  currentPosition = currentPosition + (specialSymbol_0.length + 1) | 0;
                  value += specialSymbol_0 + ';';
                }
              }
               else {
                var i = 0;
                while (i < value.length) {
                  var currentValue = StringBuilder_init_0();
                  var startI = i;
                  if (isDigit(value.charCodeAt(i)) || value.charCodeAt(i) === 46) {
                    while (i < value.length && (isDigit(value.charCodeAt(i)) || value.charCodeAt(i) === 46)) {
                      currentValue.append_s8itvh$(value.charCodeAt(i));
                      i = i + 1 | 0;
                    }
                    if (currentValue.length > 0)
                      actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$NAME_getInstance(), currentValue.toString(), node.startPosition + startPosition + startI | 0, node.startPosition + startPosition + i | 0));
                  }
                   else if (value.charCodeAt(i) === 38) {
                    var specialSymbol_1 = readFromRemainingExpressionWhile(ExpressionTreeParser$parseLeaveStringExpressionParts$lambda_6, value, i);
                    i = i + (specialSymbol_1.length + 1) | 0;
                    currentValue.append_gw00v9$(specialSymbol_1);
                    if (!startsWith_1(currentValue, '&#xA0'))
                      actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$NAME_getInstance(), currentValue.toString(), node.startPosition + startPosition + startI | 0, node.startPosition + startPosition + i | 0));
                  }
                   else {
                    while (i < value.length && value.charCodeAt(i) !== 46 && value.charCodeAt(i) !== 38) {
                      currentValue.append_s8itvh$(value.charCodeAt(i));
                      i = i + 1 | 0;
                    }
                    if (currentValue.length > 0)
                      actualParent.addChild_a7hfz6$(new MathMlTagTreeNode(MathMlTagTreeNode$Type$NAME_getInstance(), currentValue.toString(), node.startPosition + startPosition + startI | 0, node.startPosition + startPosition + i | 0));
                  }
                }
                break;
              }
            }
          }
           else {
            return new ParserError(node.startPosition + startPosition | 0, "Unexpected: '" + String.fromCharCode(toBoxedChar(node.value.charCodeAt(currentPosition))) + "'");
          }
          value = '';
        }
        if (newTreeActualParent_0.value.length > 0 && !isNewTexFunction && actualParent.children.size === 0) {
          newTreeActualParent_0.children.removeAt_za3lpa$(get_lastIndex(newTreeActualParent_0.children));
        }
      }
       else {
        if (this.isMathML && (equals(node.value, 'math') || equals(node.value, 'mn') || equals(node.value, 'mo') || equals(node.value, 'mi') || equals(node.value, 'mspace') || equals(node.value, 'mtext') || equals(node.value, 'mstack') || equals(node.value, 'maction')))
          node.value = '';
        if (!this.isMathML || !equals(node.value, 'mstyle')) {
          newTreeActualParent_0.addChild_a7hfz6$(node.copy_6krzgf$());
          state = ExpressionTreeParser$ParserState$NUMBER_READ_getInstance();
          var res = this.parseLeaveStringExpressionParts_0(node, last(newTreeActualParent_0.children));
          if (res != null)
            return res;
          if (last(newTreeActualParent_0.children).value.length === 0 && last(newTreeActualParent_0.children).children.isEmpty())
            newTreeActualParent_0.children.removeAt_za3lpa$(get_lastIndex(newTreeActualParent_0.children));
        }
         else {
          state = ExpressionTreeParser$ParserState$NUMBER_READ_getInstance();
          var res_0 = this.parseLeaveStringExpressionParts_0(node, newTreeActualParent_0);
          if (res_0 != null)
            return res_0;
        }
      }
      if (leavedActualParentExpectedArgumentsCount > 0 && !isNewTexFunction) {
        last(newTreeActualParent_0.children).texArgumentType = nextTexArgumentType;
        nextTexArgumentType = MathMlTagTreeNode$TexArgumentType$USUAL_getInstance();
        leavedActualParentExpectedArgumentsCount = leavedActualParentExpectedArgumentsCount - 1 | 0;
        if (leavedActualParentExpectedArgumentsCount === 0) {
          if (newTreeActualParent_0.parent != null) {
            newTreeActualParent_0 = ensureNotNull(newTreeActualParent_0.parent);
          }
           else {
            return new ParserError(node.startPosition + this.currentPosition_0 | 0, 'Expected for closing bracket');
          }
        }
      }
      nodeIndex = nodeIndex + 1 | 0;
    }
    return null;
  };
  ExpressionTreeParser.prototype.multipleFunctionsHandling_0 = function (oldTreeActualParent, newTreeActualParent, curIndex) {
    if (curIndex === void 0)
      curIndex = 0;
    var tmp$;
    var i = 0;
    var currentNewNode = null;
    if (oldTreeActualParent.type === MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance() && this.isMathMlMultipleTag_0(oldTreeActualParent.value, 0)) {
      var tmp$_0 = !oldTreeActualParent.children.isEmpty();
      if (tmp$_0) {
        tmp$_0 = !oldTreeActualParent.children.get_za3lpa$(0).children.isEmpty();
      }
      var tmp$_1 = tmp$_0;
      if (tmp$_1) {
        tmp$_1 = !isBlank(oldTreeActualParent.children.get_za3lpa$(0).children.get_za3lpa$(0).value);
      }
      if (tmp$_1 && !contains_0(oldTreeActualParent.toString(), 39)) {
        newTreeActualParent.value = newTreeActualParent.value + oldTreeActualParent.children.get_za3lpa$(0).children.get_za3lpa$(0).value;
        if (oldTreeActualParent.children.get_za3lpa$(0).children.size > 1) {
          var exprParent = new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', void 0, void 0, oldTreeActualParent.parent);
          tmp$ = oldTreeActualParent.children.get_za3lpa$(0).children.size;
          for (var j = 1; j < tmp$; j++) {
            exprParent.addChild_a7hfz6$(oldTreeActualParent.children.get_za3lpa$(0).children.get_za3lpa$(j));
          }
          ensureNotNull(oldTreeActualParent.parent).children.add_wxm5ur$(curIndex + 1 | 0, exprParent);
        }
        i = i + 1 | 0;
      }
       else if (equals(oldTreeActualParent.value, 'msubsup')) {
        newTreeActualParent.value = newTreeActualParent.value + last(oldTreeActualParent.children).children.get_za3lpa$(0).value;
        newTreeActualParent.type = MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance();
        oldTreeActualParent.children.removeAt_za3lpa$(get_lastIndex(oldTreeActualParent.children));
      }
    }
    while (i < oldTreeActualParent.children.size) {
      if (equals(oldTreeActualParent.children.get_za3lpa$(i).value, 'mfenced')) {
        oldTreeActualParent.children.get_za3lpa$(i).value = '';
      }
      var tmp$_2 = (i + 1 | 0) < oldTreeActualParent.children.size && equals(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).value, 'msup') && oldTreeActualParent.children.get_za3lpa$(i).type === MathMlTagTreeNode$Type$NAME_getInstance();
      if (tmp$_2) {
        tmp$_2 = oldTreeActualParent.children.get_za3lpa$(i).value.length > 0;
      }
      var tmp$_3 = tmp$_2 && isLetterOrUnderscore(oldTreeActualParent.children.get_za3lpa$(i).value.charCodeAt(0)) && oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(0).children.size > 0;
      if (tmp$_3) {
        tmp$_3 = oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(0).value.length === 0;
      }
      var tmp$_4 = tmp$_3 && oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(0).children.get_za3lpa$(0).type === MathMlTagTreeNode$Type$NAME_getInstance();
      if (tmp$_4) {
        tmp$_4 = oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(0).children.get_za3lpa$(0).value.length > 0;
      }
      if (tmp$_4 && isLetterOrUnderscore(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(0).children.get_za3lpa$(0).value.charCodeAt(0))) {
        oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(0).children.get_za3lpa$(0).value = oldTreeActualParent.children.get_za3lpa$(i).value + oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(0).children.get_za3lpa$(0).value;
        i = i + 1 | 0;
        continue;
      }
      var newNode = oldTreeActualParent.children.get_za3lpa$(i).copy_6krzgf$();
      this.multipleFunctionsHandling_0(oldTreeActualParent.children.get_za3lpa$(i), newNode, i);
      if (oldTreeActualParent.children.get_za3lpa$(i).type === MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance() && this.isMathMlMultipleTag_0(oldTreeActualParent.children.get_za3lpa$(i).value, 0) && !contains_0(newNode.toString(), 39)) {
        if ((i + 1 | 0) >= oldTreeActualParent.children.size || oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).type === MathMlTagTreeNode$Type$OPERATION_getInstance())
          return new ParserError(oldTreeActualParent.children.get_za3lpa$(i).startPosition, 'data is not complete');
        if (currentNewNode == null) {
          newTreeActualParent.addChild_a7hfz6$(newNode);
        }
         else {
          currentNewNode.addChild_a7hfz6$(newNode);
        }
        currentNewNode = newNode;
      }
       else {
        if (currentNewNode == null) {
          newTreeActualParent.addChild_a7hfz6$(newNode);
        }
         else {
          currentNewNode.addChild_a7hfz6$(newNode);
        }
        currentNewNode = null;
      }
      i = i + 1 | 0;
    }
    return null;
  };
  ExpressionTreeParser.prototype.getExpressionParserNodeOperationType_0 = function (value, type) {
    return isUnarySignPart(value.charCodeAt(0)) || equals(type, StringDefinitionType$UNARY_LEFT_OPERATION_getInstance()) || equals(type, StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance()) ? ExpressionParserNode$Type$UNARY_OPERATION_getInstance() : ExpressionParserNode$Type$BINARY_OPERATION_getInstance();
  };
  ExpressionTreeParser.prototype.mathMlTreeToExpressionTree_0 = function (oldTreeActualParent, newTreeActualParent) {
    var tmp$, tmp$_0;
    var i = 0;
    var cashedChildExpressionTreesMap = LinkedHashMap_init_0();
    loop_label: while (i < oldTreeActualParent.children.size) {
      if (equals(oldTreeActualParent.children.get_za3lpa$(i).value, '')) {
        if (i > 0 && oldTreeActualParent.children.get_za3lpa$(i - 1 | 0).type === MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance() && newTreeActualParent.children.size > 0 && last(newTreeActualParent.children).children.size > 0) {
          var possibleFunctionNode = last(newTreeActualParent.children).getFirstListNodeAfterFunction_6taknv$();
          if (possibleFunctionNode != null && possibleFunctionNode.type === ExpressionParserNode$Type$VARIABLE_getInstance()) {
            var functionDefinition = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(possibleFunctionNode.value, StringDefinitionType$FUNCTION_getInstance(), oldTreeActualParent.children.get_za3lpa$(i).children.size, this.nameForRuleDesignationsPossible);
            if (functionDefinition != null) {
              possibleFunctionNode.type = ExpressionParserNode$Type$FUNCTION_getInstance();
              possibleFunctionNode.functionStringDefinition = functionDefinition;
              possibleFunctionNode.endPosition = oldTreeActualParent.children.get_za3lpa$(i).endPosition;
              var res = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i), possibleFunctionNode);
              if (res != null)
                return res;
              i = i + 1 | 0;
              continue loop_label;
            }
          }
        }
        if (cashedChildExpressionTreesMap.get_11rb$(i) != null) {
          newTreeActualParent.addChild_75veaa$(ensureNotNull(cashedChildExpressionTreesMap.get_11rb$(i)));
        }
         else {
          newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '', oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition));
          var res_0 = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i), last(newTreeActualParent.children));
          if (res_0 != null)
            return res_0;
        }
        i = i + 1 | 0;
        continue loop_label;
      }
       else if (equals(oldTreeActualParent.children.get_za3lpa$(i).value, 'msub')) {
        var mainValue = oldTreeActualParent.children.get_za3lpa$(i).children.get_za3lpa$(0).getNodeString();
        var subValue = oldTreeActualParent.children.get_za3lpa$(i).children.get_za3lpa$(1).getNodeString();
        var newValue = mainValue + ',' + subValue;
        if (isUnarySignPart(newValue.charCodeAt(0)) || isBinarySignPart(newValue.charCodeAt(0), 32, this.isMathML) || this.isCompleteBinarySign_0(newValue, 0)) {
          var functionDefinition_0 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(newValue, ensureNotNull(oldTreeActualParent.children.get_za3lpa$(i).stringDefinitionType), -1);
          if (functionDefinition_0 == null)
            return new ParserError(oldTreeActualParent.children.get_za3lpa$(i).startPosition, "Unknown operation: '" + newValue + "'");
          else
            newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(this.getExpressionParserNodeOperationType_0(newValue, null), functionDefinition_0.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition, void 0, void 0, functionDefinition_0));
        }
         else {
          var functionDefinition_1 = null;
          if ((i + 1 | 0) < oldTreeActualParent.children.size)
            functionDefinition_1 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(newValue, StringDefinitionType$FUNCTION_getInstance(), oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.size, this.nameForRuleDesignationsPossible);
          if (functionDefinition_1 == null || !equals(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).value, '')) {
            if ((i + 1 | 0) < oldTreeActualParent.children.size)
              functionDefinition_1 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(mainValue, StringDefinitionType$FUNCTION_getInstance(), oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.size + 1 | 0, this.nameForRuleDesignationsPossible, true);
            if (functionDefinition_1 == null || !equals(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).value, ''))
              newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), newValue, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition, subValue));
            else {
              if (oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.isEmpty()) {
                oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).addChild_a7hfz6$(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).copy_6krzgf$());
                oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).value = '';
                oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).type = MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance();
              }
              oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).addChild_a7hfz6$(oldTreeActualParent.children.get_za3lpa$(i).children.get_za3lpa$(1));
              newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), functionDefinition_1.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).endPosition, void 0, void 0, functionDefinition_1));
              i = i + 1 | 0;
              var res_1 = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i), last(newTreeActualParent.children));
              if (res_1 != null)
                return res_1;
            }
          }
           else {
            newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), functionDefinition_1.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).endPosition, void 0, void 0, functionDefinition_1));
            i = i + 1 | 0;
            var res_2 = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i), last(newTreeActualParent.children));
            if (res_2 != null)
              return res_2;
          }
        }
        i = i + 1 | 0;
        continue loop_label;
      }
       else if (oldTreeActualParent.children.get_za3lpa$(i).type === MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance()) {
        tmp$ = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(oldTreeActualParent.children.get_za3lpa$(i).value, StringDefinitionType$FUNCTION_getInstance(), oldTreeActualParent.children.get_za3lpa$(i).children.size, this.nameForRuleDesignationsPossible);
        if (tmp$ == null) {
          return new ParserError(oldTreeActualParent.children.get_za3lpa$(i).startPosition, "Unknown function: '" + oldTreeActualParent.children.get_za3lpa$(i).value + "' with '" + toString(oldTreeActualParent.children.get_za3lpa$(i).children.size) + "' arguments");
        }
        var functionDefinition_2 = tmp$;
        newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), functionDefinition_2.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition, void 0, void 0, functionDefinition_2));
        var res_3 = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i), last(newTreeActualParent.children));
        if (res_3 != null)
          return res_3;
        i = i + 1 | 0;
        continue loop_label;
      }
       else if ((i + 1 | 0) < oldTreeActualParent.children.size && oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).type === MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance() && equals(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).value, 'msub')) {
        var mainValue_0 = oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(0).getNodeString();
        var functionDefinition_3 = null;
        if ((i + 2 | 0) < oldTreeActualParent.children.size) {
          functionDefinition_3 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(mainValue_0, StringDefinitionType$FUNCTION_getInstance(), oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).children.size + 1 | 0, this.nameForRuleDesignationsPossible, true);
          if (functionDefinition_3 != null) {
            newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), oldTreeActualParent.children.get_za3lpa$(i).value, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition));
            if (oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).children.isEmpty()) {
              oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).addChild_a7hfz6$(oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).copy_6krzgf$());
              oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).value = '';
              oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).type = MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance();
            }
            oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).addChild_a7hfz6$(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(1));
            newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), functionDefinition_3.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).endPosition, void 0, void 0, functionDefinition_3));
            i = i + 2 | 0;
            var res_4 = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i), last(newTreeActualParent.children));
            if (res_4 != null)
              return res_4;
            i = i + 1 | 0;
            continue loop_label;
          }
        }
        var iPlusOneTypeOperation = isUnarySignPart(mainValue_0.charCodeAt(0)) || isBinarySignPart(mainValue_0.charCodeAt(0), 32, this.isMathML) || this.isCompleteBinarySign_0(mainValue_0, 0);
        var iTypeOperation = isUnarySignPart(oldTreeActualParent.children.get_za3lpa$(i).value.charCodeAt(0)) || isBinarySignPart(oldTreeActualParent.children.get_za3lpa$(i).value.charCodeAt(0), 32, this.isMathML) || this.isCompleteBinarySign_0(oldTreeActualParent.children.get_za3lpa$(i).value, 0);
        if (iPlusOneTypeOperation === iTypeOperation) {
          var subValue_0 = oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).children.get_za3lpa$(1).getNodeString();
          var newValue_0 = oldTreeActualParent.children.get_za3lpa$(i).value + mainValue_0 + ',' + subValue_0;
          if (isUnarySignPart(newValue_0.charCodeAt(0)) || isBinarySignPart(newValue_0.charCodeAt(0), 32, this.isMathML) || this.isCompleteBinarySign_0(newValue_0, 0)) {
            var functionDefinition_4 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(newValue_0, ensureNotNull(oldTreeActualParent.children.get_za3lpa$(i).stringDefinitionType), -1);
            if (functionDefinition_4 == null)
              return new ParserError(oldTreeActualParent.children.get_za3lpa$(i).startPosition, "Unknown operation: '" + newValue_0 + "'");
            else
              newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(this.getExpressionParserNodeOperationType_0(newValue_0, null), functionDefinition_4.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).endPosition, void 0, void 0, functionDefinition_4));
          }
           else {
            var functionDefinition_5 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(newValue_0, StringDefinitionType$FUNCTION_getInstance(), oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).children.size, this.nameForRuleDesignationsPossible);
            if (functionDefinition_5 == null || (i + 2 | 0) >= oldTreeActualParent.children.size || !equals(oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).value, ''))
              newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), newValue_0, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).endPosition, subValue_0));
            else {
              newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), functionDefinition_5.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i + 2 | 0).endPosition, void 0, void 0, functionDefinition_5));
              i = i + 1 | 0;
              var res_5 = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i + 2 | 0), last(newTreeActualParent.children));
              if (res_5 != null)
                return res_5;
            }
          }
          i = i + 1 | 0;
          continue loop_label;
        }
      }
      if (oldTreeActualParent.children.get_za3lpa$(i).type === MathMlTagTreeNode$Type$OPERATION_getInstance()) {
        var functionDefinition_6 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(oldTreeActualParent.children.get_za3lpa$(i).value, ensureNotNull(oldTreeActualParent.children.get_za3lpa$(i).stringDefinitionType), ensureNotNull(oldTreeActualParent.children.get_za3lpa$(i).stringDefinitionType) === StringDefinitionType$BINARY_OPERATION_getInstance() ? -1 : 1);
        if (functionDefinition_6 == null)
          return new ParserError(oldTreeActualParent.children.get_za3lpa$(i).startPosition, "Unknown operation: '" + oldTreeActualParent.children.get_za3lpa$(i).value + "'");
        else if (i === get_lastIndex(oldTreeActualParent.children) && ensureNotNull(oldTreeActualParent.children.get_za3lpa$(i).stringDefinitionType) !== StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance()) {
          return new ParserError(oldTreeActualParent.children.get_za3lpa$(i).startPosition, "Operation: '" + oldTreeActualParent.children.get_za3lpa$(i).value + "' is not right unary");
        }
         else
          newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(this.getExpressionParserNodeOperationType_0(oldTreeActualParent.children.get_za3lpa$(i).value, oldTreeActualParent.children.get_za3lpa$(i).stringDefinitionType), functionDefinition_6.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition, void 0, void 0, functionDefinition_6));
        i = i + 1 | 0;
        continue loop_label;
      }
       else if (oldTreeActualParent.children.get_za3lpa$(i).type === MathMlTagTreeNode$Type$NAME_getInstance() || oldTreeActualParent.children.get_za3lpa$(i).children.isEmpty()) {
        if (startsWith(oldTreeActualParent.children.get_za3lpa$(i).value, '&')) {
          var functionDefinition_7 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(oldTreeActualParent.children.get_za3lpa$(i).value, StringDefinitionType$BINARY_OPERATION_getInstance(), -1);
          if (functionDefinition_7 == null)
            functionDefinition_7 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(oldTreeActualParent.children.get_za3lpa$(i).value, StringDefinitionType$UNARY_LEFT_OPERATION_getInstance(), 1);
          else {
            newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$BINARY_OPERATION_getInstance(), functionDefinition_7.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition, void 0, void 0, functionDefinition_7));
            i = i + 1 | 0;
            continue loop_label;
          }
          if (functionDefinition_7 != null) {
            newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$UNARY_OPERATION_getInstance(), functionDefinition_7.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition, void 0, void 0, functionDefinition_7));
            i = i + 1 | 0;
            continue loop_label;
          }
        }
        if ((i + 1 | 0) >= oldTreeActualParent.children.size || !equals(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).value, ''))
          newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), oldTreeActualParent.children.get_za3lpa$(i).value, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition));
        else {
          var newParentNode = new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '');
          var res_6 = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0), newParentNode);
          if (res_6 != null)
            return res_6;
          var functionDefinition_8 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(oldTreeActualParent.children.get_za3lpa$(i).value, StringDefinitionType$FUNCTION_getInstance(), newParentNode.children.size, this.nameForRuleDesignationsPossible);
          if (functionDefinition_8 == null) {
            cashedChildExpressionTreesMap.put_xwzc9p$(i + 1 | 0, newParentNode);
            newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), oldTreeActualParent.children.get_za3lpa$(i).value, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition));
          }
           else {
            newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), functionDefinition_8.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i + 1 | 0).endPosition, void 0, void 0, functionDefinition_8));
            var res_7 = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i + 1 | 0), last(newTreeActualParent.children));
            if (res_7 != null)
              return res_7;
            i = i + 1 | 0;
          }
        }
        i = i + 1 | 0;
        continue loop_label;
      }
       else {
        tmp$_0 = this.functionConfiguration.findFunctionStringDefinition_3y6sv6$(oldTreeActualParent.children.get_za3lpa$(i).value, StringDefinitionType$FUNCTION_getInstance(), oldTreeActualParent.children.get_za3lpa$(i).children.size, this.nameForRuleDesignationsPossible);
        if (tmp$_0 == null) {
          return new ParserError(oldTreeActualParent.children.get_za3lpa$(i).startPosition, "Unknown function: '" + oldTreeActualParent.children.get_za3lpa$(i).value + "' with '" + toString(oldTreeActualParent.children.get_za3lpa$(i).children.size) + "' arguments");
        }
        var functionDefinition_9 = tmp$_0;
        var tmp$_1 = functionDefinition_9.powSeparatedAsPow;
        if (tmp$_1) {
          var $receiver = oldTreeActualParent.children.get_za3lpa$(i).children;
          var any$result;
          any$break: do {
            var tmp$_2;
            if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
              any$result = false;
              break any$break;
            }
            tmp$_2 = $receiver.iterator();
            while (tmp$_2.hasNext()) {
              var element = tmp$_2.next();
              if (element.texArgumentType === MathMlTagTreeNode$TexArgumentType$POW_getInstance()) {
                any$result = true;
                break any$break;
              }
            }
            any$result = false;
          }
           while (false);
          tmp$_1 = any$result;
        }
        if (tmp$_1) {
          newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '^', oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition, void 0, void 0, ensureNotNull(this.functionConfiguration.fastFindStringDefinitionByNameAndNumberOfArguments_bm4lxs$('^', -1))));
          var $receiver_0 = oldTreeActualParent.children.get_za3lpa$(i).children;
          var indexOfFirst$result;
          indexOfFirst$break: do {
            var tmp$_3;
            var index = 0;
            tmp$_3 = $receiver_0.iterator();
            while (tmp$_3.hasNext()) {
              var item = tmp$_3.next();
              if (item.texArgumentType === MathMlTagTreeNode$TexArgumentType$POW_getInstance()) {
                indexOfFirst$result = index;
                break indexOfFirst$break;
              }
              index = index + 1 | 0;
            }
            indexOfFirst$result = -1;
          }
           while (false);
          var powIndex = indexOfFirst$result;
          var pow = new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', oldTreeActualParent.children.get_za3lpa$(i).children.get_za3lpa$(powIndex).startPosition, oldTreeActualParent.children.get_za3lpa$(i).children.get_za3lpa$(powIndex).endPosition);
          pow.addChild_a7hfz6$(oldTreeActualParent.children.get_za3lpa$(i).children.get_za3lpa$(powIndex));
          oldTreeActualParent.children.get_za3lpa$(i).children.removeAt_za3lpa$(powIndex);
          var currentFunctionParent = new MathMlTagTreeNode(MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance(), '', oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition);
          currentFunctionParent.addChild_a7hfz6$(oldTreeActualParent.children.get_za3lpa$(i));
          var res_8 = this.mathMlTreeToExpressionTree_0(currentFunctionParent, last(newTreeActualParent.children));
          if (res_8 != null)
            return res_8;
          res_8 = this.mathMlTreeToExpressionTree_0(pow, last(newTreeActualParent.children));
          if (res_8 != null)
            return res_8;
        }
         else {
          newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), functionDefinition_9.function.function, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition, void 0, void 0, functionDefinition_9));
          if (functionDefinition_9.underlinedAsLast) {
            var $receiver_1 = oldTreeActualParent.children.get_za3lpa$(i).children;
            var indexOfFirst$result_0;
            indexOfFirst$break: do {
              var tmp$_4;
              var index_0 = 0;
              tmp$_4 = $receiver_1.iterator();
              while (tmp$_4.hasNext()) {
                var item_0 = tmp$_4.next();
                if (item_0.texArgumentType === MathMlTagTreeNode$TexArgumentType$UNDERLINED_getInstance()) {
                  indexOfFirst$result_0 = index_0;
                  break indexOfFirst$break;
                }
                index_0 = index_0 + 1 | 0;
              }
              indexOfFirst$result_0 = -1;
            }
             while (false);
            var underlinedIndex = indexOfFirst$result_0;
            swap(oldTreeActualParent.children.get_za3lpa$(i).children, underlinedIndex, get_lastIndex(oldTreeActualParent.children.get_za3lpa$(i).children));
          }
          var res_9 = this.mathMlTreeToExpressionTree_0(oldTreeActualParent.children.get_za3lpa$(i), last(newTreeActualParent.children));
          if (res_9 != null)
            return res_9;
        }
        i = i + 1 | 0;
        continue loop_label;
      }
    }
    return null;
  };
  ExpressionTreeParser.prototype.isCompleteBinarySign_0 = function (value, currentPosition) {
    var $receiver = this.completeBinarySigns_0;
    var any$result;
    any$break: do {
      var tmp$;
      if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
        any$result = false;
        break any$break;
      }
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (remainingExpressionStartsWith(element, value, currentPosition)) {
          any$result = true;
          break any$break;
        }
      }
      any$result = false;
    }
     while (false);
    return any$result;
  };
  ExpressionTreeParser.prototype.getCompleteSign_0 = function (value, currentPosition) {
    var tmp$, tmp$_0;
    tmp$ = this.completeBinarySigns_0.iterator();
    while (tmp$.hasNext()) {
      var sign = tmp$.next();
      if (remainingExpressionStartsWith(sign, value, currentPosition)) {
        return new Pair(sign, StringDefinitionType$BINARY_OPERATION_getInstance());
      }
    }
    tmp$_0 = this.functionConfiguration.slashToSpaceDefinitions.iterator();
    while (tmp$_0.hasNext()) {
      var sign_0 = tmp$_0.next();
      if (remainingExpressionStartsWith(sign_0.first, value, currentPosition)) {
        return sign_0;
      }
    }
    return null;
  };
  ExpressionTreeParser.prototype.getTexFunction_0 = function (value, currentPosition) {
    var tmp$;
    tmp$ = this.functionConfiguration.slashToSpaceFunctionDefinitions.iterator();
    while (tmp$.hasNext()) {
      var function_0 = tmp$.next();
      if (remainingExpressionStartsWith(function_0.first, value, currentPosition)) {
        return function_0;
      }
    }
    return null;
  };
  ExpressionTreeParser.prototype.replaceComplexOne_0 = function (oldTreeActualParent, newTreeActualParent, currentLevel, onlyZeroNumberOfChildInSorP) {
    if (currentLevel === void 0)
      currentLevel = 0;
    if (onlyZeroNumberOfChildInSorP === void 0)
      onlyZeroNumberOfChildInSorP = false;
    if (oldTreeActualParent.children.size === 0) {
      return null;
    }
    var i = 0;
    if ((equals(oldTreeActualParent.value, 'P') || equals(oldTreeActualParent.value, 'S')) && oldTreeActualParent.children.size === 4) {
      this.SorPLevels_0.add_11rb$(currentLevel);
    }
    var tmp$ = !this.SorPLevels_0.isEmpty() && this.SorPLevels_0.get_za3lpa$(get_lastIndex(this.SorPLevels_0)) < currentLevel && onlyZeroNumberOfChildInSorP;
    if (tmp$) {
      tmp$ = oldTreeActualParent.children.get_za3lpa$(0).value.length > 0;
    }
    if (tmp$ && (oldTreeActualParent.children.get_za3lpa$(0).value.charCodeAt(0) === 105 || last_0(oldTreeActualParent.children.get_za3lpa$(0).value) === 105)) {
      var $receiver = this.notReplacementVariables_0;
      var key = this.SorPLevels_0.get_za3lpa$(get_lastIndex(this.SorPLevels_0));
      var value = oldTreeActualParent.children.get_za3lpa$(0).value;
      $receiver.put_xwzc9p$(key, value);
    }
    while (i < oldTreeActualParent.children.size) {
      if (oldTreeActualParent.children.get_za3lpa$(i).type === ExpressionParserNode$Type$VARIABLE_getInstance() && !this.notReplacementVariables_0.containsValue_11rc$(oldTreeActualParent.children.get_za3lpa$(i).value)) {
        switch (oldTreeActualParent.children.get_za3lpa$(i).value) {
          case 'i':
            newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), this.complexVar_0, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).startPosition + 1 | 0));
            break;
          case 'pi':
            newTreeActualParent.addChild_75veaa$(oldTreeActualParent.children.get_za3lpa$(i).copy_b1re41$());
            break;
          case 'ipi':
            var newNode = new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '', oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition + 1 | 0);
            newNode.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), this.complexVar_0, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).startPosition + 1 | 0));
            newNode.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$BINARY_OPERATION_getInstance(), '*', oldTreeActualParent.children.get_za3lpa$(i).startPosition + 1 | 0, oldTreeActualParent.children.get_za3lpa$(i).startPosition + 2 | 0, void 0, void 0, this.functionConfiguration.findFunctionStringDefinition_3y6sv6$('*', StringDefinitionType$BINARY_OPERATION_getInstance(), -1)));
            newNode.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), oldTreeActualParent.children.get_za3lpa$(i).value.substring(1), oldTreeActualParent.children.get_za3lpa$(i).startPosition + 2 | 0, oldTreeActualParent.children.get_za3lpa$(i).endPosition + 1 | 0));
            newTreeActualParent.addChild_75veaa$(newNode);
            break;
          default:if (105 === last_0(oldTreeActualParent.children.get_za3lpa$(i).value)) {
              var newNode_0 = new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '', oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition + 1 | 0);
              var tmp$_0 = ExpressionParserNode$Type$VARIABLE_getInstance();
              var $receiver_0 = oldTreeActualParent.children.get_za3lpa$(i).value;
              var endIndex = get_lastIndex_0(oldTreeActualParent.children.get_za3lpa$(i).value);
              newNode_0.addChild_75veaa$(new ExpressionParserNode(tmp$_0, $receiver_0.substring(0, endIndex), oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition - 1 | 0));
              newNode_0.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$BINARY_OPERATION_getInstance(), '*', oldTreeActualParent.children.get_za3lpa$(i).endPosition - 1 | 0, oldTreeActualParent.children.get_za3lpa$(i).endPosition, void 0, void 0, this.functionConfiguration.findFunctionStringDefinition_3y6sv6$('*', StringDefinitionType$BINARY_OPERATION_getInstance(), -1)));
              newNode_0.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), this.complexVar_0, oldTreeActualParent.children.get_za3lpa$(i).endPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition + 1 | 0));
              newTreeActualParent.addChild_75veaa$(newNode_0);
            }
             else if (105 === oldTreeActualParent.children.get_za3lpa$(i).value.charCodeAt(0)) {
              var newNode_1 = new ExpressionParserNode(ExpressionParserNode$Type$FUNCTION_getInstance(), '', oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).endPosition + 1 | 0);
              newNode_1.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), this.complexVar_0, oldTreeActualParent.children.get_za3lpa$(i).startPosition, oldTreeActualParent.children.get_za3lpa$(i).startPosition + 1 | 0));
              newNode_1.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$BINARY_OPERATION_getInstance(), '*', oldTreeActualParent.children.get_za3lpa$(i).startPosition + 1 | 0, oldTreeActualParent.children.get_za3lpa$(i).startPosition + 2 | 0, void 0, void 0, this.functionConfiguration.findFunctionStringDefinition_3y6sv6$('*', StringDefinitionType$BINARY_OPERATION_getInstance(), -1)));
              newNode_1.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$VARIABLE_getInstance(), oldTreeActualParent.children.get_za3lpa$(i).value.substring(1), oldTreeActualParent.children.get_za3lpa$(i).startPosition + 2 | 0, oldTreeActualParent.children.get_za3lpa$(i).endPosition + 1 | 0));
              newTreeActualParent.addChild_75veaa$(newNode_1);
            }
             else {
              newTreeActualParent.addChild_75veaa$(oldTreeActualParent.children.get_za3lpa$(i).copy_b1re41$());
            }

            break;
        }
      }
       else {
        newTreeActualParent.addChild_75veaa$(oldTreeActualParent.children.get_za3lpa$(i).copy_b1re41$());
      }
      var tmp$_1 = oldTreeActualParent.children.get_za3lpa$(i);
      var tmp$_2 = last(newTreeActualParent.children);
      var tmp$_3 = currentLevel + 1 | 0;
      var tmp$_4 = i === 0;
      if (tmp$_4) {
        var tmp$_5 = onlyZeroNumberOfChildInSorP;
        if (!tmp$_5) {
          tmp$_5 = (!this.SorPLevels_0.isEmpty() && currentLevel === this.SorPLevels_0.get_za3lpa$(get_lastIndex(this.SorPLevels_0)));
        }
        tmp$_4 = tmp$_5;
      }
      var res = this.replaceComplexOne_0(tmp$_1, tmp$_2, tmp$_3, tmp$_4);
      if (res != null) {
        return res;
      }
      i = i + 1 | 0;
    }
    if (!this.SorPLevels_0.isEmpty() && this.SorPLevels_0.get_za3lpa$(get_lastIndex(this.SorPLevels_0)) === currentLevel) {
      this.notReplacementVariables_0.remove_11rb$(currentLevel);
      this.SorPLevels_0.remove_11rb$(currentLevel);
    }
    return null;
  };
  ExpressionTreeParser.prototype.addMultiplications_0 = function (oldTreeActualParent, newTreeActualParent) {
    if (oldTreeActualParent.children.size === 0)
      return null;
    var i = 0;
    if (oldTreeActualParent.value.length > 0) {
      while (i < oldTreeActualParent.children.size) {
        newTreeActualParent.addChild_75veaa$(oldTreeActualParent.children.get_za3lpa$(i).copy_b1re41$());
        var res = this.addMultiplications_0(oldTreeActualParent.children.get_za3lpa$(i), newTreeActualParent.children.get_za3lpa$(i));
        if (res != null)
          return res;
        i = i + 1 | 0;
      }
    }
     else {
      newTreeActualParent.addChild_75veaa$(oldTreeActualParent.children.get_za3lpa$(0).copy_b1re41$());
      var res_0 = this.addMultiplications_0(oldTreeActualParent.children.get_za3lpa$(0), newTreeActualParent.children.get_za3lpa$(0));
      if (res_0 != null)
        return res_0;
      i = i + 1 | 0;
      while (i < oldTreeActualParent.children.size) {
        if (oldTreeActualParent.children.get_za3lpa$(i).type !== ExpressionParserNode$Type$BINARY_OPERATION_getInstance() && oldTreeActualParent.children.get_za3lpa$(i - 1 | 0).type !== ExpressionParserNode$Type$BINARY_OPERATION_getInstance()) {
          newTreeActualParent.addChild_75veaa$(new ExpressionParserNode(ExpressionParserNode$Type$BINARY_OPERATION_getInstance(), '*', oldTreeActualParent.children.get_za3lpa$(i).startPosition - 1 | 0, oldTreeActualParent.children.get_za3lpa$(i).startPosition, void 0, void 0, this.functionConfiguration.findFunctionStringDefinition_3y6sv6$('*', StringDefinitionType$BINARY_OPERATION_getInstance(), -1)));
        }
         else if (oldTreeActualParent.children.get_za3lpa$(i).type === ExpressionParserNode$Type$BINARY_OPERATION_getInstance() && oldTreeActualParent.children.get_za3lpa$(i - 1 | 0).type === ExpressionParserNode$Type$BINARY_OPERATION_getInstance())
          return new ParserError(oldTreeActualParent.children.get_za3lpa$(i).startPosition, "Unexpected binary operation '" + ensureNotNull(oldTreeActualParent.children.get_za3lpa$(i).functionStringDefinition).definition + "'");
        newTreeActualParent.addChild_75veaa$(oldTreeActualParent.children.get_za3lpa$(i).copy_b1re41$());
        var res_1 = this.addMultiplications_0(oldTreeActualParent.children.get_za3lpa$(i), last(newTreeActualParent.children));
        if (res_1 != null)
          return res_1;
        i = i + 1 | 0;
      }
    }
    return null;
  };
  ExpressionTreeParser.prototype.combineUnary_0 = function (oldTreeActualParent, newTreeActualParent) {
    if (oldTreeActualParent.children.size === 0)
      return null;
    var i = 0;
    var state = ExpressionTreeParser$TokenParserState$BINARY_OPERATION_getInstance();
    var currentBottomToken = null;
    while (i < oldTreeActualParent.children.size) {
      var node = oldTreeActualParent.children.get_za3lpa$(i).copy_b1re41$();
      if (oldTreeActualParent.children.get_za3lpa$(i).type === ExpressionParserNode$Type$VARIABLE_getInstance() || oldTreeActualParent.children.get_za3lpa$(i).type === ExpressionParserNode$Type$FUNCTION_getInstance()) {
        state = ExpressionTreeParser$TokenParserState$NAME_getInstance();
        if (currentBottomToken != null) {
          currentBottomToken.addChild_75veaa$(node);
          currentBottomToken = node;
        }
         else
          newTreeActualParent.addChild_75veaa$(node);
        var res = this.combineUnary_0(oldTreeActualParent.children.get_za3lpa$(i), node);
        if (res != null)
          return res;
      }
       else if (oldTreeActualParent.children.get_za3lpa$(i).type === ExpressionParserNode$Type$BINARY_OPERATION_getInstance()) {
        state = ExpressionTreeParser$TokenParserState$BINARY_OPERATION_getInstance();
        currentBottomToken = null;
        newTreeActualParent.addChild_75veaa$(node);
      }
       else if (oldTreeActualParent.children.get_za3lpa$(i).type === ExpressionParserNode$Type$UNARY_OPERATION_getInstance()) {
        if (state === ExpressionTreeParser$TokenParserState$BINARY_OPERATION_getInstance()) {
          if (currentBottomToken == null) {
            newTreeActualParent.addChild_75veaa$(node);
            currentBottomToken = node;
          }
           else {
            currentBottomToken.addChild_75veaa$(node);
            currentBottomToken = node;
          }
        }
         else {
          if (currentBottomToken == null) {
            currentBottomToken = node;
            var lastElement = last(newTreeActualParent.children);
            newTreeActualParent.children.removeAt_za3lpa$(get_lastIndex(newTreeActualParent.children));
            node.addChild_75veaa$(lastElement);
            newTreeActualParent.addChild_75veaa$(node);
          }
           else {
            var parent = ensureNotNull(currentBottomToken.parent);
            node.addChild_75veaa$(currentBottomToken);
            parent.children.removeAt_za3lpa$(get_lastIndex(parent.children));
            parent.addChild_75veaa$(node);
            currentBottomToken = node;
          }
        }
      }
      i = i + 1 | 0;
    }
    return null;
  };
  ExpressionTreeParser.prototype.resolveBinaryOperations_0 = function (actualParent) {
    while (true) {
      var minPriority = actualParent.getMinPriorityOfBinaryOperationsWithoutOperands();
      if (minPriority === kotlin_js_internal_DoubleCompanionObject.MAX_VALUE)
        break;
      actualParent.resolveBinaryOperationsWithPriorityRecursive_qa7ax3$(minPriority, this.functionConfiguration);
    }
  };
  ExpressionTreeParser.prototype.toExpressionTree_0 = function (oldTreeActualParent, newTreeActualParent) {
    var tmp$;
    var oldChildren = ArrayList_init();
    oldTreeActualParent.getNonEmptyChildren_5bxoqt$(oldChildren);
    tmp$ = oldChildren.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (child.type === ExpressionParserNode$Type$VARIABLE_getInstance()) {
        newTreeActualParent.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), child.value, child.startPosition, child.endPosition, child.subValue, newTreeActualParent));
      }
       else {
        newTreeActualParent.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), child.value, child.startPosition, child.endPosition, child.subValue, newTreeActualParent, child.functionStringDefinition));
        this.toExpressionTree_0(child, last(newTreeActualParent.children));
      }
    }
  };
  ExpressionTreeParser.prototype.isComplicatedTag_0 = function (expression, currentPosition) {
    if (expression === void 0)
      expression = this.expression;
    if (currentPosition === void 0)
      currentPosition = this.currentPosition_0;
    return remainingExpressionStartsWith('<', expression, currentPosition) && (!(remainingExpressionStartsWith('<mo', expression, currentPosition) || remainingExpressionStartsWith('<mi', expression, currentPosition) || remainingExpressionStartsWith('<mn', expression, currentPosition) || remainingExpressionStartsWith('<\/mo', expression, currentPosition) || remainingExpressionStartsWith('<\/mi', expression, currentPosition) || remainingExpressionStartsWith('<\/mn', expression, currentPosition)) || remainingExpressionStartsWith('<minus', expression, currentPosition) || remainingExpressionStartsWith('<mover', expression, currentPosition) || remainingExpressionStartsWith('<\/minus', expression, currentPosition) || remainingExpressionStartsWith('<\/mover', expression, currentPosition));
  };
  ExpressionTreeParser.prototype.isMathMlMultipleTag_0 = function (expression, currentPosition) {
    if (expression === void 0)
      expression = this.expression;
    if (currentPosition === void 0)
      currentPosition = this.currentPosition_0;
    return remainingExpressionStartsWith('munderover', expression, currentPosition) || remainingExpressionStartsWith('msubsup', expression, currentPosition);
  };
  ExpressionTreeParser.prototype.isTexMultipleTag_0 = function (expression, currentPosition) {
    if (expression === void 0)
      expression = this.expression;
    if (currentPosition === void 0)
      currentPosition = this.currentPosition_0;
    return remainingExpressionStartsWith('\\sum', expression, currentPosition) || remainingExpressionStartsWith('\\prod', expression, currentPosition);
  };
  function ExpressionTreeParser$Companion() {
    ExpressionTreeParser$Companion_instance = this;
    this.mathMlTags = listOf_0(['mfenced', 'mfenced_|__|', 'mfrac', 'mi', 'minus', 'mn', 'mo', 'mover', 'mroot', 'msqrt', 'msub', 'msubsup', 'msup', 'munderover']);
  }
  ExpressionTreeParser$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ExpressionTreeParser$Companion_instance = null;
  function ExpressionTreeParser$Companion_getInstance() {
    if (ExpressionTreeParser$Companion_instance === null) {
      new ExpressionTreeParser$Companion();
    }
    return ExpressionTreeParser$Companion_instance;
  }
  ExpressionTreeParser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionTreeParser',
    interfaces: []
  };
  function ExpressionTreeAnalyzer(analyzingExpression) {
    this.analyzingExpression_0 = analyzingExpression;
    this.expressionDimension_0 = this.analyzingExpression_0.getVariableNames_ywdfdh$().size;
    this.functionByName_0 = mapOf_0([to('', ExpressionTreeAnalyzer$functionByName$lambda(this)), to('+', ExpressionTreeAnalyzer$functionByName$lambda_0(this)), to('*', ExpressionTreeAnalyzer$functionByName$lambda_1(this)), to('-', ExpressionTreeAnalyzer$functionByName$lambda_2(this)), to('/', ExpressionTreeAnalyzer$functionByName$lambda_3(this)), to('^', ExpressionTreeAnalyzer$functionByName$lambda_4(this)), to('mod', ExpressionTreeAnalyzer$functionByName$lambda_5(this)), to('S', ExpressionTreeAnalyzer$functionByName$lambda_6(this)), to('P', ExpressionTreeAnalyzer$functionByName$lambda_7(this)), to('and', ExpressionTreeAnalyzer$functionByName$lambda_8(this)), to('or', ExpressionTreeAnalyzer$functionByName$lambda_9(this)), to('xor', ExpressionTreeAnalyzer$functionByName$lambda_10(this)), to('alleq', ExpressionTreeAnalyzer$functionByName$lambda_11(this)), to('not', ExpressionTreeAnalyzer$functionByName$lambda_12(this)), to('sin', ExpressionTreeAnalyzer$functionByName$lambda_13(this)), to('cos', ExpressionTreeAnalyzer$functionByName$lambda_14(this)), to('sh', ExpressionTreeAnalyzer$functionByName$lambda_15(this)), to('ch', ExpressionTreeAnalyzer$functionByName$lambda_16(this)), to('tg', ExpressionTreeAnalyzer$functionByName$lambda_17(this)), to('th', ExpressionTreeAnalyzer$functionByName$lambda_18(this)), to('asin', ExpressionTreeAnalyzer$functionByName$lambda_19(this)), to('acos', ExpressionTreeAnalyzer$functionByName$lambda_20(this)), to('atg', ExpressionTreeAnalyzer$functionByName$lambda_21(this)), to('exp', ExpressionTreeAnalyzer$functionByName$lambda_22(this)), to('ln', ExpressionTreeAnalyzer$functionByName$lambda_23(this)), to('abs', ExpressionTreeAnalyzer$functionByName$lambda_24(this))]);
  }
  ExpressionTreeAnalyzer.prototype.findDomain = function () {
    return this.findDomain_0(this.analyzingExpression_0, LineSegmentHolder$Companion_getInstance().fullSegment);
  };
  ExpressionTreeAnalyzer.prototype.findDomain_0 = function (expression, possibleValues) {
    return this.findDomain_1(expression, listOf(possibleValues));
  };
  ExpressionTreeAnalyzer.prototype.findDomain_1 = function (expression, possibleValues) {
    return ensureNotNull(this.functionByName_0.get_11rb$(expression.value))(expression, possibleValues);
  };
  ExpressionTreeAnalyzer.prototype.plusDomain_0 = function (expression, possibleValues) {
    var tmp$;
    var childrenDomains = this.calculateChildrenDomains_0(expression, LineSegmentHolder$Companion_getInstance().fullSegment);
    tmp$ = childrenDomains.iterator();
    while (tmp$.hasNext()) {
      var domain = tmp$.next();
      if (domain.isEmpty()) {
        return domain;
      }
    }
    return CageHolder$Companion_getInstance().domainIntersection_cvc6z0$(childrenDomains, this.expressionDimension_0);
  };
  ExpressionTreeAnalyzer.prototype.minusDomain_0 = function (expression, possibleValues) {
    var tmp$;
    var childrenDomains = this.calculateChildrenDomains_0(expression, LineSegmentHolder$Companion_getInstance().fullSegment);
    tmp$ = childrenDomains.iterator();
    while (tmp$.hasNext()) {
      var domain = tmp$.next();
      if (domain.isEmpty()) {
        return domain;
      }
    }
    return CageHolder$Companion_getInstance().domainIntersection_cvc6z0$(childrenDomains, this.expressionDimension_0);
  };
  ExpressionTreeAnalyzer.prototype.mulDomain_0 = function (expression, possibleValues) {
    var tmp$;
    var childrenDomains = this.calculateChildrenDomains_0(expression, LineSegmentHolder$Companion_getInstance().fullSegment);
    tmp$ = childrenDomains.iterator();
    while (tmp$.hasNext()) {
      var domain = tmp$.next();
      if (domain.isEmpty()) {
        return domain;
      }
    }
    return CageHolder$Companion_getInstance().domainIntersection_cvc6z0$(childrenDomains, this.expressionDimension_0);
  };
  ExpressionTreeAnalyzer.prototype.divDomain_0 = function (expression, possibleValues) {
    var tmp$;
    var childrenDomains = this.calculateChildrenDomains_0(expression, LineSegmentHolder$Companion_getInstance().fullSegment);
    tmp$ = childrenDomains.iterator();
    while (tmp$.hasNext()) {
      var domain = tmp$.next();
      if (domain.isEmpty()) {
        return domain;
      }
    }
    return CageHolder$Companion_getInstance().domainIntersection_cvc6z0$(childrenDomains, this.expressionDimension_0);
  };
  ExpressionTreeAnalyzer.prototype.bracketsDomain_0 = function (expression, possibleValues) {
    return this.findDomain_1(expression.children.get_za3lpa$(0), possibleValues);
  };
  ExpressionTreeAnalyzer.prototype.modDomain_0 = function (expression, possibleValues) {
    var tmp$;
    var childrenDomains = this.calculateChildrenDomains_0(expression, LineSegmentHolder$Companion_getInstance().fullSegment);
    tmp$ = childrenDomains.iterator();
    while (tmp$.hasNext()) {
      var domain = tmp$.next();
      if (domain.isEmpty()) {
        return domain;
      }
    }
    return CageHolder$Companion_getInstance().domainIntersection_cvc6z0$(childrenDomains, this.expressionDimension_0);
  };
  ExpressionTreeAnalyzer.prototype.powDomain_0 = function (expression, possibleValues) {
    var tmp$;
    if (this.allSegmentsSubzero_0(possibleValues)) {
      return CageHolder$Companion_getInstance().emptyCageHolder_za3lpa$(this.expressionDimension_0);
    }
    var childrenDomains = ArrayList_init();
    tmp$ = childrenDomains.size - 1 | 0;
    for (var i = 0; i < tmp$; i++) {
      var domain = this.findDomain_0(expression.children.get_za3lpa$(i), LineSegmentHolder$Companion_getInstance().positiveSegment);
      if (domain.isEmpty()) {
        return domain;
      }
    }
    var lastChildDomain = this.findDomain_0(last(expression.children), LineSegmentHolder$Companion_getInstance().fullSegment);
    childrenDomains.add_11rb$(lastChildDomain);
    return CageHolder$Companion_getInstance().domainIntersection_cvc6z0$(childrenDomains, this.expressionDimension_0);
  };
  ExpressionTreeAnalyzer.prototype.sumNDomain_0 = function (expression, possibleValues) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'should be unfolded first');
  };
  ExpressionTreeAnalyzer.prototype.prodNDomain_0 = function (expression, possibleValues) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'should be unfolded first');
  };
  ExpressionTreeAnalyzer.prototype.andDomain_0 = function (expression, possibleValues) {
    var tmp$;
    if (this.pointInSegments_0(possibleValues, 1.0)) {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'One of children should be equal to 0');
    }
    var childrenDomains = this.calculateChildrenDomains_0(expression, LineSegmentHolder$Companion_getInstance().fullSegment);
    tmp$ = childrenDomains.iterator();
    while (tmp$.hasNext()) {
      var domain = tmp$.next();
      if (domain.isEmpty()) {
        return domain;
      }
    }
    return CageHolder$Companion_getInstance().domainIntersection_cvc6z0$(childrenDomains, this.expressionDimension_0);
  };
  ExpressionTreeAnalyzer.prototype.orDomain_0 = function (expression, possibleValues) {
    var tmp$;
    if (this.pointInSegments_0(possibleValues, 1.0)) {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'All children should be equal to 0');
    }
    var childrenDomains = this.calculateChildrenDomains_0(expression, LineSegmentHolder$Companion_getInstance().fullSegment);
    tmp$ = childrenDomains.iterator();
    while (tmp$.hasNext()) {
      var domain = tmp$.next();
      if (domain.isEmpty()) {
        return domain;
      }
    }
    return CageHolder$Companion_getInstance().domainIntersection_cvc6z0$(childrenDomains, this.expressionDimension_0);
  };
  ExpressionTreeAnalyzer.prototype.xorDomain_0 = function (expression, possibleValues) {
    var tmp$;
    if (this.pointInSegments_0(possibleValues, 0.0)) {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'All children should be equal to 0');
    }
    var childrenDomains = this.calculateChildrenDomains_0(expression, LineSegmentHolder$Companion_getInstance().fullSegment);
    tmp$ = childrenDomains.iterator();
    while (tmp$.hasNext()) {
      var domain = tmp$.next();
      if (domain.isEmpty()) {
        return domain;
      }
    }
    return CageHolder$Companion_getInstance().domainIntersection_cvc6z0$(childrenDomains, this.expressionDimension_0);
  };
  ExpressionTreeAnalyzer.prototype.alleqDomain_0 = function (expression, possibleValues) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'No ideas, infinitely small domain');
  };
  ExpressionTreeAnalyzer.prototype.notDomain_0 = function (expression, possibleValues) {
    if (this.pointInSegments_0(possibleValues, 0.0)) {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'Child should be equal to 0');
    }
    return this.findDomain_0(expression.children.get_za3lpa$(0), LineSegmentHolder$Companion_getInstance().fullSegment);
  };
  ExpressionTreeAnalyzer.prototype.sinDomain_0 = function (expression, possibleValues) {
    if (this.fullyContains_0(new LineSegmentHolder(0.0, 1.0), possibleValues)) {
      return this.findDomain_0(expression.children.get_za3lpa$(0), LineSegmentHolder$Companion_getInstance().fullSegment);
    }
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Problems with periodicity');
  };
  ExpressionTreeAnalyzer.prototype.cosDomain_0 = function (expression, possibleValues) {
    if (this.fullyContains_0(new LineSegmentHolder(0.0, 1.0), possibleValues)) {
      return this.findDomain_0(expression.children.get_za3lpa$(0), LineSegmentHolder$Companion_getInstance().fullSegment);
    }
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Problems with periodicity');
  };
  ExpressionTreeAnalyzer.prototype.tanDomain_0 = function (expression, possibleValues) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Problems with periodicity');
  };
  ExpressionTreeAnalyzer.prototype.sinhDomain_0 = function (expression, possibleValues) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Unclear how to do');
  };
  ExpressionTreeAnalyzer.prototype.coshDomain_0 = function (expression, possibleValues) {
    if (this.allSegmentsSubzero_0(possibleValues)) {
      return CageHolder$Companion_getInstance().emptyCageHolder_za3lpa$(this.expressionDimension_0);
    }
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Unclear how to do');
  };
  ExpressionTreeAnalyzer.prototype.tanhDomain_0 = function (expression, possibleValues) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Absolutely unclear how to do');
  };
  ExpressionTreeAnalyzer.prototype.asinDomain_0 = function (expression, possibleValues) {
    if (this.emptyIntersection_0(new LineSegmentHolder(-math.PI / 2, math.PI / 2), possibleValues)) {
      return CageHolder$Companion_getInstance().emptyCageHolder_za3lpa$(this.expressionDimension_0);
    }
    if (this.fullyContains_0(new LineSegmentHolder(-math.PI / 2, math.PI / 2), possibleValues)) {
      return this.findDomain_0(expression.children.get_za3lpa$(0), new LineSegmentHolder(0.0, 1.0));
    }
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Not so hard');
  };
  ExpressionTreeAnalyzer.prototype.acosDomain_0 = function (expression, possibleValues) {
    if (this.emptyIntersection_0(new LineSegmentHolder(0.0, math.PI), possibleValues)) {
      return CageHolder$Companion_getInstance().emptyCageHolder_za3lpa$(this.expressionDimension_0);
    }
    if (this.fullyContains_0(new LineSegmentHolder(0.0, math.PI), possibleValues)) {
      return this.findDomain_0(expression.children.get_za3lpa$(0), new LineSegmentHolder(0.0, 1.0));
    }
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Not so hard');
  };
  ExpressionTreeAnalyzer.prototype.atanDomain_0 = function (expression, possibleValues) {
    if (this.emptyIntersection_0(new LineSegmentHolder(-math.PI / 2, math.PI / 2), possibleValues)) {
      return CageHolder$Companion_getInstance().emptyCageHolder_za3lpa$(this.expressionDimension_0);
    }
    if (this.fullyContains_0(new LineSegmentHolder(-math.PI / 2, math.PI / 2), possibleValues)) {
      return this.findDomain_0(expression.children.get_za3lpa$(0), new LineSegmentHolder(0.0, 1.0));
    }
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Not so hard');
  };
  ExpressionTreeAnalyzer.prototype.expDomain_0 = function (expression, possibleValues) {
    if (this.allSegmentsSubzero_0(possibleValues)) {
      return CageHolder$Companion_getInstance().emptyCageHolder_za3lpa$(this.expressionDimension_0);
    }
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Not so hard');
  };
  ExpressionTreeAnalyzer.prototype.lnDomain_0 = function (expression, possibleValues) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Not so hard');
  };
  ExpressionTreeAnalyzer.prototype.absDomain_0 = function (expression, possibleValues) {
    if (this.allSegmentsSubzero_0(possibleValues)) {
      return CageHolder$Companion_getInstance().emptyCageHolder_za3lpa$(this.expressionDimension_0);
    }
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Not so hard');
  };
  ExpressionTreeAnalyzer.prototype.calculateChildrenDomains_0 = function (expression, segment) {
    var tmp$;
    var childrenDomains = ArrayList_init();
    tmp$ = expression.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      childrenDomains.add_11rb$(this.findDomain_0(child, segment));
    }
    return childrenDomains;
  };
  ExpressionTreeAnalyzer.prototype.pointInSegments_0 = function (possibleValues, point) {
    var tmp$;
    tmp$ = possibleValues.iterator();
    while (tmp$.hasNext()) {
      var segment = tmp$.next();
      if (segment.pointInSegment_14dthe$(point)) {
        return true;
      }
    }
    return false;
  };
  ExpressionTreeAnalyzer.prototype.allSegmentsSubzero_0 = function (segments) {
    var tmp$;
    tmp$ = segments.iterator();
    while (tmp$.hasNext()) {
      var segment = tmp$.next();
      if (!segment.isSubzero()) {
        return false;
      }
    }
    return true;
  };
  ExpressionTreeAnalyzer.prototype.fullyContains_0 = function (segment, possibleValues) {
    var tmp$;
    tmp$ = possibleValues.iterator();
    while (tmp$.hasNext()) {
      var possibleSegment = tmp$.next();
      if (segment.isSubSegment_3th67w$(possibleSegment)) {
        return true;
      }
    }
    return false;
  };
  ExpressionTreeAnalyzer.prototype.emptyIntersection_0 = function (segment, possibleValues) {
    var tmp$;
    tmp$ = possibleValues.iterator();
    while (tmp$.hasNext()) {
      var possibleSegment = tmp$.next();
      if (segment.hasIntersection_3th67w$(possibleSegment)) {
        return false;
      }
    }
    return true;
  };
  function ExpressionTreeAnalyzer$functionByName$lambda(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.bracketsDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_0(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.plusDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_1(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.mulDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_2(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.minusDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_3(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.divDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_4(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.powDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_5(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.modDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_6(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.sumNDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_7(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.prodNDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_8(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.andDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_9(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.orDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_10(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.xorDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_11(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.alleqDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_12(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.notDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_13(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.sinDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_14(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.cosDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_15(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.sinhDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_16(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.coshDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_17(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.tanDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_18(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.tanhDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_19(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.asinDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_20(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.acosDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_21(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.atanDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_22(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.expDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_23(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.lnDomain_0(expression, possibleValues);
    };
  }
  function ExpressionTreeAnalyzer$functionByName$lambda_24(this$ExpressionTreeAnalyzer) {
    return function (expression, possibleValues) {
      return this$ExpressionTreeAnalyzer.absDomain_0(expression, possibleValues);
    };
  }
  ExpressionTreeAnalyzer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionTreeAnalyzer',
    interfaces: []
  };
  function shouldTakeLog(node) {
    if (node.value.length === 0) {
      if (node.children.size === 1)
        return shouldTakeLog(node.children.get_za3lpa$(0));
      return false;
    }
    return equals(node.value, 'exp') || equals(node.value, '^');
  }
  function getLog(node, compiledConfiguration) {
    var tmp$;
    if (node.value.length === 0) {
      var res = node.clone();
      if (res.children.size === 1)
        res.children.set_wxm5ur$(0, getLog(res.children.get_za3lpa$(0), compiledConfiguration));
      return res;
    }
     else {
      if (equals(node.value, 'exp') && node.children.size === 1)
        return node.children.get_za3lpa$(0).clone();
      if (equals(node.value, '^') && node.children.size > 1) {
        var res_0 = compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
        res_0.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('ln', 1));
        res_0.children.get_za3lpa$(0).addChild_em03xr$(node.children.get_za3lpa$(0).clone());
        if (node.children.size === 2)
          res_0.addChild_em03xr$(node.children.get_za3lpa$(1).clone());
        else {
          var right = compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
          tmp$ = node.children.size;
          for (var i = 1; i < tmp$; i++)
            right.addChild_em03xr$(node.children.get_za3lpa$(i).clone());
        }
        return res_0;
      }
    }
    return node.clone();
  }
  function alwaysPositiveFunction(node) {
    if (node.nodeType !== NodeType$FUNCTION_getInstance())
      return false;
    if (equals(node.value, 'exp') || equals(node.value, 'sqrt'))
      return true;
    var eps = 1.0E-6;
    if (equals(node.value, '^')) {
      if (node.children.size === 2) {
        var roundedPower = toIntOrNull(node.children.get_za3lpa$(1).value);
        if (roundedPower != null && (roundedPower % 2 === 0 || toDouble(node.children.get_za3lpa$(1).value) - roundedPower > eps))
          return true;
      }
    }
    return false;
  }
  function difference(left, right, compiledConfiguration) {
    var res = compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
    if (left.value.length === 0 && left.children.size === 1)
      res.addChild_em03xr$(left.children.get_za3lpa$(0).clone());
    else
      res.addChild_em03xr$(left.clone());
    res.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
    if (right.value.length === 0 && right.children.size === 1)
      last(res.children).addChild_em03xr$(right.children.get_za3lpa$(0).clone());
    else
      last(res.children).addChild_em03xr$(right.clone());
    return res;
  }
  function ratio(num, den, compiledConfiguration) {
    var res = compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
    if (num.value.length === 0 && num.children.size === 1)
      res.addChild_em03xr$(num.children.get_za3lpa$(0).clone());
    else
      res.addChild_em03xr$(num.clone());
    if (den.value.length === 0 && den.children.size === 1)
      res.addChild_em03xr$(den.children.get_za3lpa$(0).clone());
    else
      res.addChild_em03xr$(den.clone());
    return res;
  }
  function alwaysPositive(expression, compiledConfiguration) {
    var expressionNode = expression.clone();
    if (expressionNode.value.length === 0) {
      if (expressionNode.children.size === 1)
        expressionNode = expressionNode.children.get_za3lpa$(0);
    }
    if (expressionNode.nodeType === NodeType$FUNCTION_getInstance() && alwaysPositiveFunction(expressionNode))
      return true;
    var expressionMinimizer = new OptimizerUtils(difference(expression, compiledConfiguration.createExpressionVariableNode_14dthe$(1.0E-6), compiledConfiguration));
    if (!expressionMinimizer.canStart() && !expressionMinimizer.run_224j3y$(3))
      return true;
    return false;
  }
  function gradientDescentComparison(l, r, compiledConfiguration, comparisonType, domain) {
    if (domain === void 0)
      domain = null;
    var tmp$, tmp$_0, tmp$_1;
    var left = l.clone();
    var right = r.clone();
    var findDomainAgain = false;
    while (shouldTakeLog(left) && shouldTakeLog(right)) {
      left = getLog(left, compiledConfiguration);
      right = getLog(right, compiledConfiguration);
      findDomainAgain = true;
    }
    var dom = domain == null || findDomainAgain ? new DomainPointGenerator(arrayListOf([left, right])) : domain;
    switch (comparisonType.name) {
      case 'LEFT_MORE':
      case 'LEFT_MORE_OR_EQUAL':
        tmp$ = difference(left, right, compiledConfiguration);
        break;
      default:tmp$ = difference(right, left, compiledConfiguration);
        break;
    }
    var diff = tmp$;
    var diffMinizer = new OptimizerUtils(diff, void 0, compiledConfiguration, dom);
    if (diffMinizer.canStart() && diffMinizer.run_224j3y$())
      return false;
    switch (comparisonType.name) {
      case 'LEFT_MORE':
      case 'LEFT_MORE_OR_EQUAL':
        tmp$_0 = right;
        break;
      default:tmp$_0 = left;
        break;
    }
    var denominator = tmp$_0;
    if (alwaysPositive(denominator, compiledConfiguration)) {
      switch (comparisonType.name) {
        case 'LEFT_MORE':
        case 'LEFT_MORE_OR_EQUAL':
          tmp$_1 = ratio(left, right, compiledConfiguration);
          break;
        default:tmp$_1 = ratio(right, left, compiledConfiguration);
          break;
      }
      var ratio_0 = tmp$_1;
      var ratioMinimizer = new OptimizerUtils(ratio_0, void 0, compiledConfiguration, dom);
      if (ratioMinimizer.canStart() && ratioMinimizer.run_224j3y$(void 0, void 0, 1.0))
        return false;
    }
    return true;
  }
  function generalOpeningBracketsSubstitutions(originalExpression, transformationNode, transformationNodeParent, transformationNodeIndex, compiledConfiguration, expressionToTransform, notSelectedSubtreeTopArguments, notSelectedSubtreeTopOriginalTree, fullTransformationNode, simplifyNotSelectedTopArguments) {
    if (expressionToTransform === void 0)
      expressionToTransform = originalExpression;
    if (notSelectedSubtreeTopArguments === void 0)
      notSelectedSubtreeTopArguments = null;
    if (notSelectedSubtreeTopOriginalTree === void 0)
      notSelectedSubtreeTopOriginalTree = null;
    if (fullTransformationNode === void 0)
      fullTransformationNode = transformationNode;
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    var tmp$, tmp$_0, tmp$_1;
    var result = ArrayList_init();
    if (compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('OpeningBrackets')) {
      var subst = ensureNotNull(compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('OpeningBrackets'));
      var dotOperation = ensureNotNull(transformationNode).value;
      var plusOperation = plusOperationByDot(dotOperation, ensureNotNull(transformationNode).children);
      if (!isBlank(plusOperation) && (!equals(plusOperation, 'xor') || compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('XorDistribution'))) {
        if (!equals(dotOperation, '/') && equals(last(ensureNotNull(transformationNode).children).value, plusOperation) && last(ensureNotNull(transformationNode).children).children.size > 1) {
          var sumNode = compiledConfiguration.createExpressionFunctionNode_twmih4$(plusOperation, -1);
          if (equals(first(ensureNotNull(transformationNode).children).value, plusOperation)) {
            tmp$ = first(ensureNotNull(transformationNode).children).children;
          }
           else {
            tmp$ = listOf(first(ensureNotNull(transformationNode).children));
          }
          var lChildren = tmp$;
          if (equals(last(ensureNotNull(transformationNode).children).value, plusOperation)) {
            tmp$_0 = last(ensureNotNull(transformationNode).children).children;
          }
           else {
            tmp$_0 = listOf(last(ensureNotNull(transformationNode).children));
          }
          var rChildren = tmp$_0;
          addSumOpeningBracketsResult(originalExpression, transformationNode, transformationNodeParent, transformationNodeIndex, expressionToTransform, notSelectedSubtreeTopArguments, notSelectedSubtreeTopOriginalTree, fullTransformationNode, lChildren, rChildren, compiledConfiguration, sumNode, simplifyNotSelectedTopArguments, result);
        }
        if (equals(first(ensureNotNull(transformationNode).children).value, plusOperation) && first(ensureNotNull(transformationNode).children).children.size > 1) {
          var sumNode_0 = compiledConfiguration.createExpressionFunctionNode_twmih4$(plusOperation, -1);
          if (equals(first(ensureNotNull(transformationNode).children).value, plusOperation)) {
            tmp$_1 = first(ensureNotNull(transformationNode).children).children;
          }
           else {
            tmp$_1 = listOf(first(ensureNotNull(transformationNode).children));
          }
          var lChildren_0 = tmp$_1;
          var rChildren_0 = listOf(last(ensureNotNull(transformationNode).children));
          addSumOpeningBracketsResult(originalExpression, transformationNode, transformationNodeParent, transformationNodeIndex, expressionToTransform, notSelectedSubtreeTopArguments, notSelectedSubtreeTopOriginalTree, fullTransformationNode, lChildren_0, rChildren_0, compiledConfiguration, sumNode_0, simplifyNotSelectedTopArguments, result);
        }
      }
    }
    return result;
  }
  function plusOperationByDot(dotOperation, possiblePlusNodes) {
    var tmp$, tmp$_0;
    switch (dotOperation) {
      case '*':
      case '/':
        tmp$ = setOf('+');
        break;
      case 'and':
        tmp$ = setOf_0(['or', 'xor']);
        break;
      case 'or':
        tmp$ = setOf_0(['and', 'xor']);
        break;
      default:return '';
    }
    var possiblePlusOperations = tmp$;
    tmp$_0 = possiblePlusNodes.iterator();
    while (tmp$_0.hasNext()) {
      var possiblePlusNode = tmp$_0.next();
      if (possiblePlusOperations.contains_11rb$(possiblePlusNode.value)) {
        return possiblePlusNode.value;
      }
    }
    return '';
  }
  function dotOperationByPlus(plusOperation, possibleDotNodes) {
    var tmp$, tmp$_0;
    switch (plusOperation) {
      case '+':
        return '*';
      case 'and':
        tmp$ = setOf('or');
        break;
      case 'or':
        tmp$ = setOf('and');
        break;
      case 'xor':
        tmp$ = setOf_0(['and', 'or']);
        break;
      default:return '';
    }
    var possibleDotOperations = tmp$;
    tmp$_0 = possibleDotNodes.iterator();
    while (tmp$_0.hasNext()) {
      var possibleDotNode = tmp$_0.next();
      if (possibleDotOperations.contains_11rb$(possibleDotNode.value)) {
        return possibleDotNode.value;
      }
    }
    return first_0(possibleDotOperations);
  }
  function addSumOpeningBracketsResult(originalExpression, transformationNode, transformationNodeParent, transformationNodeIndex, expressionToTransform, notSelectedSubtreeTopArguments, notSelectedSubtreeTopOriginalTree, fullTransformationNode, lChildren, rChildren, compiledConfiguration, sumNode, simplifyNotSelectedTopArguments, result) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.containsKey_11rb$('OpeningBrackets')) {
      var subst = ensureNotNull(compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.get_11rb$('OpeningBrackets'));
      tmp$ = lChildren.iterator();
      while (tmp$.hasNext()) {
        var lChild = tmp$.next();
        tmp$_0 = rChildren.iterator();
        while (tmp$_0.hasNext()) {
          var rChild = tmp$_0.next();
          var productionNode = compiledConfiguration.createExpressionFunctionNode_twmih4$(ensureNotNull(transformationNode).value, -1);
          var needMinus = false;
          if (equals(lChild.value, '-')) {
            needMinus = needMinus ^ true;
            tmp$_1 = first(lChild.children);
          }
           else
            tmp$_1 = lChild;
          var lMul = tmp$_1;
          if (equals(rChild.value, '-')) {
            needMinus = needMinus ^ true;
            tmp$_2 = first(rChild.children);
          }
           else
            tmp$_2 = rChild;
          var rMul = tmp$_2;
          productionNode.addChild_em03xr$(lMul.clone());
          productionNode.addChild_em03xr$(rMul.clone());
          if (needMinus) {
            var minusNode = compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1);
            minusNode.addChild_em03xr$(productionNode);
            sumNode.addChild_em03xr$(minusNode);
          }
           else {
            sumNode.addChild_em03xr$(productionNode);
          }
        }
      }
      addApplicationToResults_0(originalExpression, transformationNode, transformationNodeParent, transformationNodeIndex, expressionToTransform, notSelectedSubtreeTopArguments, notSelectedSubtreeTopOriginalTree, fullTransformationNode, true, compiledConfiguration, simplifyNotSelectedTopArguments, sumNode, result, new ExpressionSubstitution(addRootNodeToExpression(ensureNotNull(transformationNode).clone()), addRootNodeToExpression(sumNode), void 0, void 0, subst.code, subst.nameEn, subst.nameRu, void 0, void 0, void 0, void 0, subst.priority), 'OpeningBrackets', (tmp$_3 = subst.priority) != null ? tmp$_3 : 20);
    }
  }
  function addApplicationToResults_0(originalExpression, transformationNode, transformationNodeParent, transformationNodeIndex, expressionToTransform, notSelectedSubtreeTopArguments, notSelectedSubtreeTopOriginalTree, fullTransformationNode, withReadyApplicationResult, compiledConfiguration, simplifyNotSelectedTopArguments, applicationToSelectedPartResult, result, transformation, substitutionType, priority, onSameBracketLevel) {
    if (onSameBracketLevel === void 0)
      onSameBracketLevel = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var originalExpression_0 = originalExpression.clone();
    if (withReadyApplicationResult) {
      if (notSelectedSubtreeTopArguments != null) {
        if (onSameBracketLevel && equals(ensureNotNull(notSelectedSubtreeTopArguments).value, applicationToSelectedPartResult.value)) {
          var $receiver = applicationToSelectedPartResult.clone();
          var tmp$_3, tmp$_4;
          if (simplifyNotSelectedTopArguments) {
            tmp$_3 = get_lastIndex(ensureNotNull(notSelectedSubtreeTopArguments).children);
            for (var i = 1; i <= tmp$_3; i++) {
              $receiver.addChild_em03xr$(ensureNotNull(notSelectedSubtreeTopArguments).children.get_za3lpa$(i));
            }
          }
           else {
            tmp$_4 = ensureNotNull(notSelectedSubtreeTopOriginalTree).children.iterator();
            while (tmp$_4.hasNext()) {
              var child = tmp$_4.next();
              $receiver.addChild_em03xr$(child);
            }
          }
          tmp$_0 = $receiver;
        }
         else if (simplifyNotSelectedTopArguments) {
          var $receiver_0 = ensureNotNull(notSelectedSubtreeTopArguments);
          $receiver_0.setChildOnPosition_gk94xr$(applicationToSelectedPartResult, 0);
          tmp$_0 = $receiver_0;
        }
         else {
          var commutativeOperationNode = ensureNotNull(notSelectedSubtreeTopArguments).copy_4anocu$();
          commutativeOperationNode.addChild_em03xr$(applicationToSelectedPartResult);
          tmp$ = ensureNotNull(notSelectedSubtreeTopOriginalTree).children.iterator();
          while (tmp$.hasNext()) {
            var child_0 = tmp$.next();
            commutativeOperationNode.addChild_em03xr$(child_0);
          }
          tmp$_0 = commutativeOperationNode;
        }
        var applicationResultNode = tmp$_0;
        if (transformationNodeParent != null) {
          ensureNotNull(transformationNodeParent).setChildOnPosition_gk94xr$(applicationResultNode, transformationNodeIndex);
        }
      }
       else {
        if (transformationNodeParent != null) {
          ensureNotNull(transformationNodeParent).setChildOnPosition_gk94xr$(applicationToSelectedPartResult, transformationNodeIndex);
        }
      }
    }
    tmp$_1 = ensureNotNull(transformationNode);
    if (withReadyApplicationResult) {
      var $receiver_1 = expressionToTransform.clone();
      normalizeExpressionToUsualForm($receiver_1, compiledConfiguration);
      tmp$_2 = $receiver_1;
    }
     else {
      tmp$_2 = new ExpressionNode(NodeType$EMPTY_getInstance(), "To get application result use argument 'withReadyApplicationResult' = 'true'");
    }
    result.add_11rb$(new SubstitutionApplication(transformation, originalExpression_0, tmp$_1, tmp$_2, applicationToSelectedPartResult, substitutionType, priority));
    ensureNotNull(transformationNodeParent).setChildOnPosition_gk94xr$(ensureNotNull(fullTransformationNode), transformationNodeIndex);
  }
  function computeResultsOfOpeningBracketsSubstitutions($receiver, compiledConfiguration, originalExpression) {
    if (originalExpression === void 0)
      originalExpression = $receiver;
    var tmp$;
    var result = ArrayList_init();
    tmp$ = get_lastIndex($receiver.children);
    for (var i = 0; i <= tmp$; i++) {
      if (!compiledConfiguration.definedFunctionNameNumberOfArgsSet.contains_11rb$($receiver.children.get_za3lpa$(i).value + '_' + $receiver.children.get_za3lpa$(i).children.size) && !compiledConfiguration.definedFunctionNameNumberOfArgsSet.contains_11rb$($receiver.children.get_za3lpa$(i).value + '_-1')) {
        var $receiver_0 = generalOpeningBracketsSubstitutions(originalExpression, $receiver.children.get_za3lpa$(i), $receiver, i, compiledConfiguration);
        var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
        var tmp$_0;
        tmp$_0 = $receiver_0.iterator();
        while (tmp$_0.hasNext()) {
          var item = tmp$_0.next();
          destination.add_11rb$(item.resultExpression);
        }
        result.addAll_brywnq$(destination);
      }
      result.addAll_brywnq$(computeResultsOfOpeningBracketsSubstitutions($receiver.children.get_za3lpa$(i), compiledConfiguration, originalExpression));
    }
    return result;
  }
  var TREE_COMPUTATION_RULES_PRIORITY;
  var TREE_COMPUTATION_DEFAULT;
  function SimpleComputationRuleParams(ruleCodes, isIncluded, maxCalcComplexity, maxTenPowIterations, maxPlusArgRounded, maxMulArgRounded, maxDivBaseRounded, maxPowBaseRounded, maxPowDegRounded, maxLogBaseRounded, maxResRounded, operationsMap) {
    if (ruleCodes === void 0) {
      ruleCodes = emptySet();
    }
    if (isIncluded === void 0)
      isIncluded = true;
    if (maxCalcComplexity === void 0)
      maxCalcComplexity = 5;
    if (maxTenPowIterations === void 0)
      maxTenPowIterations = 10;
    if (maxPlusArgRounded === void 0)
      maxPlusArgRounded = 200;
    if (maxMulArgRounded === void 0)
      maxMulArgRounded = 50;
    if (maxDivBaseRounded === void 0)
      maxDivBaseRounded = 400;
    if (maxPowBaseRounded === void 0)
      maxPowBaseRounded = 50;
    if (maxPowDegRounded === void 0)
      maxPowDegRounded = 10;
    if (maxLogBaseRounded === void 0)
      maxLogBaseRounded = 400;
    if (maxResRounded === void 0)
      maxResRounded = 400;
    if (operationsMap === void 0) {
      operationsMap = emptyMap();
    }
    this.ruleCodes = ruleCodes;
    this.isIncluded = isIncluded;
    this.maxCalcComplexity = maxCalcComplexity;
    this.maxTenPowIterations = maxTenPowIterations;
    this.maxPlusArgRounded = maxPlusArgRounded;
    this.maxMulArgRounded = maxMulArgRounded;
    this.maxDivBaseRounded = maxDivBaseRounded;
    this.maxPowBaseRounded = maxPowBaseRounded;
    this.maxPowDegRounded = maxPowDegRounded;
    this.maxLogBaseRounded = maxLogBaseRounded;
    this.maxResRounded = maxResRounded;
    this.operationsMap = operationsMap;
    this.operationsMap = mapOf_0([to('+', SimpleComputationRuleParams_init$lambda(this)), to('-', SimpleComputationRuleParams_init$lambda_0(this)), to('*', SimpleComputationRuleParams_init$lambda_1(this)), to('/', SimpleComputationRuleParams_init$lambda_2(this)), to('^', SimpleComputationRuleParams_init$lambda_3(this)), to('log', SimpleComputationRuleParams_init$lambda_4(this))]);
    if (!this.ruleCodes.isEmpty()) {
      if (this.ruleCodes.contains_11rb$('SimpleComputationBeforeSchool')) {
        this.maxCalcComplexity = 2;
        this.maxTenPowIterations = 3;
        this.maxPlusArgRounded = 1;
        this.maxMulArgRounded = 1;
        this.maxDivBaseRounded = 1;
        this.maxPowBaseRounded = 1;
        this.maxPowDegRounded = 1;
        this.maxLogBaseRounded = 1;
        this.maxResRounded = 10;
      }
       else if (this.ruleCodes.contains_11rb$('SimpleComputationYoungSchool')) {
        this.maxCalcComplexity = 3;
        this.maxTenPowIterations = 5;
        this.maxPlusArgRounded = 100;
        this.maxMulArgRounded = 10;
        this.maxDivBaseRounded = 10;
        this.maxPowBaseRounded = 1;
        this.maxPowDegRounded = 1;
        this.maxLogBaseRounded = 1;
        this.maxResRounded = 100;
      }
       else if (this.ruleCodes.contains_11rb$('SimpleComputationMiddleSchool')) {
        this.maxCalcComplexity = 5;
        this.maxTenPowIterations = 10;
        this.maxPlusArgRounded = 200;
        this.maxMulArgRounded = 50;
        this.maxDivBaseRounded = 400;
        this.maxPowBaseRounded = 50;
        this.maxPowDegRounded = 10;
        this.maxLogBaseRounded = 400;
        this.maxResRounded = 400;
      }
       else if (this.ruleCodes.contains_11rb$('SimpleComputationUniversity')) {
        this.maxCalcComplexity = 2147483647;
        this.maxTenPowIterations = 11;
        this.maxPlusArgRounded = 2147483647;
        this.maxMulArgRounded = 2147483647;
        this.maxDivBaseRounded = 2147483647;
        this.maxPowBaseRounded = 2147483647;
        this.maxPowDegRounded = 2147483647;
        this.maxLogBaseRounded = 2147483647;
        this.maxResRounded = 2147483647;
      }
    }
  }
  function SimpleComputationRuleParams_init$lambda(this$SimpleComputationRuleParams) {
    return function (args) {
      return plus_1(args, this$SimpleComputationRuleParams);
    };
  }
  function SimpleComputationRuleParams_init$lambda_0(this$SimpleComputationRuleParams) {
    return function (args) {
      return minus_0(args, this$SimpleComputationRuleParams);
    };
  }
  function SimpleComputationRuleParams_init$lambda_1(this$SimpleComputationRuleParams) {
    return function (args) {
      return mul(args, this$SimpleComputationRuleParams);
    };
  }
  function SimpleComputationRuleParams_init$lambda_2(this$SimpleComputationRuleParams) {
    return function (args) {
      return div(args, this$SimpleComputationRuleParams);
    };
  }
  function SimpleComputationRuleParams_init$lambda_3(this$SimpleComputationRuleParams) {
    return function (args) {
      return pow(args, this$SimpleComputationRuleParams);
    };
  }
  function SimpleComputationRuleParams_init$lambda_4(this$SimpleComputationRuleParams) {
    return function (args) {
      return log_0(args, this$SimpleComputationRuleParams);
    };
  }
  SimpleComputationRuleParams.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SimpleComputationRuleParams',
    interfaces: []
  };
  SimpleComputationRuleParams.prototype.component1 = function () {
    return this.ruleCodes;
  };
  SimpleComputationRuleParams.prototype.component2 = function () {
    return this.isIncluded;
  };
  SimpleComputationRuleParams.prototype.component3 = function () {
    return this.maxCalcComplexity;
  };
  SimpleComputationRuleParams.prototype.component4 = function () {
    return this.maxTenPowIterations;
  };
  SimpleComputationRuleParams.prototype.component5 = function () {
    return this.maxPlusArgRounded;
  };
  SimpleComputationRuleParams.prototype.component6 = function () {
    return this.maxMulArgRounded;
  };
  SimpleComputationRuleParams.prototype.component7 = function () {
    return this.maxDivBaseRounded;
  };
  SimpleComputationRuleParams.prototype.component8 = function () {
    return this.maxPowBaseRounded;
  };
  SimpleComputationRuleParams.prototype.component9 = function () {
    return this.maxPowDegRounded;
  };
  SimpleComputationRuleParams.prototype.component10 = function () {
    return this.maxLogBaseRounded;
  };
  SimpleComputationRuleParams.prototype.component11 = function () {
    return this.maxResRounded;
  };
  SimpleComputationRuleParams.prototype.component12 = function () {
    return this.operationsMap;
  };
  SimpleComputationRuleParams.prototype.copy_oq15gl$ = function (ruleCodes, isIncluded, maxCalcComplexity, maxTenPowIterations, maxPlusArgRounded, maxMulArgRounded, maxDivBaseRounded, maxPowBaseRounded, maxPowDegRounded, maxLogBaseRounded, maxResRounded, operationsMap) {
    return new SimpleComputationRuleParams(ruleCodes === void 0 ? this.ruleCodes : ruleCodes, isIncluded === void 0 ? this.isIncluded : isIncluded, maxCalcComplexity === void 0 ? this.maxCalcComplexity : maxCalcComplexity, maxTenPowIterations === void 0 ? this.maxTenPowIterations : maxTenPowIterations, maxPlusArgRounded === void 0 ? this.maxPlusArgRounded : maxPlusArgRounded, maxMulArgRounded === void 0 ? this.maxMulArgRounded : maxMulArgRounded, maxDivBaseRounded === void 0 ? this.maxDivBaseRounded : maxDivBaseRounded, maxPowBaseRounded === void 0 ? this.maxPowBaseRounded : maxPowBaseRounded, maxPowDegRounded === void 0 ? this.maxPowDegRounded : maxPowDegRounded, maxLogBaseRounded === void 0 ? this.maxLogBaseRounded : maxLogBaseRounded, maxResRounded === void 0 ? this.maxResRounded : maxResRounded, operationsMap === void 0 ? this.operationsMap : operationsMap);
  };
  SimpleComputationRuleParams.prototype.toString = function () {
    return 'SimpleComputationRuleParams(ruleCodes=' + Kotlin.toString(this.ruleCodes) + (', isIncluded=' + Kotlin.toString(this.isIncluded)) + (', maxCalcComplexity=' + Kotlin.toString(this.maxCalcComplexity)) + (', maxTenPowIterations=' + Kotlin.toString(this.maxTenPowIterations)) + (', maxPlusArgRounded=' + Kotlin.toString(this.maxPlusArgRounded)) + (', maxMulArgRounded=' + Kotlin.toString(this.maxMulArgRounded)) + (', maxDivBaseRounded=' + Kotlin.toString(this.maxDivBaseRounded)) + (', maxPowBaseRounded=' + Kotlin.toString(this.maxPowBaseRounded)) + (', maxPowDegRounded=' + Kotlin.toString(this.maxPowDegRounded)) + (', maxLogBaseRounded=' + Kotlin.toString(this.maxLogBaseRounded)) + (', maxResRounded=' + Kotlin.toString(this.maxResRounded)) + (', operationsMap=' + Kotlin.toString(this.operationsMap)) + ')';
  };
  SimpleComputationRuleParams.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.ruleCodes) | 0;
    result = result * 31 + Kotlin.hashCode(this.isIncluded) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxCalcComplexity) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxTenPowIterations) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxPlusArgRounded) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxMulArgRounded) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxDivBaseRounded) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxPowBaseRounded) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxPowDegRounded) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxLogBaseRounded) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxResRounded) | 0;
    result = result * 31 + Kotlin.hashCode(this.operationsMap) | 0;
    return result;
  };
  SimpleComputationRuleParams.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.ruleCodes, other.ruleCodes) && Kotlin.equals(this.isIncluded, other.isIncluded) && Kotlin.equals(this.maxCalcComplexity, other.maxCalcComplexity) && Kotlin.equals(this.maxTenPowIterations, other.maxTenPowIterations) && Kotlin.equals(this.maxPlusArgRounded, other.maxPlusArgRounded) && Kotlin.equals(this.maxMulArgRounded, other.maxMulArgRounded) && Kotlin.equals(this.maxDivBaseRounded, other.maxDivBaseRounded) && Kotlin.equals(this.maxPowBaseRounded, other.maxPowBaseRounded) && Kotlin.equals(this.maxPowDegRounded, other.maxPowDegRounded) && Kotlin.equals(this.maxLogBaseRounded, other.maxLogBaseRounded) && Kotlin.equals(this.maxResRounded, other.maxResRounded) && Kotlin.equals(this.operationsMap, other.operationsMap)))));
  };
  var simpleComputationRuleParamsDefault;
  var simpleComputationRuleParamsNoLimits;
  function calcComplexity($receiver) {
    var tmp$;
    if ($receiver.nodeType === NodeType$VARIABLE_getInstance() && (equals($receiver.value, '1') || equals($receiver.value, '0') || (toDoubleOrNull($receiver.value) != null && toReal_0(roundNumber(toDouble($receiver.value)) - 1.0).additivelyEqualToZero()))) {
      return 0;
    }
     else if ($receiver.children.isEmpty()) {
      return 1;
    }
    switch ($receiver.value) {
      case '':
      case '-':
      case '+':
        tmp$ = 0;
        break;
      case '*':
      case '/':
        tmp$ = 1;
        break;
      default:tmp$ = 2;
        break;
    }
    var tmp$_0 = tmp$;
    var tmp$_1;
    var sum = 0;
    tmp$_1 = $receiver.children.iterator();
    while (tmp$_1.hasNext()) {
      var element = tmp$_1.next();
      sum = sum + calcComplexity(element) | 0;
    }
    var nodeComplexity = tmp$_0 + sum | 0;
    return nodeComplexity;
  }
  function computeNodeIfPossible($receiver) {
    var tmp$;
    tmp$ = computeNodeIfSimpleRecursive($receiver, simpleComputationRuleParamsNoLimits);
    if (tmp$ == null) {
      return null;
    }
    var result = tmp$;
    return result;
  }
  function computeNodeIfSimple($receiver, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    var tmp$;
    tmp$ = computeNodeIfSimpleRecursive($receiver, simpleComputationRuleParams);
    if (tmp$ == null) {
      return null;
    }
    var result = tmp$;
    return result;
  }
  function computeNodeIfSimpleRecursive($receiver, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    var tmp$, tmp$_0, tmp$_1;
    if ($receiver.nodeType === NodeType$VARIABLE_getInstance()) {
      return toDoubleOrNull($receiver.value);
    }
     else if ($receiver.children.isEmpty()) {
      return null;
    }
    var listOfArgs = ArrayList_init();
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var childNode = tmp$.next();
      if (((tmp$_0 = computeNodeIfSimpleRecursive(childNode, simpleComputationRuleParams)) != null ? listOfArgs.add_11rb$(tmp$_0) : null) == null)
        return null;
    }
    return (tmp$_1 = simpleComputationRuleParams.operationsMap.get_11rb$($receiver.value)) != null ? tmp$_1(listOfArgs) : null;
  }
  function inZ(value) {
    return toReal_0(numberToInt(value) - value).additivelyEqualToZero();
  }
  function roundNumber(number) {
    var current = Math_0.abs(number);
    var leftIterations = 10;
    while (!toReal_0(current).additivelyEqualToZero() && inZ(current) && leftIterations > 0) {
      current /= 10;
      leftIterations = leftIterations - 1 | 0;
    }
    leftIterations = 10;
    while (!inZ(current) && leftIterations > 0) {
      current *= 10;
      leftIterations = leftIterations - 1 | 0;
    }
    return current;
  }
  function tenPowToMakeZ(number, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    var current = Math_0.abs(number);
    var iterations = 0;
    while (!inZ(current) && iterations < simpleComputationRuleParams.maxTenPowIterations) {
      current *= 10;
      iterations = iterations + 1 | 0;
    }
    return iterations;
  }
  function plus_1(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    var tmp$ = args.size === 2;
    if (tmp$) {
      var any$result;
      any$break: do {
        var tmp$_0;
        if (Kotlin.isType(args, Collection) && args.isEmpty()) {
          any$result = false;
          break any$break;
        }
        tmp$_0 = args.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (toReal_0(roundNumber(element) - 1.0).additivelyEqualToZero()) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      tmp$ = any$result;
    }
    if (tmp$) {
      return sum(args);
    }
    var result = sum(args);
    var count$result;
    count$break: do {
      var tmp$_1;
      if (Kotlin.isType(args, Collection) && args.isEmpty()) {
        count$result = 0;
        break count$break;
      }
      var count = 0;
      tmp$_1 = args.iterator();
      while (tmp$_1.hasNext()) {
        var element_0 = tmp$_1.next();
        if (roundNumber(element_0) > simpleComputationRuleParams.maxPlusArgRounded)
          checkCountOverflow((count = count + 1 | 0, count));
      }
      count$result = count;
    }
     while (false);
    if (count$result > 1 && roundNumber(result) > simpleComputationRuleParams.maxResRounded) {
      return null;
    }
    return result;
  }
  function minus_0(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    if (args.size !== 1) {
      return null;
    }
    return -first(args);
  }
  function mul(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    var tmp$;
    var tmp$_0 = args.size === 2;
    if (tmp$_0) {
      var any$result;
      any$break: do {
        var tmp$_1;
        if (Kotlin.isType(args, Collection) && args.isEmpty()) {
          any$result = false;
          break any$break;
        }
        tmp$_1 = args.iterator();
        while (tmp$_1.hasNext()) {
          var element = tmp$_1.next();
          if (toReal_0(roundNumber(element) - 2.0).additivelyEqualToZero()) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      tmp$_0 = any$result;
    }
    if (tmp$_0) {
      return first(args) * last(args);
    }
    var result = 1.0;
    tmp$ = args.iterator();
    while (tmp$.hasNext()) {
      var arg = tmp$.next();
      result *= arg;
    }
    var count$result;
    count$break: do {
      var tmp$_2;
      if (Kotlin.isType(args, Collection) && args.isEmpty()) {
        count$result = 0;
        break count$break;
      }
      var count = 0;
      tmp$_2 = args.iterator();
      while (tmp$_2.hasNext()) {
        var element_0 = tmp$_2.next();
        if (roundNumber(element_0) > simpleComputationRuleParams.maxMulArgRounded)
          checkCountOverflow((count = count + 1 | 0, count));
      }
      count$result = count;
    }
     while (false);
    if (count$result > 1 && roundNumber(result) > simpleComputationRuleParams.maxResRounded) {
      return null;
    }
    return result;
  }
  function div(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    if (args.size !== 2) {
      return null;
    }
    if (roundNumber(first(args)) > simpleComputationRuleParams.maxDivBaseRounded || roundNumber(last(args)) > simpleComputationRuleParams.maxMulArgRounded || last(args) === 0.0) {
      return null;
    }
    var result = first(args) / last(args);
    return result;
  }
  function pow(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    if (args.size !== 2) {
      return null;
    }
    var $receiver = first(args);
    var x = last(args);
    var result = Math_0.pow($receiver, x);
    if (!isFinite(result)) {
      return null;
    }
    if (roundNumber(result) > simpleComputationRuleParams.maxResRounded || (roundNumber(first(args)) > simpleComputationRuleParams.maxPowBaseRounded && roundNumber(last(args)) > simpleComputationRuleParams.maxPowDegRounded)) {
      return null;
    }
    return result;
  }
  function log_0(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    if (args.size !== 2) {
      return null;
    }
    var result = log(first(args), last(args));
    if (!isFinite(result) || (roundNumber(result) >= 1 && !inZ(result))) {
      return null;
    }
    if (roundNumber(result) > simpleComputationRuleParams.maxResRounded || (roundNumber(first(args)) > simpleComputationRuleParams.maxPowBaseRounded && roundNumber(last(args)) > simpleComputationRuleParams.maxLogBaseRounded)) {
      return null;
    }
    return result;
  }
  function sin(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    if (args.size !== 1) {
      return null;
    }
    var x = first(args);
    var result = Math_0.sin(x);
    if (!isFinite(result) || toReal_0(roundNumber(result)).additivelyEqualToZero() || toReal_0(roundNumber(result) - 0.5).additivelyEqualToZero() || toReal_0(roundNumber(result) - 1.0).additivelyEqualToZero()) {
      return null;
    }
    return result;
  }
  function cos(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    if (args.size !== 1) {
      return null;
    }
    var x = first(args);
    var result = Math_0.cos(x);
    if (!isFinite(result) || toReal_0(roundNumber(result)).additivelyEqualToZero() || toReal_0(roundNumber(result) - 0.5).additivelyEqualToZero() || toReal_0(roundNumber(result) - 1.0).additivelyEqualToZero()) {
      return null;
    }
    return result;
  }
  function tg(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    if (args.size !== 1) {
      return null;
    }
    var x = first(args);
    var result = Math_0.tan(x);
    if (!isFinite(result) || toReal_0(roundNumber(result)).additivelyEqualToZero() || toReal_0(roundNumber(result) - 1.0).additivelyEqualToZero()) {
      return null;
    }
    return result;
  }
  function ctg(args, simpleComputationRuleParams) {
    if (simpleComputationRuleParams === void 0)
      simpleComputationRuleParams = simpleComputationRuleParamsDefault;
    if (args.size !== 1) {
      return null;
    }
    var x = first(args);
    var result = 1 / Math_0.tan(x);
    if (!isFinite(result) || toReal_0(roundNumber(result)).additivelyEqualToZero() || toReal_0(roundNumber(result) - 1.0).additivelyEqualToZero()) {
      return null;
    }
    return result;
  }
  function ComparableTransformationPartType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ComparableTransformationPartType_initFields() {
    ComparableTransformationPartType_initFields = function () {
    };
    ComparableTransformationPartType$EXPRESSION_instance = new ComparableTransformationPartType('EXPRESSION', 0);
    ComparableTransformationPartType$EXPRESSION_COMPARISON_instance = new ComparableTransformationPartType('EXPRESSION_COMPARISON', 1);
    ComparableTransformationPartType$MAIN_LINE_AND_NODE_instance = new ComparableTransformationPartType('MAIN_LINE_AND_NODE', 2);
    ComparableTransformationPartType$MAIN_LINE_OR_NODE_instance = new ComparableTransformationPartType('MAIN_LINE_OR_NODE', 3);
    ComparableTransformationPartType$EXPRESSION_CHAIN_instance = new ComparableTransformationPartType('EXPRESSION_CHAIN', 4);
    ComparableTransformationPartType$RULE_instance = new ComparableTransformationPartType('RULE', 5);
    ComparableTransformationPartType$RULE_POINTER_instance = new ComparableTransformationPartType('RULE_POINTER', 6);
    ComparableTransformationPartType$EMPTY_instance = new ComparableTransformationPartType('EMPTY', 7);
  }
  var ComparableTransformationPartType$EXPRESSION_instance;
  function ComparableTransformationPartType$EXPRESSION_getInstance() {
    ComparableTransformationPartType_initFields();
    return ComparableTransformationPartType$EXPRESSION_instance;
  }
  var ComparableTransformationPartType$EXPRESSION_COMPARISON_instance;
  function ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance() {
    ComparableTransformationPartType_initFields();
    return ComparableTransformationPartType$EXPRESSION_COMPARISON_instance;
  }
  var ComparableTransformationPartType$MAIN_LINE_AND_NODE_instance;
  function ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() {
    ComparableTransformationPartType_initFields();
    return ComparableTransformationPartType$MAIN_LINE_AND_NODE_instance;
  }
  var ComparableTransformationPartType$MAIN_LINE_OR_NODE_instance;
  function ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance() {
    ComparableTransformationPartType_initFields();
    return ComparableTransformationPartType$MAIN_LINE_OR_NODE_instance;
  }
  var ComparableTransformationPartType$EXPRESSION_CHAIN_instance;
  function ComparableTransformationPartType$EXPRESSION_CHAIN_getInstance() {
    ComparableTransformationPartType_initFields();
    return ComparableTransformationPartType$EXPRESSION_CHAIN_instance;
  }
  var ComparableTransformationPartType$RULE_instance;
  function ComparableTransformationPartType$RULE_getInstance() {
    ComparableTransformationPartType_initFields();
    return ComparableTransformationPartType$RULE_instance;
  }
  var ComparableTransformationPartType$RULE_POINTER_instance;
  function ComparableTransformationPartType$RULE_POINTER_getInstance() {
    ComparableTransformationPartType_initFields();
    return ComparableTransformationPartType$RULE_POINTER_instance;
  }
  var ComparableTransformationPartType$EMPTY_instance;
  function ComparableTransformationPartType$EMPTY_getInstance() {
    ComparableTransformationPartType_initFields();
    return ComparableTransformationPartType$EMPTY_instance;
  }
  ComparableTransformationPartType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ComparableTransformationPartType',
    interfaces: [Enum]
  };
  function ComparableTransformationPartType$values() {
    return [ComparableTransformationPartType$EXPRESSION_getInstance(), ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance(), ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance(), ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance(), ComparableTransformationPartType$EXPRESSION_CHAIN_getInstance(), ComparableTransformationPartType$RULE_getInstance(), ComparableTransformationPartType$RULE_POINTER_getInstance(), ComparableTransformationPartType$EMPTY_getInstance()];
  }
  ComparableTransformationPartType.values = ComparableTransformationPartType$values;
  function ComparableTransformationPartType$valueOf(name) {
    switch (name) {
      case 'EXPRESSION':
        return ComparableTransformationPartType$EXPRESSION_getInstance();
      case 'EXPRESSION_COMPARISON':
        return ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance();
      case 'MAIN_LINE_AND_NODE':
        return ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance();
      case 'MAIN_LINE_OR_NODE':
        return ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance();
      case 'EXPRESSION_CHAIN':
        return ComparableTransformationPartType$EXPRESSION_CHAIN_getInstance();
      case 'RULE':
        return ComparableTransformationPartType$RULE_getInstance();
      case 'RULE_POINTER':
        return ComparableTransformationPartType$RULE_POINTER_getInstance();
      case 'EMPTY':
        return ComparableTransformationPartType$EMPTY_getInstance();
      default:throwISE('No enum constant mathhelper.twf.factstransformations.ComparableTransformationPartType.' + name);
    }
  }
  ComparableTransformationPartType.valueOf_61zpoe$ = ComparableTransformationPartType$valueOf;
  function ComparableTransformationsPart() {
  }
  ComparableTransformationsPart.prototype.check_i0qcxd$ = function (factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck, callback$default) {
    if (skipTrivialCheck === void 0)
      skipTrivialCheck = false;
    return callback$default ? callback$default(factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck) : this.check_i0qcxd$$default(factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck);
  };
  ComparableTransformationsPart.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ComparableTransformationsPart',
    interfaces: [TransformationsPart]
  };
  function ComparisonResult(isCorrect, coloringTasks, left, right, description, additionalFactUsed) {
    if (description === void 0)
      description = '';
    if (additionalFactUsed === void 0)
      additionalFactUsed = false;
    this.isCorrect = isCorrect;
    this.coloringTasks = coloringTasks;
    this.left = left;
    this.right = right;
    this.description = description;
    this.additionalFactUsed = additionalFactUsed;
  }
  ComparisonResult.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ComparisonResult',
    interfaces: []
  };
  ComparisonResult.prototype.component1 = function () {
    return this.isCorrect;
  };
  ComparisonResult.prototype.component2 = function () {
    return this.coloringTasks;
  };
  ComparisonResult.prototype.component3 = function () {
    return this.left;
  };
  ComparisonResult.prototype.component4 = function () {
    return this.right;
  };
  ComparisonResult.prototype.component5 = function () {
    return this.description;
  };
  ComparisonResult.prototype.component6 = function () {
    return this.additionalFactUsed;
  };
  ComparisonResult.prototype.copy_cmx64j$ = function (isCorrect, coloringTasks, left, right, description, additionalFactUsed) {
    return new ComparisonResult(isCorrect === void 0 ? this.isCorrect : isCorrect, coloringTasks === void 0 ? this.coloringTasks : coloringTasks, left === void 0 ? this.left : left, right === void 0 ? this.right : right, description === void 0 ? this.description : description, additionalFactUsed === void 0 ? this.additionalFactUsed : additionalFactUsed);
  };
  ComparisonResult.prototype.toString = function () {
    return 'ComparisonResult(isCorrect=' + Kotlin.toString(this.isCorrect) + (', coloringTasks=' + Kotlin.toString(this.coloringTasks)) + (', left=' + Kotlin.toString(this.left)) + (', right=' + Kotlin.toString(this.right)) + (', description=' + Kotlin.toString(this.description)) + (', additionalFactUsed=' + Kotlin.toString(this.additionalFactUsed)) + ')';
  };
  ComparisonResult.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.isCorrect) | 0;
    result = result * 31 + Kotlin.hashCode(this.coloringTasks) | 0;
    result = result * 31 + Kotlin.hashCode(this.left) | 0;
    result = result * 31 + Kotlin.hashCode(this.right) | 0;
    result = result * 31 + Kotlin.hashCode(this.description) | 0;
    result = result * 31 + Kotlin.hashCode(this.additionalFactUsed) | 0;
    return result;
  };
  ComparisonResult.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.isCorrect, other.isCorrect) && Kotlin.equals(this.coloringTasks, other.coloringTasks) && Kotlin.equals(this.left, other.left) && Kotlin.equals(this.right, other.right) && Kotlin.equals(this.description, other.description) && Kotlin.equals(this.additionalFactUsed, other.additionalFactUsed)))));
  };
  function MainChainPart() {
  }
  MainChainPart.prototype.isSolutionForVariables_axkv0l$ = function (targetVariables, left, allowedVariables, callback$default) {
    if (left === void 0)
      left = false;
    return callback$default ? callback$default(targetVariables, left, allowedVariables) : this.isSolutionForVariables_axkv0l$$default(targetVariables, left, allowedVariables);
  };
  MainChainPart.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'MainChainPart',
    interfaces: [ComparableTransformationsPart]
  };
  function MainLineNode() {
  }
  MainLineNode.prototype.isEmpty = function () {
    return this.factTransformationChains.isEmpty() && this.inFacts.isEmpty() && this.outFacts.isEmpty() && this.expressionTransformationChains.isEmpty() && this.rules.isEmpty();
  };
  MainLineNode.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'MainLineNode',
    interfaces: [MainChainPart]
  };
  function Expression(startPosition, endPosition, data, identifier, parent) {
    Expression$Companion_getInstance();
    if (startPosition === void 0)
      startPosition = 0;
    if (endPosition === void 0)
      endPosition = 0;
    if (identifier === void 0)
      identifier = '';
    if (parent === void 0)
      parent = null;
    this.startPosition_gzxxy5$_0 = startPosition;
    this.endPosition_kzdpac$_0 = endPosition;
    this.data = data;
    this.identifier_pi6abh$_0 = identifier;
    this.parent_gbxkta$_0 = parent;
  }
  Object.defineProperty(Expression.prototype, 'startPosition', {
    get: function () {
      return this.startPosition_gzxxy5$_0;
    }
  });
  Object.defineProperty(Expression.prototype, 'endPosition', {
    get: function () {
      return this.endPosition_kzdpac$_0;
    }
  });
  Object.defineProperty(Expression.prototype, 'identifier', {
    get: function () {
      return this.identifier_pi6abh$_0;
    },
    set: function (identifier) {
      this.identifier_pi6abh$_0 = identifier;
    }
  });
  Object.defineProperty(Expression.prototype, 'parent', {
    get: function () {
      return this.parent_gbxkta$_0;
    },
    set: function (parent) {
      this.parent_gbxkta$_0 = parent;
    }
  });
  Expression.prototype.getLastExpression = function () {
    return this;
  };
  Expression.prototype.isSolutionWithoutFunctions_o78e5l$ = function (forbidden, targetExpression, factComparator) {
    var tmp$;
    tmp$ = forbidden.iterator();
    while (tmp$.hasNext()) {
      var function_0 = tmp$.next();
      if (this.data.containsFunction_bm4lxs$(function_0.first, function_0.second)) {
        return new GeneralError('Answer contains forbidden function or operation');
      }
    }
    return null;
  };
  Expression.prototype.isFactorizationForVariables_s6qnlc$ = function (minNumberOfMultipliers, targetVariables, targetExpression, factComparator) {
    var tmp$;
    var tmp$_0 = factComparator.expressionComparator;
    var tmp$_1 = this.data;
    var tmp$_2 = void 0;
    var $receiver = (new FunctionConfiguration()).notChangesOnVariablesInComparisonFunction;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_3;
    tmp$_3 = $receiver.iterator();
    while (tmp$_3.hasNext()) {
      var item = tmp$_3.next();
      destination.add_11rb$(item.getIdentifier());
    }
    var comparisonResult = tmp$_0.compareWithoutSubstitutions_fb5b0y$(tmp$_1, targetExpression, tmp$_2, toSet(destination));
    if (!comparisonResult) {
      return new GeneralError('Answer not equal to original expression');
    }
    if (minNumberOfMultipliers <= 1) {
      return null;
    }
    var topNode = this.data;
    while (isBlank(topNode.value) && topNode.children.size === 1) {
      topNode = first(topNode.children);
    }
    if (!equals(topNode.value, '*')) {
      return new GeneralError('Answer is not factorized');
    }
    var numberOfMultipliers = 0;
    tmp$ = topNode.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var containedVariables = this.data.getContainedVariables_ywdfdh$(targetVariables);
      if (!containedVariables.isEmpty()) {
        numberOfMultipliers = numberOfMultipliers + 1 | 0;
      }
    }
    if (numberOfMultipliers < minNumberOfMultipliers) {
      return new GeneralError('Not enough multipliers in the answer');
    }
    return null;
  };
  Expression.prototype.hasNoFractions_qclyqr$ = function (maxNumberOfDivisions, targetExpression, factComparator) {
    var tmp$ = factComparator.expressionComparator;
    var tmp$_0 = this.data;
    var tmp$_1 = void 0;
    var $receiver = (new FunctionConfiguration()).notChangesOnVariablesInComparisonFunction;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_2;
    tmp$_2 = $receiver.iterator();
    while (tmp$_2.hasNext()) {
      var item = tmp$_2.next();
      destination.add_11rb$(item.getIdentifier());
    }
    var comparisonResult = tmp$.compareWithoutSubstitutions_fb5b0y$(tmp$_0, targetExpression, tmp$_1, toSet(destination));
    if (!comparisonResult) {
      return new GeneralError('Answer not equal to original expression');
    }
    if (this.data.canContainDivisions()) {
      return new GeneralError('Answer contains fraction');
    }
    return null;
  };
  function Expression$isSolutionForVariables$lambda(it) {
    return "'" + it + "'";
  }
  function Expression$isSolutionForVariables$lambda_0(it) {
    return "'" + it + "'";
  }
  function Expression$isSolutionForVariables$lambda_1(it) {
    return "'" + it + "'";
  }
  Expression.prototype.isSolutionForVariables_axkv0l$$default = function (targetVariables, left, allowedVariables) {
    if (left) {
      if (this.data.containsFunctions()) {
        return new GeneralError('left part of the result contains functions or operations');
      }
      var containedVariables = this.data.getVariableNames_ywdfdh$();
      if (containedVariables.size > 1) {
        return new GeneralError('left part of the result contains more than one variable: ' + joinToString(containedVariables, void 0, void 0, void 0, void 0, void 0, Expression$isSolutionForVariables$lambda));
      }
       else if (containedVariables.size === 1) {
        targetVariables.put_xwzc9p$(first_0(containedVariables), true);
      }
      return null;
    }
     else {
      var containedVariables_0 = this.data.getContainedVariables_ywdfdh$(targetVariables.keys);
      if (!containedVariables_0.isEmpty()) {
        return new GeneralError('right part of the result contains unknown variables: ' + joinToString(containedVariables_0, void 0, void 0, void 0, void 0, void 0, Expression$isSolutionForVariables$lambda_0));
      }
       else {
        if (!allowedVariables.isEmpty()) {
          var notContainedVariables = this.data.getNotContainedVariables_ywdfdh$(allowedVariables);
          if (!notContainedVariables.isEmpty()) {
            return new GeneralError('right part of the result contains unknown variables: ' + joinToString(notContainedVariables, void 0, void 0, void 0, void 0, void 0, Expression$isSolutionForVariables$lambda_1));
          }
        }
      }
      return null;
    }
  };
  Expression.prototype.variableReplacement_y0zsll$ = function (replacements) {
    this.data.variableReplacement_y0zsll$(replacements);
  };
  Expression.prototype.computeIfNumeric_gb8qxc$ = function (substitutionInstance, baseOperationsDefinitions) {
    var tmp$, tmp$_0;
    var variableNames = this.data.getVariableNames_ywdfdh$();
    var pointI = LinkedHashMap_init_0();
    tmp$ = variableNames.iterator();
    while (tmp$.hasNext()) {
      var variableName = tmp$.next();
      tmp$_0 = substitutionInstance.getExprVar_61zpoe$(variableName);
      if (tmp$_0 == null) {
        continue;
      }
      var node = tmp$_0;
      var value = baseOperationsDefinitions.simplifyExpressionTree_em03xr$(node.clone()).value;
      pointI.put_xwzc9p$(variableName, value);
    }
    var result = toDoubleOrNull(baseOperationsDefinitions.simplifyExpressionTree_em03xr$(this.data.cloneWithNormalization_1g1bdl$(pointI, false)).value);
    return result;
  };
  Expression.prototype.clone = function () {
    return new Expression(this.startPosition, this.endPosition, this.data.clone(), void 0, this.parent);
  };
  Expression.prototype.cloneWithNormalization_1g1bdl$ = function (nameArgsMap, sorted) {
    return new Expression(this.startPosition, this.endPosition, this.data.cloneWithNormalization_1g1bdl$(nameArgsMap, sorted), void 0, this.parent);
  };
  Expression.prototype.normalizeSubTree_f8z7ch$ = function (currentDeep, nameArgsMap, sorted) {
    this.data.normalizeSubTree_f8z7ch$(currentDeep, nameArgsMap, sorted);
  };
  Expression.prototype.applyAllExpressionSubstitutions_itxcjl$ = function (expressionSubstitutions) {
    applyAllSubstitutions(this.data, expressionSubstitutions);
  };
  Expression.prototype.computeExpressionTrees_r1dnaj$ = function (baseOperationsDefinitions) {
    this.data = baseOperationsDefinitions.simplifyExpressionTree_em03xr$(this.data);
  };
  Expression.prototype.replaceNotDefinedFunctionsOnVariables_ioe5p3$ = function (functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet) {
    this.data.replaceNotDefinedFunctionsOnVariables_lvgqkd$(functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet);
  };
  Expression.prototype.copyNode = function () {
    return new Expression(this.startPosition, this.endPosition, new ExpressionNode(NodeType$EMPTY_getInstance(), ''), void 0, this.parent);
  };
  function Expression$check$lambda() {
    return 'This method must not been called. Undefined behaviour. MSG_CODE_1537133804710';
  }
  Expression.prototype.check_i0qcxd$$default = function (factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck) {
    log_1.addMessage_cte53e$(Expression$check$lambda);
    return new ComparisonResult(true, ArrayList_init(), this, this);
  };
  Expression.prototype.type = function () {
    return ComparableTransformationPartType$EXPRESSION_getInstance();
  };
  Expression.prototype.toString = function () {
    return this.data.toString();
  };
  Expression.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.identifier) || recomputeIfComputed) {
      this.identifier = this.data.computeIdentifier_5osufp$();
    }
    return this.identifier;
  };
  Expression.prototype.computeInIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  Expression.prototype.computeOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  Expression.prototype.computeSortedOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  Expression.prototype.getDesignation = function () {
    return this.data.nodeType === NodeType$VARIABLE_getInstance() ? this.data.value : equals(this.data.value, '') && this.data.children.size === 1 && this.data.children.get_za3lpa$(0).nodeType === NodeType$VARIABLE_getInstance() ? this.data.children.get_za3lpa$(0).value : '';
  };
  Expression.prototype.isDesignation = function () {
    return this.data.nodeType === NodeType$VARIABLE_getInstance() ? true : equals(this.data.value, '') && this.data.children.size === 1 && this.data.children.get_za3lpa$(0).nodeType === NodeType$VARIABLE_getInstance() ? true : false;
  };
  function Expression$Companion() {
    Expression$Companion_instance = this;
  }
  Expression$Companion.prototype.parseFromFactIdentifier_r5gof1$ = function (string, parent, functionConfiguration) {
    if (parent === void 0)
      parent = null;
    var $receiver = (new VariableConfiguration()).variableImmediateReplacementRules;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(new Pair(item.left, item.right));
    }
    var expressionTreeParser = new ExpressionTreeParser(string, true, functionConfiguration, mapOf_0(copyToArray(destination).slice()));
    var error = expressionTreeParser.parse();
    return new Expression(0, 0, expressionTreeParser.root, void 0, parent);
  };
  Expression$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Expression$Companion_instance = null;
  function Expression$Companion_getInstance() {
    if (Expression$Companion_instance === null) {
      new Expression$Companion();
    }
    return Expression$Companion_instance;
  }
  Expression.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Expression',
    interfaces: [MainChainPart]
  };
  function emptyExpression() {
    return new Expression(0, 0, new ExpressionNode(NodeType$EMPTY_getInstance(), ''));
  }
  function ExpressionChain(startPosition, endPosition, comparisonType, chain, identifier) {
    if (startPosition === void 0)
      startPosition = 0;
    if (endPosition === void 0)
      endPosition = 0;
    if (chain === void 0) {
      chain = ArrayList_init();
    }
    if (identifier === void 0)
      identifier = '';
    this.startPosition_72iysk$_0 = startPosition;
    this.endPosition_y17ykd$_0 = endPosition;
    this.comparisonType = comparisonType;
    this.chain = chain;
    this.identifier_u04ew4$_0 = identifier;
  }
  Object.defineProperty(ExpressionChain.prototype, 'startPosition', {
    get: function () {
      return this.startPosition_72iysk$_0;
    }
  });
  Object.defineProperty(ExpressionChain.prototype, 'endPosition', {
    get: function () {
      return this.endPosition_y17ykd$_0;
    }
  });
  Object.defineProperty(ExpressionChain.prototype, 'identifier', {
    get: function () {
      return this.identifier_u04ew4$_0;
    },
    set: function (identifier) {
      this.identifier_u04ew4$_0 = identifier;
    }
  });
  ExpressionChain.prototype.type = function () {
    return ComparableTransformationPartType$EXPRESSION_CHAIN_getInstance();
  };
  function ExpressionChain$toString$lambda(it) {
    return it.toString();
  }
  ExpressionChain.prototype.toString = function () {
    return joinToString(this.chain, this.comparisonType.string, void 0, void 0, void 0, void 0, ExpressionChain$toString$lambda);
  };
  ExpressionChain.prototype.copyNode = function () {
    return new ExpressionChain(this.startPosition, this.endPosition, this.comparisonType, ArrayList_init());
  };
  ExpressionChain.prototype.cloneWithNormalization_1g1bdl$ = function (nameArgsMap, sorted) {
    var tmp$ = this.startPosition;
    var tmp$_0 = this.endPosition;
    var tmp$_1 = this.comparisonType;
    var $receiver = this.chain;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_2;
    tmp$_2 = $receiver.iterator();
    while (tmp$_2.hasNext()) {
      var item = tmp$_2.next();
      destination.add_11rb$(item.cloneWithNormalization_1g1bdl$(nameArgsMap, sorted));
    }
    return new ExpressionChain(tmp$, tmp$_0, tmp$_1, toMutableList(destination));
  };
  ExpressionChain.prototype.variableReplacement_y0zsll$ = function (replacements) {
    var tmp$;
    tmp$ = this.chain.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.variableReplacement_y0zsll$(replacements);
    }
  };
  function ExpressionChain$computeIdentifier$lambda(closure$recomputeIfComputed) {
    return function (it) {
      return it.computeIdentifier_6taknv$(closure$recomputeIfComputed);
    };
  }
  ExpressionChain.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.identifier) || recomputeIfComputed) {
      this.identifier = joinToString(this.chain, this.comparisonType.string, void 0, void 0, void 0, void 0, ExpressionChain$computeIdentifier$lambda(recomputeIfComputed));
    }
    return this.identifier;
  };
  ExpressionChain.prototype.computeInIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  ExpressionChain.prototype.computeOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  ExpressionChain.prototype.computeSortedOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  function ExpressionChain$check$lambda() {
    return 'Start checking expression chain';
  }
  function ExpressionChain$check$lambda_0() {
    return 'expression chain: ';
  }
  function ExpressionChain$check$lambda_1() {
    return '';
  }
  function ExpressionChain$check$lambda_2(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel.v;
    };
  }
  function ExpressionChain$check$lambda_3() {
    return 'currentLeftIndex';
  }
  function ExpressionChain$check$lambda_4() {
    return 'currentRightIndex';
  }
  function ExpressionChain$check$lambda_5() {
    return 'Check RULE';
  }
  function ExpressionChain$check$lambda_6() {
    return 'Expression transformation recognized:';
  }
  function ExpressionChain$check$lambda_7() {
    return 'RULE VERIFICATION_FAILED';
  }
  function ExpressionChain$check$lambda_8() {
    return 'RULE CANNOT_BE_APPLIED_TO_EXPRESSIONS -> VERIFICATION_FAILED';
  }
  function ExpressionChain$check$lambda_9() {
    return "Coloring task on positions: '";
  }
  function ExpressionChain$check$lambda_10() {
    return "' - '";
  }
  function ExpressionChain$check$lambda_11() {
    return "', factNotHelpFactColor = '";
  }
  function ExpressionChain$check$lambda_12() {
    return '';
  }
  function ExpressionChain$check$lambda_13() {
    return "Handling RULE_REFERENCE '";
  }
  function ExpressionChain$check$lambda_14() {
    return "'";
  }
  function ExpressionChain$check$lambda_15() {
    return "ERROR: RULE_REFERENCE '";
  }
  function ExpressionChain$check$lambda_16() {
    return "' not found";
  }
  function ExpressionChain$check$lambda_17() {
    return "Coloring task on positions: '";
  }
  function ExpressionChain$check$lambda_18() {
    return "' - '";
  }
  function ExpressionChain$check$lambda_19() {
    return "', wrongFactColor = '";
  }
  function ExpressionChain$check$lambda_20() {
    return '';
  }
  function ExpressionChain$check$lambda_21(it) {
    return "'" + it + "'";
  }
  function ExpressionChain$check$lambda_22() {
    return 'currentRightIndex';
  }
  function ExpressionChain$check$lambda_23() {
    return 'Check transformation from left fact to right fact:';
  }
  function ExpressionChain$check$lambda_24() {
    return 'Left expression: ';
  }
  function ExpressionChain$check$lambda_25() {
    return 'Right expression: ';
  }
  function ExpressionChain$check$lambda_26() {
    return "Coloring task on positions: '";
  }
  function ExpressionChain$check$lambda_27() {
    return "' - '";
  }
  function ExpressionChain$check$lambda_28() {
    return "', color = '";
  }
  function ExpressionChain$check$lambda_29() {
    return '';
  }
  function ExpressionChain$check$lambda_30() {
    return "Transformation verified, isInTaskContext: '";
  }
  function ExpressionChain$check$lambda_31() {
    return "'";
  }
  function ExpressionChain$check$lambda_32() {
    return 'additionalFactUsed';
  }
  function ExpressionChain$check$lambda_33() {
    return "Coloring task on positions: '";
  }
  function ExpressionChain$check$lambda_34() {
    return "' - '";
  }
  function ExpressionChain$check$lambda_35() {
    return "', factNotHelpFactColor = '";
  }
  function ExpressionChain$check$lambda_36() {
    return '';
  }
  function ExpressionChain$check$lambda_37() {
    return 'VERIFICATION_FAILED';
  }
  function ExpressionChain$check$lambda_38() {
    return 'Left expression: ';
  }
  function ExpressionChain$check$lambda_39() {
    return 'Right expression: ';
  }
  function ExpressionChain$check$lambda_40() {
    return "Coloring task on positions: '";
  }
  function ExpressionChain$check$lambda_41() {
    return "' - '";
  }
  function ExpressionChain$check$lambda_42() {
    return "', correctFactColor = '";
  }
  function ExpressionChain$check$lambda_43() {
    return '';
  }
  function ExpressionChain$check$lambda_44() {
    return 'TRANSFORMATION_VERIFIED and correct not only in task context';
  }
  function ExpressionChain$check$lambda_45() {
    return 'VERIFICATION_FAILED not only in task context. Try to check transformation only in task context';
  }
  function ExpressionChain$check$lambda_46() {
    return "Coloring task on positions: '";
  }
  function ExpressionChain$check$lambda_47() {
    return "' - '";
  }
  function ExpressionChain$check$lambda_48() {
    return "', correctFactColor = '";
  }
  function ExpressionChain$check$lambda_49() {
    return '';
  }
  function ExpressionChain$check$lambda_50() {
    return 'TRANSFORMATION_VERIFIED and correct only in task context';
  }
  function ExpressionChain$check$lambda_51() {
    return 'additionalFactUsed';
  }
  function ExpressionChain$check$lambda_52() {
    return 'Transformation not verified, try to check transformation with rules and additional facts';
  }
  function ExpressionChain$check$lambda_53() {
    return "Coloring task on positions: '";
  }
  function ExpressionChain$check$lambda_54() {
    return "' - '";
  }
  function ExpressionChain$check$lambda_55() {
    return "', color = '";
  }
  function ExpressionChain$check$lambda_56() {
    return '';
  }
  function ExpressionChain$check$lambda_57() {
    return 'additionalFactUsed';
  }
  function ExpressionChain$check$lambda_58() {
    return "Coloring task on positions: '";
  }
  function ExpressionChain$check$lambda_59() {
    return "' - '";
  }
  function ExpressionChain$check$lambda_60() {
    return "', wrongFactColor = '";
  }
  function ExpressionChain$check$lambda_61() {
    return '';
  }
  function ExpressionChain$check$lambda_62() {
    return 'VERIFICATION_FAILED';
  }
  function ExpressionChain$check$lambda_63() {
    return 'currentLeftIndex';
  }
  function ExpressionChain$check$lambda_64() {
    return 'currentRightIndex';
  }
  function ExpressionChain$check$lambda_65(this$ExpressionChain) {
    return function () {
      return CheckingKeyWords$Companion_getInstance().expressionChainVerified + ". '" + first(this$ExpressionChain.chain) + "' " + this$ExpressionChain.comparisonType.string + " '" + last(this$ExpressionChain.chain) + "'";
    };
  }
  ExpressionChain.prototype.check_i0qcxd$$default = function (factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25;
    log_1.addMessage_cte53e$(ExpressionChain$check$lambda, MessageType$USER_getInstance(), void 0, 1);
    log_1.add_ww6hhz$(this.chain.toString(), ExpressionChain$check$lambda_0, ExpressionChain$check$lambda_1);
    var currentLogLevel = {v: log_1.currentLevel};
    log_1.addMessage_cte53e$(ExpressionChain$check$lambda_2(currentLogLevel), void 0, currentLogLevel.v);
    var coloringTasks = ArrayList_init();
    var currentLeftIndex = log_1.assignAndLog_746w4o$(0, currentLogLevel.v, ExpressionChain$check$lambda_3);
    var currentRightIndex = log_1.assignAndLog_746w4o$(1, currentLogLevel.v, ExpressionChain$check$lambda_4);
    var additionalFactUsed = false;
    while (currentRightIndex < this.chain.size) {
      if (this.chain.get_za3lpa$(currentRightIndex).type() !== ComparableTransformationPartType$EXPRESSION_getInstance()) {
        if (this.chain.get_za3lpa$(currentRightIndex).type() === ComparableTransformationPartType$RULE_getInstance()) {
          var rule = Kotlin.isType(tmp$ = this.chain.get_za3lpa$(currentRightIndex), Rule) ? tmp$ : throwCCE();
          log_1.addMessageWithFactDetail_d1xyjh$(ExpressionChain$check$lambda_5, rule.root, MessageType$USER_getInstance(), currentLogLevel.v);
          var checkingResult = rule.check_i0qcxd$(factComparator, false, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck);
          if (checkingResult.isCorrect && rule.expressionSubstitution != null) {
            log_1.addMessageWithExpressionSubstitutionShort_w3y3zc$(ExpressionChain$check$lambda_6, ensureNotNull(rule.expressionSubstitution), MessageType$USER_getInstance(), currentLogLevel.v);
            tmp$_1 = ensureNotNull(rule.expressionSubstitution);
          }
           else {
            if (!checkingResult.isCorrect) {
              log_1.addMessage_cte53e$(ExpressionChain$check$lambda_7, MessageType$USER_getInstance(), currentLogLevel.v);
              coloringTasks.addAll_brywnq$(checkingResult.coloringTasks);
              return new ComparisonResult(false, coloringTasks, this.chain.get_za3lpa$(currentLeftIndex), this.chain.get_za3lpa$(currentRightIndex + 1 | 0), 'RULE VERIFICATION_FAILED');
            }
             else {
              log_1.addMessage_cte53e$(ExpressionChain$check$lambda_8, MessageType$USER_getInstance(), currentLogLevel.v);
              log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex + 1 | 0).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factNotHelpFactColor, ExpressionChain$check$lambda_9, ExpressionChain$check$lambda_10, ExpressionChain$check$lambda_11, ExpressionChain$check$lambda_12, currentLogLevel.v);
              coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex + 1 | 0).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factNotHelpFactColor));
              return new ComparisonResult(false, coloringTasks, this.chain.get_za3lpa$(currentLeftIndex), this.chain.get_za3lpa$(currentRightIndex + 1 | 0), 'RULE CANNOT_BE_APPLIED_TO_EXPRESSIONS');
            }
          }
        }
         else {
          var ruleName = (Kotlin.isType(tmp$_0 = this.chain.get_za3lpa$(currentRightIndex), RulePointer) ? tmp$_0 : throwCCE()).nameLink;
          log_1.add_ww6hhz$(ruleName, ExpressionChain$check$lambda_13, ExpressionChain$check$lambda_14, currentLogLevel.v, void 0, MessageType$USER_getInstance());
          var destination = ArrayList_init();
          var tmp$_26;
          tmp$_26 = expressionTransformations.iterator();
          while (tmp$_26.hasNext()) {
            var element = tmp$_26.next();
            if (equals(element.code, ruleName))
              destination.add_11rb$(element);
          }
          var rules = destination;
          if (rules.isEmpty()) {
            log_1.add_ww6hhz$(ruleName, ExpressionChain$check$lambda_15, ExpressionChain$check$lambda_16, currentLogLevel.v, void 0, MessageType$USER_getInstance());
            log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex + 1 | 0).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongFactColor, ExpressionChain$check$lambda_17, ExpressionChain$check$lambda_18, ExpressionChain$check$lambda_19, ExpressionChain$check$lambda_20, currentLogLevel.v);
            coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex + 1 | 0).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongFactColor));
            var tmp$_27 = this.chain.get_za3lpa$(currentLeftIndex);
            var tmp$_28 = this.chain.get_za3lpa$(currentRightIndex + 1 | 0);
            var tmp$_29 = "Rule with name '" + ruleName + "' not found. Exists only rules with names: ";
            var destination_0 = ArrayList_init_0(collectionSizeOrDefault(expressionTransformations, 10));
            var tmp$_30;
            tmp$_30 = expressionTransformations.iterator();
            while (tmp$_30.hasNext()) {
              var item = tmp$_30.next();
              destination_0.add_11rb$(item.code);
            }
            var destination_1 = ArrayList_init();
            var tmp$_31;
            tmp$_31 = destination_0.iterator();
            while (tmp$_31.hasNext()) {
              var element_0 = tmp$_31.next();
              if (!isBlank(element_0))
                destination_1.add_11rb$(element_0);
            }
            return new ComparisonResult(false, coloringTasks, tmp$_27, tmp$_28, tmp$_29 + joinToString(destination_1, void 0, void 0, void 0, void 0, void 0, ExpressionChain$check$lambda_21));
          }
          tmp$_1 = first(rules);
        }
        var transformation = tmp$_1;
        currentRightIndex = log_1.assignAndLog_746w4o$(currentRightIndex + 1 | 0, currentLogLevel.v, ExpressionChain$check$lambda_22);
        log_1.addMessage_cte53e$(ExpressionChain$check$lambda_23, MessageType$USER_getInstance(), currentLogLevel.v);
        currentLogLevel.v = currentLogLevel.v + 1 | 0;
        log_1.addMessageWithExpression_3hyvb1$(ExpressionChain$check$lambda_24, (Kotlin.isType(tmp$_2 = this.chain.get_za3lpa$(currentLeftIndex), Expression) ? tmp$_2 : throwCCE()).data, MessageType$USER_getInstance(), currentLogLevel.v);
        log_1.addMessageWithExpression_3hyvb1$(ExpressionChain$check$lambda_25, (Kotlin.isType(tmp$_3 = this.chain.get_za3lpa$(currentRightIndex), Expression) ? tmp$_3 : throwCCE()).data, MessageType$USER_getInstance(), currentLogLevel.v);
        var result = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$((Kotlin.isType(tmp$_4 = this.chain.get_za3lpa$(currentLeftIndex), Expression) ? tmp$_4 : throwCCE()).data, (Kotlin.isType(tmp$_5 = this.chain.get_za3lpa$(currentRightIndex), Expression) ? tmp$_5 : throwCCE()).data, listOf(transformation), void 0, void 0, void 0, this.comparisonType, factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
        if (result) {
          log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor, ExpressionChain$check$lambda_26, ExpressionChain$check$lambda_27, ExpressionChain$check$lambda_28, ExpressionChain$check$lambda_29, currentLogLevel.v);
          coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor));
          log_1.add_ww6hhz$(transformation.basedOnTaskContext, ExpressionChain$check$lambda_30, ExpressionChain$check$lambda_31, currentLogLevel.v, void 0, MessageType$USER_getInstance());
          if (transformation.basedOnTaskContext) {
            additionalFactUsed = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, ExpressionChain$check$lambda_32);
          }
        }
         else {
          log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factNotHelpFactColor, ExpressionChain$check$lambda_33, ExpressionChain$check$lambda_34, ExpressionChain$check$lambda_35, ExpressionChain$check$lambda_36, currentLogLevel.v);
          coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factNotHelpFactColor));
          log_1.addMessage_cte53e$(ExpressionChain$check$lambda_37, MessageType$USER_getInstance(), currentLogLevel.v);
          return new ComparisonResult(false, coloringTasks, this.chain.get_za3lpa$(currentLeftIndex), this.chain.get_za3lpa$(currentRightIndex), "Unclear transformation between '" + (Kotlin.isType(tmp$_6 = this.chain.get_za3lpa$(currentLeftIndex), Expression) ? tmp$_6 : throwCCE()).data + "' and '" + (Kotlin.isType(tmp$_7 = this.chain.get_za3lpa$(currentRightIndex), Expression) ? tmp$_7 : throwCCE()).data + "' even with rule");
        }
        currentLogLevel.v = currentLogLevel.v - 1 | 0;
      }
       else {
        log_1.addMessageWithExpression_3hyvb1$(ExpressionChain$check$lambda_38, (Kotlin.isType(tmp$_8 = this.chain.get_za3lpa$(currentLeftIndex), Expression) ? tmp$_8 : throwCCE()).data, MessageType$USER_getInstance(), currentLogLevel.v);
        log_1.addMessageWithExpression_3hyvb1$(ExpressionChain$check$lambda_39, (Kotlin.isType(tmp$_9 = this.chain.get_za3lpa$(currentRightIndex), Expression) ? tmp$_9 : throwCCE()).data, MessageType$USER_getInstance(), currentLogLevel.v);
        tmp$_14 = factComparator.expressionComparator;
        tmp$_11 = (Kotlin.isType(tmp$_10 = this.chain.get_za3lpa$(currentLeftIndex), Expression) ? tmp$_10 : throwCCE()).data;
        tmp$_13 = (Kotlin.isType(tmp$_12 = this.chain.get_za3lpa$(currentRightIndex), Expression) ? tmp$_12 : throwCCE()).data;
        var destination_2 = ArrayList_init();
        var tmp$_32;
        tmp$_32 = expressionTransformations.iterator();
        while (tmp$_32.hasNext()) {
          var element_1 = tmp$_32.next();
          if (!element_1.basedOnTaskContext)
            destination_2.add_11rb$(element_1);
        }
        var $receiver = factComparator.compiledConfiguration.compiledExpressionTreeTransformationRules;
        var destination_3 = ArrayList_init();
        var tmp$_33;
        tmp$_33 = $receiver.iterator();
        while (tmp$_33.hasNext()) {
          var element_2 = tmp$_33.next();
          if (!element_2.basedOnTaskContext)
            destination_3.add_11rb$(element_2);
        }
        var result_0 = tmp$_14.compareWithTreeTransformationRules_8lnv8j$(tmp$_11, tmp$_13, plus(destination_2, destination_3), void 0, void 0, void 0, this.comparisonType, factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
        if (result_0) {
          log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor, ExpressionChain$check$lambda_40, ExpressionChain$check$lambda_41, ExpressionChain$check$lambda_42, ExpressionChain$check$lambda_43, currentLogLevel.v);
          coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor));
          log_1.addMessage_cte53e$(ExpressionChain$check$lambda_44, MessageType$USER_getInstance(), currentLogLevel.v);
        }
         else {
          log_1.addMessage_cte53e$(ExpressionChain$check$lambda_45, MessageType$USER_getInstance(), currentLogLevel.v);
          var resultInContext = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$((Kotlin.isType(tmp$_15 = this.chain.get_za3lpa$(currentLeftIndex), Expression) ? tmp$_15 : throwCCE()).data, (Kotlin.isType(tmp$_16 = this.chain.get_za3lpa$(currentRightIndex), Expression) ? tmp$_16 : throwCCE()).data, plus(expressionTransformations, factComparator.compiledConfiguration.compiledExpressionTreeTransformationRules), void 0, void 0, void 0, this.comparisonType, factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
          if (resultInContext) {
            log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor, ExpressionChain$check$lambda_46, ExpressionChain$check$lambda_47, ExpressionChain$check$lambda_48, ExpressionChain$check$lambda_49, currentLogLevel.v);
            coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor));
            log_1.addMessage_cte53e$(ExpressionChain$check$lambda_50, MessageType$USER_getInstance(), currentLogLevel.v);
            additionalFactUsed = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, ExpressionChain$check$lambda_51);
          }
           else {
            log_1.addMessage_cte53e$(ExpressionChain$check$lambda_52);
            var fullFact = new ExpressionComparison(void 0, void 0, Kotlin.isType(tmp$_17 = this.chain.get_za3lpa$(currentLeftIndex), Expression) ? tmp$_17 : throwCCE(), Kotlin.isType(tmp$_18 = this.chain.get_za3lpa$(currentRightIndex), Expression) ? tmp$_18 : throwCCE(), this.comparisonType);
            var tmp$_34 = new MainLineAndNode();
            var tmp$_35 = new MainLineAndNode(void 0, void 0, void 0, void 0, mutableListOf([fullFact]));
            var destination_4 = ArrayList_init_0(collectionSizeOrDefault(additionalFacts, 10));
            var tmp$_36;
            tmp$_36 = additionalFacts.iterator();
            while (tmp$_36.hasNext()) {
              var item_0 = tmp$_36.next();
              destination_4.add_11rb$(item_0.computeOutIdentifier_6taknv$(true));
            }
            var result_1 = factComparator.compareAsIs_4xgx46$(tmp$_34, tmp$_35, sorted(destination_4));
            if (result_1) {
              log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factHelpFactColor, ExpressionChain$check$lambda_53, ExpressionChain$check$lambda_54, ExpressionChain$check$lambda_55, ExpressionChain$check$lambda_56, currentLogLevel.v);
              coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factHelpFactColor));
              additionalFactUsed = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, ExpressionChain$check$lambda_57);
            }
             else {
              log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongTransformationFactColor, ExpressionChain$check$lambda_58, ExpressionChain$check$lambda_59, ExpressionChain$check$lambda_60, ExpressionChain$check$lambda_61, currentLogLevel.v);
              coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongTransformationFactColor));
              log_1.addMessage_cte53e$(ExpressionChain$check$lambda_62, MessageType$USER_getInstance(), currentLogLevel.v);
              tmp$_19 = this.chain.get_za3lpa$(currentLeftIndex);
              tmp$_20 = this.chain.get_za3lpa$(currentRightIndex);
              if (this.comparisonType === ComparisonType$EQUAL_getInstance()) {
                tmp$_25 = "Unclear transformation between '" + (Kotlin.isType(tmp$_21 = this.chain.get_za3lpa$(currentLeftIndex), Expression) ? tmp$_21 : throwCCE()).data + "' and '" + (Kotlin.isType(tmp$_22 = this.chain.get_za3lpa$(currentRightIndex), Expression) ? tmp$_22 : throwCCE()).data + "' ";
              }
               else {
                tmp$_25 = "Unclear transformation '" + (Kotlin.isType(tmp$_23 = this.chain.get_za3lpa$(currentLeftIndex), Expression) ? tmp$_23 : throwCCE()).data + "' " + this.comparisonType.string + " '" + (Kotlin.isType(tmp$_24 = this.chain.get_za3lpa$(currentRightIndex), Expression) ? tmp$_24 : throwCCE()).data + "' ";
              }
              return new ComparisonResult(false, coloringTasks, tmp$_19, tmp$_20, tmp$_25);
            }
          }
        }
      }
      currentLeftIndex = log_1.assignAndLog_746w4o$(currentRightIndex, currentLogLevel.v, ExpressionChain$check$lambda_63);
      currentRightIndex = log_1.assignAndLog_746w4o$(currentRightIndex + 1 | 0, currentLogLevel.v, ExpressionChain$check$lambda_64);
    }
    log_1.addMessage_cte53e$(ExpressionChain$check$lambda_65(this), MessageType$USER_getInstance(), currentLogLevel.v);
    return new ComparisonResult(true, coloringTasks, first(this.chain), last(this.chain), void 0, additionalFactUsed);
  };
  ExpressionChain.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionChain',
    interfaces: [ComparableTransformationsPart]
  };
  function ExpressionComparison(startPosition, endPosition, leftExpression, rightExpression, comparisonType, parent, identifier) {
    ExpressionComparison$Companion_getInstance();
    if (startPosition === void 0)
      startPosition = 0;
    if (endPosition === void 0)
      endPosition = 0;
    if (parent === void 0)
      parent = null;
    if (identifier === void 0)
      identifier = '';
    this.startPosition_5d90wk$_0 = startPosition;
    this.endPosition_wsoq7v$_0 = endPosition;
    this.leftExpression = leftExpression;
    this.rightExpression = rightExpression;
    this.comparisonType = comparisonType;
    this.parent_yzz7nv$_0 = parent;
    this.identifier_4i2fis$_0 = identifier;
  }
  Object.defineProperty(ExpressionComparison.prototype, 'startPosition', {
    get: function () {
      return this.startPosition_5d90wk$_0;
    }
  });
  Object.defineProperty(ExpressionComparison.prototype, 'endPosition', {
    get: function () {
      return this.endPosition_wsoq7v$_0;
    }
  });
  Object.defineProperty(ExpressionComparison.prototype, 'parent', {
    get: function () {
      return this.parent_yzz7nv$_0;
    },
    set: function (parent) {
      this.parent_yzz7nv$_0 = parent;
    }
  });
  Object.defineProperty(ExpressionComparison.prototype, 'identifier', {
    get: function () {
      return this.identifier_4i2fis$_0;
    },
    set: function (identifier) {
      this.identifier_4i2fis$_0 = identifier;
    }
  });
  ExpressionComparison.prototype.getLastExpression = function () {
    return this.rightExpression.getLastExpression();
  };
  ExpressionComparison.prototype.isSolutionWithoutFunctions_o78e5l$ = function (forbidden, targetExpression, factComparator) {
    if (!targetExpression.children.isEmpty() && !factComparator.expressionComparator.compareAsIs_5gxvt3$(this.leftExpression.data, targetExpression)) {
      return new GeneralError('Wrong start expression');
    }
    return this.rightExpression.isSolutionWithoutFunctions_o78e5l$(forbidden, targetExpression, factComparator);
  };
  ExpressionComparison.prototype.isFactorizationForVariables_s6qnlc$ = function (minNumberOfMultipliers, targetVariables, targetExpression, factComparator) {
    if (!factComparator.expressionComparator.compareAsIs_5gxvt3$(this.leftExpression.data, targetExpression)) {
      return new GeneralError('Wrong start expression');
    }
    return this.rightExpression.isFactorizationForVariables_s6qnlc$(minNumberOfMultipliers, targetVariables, targetExpression, factComparator);
  };
  ExpressionComparison.prototype.hasNoFractions_qclyqr$ = function (maxNumberOfDivisions, targetExpression, factComparator) {
    if (!factComparator.expressionComparator.compareAsIs_5gxvt3$(this.leftExpression.data, targetExpression)) {
      return new GeneralError('Wrong start expression');
    }
    return this.rightExpression.hasNoFractions_qclyqr$(maxNumberOfDivisions, targetExpression, factComparator);
  };
  ExpressionComparison.prototype.isSolutionForVariables_axkv0l$$default = function (targetVariables, left, allowedVariables) {
    var error = this.leftExpression.isSolutionForVariables_axkv0l$(targetVariables, true, allowedVariables);
    if (error != null) {
      return error;
    }
    return this.rightExpression.isSolutionForVariables_axkv0l$(targetVariables, false, allowedVariables);
  };
  ExpressionComparison.prototype.variableReplacement_y0zsll$ = function (replacements) {
    this.leftExpression.variableReplacement_y0zsll$(replacements);
    this.rightExpression.variableReplacement_y0zsll$(replacements);
  };
  function ExpressionComparison$check$lambda() {
    return 'Start checking expression comparison';
  }
  function ExpressionComparison$check$lambda_0(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel.v;
    };
  }
  function ExpressionComparison$check$lambda_1() {
    return 'Left expression: ';
  }
  function ExpressionComparison$check$lambda_2() {
    return 'Right expression: ';
  }
  function ExpressionComparison$check$lambda_3() {
    return "Coloring task on positions: '";
  }
  function ExpressionComparison$check$lambda_4() {
    return "' - '";
  }
  function ExpressionComparison$check$lambda_5() {
    return "', correctFactColor = '";
  }
  function ExpressionComparison$check$lambda_6() {
    return '';
  }
  function ExpressionComparison$check$lambda_7() {
    return 'TRANSFORMATION_VERIFIED and correct not only in task context';
  }
  function ExpressionComparison$check$lambda_8() {
    return 'VERIFICATION_FAILED not only in task context. Try to check transformation only in task context';
  }
  function ExpressionComparison$check$lambda_9() {
    return "Coloring task on positions: '";
  }
  function ExpressionComparison$check$lambda_10() {
    return "' - '";
  }
  function ExpressionComparison$check$lambda_11() {
    return "', correctFactColor = '";
  }
  function ExpressionComparison$check$lambda_12() {
    return '';
  }
  function ExpressionComparison$check$lambda_13() {
    return 'TRANSFORMATION_VERIFIED and correct only in task context';
  }
  function ExpressionComparison$check$lambda_14() {
    return 'additionalFactUsed';
  }
  function ExpressionComparison$check$lambda_15() {
    return 'Transformation not verified, try to check transformation with rules and additional facts';
  }
  function ExpressionComparison$check$lambda_16() {
    return "Coloring task on positions: '";
  }
  function ExpressionComparison$check$lambda_17() {
    return "' - '";
  }
  function ExpressionComparison$check$lambda_18() {
    return "', color = '";
  }
  function ExpressionComparison$check$lambda_19() {
    return '';
  }
  function ExpressionComparison$check$lambda_20() {
    return 'additionalFactUsed';
  }
  function ExpressionComparison$check$lambda_21() {
    return "Coloring task on positions: '";
  }
  function ExpressionComparison$check$lambda_22() {
    return "' - '";
  }
  function ExpressionComparison$check$lambda_23() {
    return "', wrongFactColor = '";
  }
  function ExpressionComparison$check$lambda_24() {
    return '';
  }
  function ExpressionComparison$check$lambda_25() {
    return 'VERIFICATION_FAILED';
  }
  ExpressionComparison.prototype.check_i0qcxd$$default = function (factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck) {
    var tmp$, tmp$_0, tmp$_1;
    log_1.addMessage_cte53e$(ExpressionComparison$check$lambda, MessageType$USER_getInstance(), void 0, 1);
    var currentLogLevel = {v: log_1.currentLevel};
    log_1.addMessage_cte53e$(ExpressionComparison$check$lambda_0(currentLogLevel), void 0, currentLogLevel.v);
    log_1.addMessageWithExpression_3hyvb1$(ExpressionComparison$check$lambda_1, this.leftExpression.data, MessageType$USER_getInstance(), currentLogLevel.v);
    log_1.addMessageWithExpression_3hyvb1$(ExpressionComparison$check$lambda_2, this.rightExpression.data, MessageType$USER_getInstance(), currentLogLevel.v);
    var coloringTasks = ArrayList_init();
    var additionalFactUsed = false;
    var tmp$_2 = factComparator.expressionComparator;
    var tmp$_3 = this.leftExpression.data;
    var tmp$_4 = this.rightExpression.data;
    var destination = ArrayList_init();
    var tmp$_5;
    tmp$_5 = expressionTransformations.iterator();
    while (tmp$_5.hasNext()) {
      var element = tmp$_5.next();
      if (!element.basedOnTaskContext)
        destination.add_11rb$(element);
    }
    var result = tmp$_2.compareWithTreeTransformationRules_8lnv8j$(tmp$_3, tmp$_4, plus(destination, factComparator.compiledConfiguration.compiledExpressionTreeTransformationRules), void 0, void 0, void 0, this.comparisonType, factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
    if (result) {
      log_1.add_czegqf$(this.leftExpression.endPosition, this.rightExpression.startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor, ExpressionComparison$check$lambda_3, ExpressionComparison$check$lambda_4, ExpressionComparison$check$lambda_5, ExpressionComparison$check$lambda_6, currentLogLevel.v);
      coloringTasks.add_11rb$(new ColoringTask(this.leftExpression.endPosition, this.rightExpression.startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor));
      log_1.addMessage_cte53e$(ExpressionComparison$check$lambda_7, MessageType$USER_getInstance(), currentLogLevel.v);
    }
     else {
      log_1.addMessage_cte53e$(ExpressionComparison$check$lambda_8, MessageType$USER_getInstance(), currentLogLevel.v);
      var tmp$_6 = factComparator.expressionComparator;
      var tmp$_7 = this.leftExpression.data;
      var tmp$_8 = this.rightExpression.data;
      var destination_0 = ArrayList_init();
      var tmp$_9;
      tmp$_9 = expressionTransformations.iterator();
      while (tmp$_9.hasNext()) {
        var element_0 = tmp$_9.next();
        if (element_0.basedOnTaskContext)
          destination_0.add_11rb$(element_0);
      }
      var resultInContext = tmp$_6.compareWithTreeTransformationRules_8lnv8j$(tmp$_7, tmp$_8, destination_0, void 0, void 0, void 0, this.comparisonType, factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
      if (resultInContext) {
        log_1.add_czegqf$(this.leftExpression.endPosition, this.rightExpression.startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor, ExpressionComparison$check$lambda_9, ExpressionComparison$check$lambda_10, ExpressionComparison$check$lambda_11, ExpressionComparison$check$lambda_12, currentLogLevel.v);
        coloringTasks.add_11rb$(new ColoringTask(this.leftExpression.endPosition, this.rightExpression.startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor));
        log_1.addMessage_cte53e$(ExpressionComparison$check$lambda_13, MessageType$USER_getInstance(), currentLogLevel.v);
        additionalFactUsed = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, ExpressionComparison$check$lambda_14);
      }
       else {
        log_1.addMessage_cte53e$(ExpressionComparison$check$lambda_15);
        var tmp$_10 = new MainLineAndNode();
        var tmp$_11 = new MainLineAndNode(void 0, void 0, void 0, void 0, mutableListOf([this]));
        var destination_1 = ArrayList_init_0(collectionSizeOrDefault(additionalFacts, 10));
        var tmp$_12;
        tmp$_12 = additionalFacts.iterator();
        while (tmp$_12.hasNext()) {
          var item = tmp$_12.next();
          destination_1.add_11rb$(item.computeOutIdentifier_6taknv$(true));
        }
        var result_0 = factComparator.compareAsIs_4xgx46$(tmp$_10, tmp$_11, sorted(destination_1));
        if (result_0) {
          log_1.add_czegqf$(this.leftExpression.endPosition, this.rightExpression.startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factHelpFactColor, ExpressionComparison$check$lambda_16, ExpressionComparison$check$lambda_17, ExpressionComparison$check$lambda_18, ExpressionComparison$check$lambda_19, currentLogLevel.v);
          coloringTasks.add_11rb$(new ColoringTask(this.leftExpression.endPosition, this.rightExpression.startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factHelpFactColor));
          additionalFactUsed = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, ExpressionComparison$check$lambda_20);
        }
         else {
          log_1.add_czegqf$(this.leftExpression.endPosition, this.rightExpression.startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongTransformationFactColor, ExpressionComparison$check$lambda_21, ExpressionComparison$check$lambda_22, ExpressionComparison$check$lambda_23, ExpressionComparison$check$lambda_24, currentLogLevel.v);
          coloringTasks.add_11rb$(new ColoringTask(this.leftExpression.endPosition, this.rightExpression.startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongTransformationFactColor));
          log_1.addMessage_cte53e$(ExpressionComparison$check$lambda_25, MessageType$USER_getInstance(), currentLogLevel.v);
          tmp$ = this.leftExpression;
          tmp$_0 = this.rightExpression;
          if (this.comparisonType === ComparisonType$EQUAL_getInstance()) {
            tmp$_1 = "Unclear transformation between '" + this.leftExpression.data + "' and '" + this.rightExpression.data + "' ";
          }
           else {
            tmp$_1 = "Unclear transformation '" + this.leftExpression.data + "' " + this.comparisonType.string + " '" + this.rightExpression.data + "' ";
          }
          return new ComparisonResult(false, coloringTasks, tmp$, tmp$_0, tmp$_1);
        }
      }
    }
    return new ComparisonResult(true, coloringTasks, this.leftExpression, this.rightExpression, void 0, additionalFactUsed);
  };
  ExpressionComparison.prototype.computeIfNumeric_gb8qxc$ = function (substitutionInstance, baseOperationsDefinitions) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.leftExpression.computeIfNumeric_gb8qxc$(substitutionInstance, baseOperationsDefinitions);
    if (tmp$ == null) {
      return null;
    }
    var l = tmp$;
    tmp$_0 = this.rightExpression.computeIfNumeric_gb8qxc$(substitutionInstance, baseOperationsDefinitions);
    if (tmp$_0 == null) {
      return null;
    }
    var r = tmp$_0;
    switch (this.comparisonType.name) {
      case 'EQUAL':
        tmp$_1 = baseOperationsDefinitions.additivelyEqual_yvo9jy$(l, r);
        break;
      case 'LEFT_MORE_OR_EQUAL':
        tmp$_1 = l >= r;
        break;
      case 'LEFT_MORE':
        tmp$_1 = l > r;
        break;
      case 'LEFT_LESS_OR_EQUAL':
        tmp$_1 = l <= r;
        break;
      case 'LEFT_LESS':
        tmp$_1 = l < r;
        break;
      default:tmp$_1 = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$_1;
  };
  ExpressionComparison.prototype.copyNode = function () {
    return new ExpressionComparison(this.startPosition, this.endPosition, emptyExpression(), emptyExpression(), this.comparisonType, this.parent, '');
  };
  ExpressionComparison.prototype.clone = function () {
    return new ExpressionComparison(this.startPosition, this.endPosition, this.leftExpression.clone(), this.rightExpression.clone(), this.comparisonType, this.parent);
  };
  ExpressionComparison.prototype.cloneWithNormalization_1g1bdl$ = function (nameArgsMap, sorted) {
    return new ExpressionComparison(this.startPosition, this.endPosition, this.leftExpression.cloneWithNormalization_1g1bdl$(nameArgsMap, sorted), this.rightExpression.cloneWithNormalization_1g1bdl$(nameArgsMap, sorted), this.comparisonType, this.parent);
  };
  ExpressionComparison.prototype.normalizeSubTree_f8z7ch$ = function (currentDeep, nameArgsMap, sorted) {
    this.leftExpression.normalizeSubTree_f8z7ch$(currentDeep, nameArgsMap, sorted);
    this.rightExpression.normalizeSubTree_f8z7ch$(currentDeep, nameArgsMap, sorted);
  };
  ExpressionComparison.prototype.applyAllExpressionSubstitutions_itxcjl$ = function (expressionSubstitutions) {
    this.leftExpression.applyAllExpressionSubstitutions_itxcjl$(expressionSubstitutions);
    this.rightExpression.applyAllExpressionSubstitutions_itxcjl$(expressionSubstitutions);
  };
  ExpressionComparison.prototype.computeExpressionTrees_r1dnaj$ = function (baseOperationsDefinitions) {
    this.leftExpression.computeExpressionTrees_r1dnaj$(baseOperationsDefinitions);
    this.rightExpression.computeExpressionTrees_r1dnaj$(baseOperationsDefinitions);
  };
  ExpressionComparison.prototype.replaceNotDefinedFunctionsOnVariables_ioe5p3$ = function (functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet) {
    this.leftExpression.replaceNotDefinedFunctionsOnVariables_ioe5p3$(functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet);
    this.rightExpression.replaceNotDefinedFunctionsOnVariables_ioe5p3$(functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet);
  };
  ExpressionComparison.prototype.type = function () {
    return ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance();
  };
  ExpressionComparison.prototype.toString = function () {
    return this.leftExpression.toString() + ';' + this.comparisonType.string + ';' + this.rightExpression;
  };
  ExpressionComparison.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.identifier) || recomputeIfComputed) {
      this.identifier = this.leftExpression.computeIdentifier_6taknv$(recomputeIfComputed) + ';ec;' + this.comparisonType.string + ';ec;' + this.rightExpression.computeIdentifier_6taknv$(recomputeIfComputed);
    }
    return this.identifier;
  };
  ExpressionComparison.prototype.computeInIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  ExpressionComparison.prototype.computeOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  ExpressionComparison.prototype.computeSortedOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  function ExpressionComparison$Companion() {
    ExpressionComparison$Companion_instance = this;
  }
  ExpressionComparison$Companion.prototype.parseFromFactIdentifier_r5gof1$ = function (string, parent, functionConfiguration) {
    if (parent === void 0)
      parent = null;
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    var parts = split(string, [';ec;']);
    var result = new ExpressionComparison(0, 0, emptyExpression(), emptyExpression(), valueOfComparisonType(parts.get_za3lpa$(1)), parent);
    result.leftExpression = ensureNotNull(Expression$Companion_getInstance().parseFromFactIdentifier_r5gof1$(parts.get_za3lpa$(0), void 0, functionConfiguration));
    result.rightExpression = ensureNotNull(Expression$Companion_getInstance().parseFromFactIdentifier_r5gof1$(parts.get_za3lpa$(2), void 0, functionConfiguration));
    return result;
  };
  ExpressionComparison$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ExpressionComparison$Companion_instance = null;
  function ExpressionComparison$Companion_getInstance() {
    if (ExpressionComparison$Companion_instance === null) {
      new ExpressionComparison$Companion();
    }
    return ExpressionComparison$Companion_instance;
  }
  ExpressionComparison.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionComparison',
    interfaces: [MainChainPart]
  };
  function RulePointer(startPosition, endPosition, parent, nameLink, identifier) {
    if (parent === void 0)
      parent = null;
    if (nameLink === void 0)
      nameLink = '';
    if (identifier === void 0)
      identifier = '';
    this.startPosition_riihbw$_0 = startPosition;
    this.endPosition_59ls4r$_0 = endPosition;
    this.parent_a2ocd7$_0 = parent;
    this.nameLink = nameLink;
    this.identifier_sz9vy4$_0 = identifier;
  }
  Object.defineProperty(RulePointer.prototype, 'startPosition', {
    get: function () {
      return this.startPosition_riihbw$_0;
    }
  });
  Object.defineProperty(RulePointer.prototype, 'endPosition', {
    get: function () {
      return this.endPosition_59ls4r$_0;
    }
  });
  Object.defineProperty(RulePointer.prototype, 'parent', {
    get: function () {
      return this.parent_a2ocd7$_0;
    },
    set: function (parent) {
      this.parent_a2ocd7$_0 = parent;
    }
  });
  Object.defineProperty(RulePointer.prototype, 'identifier', {
    get: function () {
      return this.identifier_sz9vy4$_0;
    },
    set: function (identifier) {
      this.identifier_sz9vy4$_0 = identifier;
    }
  });
  function RulePointer$check$lambda() {
    return 'ERROR: This RulePointer method must not been called. Undefined behaviour. ';
  }
  RulePointer.prototype.check_i0qcxd$$default = function (factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck) {
    log_1.addMessage_cte53e$(RulePointer$check$lambda);
    return new ComparisonResult(true, ArrayList_init(), this, this);
  };
  RulePointer.prototype.type = function () {
    return ComparableTransformationPartType$RULE_POINTER_getInstance();
  };
  RulePointer.prototype.toString = function () {
    return '[' + this.nameLink + ':]';
  };
  RulePointer.prototype.copyNode = function () {
    return new RulePointer(this.startPosition, this.endPosition, this.parent, this.nameLink);
  };
  RulePointer.prototype.clone = function () {
    return new RulePointer(this.startPosition, this.endPosition, this.parent, this.nameLink);
  };
  RulePointer.prototype.cloneWithNormalization_1g1bdl$ = function (nameArgsMap, sorted) {
    return new RulePointer(this.startPosition, this.endPosition, this.parent, this.nameLink);
  };
  RulePointer.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    this.identifier = '[' + this.nameLink + ':]';
    return this.identifier;
  };
  RulePointer.prototype.variableReplacement_y0zsll$ = function (replacements) {
  };
  RulePointer.prototype.computeInIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  RulePointer.prototype.computeOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  RulePointer.prototype.computeSortedOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  RulePointer.prototype.normalizeSubTree_f8z7ch$ = function (currentDeep, nameArgsMap, sorted) {
  };
  RulePointer.prototype.applyAllExpressionSubstitutions_itxcjl$ = function (expressionSubstitutions) {
  };
  RulePointer.prototype.computeExpressionTrees_r1dnaj$ = function (baseOperationsDefinitions) {
  };
  RulePointer.prototype.replaceNotDefinedFunctionsOnVariables_ioe5p3$ = function (functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet) {
  };
  RulePointer.prototype.isSolutionForVariables_axkv0l$$default = function (targetVariables, left, allowedVariables) {
    return null;
  };
  RulePointer.prototype.isFactorizationForVariables_s6qnlc$ = function (minNumberOfMultipliers, targetVariables, targetExpression, factComparator) {
    return null;
  };
  RulePointer.prototype.hasNoFractions_qclyqr$ = function (maxNumberOfDivisions, targetExpression, factComparator) {
    return null;
  };
  RulePointer.prototype.isSolutionWithoutFunctions_o78e5l$ = function (forbidden, targetExpression, factComparator) {
    return null;
  };
  RulePointer.prototype.getLastExpression = function () {
    return null;
  };
  RulePointer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RulePointer',
    interfaces: [MainChainPart]
  };
  function Rule(startPosition, endPosition, parent, root, name, identifier, factSubstitution, expressionSubstitution) {
    if (parent === void 0)
      parent = null;
    if (name === void 0)
      name = '';
    if (identifier === void 0)
      identifier = '';
    if (factSubstitution === void 0)
      factSubstitution = null;
    if (expressionSubstitution === void 0)
      expressionSubstitution = null;
    this.startPosition_7assop$_0 = startPosition;
    this.endPosition_bzqkyo$_0 = endPosition;
    this.parent_4mah8m$_0 = parent;
    this.root = root;
    this.name = name;
    this.identifier_sf8bs7$_0 = identifier;
    this.factSubstitution = factSubstitution;
    this.expressionSubstitution = expressionSubstitution;
  }
  Object.defineProperty(Rule.prototype, 'startPosition', {
    get: function () {
      return this.startPosition_7assop$_0;
    }
  });
  Object.defineProperty(Rule.prototype, 'endPosition', {
    get: function () {
      return this.endPosition_bzqkyo$_0;
    }
  });
  Object.defineProperty(Rule.prototype, 'parent', {
    get: function () {
      return this.parent_4mah8m$_0;
    },
    set: function (parent) {
      this.parent_4mah8m$_0 = parent;
    }
  });
  Object.defineProperty(Rule.prototype, 'identifier', {
    get: function () {
      return this.identifier_sf8bs7$_0;
    },
    set: function (identifier) {
      this.identifier_sf8bs7$_0 = identifier;
    }
  });
  function Rule$check$lambda(this$Rule) {
    return function () {
      return 'Start checking rule ' + (!isBlank(this$Rule.name) ? " '" + this$Rule.name + "'" : '') + ': ';
    };
  }
  function Rule$check$lambda_0(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel.v;
    };
  }
  function Rule$check$lambda_1(this$Rule) {
    return function () {
      return CheckingKeyWords$Companion_getInstance().rule + (!isBlank(this$Rule.name) ? " '" + this$Rule.name + "'" : '') + ' is correct';
    };
  }
  function Rule$check$lambda_2() {
    return 'Expression substitution deduced from rule: ';
  }
  function Rule$check$lambda_3() {
    return 'Fact substitution deduced from rule: ';
  }
  function Rule$check$lambda_4(this$Rule) {
    return function () {
      return CheckingKeyWords$Companion_getInstance().rule + (!isBlank(this$Rule.name) ? " '" + this$Rule.name + "'" : '') + ' ' + CheckingKeyWords$Companion_getInstance().verificationFailed;
    };
  }
  Rule.prototype.check_i0qcxd$$default = function (factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck) {
    var tmp$, tmp$_0;
    log_1.addMessageWithFactDetail_d1xyjh$(Rule$check$lambda(this), this.root, MessageType$USER_getInstance(), void 0, 1);
    var currentLogLevel = {v: log_1.currentLevel};
    log_1.addMessage_cte53e$(Rule$check$lambda_0(currentLogLevel), void 0, currentLogLevel.v);
    log_1.logCheckParams_yiwyc7$(onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts);
    var comparisonResult = this.root.check_i0qcxd$(factComparator, false, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck);
    if (comparisonResult.isCorrect) {
      log_1.addMessage_cte53e$(Rule$check$lambda_1(this), void 0, currentLogLevel.v);
      if (!this.root.expressionTransformationChains.isEmpty()) {
        var left = Kotlin.isType(tmp$ = first(first(this.root.expressionTransformationChains).chain), Expression) ? tmp$ : throwCCE();
        var right = Kotlin.isType(tmp$_0 = last(first(this.root.expressionTransformationChains).chain), Expression) ? tmp$_0 : throwCCE();
        applyAllImmediateSubstitutions(left.data, factComparator.compiledConfiguration);
        applyAllImmediateSubstitutions(right.data, factComparator.compiledConfiguration);
        if (!factComparator.expressionComparator.compareAsIs_5gxvt3$(left.data, right.data)) {
          this.expressionSubstitution = new ExpressionSubstitution(left.data, right.data, void 0, comparisonResult.additionalFactUsed, this.name, void 0, void 0, first(this.root.expressionTransformationChains).comparisonType);
          log_1.addMessageWithExpressionSubstitutionShort_w3y3zc$(Rule$check$lambda_2, ensureNotNull(this.expressionSubstitution), MessageType$USER_getInstance(), currentLogLevel.v);
        }
      }
       else {
        if (!this.root.factTransformationChains.isEmpty()) {
          var left_0 = first(first(this.root.factTransformationChains).chain);
          var right_0 = last(first(this.root.factTransformationChains).chain);
          if (!factComparator.compareAsIs_4xgx46$(left_0, right_0)) {
            this.factSubstitution = new FactSubstitution(left_0, right_0, void 0, comparisonResult.additionalFactUsed, void 0, this.name, factComparator);
            log_1.addMessageWithFactSubstitutionDetail_garven$(Rule$check$lambda_3, ensureNotNull(this.factSubstitution), MessageType$USER_getInstance(), currentLogLevel.v);
          }
        }
      }
    }
     else {
      log_1.addMessage_cte53e$(Rule$check$lambda_4(this), void 0, currentLogLevel.v);
    }
    return comparisonResult;
  };
  Rule.prototype.type = function () {
    return ComparableTransformationPartType$RULE_getInstance();
  };
  Rule.prototype.toString = function () {
    return '[' + this.name + ':' + this.root + ']';
  };
  Rule.prototype.copyNode = function () {
    return new Rule(this.startPosition, this.endPosition, this.parent, this.root, this.name);
  };
  Rule.prototype.clone = function () {
    return new Rule(this.startPosition, this.endPosition, this.parent, this.root.clone(), this.name);
  };
  Rule.prototype.cloneWithNormalization_1g1bdl$ = function (nameArgsMap, sorted) {
    return new Rule(this.startPosition, this.endPosition, this.parent, this.root.cloneWithNormalization_1g1bdl$(nameArgsMap, sorted), this.name);
  };
  Rule.prototype.variableReplacement_y0zsll$ = function (replacements) {
    this.root.variableReplacement_y0zsll$(replacements);
  };
  Rule.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.identifier) || recomputeIfComputed) {
      this.identifier = '[' + this.name + ':]';
    }
    return this.identifier;
  };
  Rule.prototype.computeInIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  Rule.prototype.computeOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  Rule.prototype.computeSortedOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    return this.computeIdentifier_6taknv$(recomputeIfComputed);
  };
  Rule.prototype.normalizeSubTree_f8z7ch$ = function (currentDeep, nameArgsMap, sorted) {
  };
  Rule.prototype.applyAllExpressionSubstitutions_itxcjl$ = function (expressionSubstitutions) {
  };
  Rule.prototype.computeExpressionTrees_r1dnaj$ = function (baseOperationsDefinitions) {
  };
  Rule.prototype.replaceNotDefinedFunctionsOnVariables_ioe5p3$ = function (functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet) {
  };
  Rule.prototype.isSolutionForVariables_axkv0l$$default = function (targetVariables, left, allowedVariables) {
    return null;
  };
  Rule.prototype.isFactorizationForVariables_s6qnlc$ = function (minNumberOfMultipliers, targetVariables, targetExpression, factComparator) {
    return null;
  };
  Rule.prototype.hasNoFractions_qclyqr$ = function (maxNumberOfDivisions, targetExpression, factComparator) {
    return null;
  };
  Rule.prototype.isSolutionWithoutFunctions_o78e5l$ = function (forbidden, targetExpression, factComparator) {
    return null;
  };
  Rule.prototype.getLastExpression = function () {
    return null;
  };
  Rule.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Rule',
    interfaces: [MainChainPart]
  };
  function MainChain(chain) {
    if (chain === void 0) {
      chain = ArrayList_init();
    }
    this.chain = chain;
    this.identifier = '';
  }
  function MainChain$toString$lambda(it) {
    return '(' + it.toString() + ')';
  }
  MainChain.prototype.toString = function () {
    return joinToString(this.chain, ';', void 0, void 0, void 0, void 0, MainChain$toString$lambda);
  };
  function MainChain$computeIdentifier$lambda(closure$recomputeIfComputed) {
    return function (it) {
      return '(' + it.computeIdentifier_6taknv$(closure$recomputeIfComputed) + ')';
    };
  }
  MainChain.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.identifier)) {
      this.identifier = joinToString(this.chain, ';', void 0, void 0, void 0, void 0, MainChain$computeIdentifier$lambda(recomputeIfComputed));
    }
    return this.identifier;
  };
  function MainChain$check$lambda() {
    return 'Start checking fact chain';
  }
  function MainChain$check$lambda_0() {
    return 'fact chain: ';
  }
  function MainChain$check$lambda_1() {
    return '';
  }
  function MainChain$check$lambda_2(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel.v;
    };
  }
  function MainChain$check$lambda_3() {
    return 'currentLeftIndex';
  }
  function MainChain$check$lambda_4() {
    return 'currentRightIndex';
  }
  function MainChain$check$lambda_5() {
    return 'additionalFactUsed';
  }
  function MainChain$check$lambda_6() {
    return 'Check RULE';
  }
  function MainChain$check$lambda_7() {
    return 'Fact transformation recognized:';
  }
  function MainChain$check$lambda_8() {
    return 'Expression transformation recognized:';
  }
  function MainChain$check$lambda_9() {
    return 'RULE VERIFICATION_FAILED';
  }
  function MainChain$check$lambda_10() {
    return "Handling RULE_REFERENCE '";
  }
  function MainChain$check$lambda_11() {
    return "'";
  }
  function MainChain$check$lambda_12() {
    return "ERROR: RULE_REFERENCE '";
  }
  function MainChain$check$lambda_13() {
    return "' not found";
  }
  function MainChain$check$lambda_14() {
    return "Coloring task on positions: '";
  }
  function MainChain$check$lambda_15() {
    return "' - '";
  }
  function MainChain$check$lambda_16() {
    return "', wrongFactColor = '";
  }
  function MainChain$check$lambda_17() {
    return '';
  }
  function MainChain$check$lambda_18(it) {
    return "'" + it + "'";
  }
  function MainChain$check$lambda_19() {
    return 'currentRightIndex';
  }
  function MainChain$check$lambda_20() {
    return 'Check transformation from left fact to right fact:';
  }
  function MainChain$check$lambda_21() {
    return 'Left fact: ';
  }
  function MainChain$check$lambda_22() {
    return 'Right fact: ';
  }
  function MainChain$check$lambda_23() {
    return 'transformationVerified';
  }
  function MainChain$check$lambda_24() {
    return 'Left and right facts types are the same';
  }
  function MainChain$check$lambda_25() {
    return 'Comparison types are the same';
  }
  function MainChain$check$lambda_26() {
    return 'transformationVerified';
  }
  function MainChain$check$lambda_27() {
    return "Transformation verified: 'left.left - left.right = right.left - right.right'";
  }
  function MainChain$check$lambda_28() {
    return "Left expressions are equal: '";
  }
  function MainChain$check$lambda_29() {
    return "'";
  }
  function MainChain$check$lambda_30() {
    return "Right expressions are equal: '";
  }
  function MainChain$check$lambda_31() {
    return "'";
  }
  function MainChain$check$lambda_32() {
    return 'transformationVerified';
  }
  function MainChain$check$lambda_33() {
    return "Transformation verified: 'left.left = right.left' and 'left.right = right.right'";
  }
  function MainChain$check$lambda_34() {
    return 'Transformation not verified';
  }
  function MainChain$check$lambda_35() {
    return "left.left are equal to right.right: '";
  }
  function MainChain$check$lambda_36() {
    return "'";
  }
  function MainChain$check$lambda_37() {
    return "left.right are equal to right.left: '";
  }
  function MainChain$check$lambda_38() {
    return "'";
  }
  function MainChain$check$lambda_39() {
    return 'transformationVerified';
  }
  function MainChain$check$lambda_40() {
    return "Transformation verified: 'left.left = right.right' and 'left.right = right.left'";
  }
  function MainChain$check$lambda_41() {
    return 'Transformation not verified';
  }
  function MainChain$check$lambda_42() {
    return 'transformationVerified';
  }
  function MainChain$check$lambda_43() {
    return "Transformation verified: 'left.left / left.right = right.left / right.right'";
  }
  function MainChain$check$lambda_44() {
    return "left.left <= right.left: '";
  }
  function MainChain$check$lambda_45() {
    return "'";
  }
  function MainChain$check$lambda_46() {
    return "left.right >= right.right: '";
  }
  function MainChain$check$lambda_47() {
    return "'";
  }
  function MainChain$check$lambda_48() {
    return 'transformationVerified';
  }
  function MainChain$check$lambda_49() {
    return "Transformation verified: 'left.left <= right.left' and 'left.right >= right.right'";
  }
  function MainChain$check$lambda_50() {
    return 'Transformation not verified';
  }
  function MainChain$check$lambda_51() {
    return "left.left >= right.left: '";
  }
  function MainChain$check$lambda_52() {
    return "'";
  }
  function MainChain$check$lambda_53() {
    return "left.right <= right.right: '";
  }
  function MainChain$check$lambda_54() {
    return "'";
  }
  function MainChain$check$lambda_55() {
    return 'transformationVerified';
  }
  function MainChain$check$lambda_56() {
    return "Transformation verified: 'left.left >= right.left' and 'left.right <= right.right'";
  }
  function MainChain$check$lambda_57() {
    return 'Transformation not verified';
  }
  function MainChain$check$lambda_58() {
    return 'Two expression comparisons systems with equal sizes identified';
  }
  function MainChain$check$lambda_59() {
    return 'left';
  }
  function MainChain$check$lambda_60() {
    return 'right';
  }
  function MainChain$check$lambda_61() {
    return 'hasDifferentComparisonType';
  }
  function MainChain$check$lambda_62() {
    return 'Expression substitution got from left system: ';
  }
  function MainChain$check$lambda_63() {
    return "Two expression comparisons has different signs at facts number '";
  }
  function MainChain$check$lambda_64() {
    return "'";
  }
  function MainChain$check$lambda_65() {
    return 'hasDifferentComparisonType';
  }
  function MainChain$check$lambda_66() {
    return 'Check expression comparisons pairs on the same positions';
  }
  function MainChain$check$lambda_67() {
    return 'uncorrectTransformationFound';
  }
  function MainChain$check$lambda_68() {
    return 'uncorrectTransformationFound';
  }
  function MainChain$check$lambda_69() {
    return "Uncorrect transformation found at '";
  }
  function MainChain$check$lambda_70() {
    return "'";
  }
  function MainChain$check$lambda_71() {
    return 'Transformation verified, all pairs of expression comparisons are transformed correctly';
  }
  function MainChain$check$lambda_72() {
    return 'transformationVerified';
  }
  function MainChain$check$lambda_73() {
    return 'Transformation not verified, try to check transformation with rules and additional facts';
  }
  function MainChain$check$lambda_74() {
    return "Coloring task on positions: '";
  }
  function MainChain$check$lambda_75() {
    return "' - '";
  }
  function MainChain$check$lambda_76() {
    return "', factHelpFactColor = '";
  }
  function MainChain$check$lambda_77() {
    return '';
  }
  function MainChain$check$lambda_78() {
    return "Transformation verified, isInTaskContext: '";
  }
  function MainChain$check$lambda_79() {
    return "'";
  }
  function MainChain$check$lambda_80() {
    return 'additionalFactUsed';
  }
  function MainChain$check$lambda_81() {
    return "Coloring task on positions: '";
  }
  function MainChain$check$lambda_82() {
    return "' - '";
  }
  function MainChain$check$lambda_83() {
    return "', wrongFactColor = '";
  }
  function MainChain$check$lambda_84() {
    return '';
  }
  function MainChain$check$lambda_85() {
    return 'VERIFICATION_FAILED';
  }
  function MainChain$check$lambda_86() {
    return "Coloring task on positions: '";
  }
  function MainChain$check$lambda_87() {
    return "' - '";
  }
  function MainChain$check$lambda_88() {
    return "', correctFactColor = '";
  }
  function MainChain$check$lambda_89() {
    return '';
  }
  function MainChain$check$lambda_90() {
    return 'TRANSFORMATION_VERIFIED';
  }
  function MainChain$check$lambda_91() {
    return 'currentLeftIndex';
  }
  function MainChain$check$lambda_92() {
    return 'currentRightIndex';
  }
  function MainChain$check$lambda_93(this$MainChain) {
    return function () {
      return CheckingKeyWords$Companion_getInstance().factChainVerified + ". '" + first(this$MainChain.chain) + "' -> '" + last(this$MainChain.chain) + "'";
    };
  }
  MainChain.prototype.check_i0qcxd$ = function (factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25, tmp$_26, tmp$_27, tmp$_28;
    log_1.addMessage_cte53e$(MainChain$check$lambda, MessageType$USER_getInstance(), void 0, 1);
    log_1.add_ww6hhz$(this.chain.toString(), MainChain$check$lambda_0, MainChain$check$lambda_1);
    var currentLogLevel = {v: log_1.currentLevel};
    log_1.addMessage_cte53e$(MainChain$check$lambda_2(currentLogLevel), void 0, currentLogLevel.v);
    log_1.logCheckParams_yiwyc7$(onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts);
    var coloringTasks = ArrayList_init();
    var currentLeftIndex = log_1.assignAndLog_746w4o$(0, currentLogLevel.v, MainChain$check$lambda_3);
    var currentRightIndex = log_1.assignAndLog_746w4o$(1, currentLogLevel.v, MainChain$check$lambda_4);
    var additionalFactUsed = log_1.assignAndLog_746w4o$(false, currentLogLevel.v, MainChain$check$lambda_5);
    loop_label: while (currentRightIndex < this.chain.size) {
      var actualFactsTransformations = null;
      var actualExpressionTransformations = null;
      if (this.chain.get_za3lpa$(currentRightIndex).type() === ComparableTransformationPartType$RULE_getInstance() || this.chain.get_za3lpa$(currentRightIndex).type() === ComparableTransformationPartType$RULE_POINTER_getInstance()) {
        if (this.chain.get_za3lpa$(currentRightIndex).type() === ComparableTransformationPartType$RULE_getInstance()) {
          var rule = Kotlin.isType(tmp$ = this.chain.get_za3lpa$(currentRightIndex), Rule) ? tmp$ : throwCCE();
          log_1.addMessageWithFactDetail_d1xyjh$(MainChain$check$lambda_6, rule.root, MessageType$USER_getInstance(), currentLogLevel.v);
          var checkingResult = rule.check_i0qcxd$(factComparator, false, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck);
          if (checkingResult.isCorrect) {
            if (rule.factSubstitution != null) {
              actualFactsTransformations = listOf(ensureNotNull(rule.factSubstitution));
              log_1.addMessageWithFactSubstitutionDetail_garven$(MainChain$check$lambda_7, ensureNotNull(rule.factSubstitution), MessageType$USER_getInstance(), currentLogLevel.v);
            }
             else if (rule.expressionSubstitution != null) {
              actualExpressionTransformations = listOf(ensureNotNull(rule.expressionSubstitution));
              log_1.addMessageWithExpressionSubstitutionShort_w3y3zc$(MainChain$check$lambda_8, ensureNotNull(rule.expressionSubstitution), MessageType$USER_getInstance(), currentLogLevel.v);
            }
          }
           else {
            log_1.addMessage_cte53e$(MainChain$check$lambda_9, MessageType$USER_getInstance(), currentLogLevel.v);
            new ComparisonResult(false, coloringTasks, this.chain.get_za3lpa$(currentLeftIndex), this.chain.get_za3lpa$(currentRightIndex + 1 | 0), 'RULE VERIFICATION_FAILED');
          }
        }
         else {
          var ruleName = (Kotlin.isType(tmp$_0 = this.chain.get_za3lpa$(currentRightIndex), RulePointer) ? tmp$_0 : throwCCE()).nameLink;
          log_1.add_ww6hhz$(ruleName, MainChain$check$lambda_10, MainChain$check$lambda_11, currentLogLevel.v, void 0, MessageType$USER_getInstance());
          var destination = ArrayList_init();
          var tmp$_29;
          tmp$_29 = factsTransformations.iterator();
          while (tmp$_29.hasNext()) {
            var element = tmp$_29.next();
            if (equals(element.name, ruleName))
              destination.add_11rb$(element);
          }
          actualFactsTransformations = destination;
          var destination_0 = ArrayList_init();
          var tmp$_30;
          tmp$_30 = expressionTransformations.iterator();
          while (tmp$_30.hasNext()) {
            var element_0 = tmp$_30.next();
            if (equals(element_0.code, ruleName))
              destination_0.add_11rb$(element_0);
          }
          actualExpressionTransformations = destination_0;
          if (actualFactsTransformations.isEmpty() && actualExpressionTransformations.isEmpty()) {
            log_1.add_ww6hhz$(ruleName, MainChain$check$lambda_12, MainChain$check$lambda_13, currentLogLevel.v, void 0, MessageType$USER_getInstance());
            log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex + 1 | 0).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongFactColor, MainChain$check$lambda_14, MainChain$check$lambda_15, MainChain$check$lambda_16, MainChain$check$lambda_17, currentLogLevel.v);
            coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex + 1 | 0).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongFactColor));
            var tmp$_31 = this.chain.get_za3lpa$(currentLeftIndex);
            var tmp$_32 = this.chain.get_za3lpa$(currentRightIndex + 1 | 0);
            var tmp$_33 = "Rule with name '" + ruleName + "' not found. Exists only rules with names: ";
            var destination_1 = ArrayList_init_0(collectionSizeOrDefault(expressionTransformations, 10));
            var tmp$_34;
            tmp$_34 = expressionTransformations.iterator();
            while (tmp$_34.hasNext()) {
              var item = tmp$_34.next();
              destination_1.add_11rb$(item.code);
            }
            var destination_2 = ArrayList_init();
            var tmp$_35;
            tmp$_35 = destination_1.iterator();
            while (tmp$_35.hasNext()) {
              var element_1 = tmp$_35.next();
              if (!isBlank(element_1))
                destination_2.add_11rb$(element_1);
            }
            return new ComparisonResult(false, coloringTasks, tmp$_31, tmp$_32, tmp$_33 + joinToString(destination_2, void 0, void 0, void 0, void 0, void 0, MainChain$check$lambda_18));
          }
        }
        currentRightIndex = log_1.assignAndLog_746w4o$(currentRightIndex + 1 | 0, currentLogLevel.v, MainChain$check$lambda_19);
      }
      actualExpressionTransformations = actualExpressionTransformations != null ? actualExpressionTransformations : expressionTransformations;
      actualFactsTransformations = actualFactsTransformations != null ? actualFactsTransformations : factsTransformations;
      if (this.chain.get_za3lpa$(currentRightIndex).type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() || this.chain.get_za3lpa$(currentRightIndex).type() === ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance()) {
        tmp$_2 = (Kotlin.isType(tmp$_1 = this.chain.get_za3lpa$(currentRightIndex), MainLineNode) ? tmp$_1 : throwCCE()).factTransformationChains.iterator();
        while (tmp$_2.hasNext()) {
          var transformationChain = tmp$_2.next();
          (Kotlin.isType(tmp$_3 = this.chain.get_za3lpa$(currentRightIndex), MainLineNode) ? tmp$_3 : throwCCE()).inFacts.add_11rb$(first(transformationChain.chain));
        }
      }
      log_1.addMessage_cte53e$(MainChain$check$lambda_20, MessageType$USER_getInstance(), currentLogLevel.v);
      currentLogLevel.v = currentLogLevel.v + 1 | 0;
      log_1.addMessageWithFactDetail_d1xyjh$(MainChain$check$lambda_21, this.chain.get_za3lpa$(currentLeftIndex), MessageType$USER_getInstance(), currentLogLevel.v);
      log_1.addMessageWithFactDetail_d1xyjh$(MainChain$check$lambda_22, this.chain.get_za3lpa$(currentRightIndex), MessageType$USER_getInstance(), currentLogLevel.v);
      var transformationVerified = log_1.assignAndLog_746w4o$(false, currentLogLevel.v, MainChain$check$lambda_23);
      if (this.chain.get_za3lpa$(currentLeftIndex).type() === this.chain.get_za3lpa$(currentRightIndex).type()) {
        log_1.addMessage_cte53e$(MainChain$check$lambda_24, MessageType$USER_getInstance(), currentLogLevel.v);
        if (this.chain.get_za3lpa$(currentLeftIndex).type() === ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance()) {
          var leftExpressionComparison = Kotlin.isType(tmp$_4 = this.chain.get_za3lpa$(currentLeftIndex), ExpressionComparison) ? tmp$_4 : throwCCE();
          var rightExpressionComparison = Kotlin.isType(tmp$_5 = this.chain.get_za3lpa$(currentRightIndex), ExpressionComparison) ? tmp$_5 : throwCCE();
          if (leftExpressionComparison.comparisonType === rightExpressionComparison.comparisonType) {
            log_1.addMessage_cte53e$(MainChain$check$lambda_25, MessageType$USER_getInstance(), currentLogLevel.v);
            var leftSubtraction = subtractionTree(leftExpressionComparison.leftExpression.data, leftExpressionComparison.rightExpression.data);
            var rightSubtraction = subtractionTree(rightExpressionComparison.leftExpression.data, rightExpressionComparison.rightExpression.data);
            var subtractionResult = factComparator.expressionComparator.compareWithoutSubstitutions_fb5b0y$(leftSubtraction, rightSubtraction, ComparisonType$EQUAL_getInstance());
            if (subtractionResult) {
              transformationVerified = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_26);
              log_1.addMessage_cte53e$(MainChain$check$lambda_27, MessageType$USER_getInstance(), currentLogLevel.v);
            }
            if (!transformationVerified) {
              switch (leftExpressionComparison.comparisonType.name) {
                case 'EQUAL':
                  var ll = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$(leftExpressionComparison.leftExpression.data, rightExpressionComparison.leftExpression.data, actualExpressionTransformations, void 0, void 0, void 0, void 0, factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
                  log_1.add_ww6hhz$(ll, MainChain$check$lambda_28, MainChain$check$lambda_29, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                  var rr = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$(leftExpressionComparison.rightExpression.data, rightExpressionComparison.rightExpression.data, actualExpressionTransformations, void 0, void 0, void 0, void 0, factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
                  log_1.add_ww6hhz$(rr, MainChain$check$lambda_30, MainChain$check$lambda_31, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                  if (ll && rr) {
                    transformationVerified = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_32);
                    log_1.addMessage_cte53e$(MainChain$check$lambda_33, MessageType$USER_getInstance(), currentLogLevel.v);
                  }
                   else {
                    log_1.addMessage_cte53e$(MainChain$check$lambda_34);
                    var lr = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$(leftExpressionComparison.leftExpression.data, rightExpressionComparison.rightExpression.data, actualExpressionTransformations, void 0, void 0, void 0, void 0, factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
                    log_1.add_ww6hhz$(lr, MainChain$check$lambda_35, MainChain$check$lambda_36, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                    var rl = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$(leftExpressionComparison.rightExpression.data, rightExpressionComparison.leftExpression.data, actualExpressionTransformations, void 0, void 0, void 0, void 0, factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
                    log_1.add_ww6hhz$(lr, MainChain$check$lambda_37, MainChain$check$lambda_38, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                    if (lr && rl) {
                      transformationVerified = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_39);
                      log_1.addMessage_cte53e$(MainChain$check$lambda_40, MessageType$USER_getInstance(), currentLogLevel.v);
                    }
                     else {
                      log_1.addMessage_cte53e$(MainChain$check$lambda_41, MessageType$USER_getInstance(), currentLogLevel.v);
                    }
                  }

                  if (!transformationVerified) {
                    var leftDivision = divisionTree(leftExpressionComparison.leftExpression.data, leftExpressionComparison.rightExpression.data);
                    var rightDivision = divisionTree(rightExpressionComparison.leftExpression.data, rightExpressionComparison.rightExpression.data);
                    var divisionResult = factComparator.expressionComparator.compareWithoutSubstitutions_fb5b0y$(leftDivision, rightDivision, ComparisonType$EQUAL_getInstance(), void 0, true);
                    if (divisionResult) {
                      transformationVerified = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_42);
                      log_1.addMessage_cte53e$(MainChain$check$lambda_43, MessageType$USER_getInstance(), currentLogLevel.v);
                    }
                  }

                  break;
                case 'LEFT_MORE':
                case 'LEFT_MORE_OR_EQUAL':
                  var ll_0 = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$(leftExpressionComparison.leftExpression.data, rightExpressionComparison.leftExpression.data, actualExpressionTransformations, void 0, void 0, void 0, ComparisonType$LEFT_LESS_OR_EQUAL_getInstance(), factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
                  log_1.add_ww6hhz$(ll_0, MainChain$check$lambda_44, MainChain$check$lambda_45, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                  var rr_0 = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$(leftExpressionComparison.rightExpression.data, rightExpressionComparison.rightExpression.data, actualExpressionTransformations, void 0, void 0, void 0, ComparisonType$LEFT_MORE_OR_EQUAL_getInstance(), factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
                  log_1.add_ww6hhz$(rr_0, MainChain$check$lambda_46, MainChain$check$lambda_47, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                  if (ll_0 && rr_0) {
                    transformationVerified = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_48);
                    log_1.addMessage_cte53e$(MainChain$check$lambda_49, MessageType$USER_getInstance(), currentLogLevel.v);
                  }
                   else {
                    log_1.addMessage_cte53e$(MainChain$check$lambda_50, MessageType$USER_getInstance(), currentLogLevel.v);
                  }

                  break;
                case 'LEFT_LESS':
                case 'LEFT_LESS_OR_EQUAL':
                  var ll_1 = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$(leftExpressionComparison.leftExpression.data, rightExpressionComparison.leftExpression.data, actualExpressionTransformations, void 0, void 0, void 0, ComparisonType$LEFT_MORE_OR_EQUAL_getInstance(), factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
                  log_1.add_ww6hhz$(ll_1, MainChain$check$lambda_51, MainChain$check$lambda_52, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                  var rr_1 = factComparator.expressionComparator.compareWithTreeTransformationRules_8lnv8j$(leftExpressionComparison.rightExpression.data, rightExpressionComparison.rightExpression.data, actualExpressionTransformations, void 0, void 0, void 0, ComparisonType$LEFT_LESS_OR_EQUAL_getInstance(), factComparator.compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps);
                  log_1.add_ww6hhz$(rr_1, MainChain$check$lambda_53, MainChain$check$lambda_54, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                  if (ll_1 && rr_1) {
                    transformationVerified = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_55);
                    log_1.addMessage_cte53e$(MainChain$check$lambda_56, MessageType$USER_getInstance(), currentLogLevel.v);
                  }
                   else {
                    log_1.addMessage_cte53e$(MainChain$check$lambda_57, MessageType$USER_getInstance(), currentLogLevel.v);
                  }

                  break;
              }
            }
          }
        }
         else {
          var leftFacts = null;
          var rightFacts = null;
          var tmp$_36 = this.chain.get_za3lpa$(currentLeftIndex).type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() && (Kotlin.isType(tmp$_6 = this.chain.get_za3lpa$(currentLeftIndex), MainLineAndNode) ? tmp$_6 : throwCCE()).outFacts.size === (Kotlin.isType(tmp$_7 = this.chain.get_za3lpa$(currentRightIndex), MainLineAndNode) ? tmp$_7 : throwCCE()).inFacts.size;
          if (tmp$_36) {
            var $receiver = (Kotlin.isType(tmp$_8 = this.chain.get_za3lpa$(currentLeftIndex), MainLineAndNode) ? tmp$_8 : throwCCE()).outFacts;
            var count$result;
            count$break: do {
              var tmp$_37;
              if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
                count$result = 0;
                break count$break;
              }
              var count = 0;
              tmp$_37 = $receiver.iterator();
              while (tmp$_37.hasNext()) {
                var element_2 = tmp$_37.next();
                if (element_2.type() !== ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance())
                  checkCountOverflow((count = count + 1 | 0, count));
              }
              count$result = count;
            }
             while (false);
            tmp$_36 = count$result === 0;
          }
          var tmp$_38 = tmp$_36;
          if (tmp$_38) {
            var $receiver_0 = (Kotlin.isType(tmp$_9 = this.chain.get_za3lpa$(currentRightIndex), MainLineAndNode) ? tmp$_9 : throwCCE()).inFacts;
            var count$result_0;
            count$break: do {
              var tmp$_39;
              if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
                count$result_0 = 0;
                break count$break;
              }
              var count_0 = 0;
              tmp$_39 = $receiver_0.iterator();
              while (tmp$_39.hasNext()) {
                var element_3 = tmp$_39.next();
                if (element_3.type() !== ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance())
                  checkCountOverflow((count_0 = count_0 + 1 | 0, count_0));
              }
              count$result_0 = count_0;
            }
             while (false);
            tmp$_38 = count$result_0 === 0;
          }
          if (tmp$_38) {
            leftFacts = (Kotlin.isType(tmp$_10 = this.chain.get_za3lpa$(currentLeftIndex), MainLineAndNode) ? tmp$_10 : throwCCE()).outFacts;
            rightFacts = (Kotlin.isType(tmp$_11 = this.chain.get_za3lpa$(currentRightIndex), MainLineAndNode) ? tmp$_11 : throwCCE()).inFacts;
          }
           else {
            var tmp$_40 = this.chain.get_za3lpa$(currentLeftIndex).type() === ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance() && (Kotlin.isType(tmp$_12 = this.chain.get_za3lpa$(currentLeftIndex), MainLineOrNode) ? tmp$_12 : throwCCE()).outFacts.size === (Kotlin.isType(tmp$_13 = this.chain.get_za3lpa$(currentRightIndex), MainLineOrNode) ? tmp$_13 : throwCCE()).inFacts.size;
            if (tmp$_40) {
              var $receiver_1 = (Kotlin.isType(tmp$_14 = this.chain.get_za3lpa$(currentLeftIndex), MainLineOrNode) ? tmp$_14 : throwCCE()).outFacts;
              var count$result_1;
              count$break: do {
                var tmp$_41;
                if (Kotlin.isType($receiver_1, Collection) && $receiver_1.isEmpty()) {
                  count$result_1 = 0;
                  break count$break;
                }
                var count_1 = 0;
                tmp$_41 = $receiver_1.iterator();
                while (tmp$_41.hasNext()) {
                  var element_4 = tmp$_41.next();
                  if (element_4.type() !== ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance())
                    checkCountOverflow((count_1 = count_1 + 1 | 0, count_1));
                }
                count$result_1 = count_1;
              }
               while (false);
              tmp$_40 = count$result_1 === 0;
            }
            var tmp$_42 = tmp$_40;
            if (tmp$_42) {
              var $receiver_2 = (Kotlin.isType(tmp$_15 = this.chain.get_za3lpa$(currentRightIndex), MainLineOrNode) ? tmp$_15 : throwCCE()).inFacts;
              var count$result_2;
              count$break: do {
                var tmp$_43;
                if (Kotlin.isType($receiver_2, Collection) && $receiver_2.isEmpty()) {
                  count$result_2 = 0;
                  break count$break;
                }
                var count_2 = 0;
                tmp$_43 = $receiver_2.iterator();
                while (tmp$_43.hasNext()) {
                  var element_5 = tmp$_43.next();
                  if (element_5.type() !== ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance())
                    checkCountOverflow((count_2 = count_2 + 1 | 0, count_2));
                }
                count$result_2 = count_2;
              }
               while (false);
              tmp$_42 = count$result_2 === 0;
            }
            if (tmp$_42) {
              leftFacts = (Kotlin.isType(tmp$_16 = this.chain.get_za3lpa$(currentLeftIndex), MainLineOrNode) ? tmp$_16 : throwCCE()).outFacts;
              rightFacts = (Kotlin.isType(tmp$_17 = this.chain.get_za3lpa$(currentRightIndex), MainLineOrNode) ? tmp$_17 : throwCCE()).inFacts;
            }
          }
          if (leftFacts != null && rightFacts != null) {
            log_1.addMessage_cte53e$(MainChain$check$lambda_58, MessageType$USER_getInstance(), currentLogLevel.v);
            log_1.logSystemFacts_s4ig9i$(this.chain.get_za3lpa$(currentLeftIndex).type(), leftFacts, MainChain$check$lambda_59, MessageType$USER_getInstance());
            log_1.logSystemFacts_s4ig9i$(this.chain.get_za3lpa$(currentRightIndex).type(), rightFacts, MainChain$check$lambda_60, MessageType$USER_getInstance());
            var hasDifferentComparisonType = log_1.assignAndLog_746w4o$(false, currentLogLevel.v, MainChain$check$lambda_61);
            var expressionTransformationRulesFromLeftFact = ArrayList_init();
            tmp$_18 = get_lastIndex(leftFacts);
            for (var i = 0; i <= tmp$_18; i++) {
              expressionTransformationRulesFromLeftFact.add_11rb$(new ExpressionSubstitution((Kotlin.isType(tmp$_19 = leftFacts.get_za3lpa$(i), ExpressionComparison) ? tmp$_19 : throwCCE()).leftExpression.data, (Kotlin.isType(tmp$_20 = leftFacts.get_za3lpa$(i), ExpressionComparison) ? tmp$_20 : throwCCE()).rightExpression.data, void 0, true, void 0, void 0, void 0, (Kotlin.isType(tmp$_21 = leftFacts.get_za3lpa$(i), ExpressionComparison) ? tmp$_21 : throwCCE()).comparisonType));
              log_1.addMessageWithExpressionSubstitutionShort_w3y3zc$(MainChain$check$lambda_62, last(expressionTransformationRulesFromLeftFact), MessageType$USER_getInstance(), currentLogLevel.v);
            }
            tmp$_22 = get_lastIndex(leftFacts);
            for (var i_0 = 0; i_0 <= tmp$_22; i_0++) {
              if ((Kotlin.isType(tmp$_23 = leftFacts.get_za3lpa$(i_0), ExpressionComparison) ? tmp$_23 : throwCCE()).comparisonType !== (Kotlin.isType(tmp$_24 = rightFacts.get_za3lpa$(i_0), ExpressionComparison) ? tmp$_24 : throwCCE()).comparisonType) {
                log_1.add_ww6hhz$(i_0, MainChain$check$lambda_63, MainChain$check$lambda_64, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                hasDifferentComparisonType = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_65);
                break;
              }
            }
            if (!hasDifferentComparisonType) {
              log_1.addMessage_cte53e$(MainChain$check$lambda_66, MessageType$USER_getInstance(), currentLogLevel.v);
              var uncorrectTransformationFound = log_1.assignAndLog_746w4o$(false, currentLogLevel.v, MainChain$check$lambda_67);
              tmp$_25 = get_lastIndex(leftFacts);
              for (var i_1 = 0; i_1 <= tmp$_25; i_1++) {
                var mainChain = new MainChain(mutableListOf([leftFacts.get_za3lpa$(i_1), rightFacts.get_za3lpa$(i_1)]));
                var result = mainChain.check_i0qcxd$(factComparator, true, actualFactsTransformations, plus(actualExpressionTransformations, expressionTransformationRulesFromLeftFact), emptyList(), skipTrivialCheck);
                if (!result.isCorrect) {
                  uncorrectTransformationFound = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_68);
                  log_1.add_ww6hhz$(i_1, MainChain$check$lambda_69, MainChain$check$lambda_70, currentLogLevel.v, void 0, MessageType$USER_getInstance());
                  break;
                }
              }
              if (!uncorrectTransformationFound) {
                log_1.addMessage_cte53e$(MainChain$check$lambda_71, MessageType$USER_getInstance(), currentLogLevel.v);
                transformationVerified = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_72);
              }
            }
          }
        }
      }
      if (!transformationVerified) {
        log_1.addMessage_cte53e$(MainChain$check$lambda_73);
        var additionalFactInCurrentTransformationApplicationUsed = ArrayList_init();
        var result_0 = factComparator.compareWithTreeTransformationRules_p9xvyu$(this.chain.get_za3lpa$(currentLeftIndex), this.chain.get_za3lpa$(currentRightIndex), additionalFacts, actualFactsTransformations, void 0, void 0, void 0, void 0, additionalFactInCurrentTransformationApplicationUsed);
        if (result_0) {
          log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factHelpFactColor, MainChain$check$lambda_74, MainChain$check$lambda_75, MainChain$check$lambda_76, MainChain$check$lambda_77, currentLogLevel.v);
          coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.factHelpFactColor));
          var isInTaskContext = !additionalFactInCurrentTransformationApplicationUsed.isEmpty();
          log_1.add_ww6hhz$(isInTaskContext, MainChain$check$lambda_78, MainChain$check$lambda_79, currentLogLevel.v, void 0, MessageType$USER_getInstance());
          if (isInTaskContext) {
            additionalFactUsed = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainChain$check$lambda_80);
          }
        }
         else {
          log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongFactColor, MainChain$check$lambda_81, MainChain$check$lambda_82, MainChain$check$lambda_83, MainChain$check$lambda_84, currentLogLevel.v);
          coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.wrongFactColor));
          log_1.addMessage_cte53e$(MainChain$check$lambda_85, MessageType$USER_getInstance(), currentLogLevel.v);
          return new ComparisonResult(false, coloringTasks, this.chain.get_za3lpa$(currentLeftIndex), this.chain.get_za3lpa$(currentRightIndex), "Unclear transformation between '" + this.chain.get_za3lpa$(currentLeftIndex) + "' and '" + this.chain.get_za3lpa$(currentRightIndex) + "' ");
        }
      }
       else {
        log_1.add_czegqf$(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor, MainChain$check$lambda_86, MainChain$check$lambda_87, MainChain$check$lambda_88, MainChain$check$lambda_89, currentLogLevel.v);
        coloringTasks.add_11rb$(new ColoringTask(this.chain.get_za3lpa$(currentLeftIndex).endPosition, this.chain.get_za3lpa$(currentRightIndex).startPosition, factComparator.compiledConfiguration.checkedFactAccentuation.checkedFactColor.correctFactColor));
        log_1.addMessage_cte53e$(MainChain$check$lambda_90, MessageType$USER_getInstance(), currentLogLevel.v);
      }
      if (this.chain.get_za3lpa$(currentRightIndex).type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() || this.chain.get_za3lpa$(currentRightIndex).type() === ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance()) {
        tmp$_27 = (Kotlin.isType(tmp$_26 = this.chain.get_za3lpa$(currentRightIndex), MainLineNode) ? tmp$_26 : throwCCE()).factTransformationChains.iterator();
        while (tmp$_27.hasNext()) {
          var transformationChain_0 = tmp$_27.next();
          (Kotlin.isType(tmp$_28 = this.chain.get_za3lpa$(currentRightIndex), MainLineNode) ? tmp$_28 : throwCCE()).outFacts.add_11rb$(last(transformationChain_0.chain));
        }
      }
      currentLogLevel.v = currentLogLevel.v - 1 | 0;
      currentLeftIndex = log_1.assignAndLog_746w4o$(currentRightIndex, currentLogLevel.v, MainChain$check$lambda_91);
      currentRightIndex = log_1.assignAndLog_746w4o$(currentRightIndex + 1 | 0, currentLogLevel.v, MainChain$check$lambda_92);
    }
    log_1.addMessage_cte53e$(MainChain$check$lambda_93(this), MessageType$USER_getInstance(), currentLogLevel.v);
    return new ComparisonResult(true, coloringTasks, first(this.chain), last(this.chain), void 0, additionalFactUsed);
  };
  MainChain.prototype.variableReplacement_y0zsll$ = function (replacements) {
    var tmp$;
    tmp$ = this.chain.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.variableReplacement_y0zsll$(replacements);
    }
  };
  MainChain.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MainChain',
    interfaces: []
  };
  function MainLineAndNode(startPosition, endPosition, parent, factTransformationChains, inFacts, outFacts, expressionTransformationChains, rules, identifier) {
    MainLineAndNode$Companion_getInstance();
    if (startPosition === void 0)
      startPosition = 0;
    if (endPosition === void 0)
      endPosition = 0;
    if (parent === void 0)
      parent = null;
    if (factTransformationChains === void 0) {
      factTransformationChains = ArrayList_init();
    }
    if (inFacts === void 0) {
      inFacts = ArrayList_init();
    }
    if (outFacts === void 0) {
      outFacts = ArrayList_init();
    }
    if (expressionTransformationChains === void 0) {
      expressionTransformationChains = ArrayList_init();
    }
    if (rules === void 0) {
      rules = ArrayList_init();
    }
    if (identifier === void 0)
      identifier = '';
    this.startPosition_onzna1$_0 = startPosition;
    this.endPosition_rf7oe8$_0 = endPosition;
    this.parent_99b1ju$_0 = parent;
    this.factTransformationChains_j0btk9$_0 = factTransformationChains;
    this.inFacts_yqn9vi$_0 = inFacts;
    this.outFacts_xzyw7r$_0 = outFacts;
    this.expressionTransformationChains_47am2l$_0 = expressionTransformationChains;
    this.rules_ep5j9p$_0 = rules;
    this.identifier_fly6yh$_0 = identifier;
    this.inIdentifier = '';
    this.outIdentifier = '';
  }
  Object.defineProperty(MainLineAndNode.prototype, 'startPosition', {
    get: function () {
      return this.startPosition_onzna1$_0;
    }
  });
  Object.defineProperty(MainLineAndNode.prototype, 'endPosition', {
    get: function () {
      return this.endPosition_rf7oe8$_0;
    }
  });
  Object.defineProperty(MainLineAndNode.prototype, 'parent', {
    get: function () {
      return this.parent_99b1ju$_0;
    },
    set: function (parent) {
      this.parent_99b1ju$_0 = parent;
    }
  });
  Object.defineProperty(MainLineAndNode.prototype, 'factTransformationChains', {
    get: function () {
      return this.factTransformationChains_j0btk9$_0;
    }
  });
  Object.defineProperty(MainLineAndNode.prototype, 'inFacts', {
    get: function () {
      return this.inFacts_yqn9vi$_0;
    }
  });
  Object.defineProperty(MainLineAndNode.prototype, 'outFacts', {
    get: function () {
      return this.outFacts_xzyw7r$_0;
    }
  });
  Object.defineProperty(MainLineAndNode.prototype, 'expressionTransformationChains', {
    get: function () {
      return this.expressionTransformationChains_47am2l$_0;
    }
  });
  Object.defineProperty(MainLineAndNode.prototype, 'rules', {
    get: function () {
      return this.rules_ep5j9p$_0;
    }
  });
  Object.defineProperty(MainLineAndNode.prototype, 'identifier', {
    get: function () {
      return this.identifier_fly6yh$_0;
    },
    set: function (identifier) {
      this.identifier_fly6yh$_0 = identifier;
    }
  });
  MainLineAndNode.prototype.getLastExpression = function () {
    return last(this.outFacts).getLastExpression();
  };
  MainLineAndNode.prototype.isSolutionForVariables_axkv0l$$default = function (targetVariables, left, allowedVariables) {
    var tmp$;
    tmp$ = this.outFacts.iterator();
    while (tmp$.hasNext()) {
      var fact = tmp$.next();
      var error = fact.isSolutionForVariables_axkv0l$(targetVariables, void 0, allowedVariables);
      if (error != null)
        return error;
    }
    return null;
  };
  MainLineAndNode.prototype.computeIfNumeric_cazeuv$ = function (substitutionInstance, baseOperationsDefinitions, checkOutMainLineNodePart) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var actualFacts = checkOutMainLineNodePart ? getOutFactsFromMainLineNode(this) : getInFactsFromMainLineNode(this);
    var isNull = false;
    tmp$ = actualFacts.iterator();
    while (tmp$.hasNext()) {
      var fact = tmp$.next();
      switch (fact.type().name) {
        case 'EXPRESSION_COMPARISON':
          tmp$_2 = (Kotlin.isType(tmp$_0 = fact, ExpressionComparison) ? tmp$_0 : throwCCE()).computeIfNumeric_gb8qxc$(substitutionInstance, baseOperationsDefinitions);
          break;
        case 'MAIN_LINE_AND_NODE':
        case 'MAIN_LINE_OR_NODE':
          tmp$_2 = (Kotlin.isType(tmp$_1 = fact, MainLineNode) ? tmp$_1 : throwCCE()).computeIfNumeric_cazeuv$(substitutionInstance, baseOperationsDefinitions, checkOutMainLineNodePart);
          break;
        default:tmp$_2 = null;
          break;
      }
      var isCorrect = tmp$_2;
      if (isCorrect == null) {
        isNull = true;
      }
       else if (!isCorrect) {
        return false;
      }
    }
    return isNull ? null : true;
  };
  MainLineAndNode.prototype.copyNode = function () {
    return new MainLineAndNode(this.startPosition, this.endPosition, this.parent);
  };
  MainLineAndNode.prototype.clone = function () {
    var tmp$ = this.startPosition;
    var tmp$_0 = this.endPosition;
    var tmp$_1 = this.parent;
    var tmp$_2 = void 0;
    var $receiver = this.inFacts;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_3;
    tmp$_3 = $receiver.iterator();
    while (tmp$_3.hasNext()) {
      var item = tmp$_3.next();
      destination.add_11rb$(item.clone());
    }
    var tmp$_4 = toMutableList(destination);
    var $receiver_0 = this.outFacts;
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_5;
    tmp$_5 = $receiver_0.iterator();
    while (tmp$_5.hasNext()) {
      var item_0 = tmp$_5.next();
      destination_0.add_11rb$(item_0.clone());
    }
    return new MainLineAndNode(tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_4, toMutableList(destination_0));
  };
  MainLineAndNode.prototype.cloneWithNormalization_1g1bdl$ = function (nameArgsMap, sorted) {
    var tmp$ = this.startPosition;
    var tmp$_0 = this.endPosition;
    var tmp$_1 = this.parent;
    var tmp$_2 = void 0;
    var $receiver = this.inFacts;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_3;
    tmp$_3 = $receiver.iterator();
    while (tmp$_3.hasNext()) {
      var item = tmp$_3.next();
      destination.add_11rb$(item.cloneWithNormalization_1g1bdl$(nameArgsMap, sorted));
    }
    var tmp$_4 = toMutableList(destination);
    var $receiver_0 = this.outFacts;
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_5;
    tmp$_5 = $receiver_0.iterator();
    while (tmp$_5.hasNext()) {
      var item_0 = tmp$_5.next();
      destination_0.add_11rb$(item_0.cloneWithNormalization_1g1bdl$(nameArgsMap, sorted));
    }
    return new MainLineAndNode(tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_4, toMutableList(destination_0));
  };
  MainLineAndNode.prototype.normalizeSubTree_f8z7ch$ = function (currentDeep, nameArgsMap, sorted) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.normalizeSubTree_f8z7ch$(currentDeep, nameArgsMap, sorted);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.normalizeSubTree_f8z7ch$(currentDeep, nameArgsMap, sorted);
    }
  };
  MainLineAndNode.prototype.variableReplacement_y0zsll$ = function (replacements) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.variableReplacement_y0zsll$(replacements);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.variableReplacement_y0zsll$(replacements);
    }
    var tmp$_1;
    tmp$_1 = this.rules.iterator();
    while (tmp$_1.hasNext()) {
      var element_1 = tmp$_1.next();
      element_1.variableReplacement_y0zsll$(replacements);
    }
    var tmp$_2;
    tmp$_2 = this.expressionTransformationChains.iterator();
    while (tmp$_2.hasNext()) {
      var element_2 = tmp$_2.next();
      element_2.variableReplacement_y0zsll$(replacements);
    }
    var tmp$_3;
    tmp$_3 = this.factTransformationChains.iterator();
    while (tmp$_3.hasNext()) {
      var element_3 = tmp$_3.next();
      element_3.variableReplacement_y0zsll$(replacements);
    }
  };
  MainLineAndNode.prototype.applyAllExpressionSubstitutions_itxcjl$ = function (expressionSubstitutions) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.applyAllExpressionSubstitutions_itxcjl$(expressionSubstitutions);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.applyAllExpressionSubstitutions_itxcjl$(expressionSubstitutions);
    }
  };
  MainLineAndNode.prototype.computeExpressionTrees_r1dnaj$ = function (baseOperationsDefinitions) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.computeExpressionTrees_r1dnaj$(baseOperationsDefinitions);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.computeExpressionTrees_r1dnaj$(baseOperationsDefinitions);
    }
  };
  MainLineAndNode.prototype.replaceNotDefinedFunctionsOnVariables_ioe5p3$ = function (functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.replaceNotDefinedFunctionsOnVariables_ioe5p3$(functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.replaceNotDefinedFunctionsOnVariables_ioe5p3$(functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet);
    }
  };
  function MainLineAndNode$check$lambda() {
    return 'Start checking fact: ';
  }
  function MainLineAndNode$check$lambda_0(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel.v;
    };
  }
  function MainLineAndNode$check$lambda_1() {
    return 'additionalFactUsed';
  }
  function MainLineAndNode$check$lambda_2() {
    return '0. KNOWN_FACT extraction';
  }
  function MainLineAndNode$check$lambda_3() {
    return 'fact checked: ';
  }
  function MainLineAndNode$check$lambda_4() {
    return 'additionalFactUsed';
  }
  function MainLineAndNode$check$lambda_5() {
    return 'FACT VERIFICATION_FAILED';
  }
  function MainLineAndNode$check$lambda_6() {
    return "FACT '''";
  }
  function MainLineAndNode$check$lambda_7() {
    return "''' VERIFICATION_FAILED";
  }
  function MainLineAndNode$check$lambda_8() {
    return '1. RULE checking';
  }
  function MainLineAndNode$check$lambda_9() {
    return 'FACT_RULE ADDED:';
  }
  function MainLineAndNode$check$lambda_10() {
    return 'leftFactIsKnown';
  }
  function MainLineAndNode$check$lambda_11() {
    return 'compare left rule part with known fact: ';
  }
  function MainLineAndNode$check$lambda_12() {
    return 'leftFactIsKnown';
  }
  function MainLineAndNode$check$lambda_13() {
    return 'left rule fact is known, so right rule fact is added to known facts';
  }
  function MainLineAndNode$check$lambda_14() {
    return 'rule is expression comparison, so EXPRESSION_RULE ' + CheckingKeyWords$Companion_getInstance().ruleAddedInContext;
  }
  function MainLineAndNode$check$lambda_15() {
    return 'EXPRESSION_RULE ADDED:';
  }
  function MainLineAndNode$check$lambda_16() {
    return 'RULE VERIFICATION_FAILED';
  }
  function MainLineAndNode$check$lambda_17() {
    return "RULE '''";
  }
  function MainLineAndNode$check$lambda_18() {
    return "''' VERIFICATION_FAILED";
  }
  function MainLineAndNode$check$lambda_19() {
    return '2. EXPRESSION_CHAIN checking';
  }
  function MainLineAndNode$check$lambda_20() {
    return 'To out facts added fact: ';
  }
  function MainLineAndNode$check$lambda_21() {
    return 'additionalFactUsed';
  }
  function MainLineAndNode$check$lambda_22() {
    return 'EXPRESSION_CHAIN VERIFICATION_FAILED';
  }
  function MainLineAndNode$check$lambda_23() {
    return "EXPRESSION_CHAIN '''";
  }
  function MainLineAndNode$check$lambda_24() {
    return "''' VERIFICATION_FAILED";
  }
  function MainLineAndNode$check$lambda_25() {
    return '3. FACT_CHAIN checking';
  }
  function MainLineAndNode$check$lambda_26() {
    return 'To out facts added fact: ';
  }
  function MainLineAndNode$check$lambda_27() {
    return 'additionalFactUsed';
  }
  function MainLineAndNode$check$lambda_28() {
    return 'FACT_CHAIN VERIFICATION_FAILED';
  }
  function MainLineAndNode$check$lambda_29() {
    return "FACT_CHAIN '''";
  }
  function MainLineAndNode$check$lambda_30() {
    return "''' VERIFICATION_FAILED";
  }
  function MainLineAndNode$check$lambda_31() {
    return 'Fact node checked and it is correct, out facts are computed: ';
  }
  MainLineAndNode.prototype.check_i0qcxd$$default = function (factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    log_1.addMessageWithFactDetail_d1xyjh$(MainLineAndNode$check$lambda, this, MessageType$USER_getInstance(), void 0, 1);
    var currentLogLevel = {v: log_1.currentLevel};
    log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_0(currentLogLevel), void 0, currentLogLevel.v);
    log_1.logCheckParams_yiwyc7$(onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts);
    var coloringTasks = ArrayList_init();
    var additionalFactUsed = log_1.assignAndLog_746w4o$(false, currentLogLevel.v, MainLineAndNode$check$lambda_1);
    var nodeExpressionTransformations = ArrayList_init();
    var nodeFactsTransformations = ArrayList_init();
    log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_2, MessageType$USER_getInstance(), currentLogLevel.v);
    tmp$ = this.factTransformationChains.iterator();
    while (tmp$.hasNext()) {
      var factChain = tmp$.next();
      var checkingResult = first(factChain.chain).check_i0qcxd$(factComparator, false, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck);
      coloringTasks.addAll_brywnq$(checkingResult.coloringTasks);
      if (checkingResult.isCorrect) {
        log_1.addMessageWithFactDetail_d1xyjh$(MainLineAndNode$check$lambda_3, first(factChain.chain), MessageType$USER_getInstance(), currentLogLevel.v);
        if (checkingResult.additionalFactUsed) {
          additionalFactUsed = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainLineAndNode$check$lambda_4);
        }
      }
       else {
        log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_5, MessageType$USER_getInstance(), currentLogLevel.v);
        log_1.add_ww6hhz$(first(factChain.chain), MainLineAndNode$check$lambda_6, MainLineAndNode$check$lambda_7, currentLogLevel.v);
        return checkingResult;
      }
    }
    log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_8, MessageType$USER_getInstance(), currentLogLevel.v);
    currentLogLevel.v = currentLogLevel.v + 1 | 0;
    var knownFacts = toMutableList(plus(additionalFacts, this.inFacts));
    tmp$_0 = this.rules.iterator();
    while (tmp$_0.hasNext()) {
      var rule = tmp$_0.next();
      var checkingResult_0 = rule.check_i0qcxd$(factComparator, false, plus(factsTransformations, nodeFactsTransformations), plus(expressionTransformations, nodeExpressionTransformations), plus(additionalFacts, this.inFacts), skipTrivialCheck);
      coloringTasks.addAll_brywnq$(checkingResult_0.coloringTasks);
      if (checkingResult_0.isCorrect) {
        if (rule.factSubstitution != null || rule.expressionSubstitution != null) {
          if (rule.factSubstitution != null) {
            nodeFactsTransformations.add_11rb$(ensureNotNull(rule.factSubstitution));
            log_1.addMessageWithFactSubstitutionDetail_garven$(MainLineAndNode$check$lambda_9, ensureNotNull(rule.factSubstitution), MessageType$USER_getInstance(), currentLogLevel.v);
            var leftFactIsKnown = log_1.assignAndLog_746w4o$(false, currentLogLevel.v, MainLineAndNode$check$lambda_10);
            tmp$_1 = knownFacts.iterator();
            while (tmp$_1.hasNext()) {
              var knownFact = tmp$_1.next();
              log_1.addMessageWithFactShort_d1xyjh$(MainLineAndNode$check$lambda_11, knownFact, void 0, currentLogLevel.v);
              if (factComparator.compareAsIs_4xgx46$(knownFact, ensureNotNull(rule.factSubstitution).left)) {
                leftFactIsKnown = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainLineAndNode$check$lambda_12);
                break;
              }
            }
            if (leftFactIsKnown) {
              knownFacts.add_11rb$(ensureNotNull(rule.factSubstitution).right);
              log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_13, MessageType$USER_getInstance(), currentLogLevel.v);
              if (ensureNotNull(rule.factSubstitution).right.type() === ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance()) {
                var ruleData = Kotlin.isType(tmp$_2 = ensureNotNull(rule.factSubstitution).right, ExpressionComparison) ? tmp$_2 : throwCCE();
                var expressionSubstitution = new ExpressionSubstitution(ruleData.leftExpression.data, ruleData.rightExpression.data, void 0, true, void 0, void 0, void 0, ruleData.comparisonType);
                nodeExpressionTransformations.add_11rb$(expressionSubstitution);
                log_1.addMessageWithExpressionSubstitutionShort_w3y3zc$(MainLineAndNode$check$lambda_14, expressionSubstitution, void 0, currentLogLevel.v);
              }
            }
          }
           else {
            nodeExpressionTransformations.add_11rb$(ensureNotNull(rule.expressionSubstitution));
            log_1.addMessageWithExpressionSubstitutionShort_w3y3zc$(MainLineAndNode$check$lambda_15, ensureNotNull(rule.expressionSubstitution), MessageType$USER_getInstance(), currentLogLevel.v);
          }
        }
      }
       else {
        log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_16, MessageType$USER_getInstance(), currentLogLevel.v);
        log_1.add_ww6hhz$(rule, MainLineAndNode$check$lambda_17, MainLineAndNode$check$lambda_18, currentLogLevel.v);
        return new ComparisonResult(false, coloringTasks, this, this, checkingResult_0.description);
      }
    }
    log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_19, MessageType$USER_getInstance(), currentLogLevel.v - 1 | 0);
    tmp$_3 = this.expressionTransformationChains.iterator();
    while (tmp$_3.hasNext()) {
      var expressionChain = tmp$_3.next();
      var checkingResult_1 = expressionChain.check_i0qcxd$(factComparator, false, plus(factsTransformations, nodeFactsTransformations), plus(expressionTransformations, nodeExpressionTransformations), plus(additionalFacts, this.inFacts), skipTrivialCheck);
      coloringTasks.addAll_brywnq$(checkingResult_1.coloringTasks);
      if (checkingResult_1.isCorrect) {
        this.outFacts.add_11rb$(new ExpressionComparison(void 0, void 0, Kotlin.isType(tmp$_4 = first(expressionChain.chain), Expression) ? tmp$_4 : throwCCE(), Kotlin.isType(tmp$_5 = last(expressionChain.chain), Expression) ? tmp$_5 : throwCCE(), expressionChain.comparisonType, this));
        log_1.addMessageWithFactDetail_d1xyjh$(MainLineAndNode$check$lambda_20, last(this.outFacts), MessageType$USER_getInstance(), currentLogLevel.v);
        if (checkingResult_1.additionalFactUsed) {
          additionalFactUsed = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainLineAndNode$check$lambda_21);
        }
      }
       else {
        log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_22, MessageType$USER_getInstance(), currentLogLevel.v);
        log_1.add_ww6hhz$(expressionChain, MainLineAndNode$check$lambda_23, MainLineAndNode$check$lambda_24, currentLogLevel.v);
        return new ComparisonResult(false, coloringTasks, this, this, checkingResult_1.description);
      }
    }
    log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_25, MessageType$USER_getInstance(), currentLogLevel.v - 1 | 0);
    tmp$_6 = this.factTransformationChains.iterator();
    while (tmp$_6.hasNext()) {
      var factChain_0 = tmp$_6.next();
      var checkingResult_2 = factChain_0.check_i0qcxd$(factComparator, false, plus(factsTransformations, nodeFactsTransformations), plus(expressionTransformations, nodeExpressionTransformations), plus(additionalFacts, this.inFacts), skipTrivialCheck);
      coloringTasks.addAll_brywnq$(checkingResult_2.coloringTasks);
      if (checkingResult_2.isCorrect) {
        this.outFacts.add_11rb$(last(factChain_0.chain));
        log_1.addMessageWithFactDetail_d1xyjh$(MainLineAndNode$check$lambda_26, last(this.outFacts), MessageType$USER_getInstance(), currentLogLevel.v);
        if (checkingResult_2.additionalFactUsed) {
          additionalFactUsed = log_1.assignAndLog_746w4o$(true, currentLogLevel.v, MainLineAndNode$check$lambda_27);
        }
      }
       else {
        log_1.addMessage_cte53e$(MainLineAndNode$check$lambda_28, MessageType$USER_getInstance(), currentLogLevel.v);
        log_1.add_ww6hhz$(factChain_0, MainLineAndNode$check$lambda_29, MainLineAndNode$check$lambda_30, currentLogLevel.v);
        return new ComparisonResult(false, coloringTasks, this, this, checkingResult_2.description);
      }
    }
    log_1.addMessageWithFactDetail_d1xyjh$(MainLineAndNode$check$lambda_31, this, MessageType$USER_getInstance(), currentLogLevel.v - 1 | 0);
    return new ComparisonResult(true, coloringTasks, this, this, void 0, additionalFactUsed);
  };
  MainLineAndNode.prototype.getActualChain = function () {
    return last(this.factTransformationChains).chain;
  };
  MainLineAndNode.prototype.addStartNewFactChain = function () {
    this.factTransformationChains.add_11rb$(new MainChain());
  };
  MainLineAndNode.prototype.addExpressionComparisonFact_wirlwz$ = function (fact) {
    if (this.factTransformationChains.isEmpty()) {
      this.addStartNewFactChain();
    }
    this.getActualChain().add_11rb$(fact);
  };
  MainLineAndNode.prototype.type = function () {
    return ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance();
  };
  function MainLineAndNode$toString$lambda(it) {
    return it.toString();
  }
  function MainLineAndNode$toString$lambda_0(it) {
    return it.toString();
  }
  function MainLineAndNode$toString$lambda_1(it) {
    return it.toString();
  }
  function MainLineAndNode$toString$lambda_2(it) {
    return it.toString();
  }
  function MainLineAndNode$toString$lambda_3(it) {
    return it.toString();
  }
  MainLineAndNode.prototype.toString = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (!this.rules.isEmpty()) {
      tmp$ = 'rules:(' + joinToString(this.rules, ';', void 0, void 0, void 0, void 0, MainLineAndNode$toString$lambda) + ');';
    }
     else {
      tmp$ = '';
    }
    if (!this.expressionTransformationChains.isEmpty()) {
      tmp$_0 = 'transformation chains:(' + joinToString(this.expressionTransformationChains, ';', void 0, void 0, void 0, void 0, MainLineAndNode$toString$lambda_0) + ');';
    }
     else {
      tmp$_0 = '';
    }
    if (!this.factTransformationChains.isEmpty()) {
      tmp$_1 = 'facts chains:(' + joinToString(this.factTransformationChains, ';', void 0, void 0, void 0, void 0, MainLineAndNode$toString$lambda_1) + ')';
    }
     else {
      tmp$_1 = '';
    }
    if (!this.inFacts.isEmpty()) {
      tmp$_2 = 'in:(' + joinToString(this.inFacts, ';', void 0, void 0, void 0, void 0, MainLineAndNode$toString$lambda_2) + ')';
    }
     else {
      tmp$_2 = '';
    }
    if (!this.outFacts.isEmpty()) {
      tmp$_3 = 'out:(' + joinToString(this.outFacts, ';', void 0, void 0, void 0, void 0, MainLineAndNode$toString$lambda_3) + ')';
    }
     else {
      tmp$_3 = '';
    }
    return 'AND_NODE(' + tmp$ + tmp$_0 + tmp$_1 + tmp$_2 + tmp$_3 + ')';
  };
  function MainLineAndNode$computeIdentifier$lambda(closure$recomputeIfComputed) {
    return function (it) {
      return it.computeIdentifier_6taknv$(closure$recomputeIfComputed);
    };
  }
  function MainLineAndNode$computeIdentifier$lambda_0(closure$recomputeIfComputed) {
    return function (it) {
      return it.computeIdentifier_6taknv$(closure$recomputeIfComputed);
    };
  }
  MainLineAndNode.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.identifier) || recomputeIfComputed) {
      this.identifier = 'AND_NODE(' + joinToString(this.inFacts, ';mn;', void 0, void 0, void 0, void 0, MainLineAndNode$computeIdentifier$lambda(recomputeIfComputed)) + ((!this.outFacts.isEmpty() ? ';-->>;(' + joinToString(this.outFacts, ';mn;', void 0, void 0, void 0, void 0, MainLineAndNode$computeIdentifier$lambda_0(recomputeIfComputed)) : '') + ')');
    }
    return this.identifier;
  };
  function MainLineAndNode$computeInIdentifier$lambda(closure$recomputeIfComputed) {
    return function (it) {
      return it.computeInIdentifier_6taknv$(closure$recomputeIfComputed);
    };
  }
  MainLineAndNode.prototype.computeInIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.inIdentifier) || recomputeIfComputed) {
      this.inIdentifier = 'AND_NODE(' + joinToString(this.inFacts, ';mn;', void 0, void 0, void 0, void 0, MainLineAndNode$computeInIdentifier$lambda(recomputeIfComputed)) + ')';
    }
    return this.inIdentifier;
  };
  function MainLineAndNode$computeOutIdentifier$lambda(closure$recomputeIfComputed) {
    return function (it) {
      return it.computeOutIdentifier_6taknv$(closure$recomputeIfComputed);
    };
  }
  MainLineAndNode.prototype.computeOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.outIdentifier) || recomputeIfComputed) {
      this.outIdentifier = 'AND_NODE(' + joinToString(this.outFacts, ';mn;', void 0, void 0, void 0, void 0, MainLineAndNode$computeOutIdentifier$lambda(recomputeIfComputed)) + ')';
    }
    return this.outIdentifier;
  };
  function MainLineAndNode$computeSortedOutIdentifier$lambda(it) {
    return it;
  }
  MainLineAndNode.prototype.computeSortedOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    var $receiver = this.outFacts;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item.computeSortedOutIdentifier_6taknv$(recomputeIfComputed));
    }
    var childrenFactsIdentifiers = destination;
    return 'AND_NODE(' + joinToString(sorted(childrenFactsIdentifiers), ';mn;', void 0, void 0, void 0, void 0, MainLineAndNode$computeSortedOutIdentifier$lambda) + ')';
  };
  MainLineAndNode.prototype.isFactorizationForVariables_s6qnlc$ = function (minNumberOfMultipliers, targetVariables, targetExpression, factComparator) {
    if (!this.outFacts.isEmpty()) {
      return last(this.outFacts).isFactorizationForVariables_s6qnlc$(minNumberOfMultipliers, targetVariables, targetExpression, factComparator);
    }
    return new GeneralError('No answer');
  };
  MainLineAndNode.prototype.isSolutionWithoutFunctions_o78e5l$ = function (forbidden, targetExpression, factComparator) {
    if (!this.outFacts.isEmpty()) {
      return last(this.outFacts).isSolutionWithoutFunctions_o78e5l$(forbidden, targetExpression, factComparator);
    }
    return new GeneralError('No answer');
  };
  MainLineAndNode.prototype.hasNoFractions_qclyqr$ = function (maxNumberOfDivisions, targetExpression, factComparator) {
    if (!this.outFacts.isEmpty()) {
      return last(this.outFacts).hasNoFractions_qclyqr$(maxNumberOfDivisions, targetExpression, factComparator);
    }
    return new GeneralError('No answer');
  };
  function MainLineAndNode$Companion() {
    MainLineAndNode$Companion_instance = this;
  }
  MainLineAndNode$Companion.prototype.parseFromFactIdentifier_r5gof1$ = function (string, parent, functionConfiguration) {
    if (parent === void 0)
      parent = null;
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    var endIndex = string.length - 1 | 0;
    var mainPart = string.substring(9, endIndex);
    var $receiver = splitBySubstringOnTopLevel(listOf(new SplittingString(';-->>;')), mainPart);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var startIndex = item.startPosition;
      var endIndex_0 = item.endPosition;
      tmp$_0.call(destination, mainPart.substring(startIndex, endIndex_0));
    }
    var parts = destination;
    var result = new MainLineAndNode(void 0, void 0, parent);
    result.inFacts.addAll_brywnq$(parsePartsFromIdentifier(parts.get_za3lpa$(0), parent, functionConfiguration));
    result.outFacts.addAll_brywnq$(parsePartsFromIdentifier(parts.size > 1 ? parts.get_za3lpa$(1) : parts.get_za3lpa$(0), parent, functionConfiguration));
    return result;
  };
  MainLineAndNode$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MainLineAndNode$Companion_instance = null;
  function MainLineAndNode$Companion_getInstance() {
    if (MainLineAndNode$Companion_instance === null) {
      new MainLineAndNode$Companion();
    }
    return MainLineAndNode$Companion_instance;
  }
  MainLineAndNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MainLineAndNode',
    interfaces: [MainLineNode]
  };
  function MainLineOrNode(startPosition, endPosition, parent, factTransformationChains, inFacts, outFacts, expressionTransformationChains, rules, identifier) {
    MainLineOrNode$Companion_getInstance();
    if (startPosition === void 0)
      startPosition = 0;
    if (endPosition === void 0)
      endPosition = 0;
    if (parent === void 0)
      parent = null;
    if (factTransformationChains === void 0) {
      factTransformationChains = ArrayList_init();
    }
    if (inFacts === void 0) {
      inFacts = ArrayList_init();
    }
    if (outFacts === void 0) {
      outFacts = ArrayList_init();
    }
    if (expressionTransformationChains === void 0) {
      expressionTransformationChains = ArrayList_init();
    }
    if (rules === void 0) {
      rules = ArrayList_init();
    }
    if (identifier === void 0)
      identifier = '';
    this.startPosition_yv40g3$_0 = startPosition;
    this.endPosition_qqvspi$_0 = endPosition;
    this.parent_7ke324$_0 = parent;
    this.factTransformationChains_a8gku7$_0 = factTransformationChains;
    this.inFacts_adsot0$_0 = inFacts;
    this.outFacts_7q2fn1$_0 = outFacts;
    this.expressionTransformationChains_7s2nn1$_0 = expressionTransformationChains;
    this.rules_va3rzr$_0 = rules;
    this.identifier_l2mv31$_0 = identifier;
    this.inIdentifier = '';
    this.outIdentifier = '';
  }
  Object.defineProperty(MainLineOrNode.prototype, 'startPosition', {
    get: function () {
      return this.startPosition_yv40g3$_0;
    }
  });
  Object.defineProperty(MainLineOrNode.prototype, 'endPosition', {
    get: function () {
      return this.endPosition_qqvspi$_0;
    }
  });
  Object.defineProperty(MainLineOrNode.prototype, 'parent', {
    get: function () {
      return this.parent_7ke324$_0;
    },
    set: function (parent) {
      this.parent_7ke324$_0 = parent;
    }
  });
  Object.defineProperty(MainLineOrNode.prototype, 'factTransformationChains', {
    get: function () {
      return this.factTransformationChains_a8gku7$_0;
    }
  });
  Object.defineProperty(MainLineOrNode.prototype, 'inFacts', {
    get: function () {
      return this.inFacts_adsot0$_0;
    }
  });
  Object.defineProperty(MainLineOrNode.prototype, 'outFacts', {
    get: function () {
      return this.outFacts_7q2fn1$_0;
    }
  });
  Object.defineProperty(MainLineOrNode.prototype, 'expressionTransformationChains', {
    get: function () {
      return this.expressionTransformationChains_7s2nn1$_0;
    }
  });
  Object.defineProperty(MainLineOrNode.prototype, 'rules', {
    get: function () {
      return this.rules_va3rzr$_0;
    }
  });
  Object.defineProperty(MainLineOrNode.prototype, 'identifier', {
    get: function () {
      return this.identifier_l2mv31$_0;
    },
    set: function (identifier) {
      this.identifier_l2mv31$_0 = identifier;
    }
  });
  MainLineOrNode.prototype.getLastExpression = function () {
    return last(this.outFacts).getLastExpression();
  };
  MainLineOrNode.prototype.isSolutionForVariables_axkv0l$$default = function (targetVariables, left, allowedVariables) {
    var tmp$;
    tmp$ = this.outFacts.iterator();
    while (tmp$.hasNext()) {
      var fact = tmp$.next();
      var error = fact.isSolutionForVariables_axkv0l$(targetVariables, void 0, allowedVariables);
      if (error != null)
        return error;
    }
    return null;
  };
  MainLineOrNode.prototype.computeIfNumeric_cazeuv$ = function (substitutionInstance, baseOperationsDefinitions, checkOutMainLineNodePart) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var actualFacts = checkOutMainLineNodePart ? getOutFactsFromMainLineNode(this) : getInFactsFromMainLineNode(this);
    var isNull = false;
    tmp$ = actualFacts.iterator();
    while (tmp$.hasNext()) {
      var fact = tmp$.next();
      switch (fact.type().name) {
        case 'EXPRESSION_COMPARISON':
          tmp$_2 = (Kotlin.isType(tmp$_0 = fact, ExpressionComparison) ? tmp$_0 : throwCCE()).computeIfNumeric_gb8qxc$(substitutionInstance, baseOperationsDefinitions);
          break;
        case 'MAIN_LINE_AND_NODE':
        case 'MAIN_LINE_OR_NODE':
          tmp$_2 = (Kotlin.isType(tmp$_1 = fact, MainLineNode) ? tmp$_1 : throwCCE()).computeIfNumeric_cazeuv$(substitutionInstance, baseOperationsDefinitions, checkOutMainLineNodePart);
          break;
        default:tmp$_2 = null;
          break;
      }
      var isCorrect = tmp$_2;
      if (isCorrect == null) {
        isNull = true;
      }
       else if (isCorrect) {
        return true;
      }
    }
    return isNull ? null : false;
  };
  MainLineOrNode.prototype.copyNode = function () {
    return new MainLineOrNode(this.startPosition, this.endPosition, this.parent);
  };
  MainLineOrNode.prototype.clone = function () {
    var tmp$ = this.startPosition;
    var tmp$_0 = this.endPosition;
    var tmp$_1 = this.parent;
    var tmp$_2 = void 0;
    var $receiver = this.inFacts;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_3;
    tmp$_3 = $receiver.iterator();
    while (tmp$_3.hasNext()) {
      var item = tmp$_3.next();
      destination.add_11rb$(item.clone());
    }
    var tmp$_4 = toMutableList(destination);
    var $receiver_0 = this.outFacts;
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_5;
    tmp$_5 = $receiver_0.iterator();
    while (tmp$_5.hasNext()) {
      var item_0 = tmp$_5.next();
      destination_0.add_11rb$(item_0.clone());
    }
    return new MainLineOrNode(tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_4, toMutableList(destination_0));
  };
  MainLineOrNode.prototype.cloneWithNormalization_1g1bdl$ = function (nameArgsMap, sorted) {
    var tmp$ = this.startPosition;
    var tmp$_0 = this.endPosition;
    var tmp$_1 = this.parent;
    var tmp$_2 = void 0;
    var $receiver = this.inFacts;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_3;
    tmp$_3 = $receiver.iterator();
    while (tmp$_3.hasNext()) {
      var item = tmp$_3.next();
      destination.add_11rb$(item.cloneWithNormalization_1g1bdl$(nameArgsMap, sorted));
    }
    var tmp$_4 = toMutableList(destination);
    var $receiver_0 = this.outFacts;
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_5;
    tmp$_5 = $receiver_0.iterator();
    while (tmp$_5.hasNext()) {
      var item_0 = tmp$_5.next();
      destination_0.add_11rb$(item_0.cloneWithNormalization_1g1bdl$(nameArgsMap, sorted));
    }
    return new MainLineOrNode(tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_4, toMutableList(destination_0));
  };
  MainLineOrNode.prototype.normalizeSubTree_f8z7ch$ = function (currentDeep, nameArgsMap, sorted) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.normalizeSubTree_f8z7ch$(currentDeep, nameArgsMap, sorted);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.normalizeSubTree_f8z7ch$(currentDeep, nameArgsMap, sorted);
    }
  };
  MainLineOrNode.prototype.variableReplacement_y0zsll$ = function (replacements) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.variableReplacement_y0zsll$(replacements);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.variableReplacement_y0zsll$(replacements);
    }
    var tmp$_1;
    tmp$_1 = this.rules.iterator();
    while (tmp$_1.hasNext()) {
      var element_1 = tmp$_1.next();
      element_1.variableReplacement_y0zsll$(replacements);
    }
    var tmp$_2;
    tmp$_2 = this.expressionTransformationChains.iterator();
    while (tmp$_2.hasNext()) {
      var element_2 = tmp$_2.next();
      element_2.variableReplacement_y0zsll$(replacements);
    }
    var tmp$_3;
    tmp$_3 = this.factTransformationChains.iterator();
    while (tmp$_3.hasNext()) {
      var element_3 = tmp$_3.next();
      element_3.variableReplacement_y0zsll$(replacements);
    }
  };
  MainLineOrNode.prototype.applyAllExpressionSubstitutions_itxcjl$ = function (expressionSubstitutions) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.applyAllExpressionSubstitutions_itxcjl$(expressionSubstitutions);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.applyAllExpressionSubstitutions_itxcjl$(expressionSubstitutions);
    }
  };
  MainLineOrNode.prototype.computeExpressionTrees_r1dnaj$ = function (baseOperationsDefinitions) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.computeExpressionTrees_r1dnaj$(baseOperationsDefinitions);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.computeExpressionTrees_r1dnaj$(baseOperationsDefinitions);
    }
  };
  MainLineOrNode.prototype.replaceNotDefinedFunctionsOnVariables_ioe5p3$ = function (functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet) {
    var tmp$;
    tmp$ = this.inFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.replaceNotDefinedFunctionsOnVariables_ioe5p3$(functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet);
    }
    var tmp$_0;
    tmp$_0 = this.outFacts.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      element_0.replaceNotDefinedFunctionsOnVariables_ioe5p3$(functionIdentifierToVariableMap, definedFunctionNameNumberOfArgsSet);
    }
  };
  MainLineOrNode.prototype.check_i0qcxd$$default = function (factComparator, onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, skipTrivialCheck) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  MainLineOrNode.prototype.getActualChain = function () {
    return last(this.factTransformationChains).chain;
  };
  MainLineOrNode.prototype.addStartNewFactChain = function () {
    this.factTransformationChains.add_11rb$(new MainChain());
  };
  MainLineOrNode.prototype.addExpressionComparisonFact_wirlwz$ = function (fact) {
    if (this.factTransformationChains.isEmpty()) {
      this.addStartNewFactChain();
    }
    this.getActualChain().add_11rb$(fact);
  };
  MainLineOrNode.prototype.type = function () {
    return ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance();
  };
  function MainLineOrNode$toString$lambda(it) {
    return it.toString();
  }
  function MainLineOrNode$toString$lambda_0(it) {
    return it.toString();
  }
  function MainLineOrNode$toString$lambda_1(it) {
    return it.toString();
  }
  function MainLineOrNode$toString$lambda_2(it) {
    return it.toString();
  }
  function MainLineOrNode$toString$lambda_3(it) {
    return it.toString();
  }
  MainLineOrNode.prototype.toString = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (!this.rules.isEmpty()) {
      tmp$ = 'rules:(' + joinToString(this.rules, ';', void 0, void 0, void 0, void 0, MainLineOrNode$toString$lambda) + ');';
    }
     else {
      tmp$ = '';
    }
    if (!this.expressionTransformationChains.isEmpty()) {
      tmp$_0 = 'transformation chains:(' + joinToString(this.expressionTransformationChains, ';', void 0, void 0, void 0, void 0, MainLineOrNode$toString$lambda_0) + ');';
    }
     else {
      tmp$_0 = '';
    }
    if (!this.factTransformationChains.isEmpty()) {
      tmp$_1 = 'facts chains:(' + joinToString(this.factTransformationChains, ';', void 0, void 0, void 0, void 0, MainLineOrNode$toString$lambda_1) + ')';
    }
     else {
      tmp$_1 = '';
    }
    if (!this.inFacts.isEmpty()) {
      tmp$_2 = 'in:(' + joinToString(this.inFacts, ';', void 0, void 0, void 0, void 0, MainLineOrNode$toString$lambda_2) + ')';
    }
     else {
      tmp$_2 = '';
    }
    if (!this.outFacts.isEmpty()) {
      tmp$_3 = 'out:(' + joinToString(this.outFacts, ';', void 0, void 0, void 0, void 0, MainLineOrNode$toString$lambda_3) + ')';
    }
     else {
      tmp$_3 = '';
    }
    return 'OR_NODE(' + tmp$ + tmp$_0 + tmp$_1 + tmp$_2 + tmp$_3 + ')';
  };
  function MainLineOrNode$computeIdentifier$lambda(closure$recomputeIfComputed) {
    return function (it) {
      return it.computeIdentifier_6taknv$(closure$recomputeIfComputed);
    };
  }
  function MainLineOrNode$computeIdentifier$lambda_0(closure$recomputeIfComputed) {
    return function (it) {
      return it.computeIdentifier_6taknv$(closure$recomputeIfComputed);
    };
  }
  MainLineOrNode.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.identifier) || recomputeIfComputed) {
      this.identifier = 'OR_NODE(' + joinToString(this.inFacts, ';mn;', void 0, void 0, void 0, void 0, MainLineOrNode$computeIdentifier$lambda(recomputeIfComputed)) + ((!this.outFacts.isEmpty() ? ';-->>;(' + joinToString(this.outFacts, ';mn;', void 0, void 0, void 0, void 0, MainLineOrNode$computeIdentifier$lambda_0(recomputeIfComputed)) : '') + ')');
    }
    return this.identifier;
  };
  function MainLineOrNode$computeInIdentifier$lambda(closure$recomputeIfComputed) {
    return function (it) {
      return it.computeInIdentifier_6taknv$(closure$recomputeIfComputed);
    };
  }
  MainLineOrNode.prototype.computeInIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.inIdentifier) || recomputeIfComputed) {
      this.inIdentifier = 'OR_NODE(' + joinToString(this.inFacts, ';mn;', void 0, void 0, void 0, void 0, MainLineOrNode$computeInIdentifier$lambda(recomputeIfComputed)) + ')';
    }
    return this.inIdentifier;
  };
  function MainLineOrNode$computeOutIdentifier$lambda(closure$recomputeIfComputed) {
    return function (it) {
      return it.computeOutIdentifier_6taknv$(closure$recomputeIfComputed);
    };
  }
  MainLineOrNode.prototype.computeOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.outIdentifier) || recomputeIfComputed) {
      this.outIdentifier = 'OR_NODE(' + joinToString(this.outFacts, ';mn;', void 0, void 0, void 0, void 0, MainLineOrNode$computeOutIdentifier$lambda(recomputeIfComputed)) + ')';
    }
    return this.outIdentifier;
  };
  function MainLineOrNode$computeSortedOutIdentifier$lambda(it) {
    return it;
  }
  MainLineOrNode.prototype.computeSortedOutIdentifier_6taknv$ = function (recomputeIfComputed) {
    var $receiver = this.outFacts;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item.computeSortedOutIdentifier_6taknv$(recomputeIfComputed));
    }
    var childrenFactsIdentifiers = destination;
    return 'OR_NODE(' + joinToString(sorted(childrenFactsIdentifiers), ';mn;', void 0, void 0, void 0, void 0, MainLineOrNode$computeSortedOutIdentifier$lambda) + ')';
  };
  function MainLineOrNode$Companion() {
    MainLineOrNode$Companion_instance = this;
  }
  MainLineOrNode$Companion.prototype.parseFromFactIdentifier_r5gof1$ = function (string, parent, functionConfiguration) {
    if (parent === void 0)
      parent = null;
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    var endIndex = string.length - 1 | 0;
    var mainPart = string.substring(8, endIndex);
    var $receiver = splitBySubstringOnTopLevel(listOf(new SplittingString(';-->>;')), mainPart);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var startIndex = item.startPosition;
      var endIndex_0 = item.endPosition;
      tmp$_0.call(destination, mainPart.substring(startIndex, endIndex_0));
    }
    var parts = destination;
    var result = new MainLineOrNode(void 0, void 0, parent);
    result.inFacts.addAll_brywnq$(parsePartsFromIdentifier(parts.get_za3lpa$(0), parent, functionConfiguration));
    result.outFacts.addAll_brywnq$(parsePartsFromIdentifier(parts.size > 1 ? parts.get_za3lpa$(1) : parts.get_za3lpa$(0), parent, functionConfiguration));
    return result;
  };
  MainLineOrNode$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MainLineOrNode$Companion_instance = null;
  function MainLineOrNode$Companion_getInstance() {
    if (MainLineOrNode$Companion_instance === null) {
      new MainLineOrNode$Companion();
    }
    return MainLineOrNode$Companion_instance;
  }
  MainLineOrNode.prototype.isFactorizationForVariables_s6qnlc$ = function (minNumberOfMultipliers, targetVariables, targetExpression, factComparator) {
    if (!this.outFacts.isEmpty()) {
      return last(this.outFacts).isFactorizationForVariables_s6qnlc$(minNumberOfMultipliers, targetVariables, targetExpression, factComparator);
    }
    return new GeneralError('No answer');
  };
  MainLineOrNode.prototype.isSolutionWithoutFunctions_o78e5l$ = function (forbidden, targetExpression, factComparator) {
    if (!this.outFacts.isEmpty()) {
      return last(this.outFacts).isSolutionWithoutFunctions_o78e5l$(forbidden, targetExpression, factComparator);
    }
    return new GeneralError('No answer');
  };
  MainLineOrNode.prototype.hasNoFractions_qclyqr$ = function (maxNumberOfDivisions, targetExpression, factComparator) {
    if (!this.outFacts.isEmpty()) {
      return last(this.outFacts).hasNoFractions_qclyqr$(maxNumberOfDivisions, targetExpression, factComparator);
    }
    return new GeneralError('No answer');
  };
  MainLineOrNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MainLineOrNode',
    interfaces: [MainLineNode]
  };
  function getInFactsFromMainLineNode(factNode) {
    var tmp$, tmp$_0;
    return factNode.type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() ? (Kotlin.isType(tmp$ = factNode, MainLineAndNode) ? tmp$ : throwCCE()).inFacts : (Kotlin.isType(tmp$_0 = factNode, MainLineOrNode) ? tmp$_0 : throwCCE()).inFacts;
  }
  function getOutFactsFromMainLineNode(factNode) {
    var tmp$, tmp$_0;
    return factNode.type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() ? (Kotlin.isType(tmp$ = factNode, MainLineAndNode) ? tmp$ : throwCCE()).outFacts : (Kotlin.isType(tmp$_0 = factNode, MainLineOrNode) ? tmp$_0 : throwCCE()).outFacts;
  }
  function parsePartsFromIdentifier(string, parent, functionConfiguration) {
    if (parent === void 0)
      parent = null;
    var tmp$, tmp$_0;
    var $receiver = splitBySubstringOnTopLevel(listOf(new SplittingString(';mn;')), string);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_1;
    tmp$_1 = $receiver.iterator();
    while (tmp$_1.hasNext()) {
      var item = tmp$_1.next();
      var tmp$_2 = destination.add_11rb$;
      var startIndex = item.startPosition;
      var endIndex = item.endPosition;
      tmp$_2.call(destination, string.substring(startIndex, endIndex));
    }
    var parts = destination;
    var result = ArrayList_init();
    tmp$ = parts.iterator();
    while (tmp$.hasNext()) {
      var part = tmp$.next();
      tmp$_0 = parseFromFactIdentifier(part, parent, functionConfiguration);
      if (tmp$_0 == null) {
        continue;
      }
      result.add_11rb$(tmp$_0);
    }
    return result;
  }
  function parseFromFactIdentifier(string, parent, functionConfiguration) {
    if (parent === void 0)
      parent = null;
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    if (startsWith(string, 'AND_NODE(')) {
      return MainLineAndNode$Companion_getInstance().parseFromFactIdentifier_r5gof1$(string, parent, functionConfiguration);
    }
     else if (startsWith(string, 'OR_NODE(')) {
      return MainLineOrNode$Companion_getInstance().parseFromFactIdentifier_r5gof1$(string, parent, functionConfiguration);
    }
     else if (contains_1(string, ';ec;')) {
      return ExpressionComparison$Companion_getInstance().parseFromFactIdentifier_r5gof1$(string, parent, functionConfiguration);
    }
     else {
      return Expression$Companion_getInstance().parseFromFactIdentifier_r5gof1$(string, parent, functionConfiguration);
    }
  }
  function normalizeFactsForComparison(left, right) {
    var tmp$;
    if (left.type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance())
      tmp$ = new Pair(left, right);
    else if (right.type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance())
      tmp$ = new Pair(right, left);
    else
      return new Pair(left, right);
    var ordered = tmp$;
    if (ordered.second.type() !== ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance()) {
      var tmp$_0 = ordered.first;
      var $receiver = new MainLineAndNode();
      $receiver.inFacts.add_11rb$(ordered.second);
      $receiver.outFacts.add_11rb$(ordered.second);
      return new Pair(tmp$_0, $receiver);
    }
     else
      return ordered;
  }
  function factWrapperForCheckingTransformations(fact, checkOutMainLineNodePart) {
    var tmp$, tmp$_0;
    if (fact.type() !== ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() && fact.type() !== ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance()) {
      tmp$ = mutableListOf([fact]);
    }
     else if (checkOutMainLineNodePart) {
      tmp$ = getOutFactsFromMainLineNode(fact);
    }
     else {
      tmp$ = getInFactsFromMainLineNode(fact);
    }
    var actualFacts = tmp$;
    if (fact.type() !== ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance()) {
      tmp$_0 = new MainLineAndNode(void 0, void 0, void 0, void 0, actualFacts, actualFacts);
    }
     else {
      tmp$_0 = new MainLineOrNode(void 0, void 0, void 0, void 0, actualFacts, actualFacts);
    }
    var wrapper = tmp$_0;
    return new MainLineAndNode(void 0, void 0, void 0, void 0, mutableListOf([wrapper]), mutableListOf([wrapper]));
  }
  function checkTransformationChain($receiver, factComparator, onExpressionLevel, additionalFacts, skipTrivialCheck) {
    if (skipTrivialCheck === void 0)
      skipTrivialCheck = false;
    var compiledConfiguration = factComparator.compiledConfiguration;
    $receiver.variableReplacement_y0zsll$(compiledConfiguration.compiledImmediateVariableReplacements);
    var tmp$;
    tmp$ = additionalFacts.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.variableReplacement_y0zsll$(compiledConfiguration.compiledImmediateVariableReplacements);
    }
    return $receiver.check_i0qcxd$(factComparator, onExpressionLevel, compiledConfiguration.compiledFactTreeTransformationRules, compiledConfiguration.compiledExpressionTreeTransformationRules, additionalFacts, skipTrivialCheck);
  }
  function FactConstructorViewer(compiledConfiguration, expressionNodeConstructor, openBracket, closeBracket, mainLineNodePartSuffix) {
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration();
    if (expressionNodeConstructor === void 0)
      expressionNodeConstructor = new ExpressionNodeConstructor(compiledConfiguration.functionConfiguration, compiledConfiguration.compiledImmediateVariableReplacements);
    if (openBracket === void 0)
      openBracket = 123;
    if (closeBracket === void 0)
      closeBracket = 125;
    if (mainLineNodePartSuffix === void 0)
      mainLineNodePartSuffix = ', ';
    this.compiledConfiguration = compiledConfiguration;
    this.expressionNodeConstructor = expressionNodeConstructor;
    this.openBracket = toBoxedChar(openBracket);
    this.closeBracket = toBoxedChar(closeBracket);
    this.mainLineNodePartSuffix = mainLineNodePartSuffix;
  }
  function FactConstructorViewer$constructFactUserView$lambda(this$FactConstructorViewer) {
    return function (it) {
      return this$FactConstructorViewer.constructFactUserView_wirlwz$(it);
    };
  }
  function FactConstructorViewer$constructFactUserView$lambda_0(this$FactConstructorViewer) {
    return function (it) {
      return this$FactConstructorViewer.constructFactUserView_wirlwz$(it);
    };
  }
  function FactConstructorViewer$constructFactUserView$lambda_1(this$FactConstructorViewer) {
    return function (it) {
      return this$FactConstructorViewer.constructFactUserView_wirlwz$(it);
    };
  }
  function FactConstructorViewer$constructFactUserView$lambda$lambda(this$FactConstructorViewer) {
    return function (it) {
      return '[' + this$FactConstructorViewer.constructFactUserView_wirlwz$(it) + ']';
    };
  }
  function FactConstructorViewer$constructFactUserView$lambda_2(this$FactConstructorViewer) {
    return function (it) {
      return joinToString(it.chain, '', void 0, void 0, void 0, void 0, FactConstructorViewer$constructFactUserView$lambda$lambda(this$FactConstructorViewer));
    };
  }
  function FactConstructorViewer$constructFactUserView$lambda$lambda_0(this$FactConstructorViewer) {
    return function (it) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
      if (it.type() === ComparableTransformationPartType$EXPRESSION_getInstance()) {
        tmp$_0 = Kotlin.isType(tmp$ = it, Expression) ? tmp$ : throwCCE();
        return this$FactConstructorViewer.constructFactUserView_wirlwz$(tmp$_0);
      }
       else if (it.type() === ComparableTransformationPartType$RULE_getInstance()) {
        tmp$_2 = Kotlin.isType(tmp$_1 = it, Rule) ? tmp$_1 : throwCCE();
        return this$FactConstructorViewer.constructFactUserView_wirlwz$(tmp$_2);
      }
       else {
        tmp$_4 = Kotlin.isType(tmp$_3 = it, RulePointer) ? tmp$_3 : throwCCE();
        return this$FactConstructorViewer.constructFactUserView_wirlwz$(tmp$_4);
      }
    };
  }
  function FactConstructorViewer$constructFactUserView$lambda_3(this$FactConstructorViewer) {
    return function (it) {
      return joinToString(it.chain, it.comparisonType.string, void 0, void 0, void 0, void 0, FactConstructorViewer$constructFactUserView$lambda$lambda_0(this$FactConstructorViewer));
    };
  }
  FactConstructorViewer.prototype.constructFactUserView_wirlwz$ = function (fact) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var result = StringBuilder_init_0();
    switch (fact.type().name) {
      case 'MAIN_LINE_AND_NODE':
      case 'MAIN_LINE_OR_NODE':
        result.append_gw00v9$(split(fact.type().toString(), ['_']).get_za3lpa$(2) + '{');
        Kotlin.isType(tmp$ = fact, MainLineNode) ? tmp$ : throwCCE();
        var tmp$_6 = !fact.inFacts.isEmpty();
        if (tmp$_6) {
          tmp$_6 = !fact.outFacts.isEmpty();
        }

        if (tmp$_6) {
          var inFactsIdentifier = joinToString(fact.inFacts, '; ', void 0, void 0, void 0, void 0, FactConstructorViewer$constructFactUserView$lambda(this));
          var outFactsIdentifier = joinToString(fact.outFacts, '; ', void 0, void 0, void 0, void 0, FactConstructorViewer$constructFactUserView$lambda_0(this));
          if (equals(inFactsIdentifier, outFactsIdentifier)) {
            result.append_gw00v9$(inFactsIdentifier);
          }
           else {
            result.append_gw00v9$(inFactsIdentifier);
            result.append_gw00v9$(' --> ');
            result.append_gw00v9$(outFactsIdentifier);
          }
          result.append_gw00v9$(this.mainLineNodePartSuffix);
        }

        if (!fact.rules.isEmpty()) {
          result.append_gw00v9$('RULES: ');
          result.append_gw00v9$(joinToString(fact.rules, '', void 0, void 0, void 0, void 0, FactConstructorViewer$constructFactUserView$lambda_1(this)));
          result.append_gw00v9$(this.mainLineNodePartSuffix);
        }

        if (!fact.factTransformationChains.isEmpty()) {
          result.append_gw00v9$('FACTS_CHAINS: ');
          result.append_gw00v9$(joinToString(fact.factTransformationChains, '; ', void 0, void 0, void 0, void 0, FactConstructorViewer$constructFactUserView$lambda_2(this)));
          result.append_gw00v9$(this.mainLineNodePartSuffix);
        }

        if (!fact.expressionTransformationChains.isEmpty()) {
          result.append_gw00v9$('EXPRESSION_CHAINS: ');
          result.append_gw00v9$(joinToString(fact.expressionTransformationChains, '; ', void 0, void 0, void 0, void 0, FactConstructorViewer$constructFactUserView$lambda_3(this)));
          result.append_gw00v9$(this.mainLineNodePartSuffix);
        }

        if (endsWith(result, 123)) {
          tmp$_0 = result.toString() + '}';
        }
         else {
          tmp$_0 = dropLast(result, this.mainLineNodePartSuffix.length).toString() + '}';
        }

        return tmp$_0;
      case 'EXPRESSION_COMPARISON':
        result.append_gw00v9$(fact.type().toString() + ': ');
        Kotlin.isType(tmp$_1 = fact, ExpressionComparison) ? tmp$_1 : throwCCE();
        result.append_gw00v9$(this.constructFactUserView_wirlwz$(fact.leftExpression));
        result.append_gw00v9$(' ' + fact.comparisonType.string + ' ');
        result.append_gw00v9$(this.constructFactUserView_wirlwz$(fact.rightExpression));
        break;
      case 'EXPRESSION':
        result.append_gw00v9$((Kotlin.isType(tmp$_2 = fact, Expression) ? tmp$_2 : throwCCE()).data.toString());
        break;
      case 'RULE':
        Kotlin.isType(tmp$_3 = fact, Rule) ? tmp$_3 : throwCCE();
        if (fact.factSubstitution != null || fact.expressionSubstitution != null) {
          if (fact.factSubstitution != null) {
            '[' + this.constructFactUserView_wirlwz$(ensureNotNull(fact.factSubstitution).left) + ' ' + toUserString(ensureNotNull(fact.factSubstitution).direction) + ' ' + this.constructFactUserView_wirlwz$(ensureNotNull(fact.factSubstitution).right) + ', actual ' + ((ensureNotNull(fact.factSubstitution).basedOnTaskContext ? 'only in task context' : 'everywhere') + ']');
          }
           else {
            if (fact.expressionSubstitution != null) {
              tmp$_4 = '[' + ensureNotNull(fact.expressionSubstitution).left + ' -> ' + ensureNotNull(fact.expressionSubstitution).right + ', ' + ('actual in ' + ensureNotNull(fact.expressionSubstitution).comparisonType + ' context') + ((ensureNotNull(fact.expressionSubstitution).basedOnTaskContext ? 'only in task' : 'everywhere') + ']');
            }
             else
              tmp$_4 = '';
            '' + tmp$_4;
          }
        }
         else {
          '[' + fact.name + ':' + this.constructFactUserView_wirlwz$(fact.root) + ']';
        }

        break;
      case 'RULE_POINTER':
        Kotlin.isType(tmp$_5 = fact, RulePointer) ? tmp$_5 : throwCCE();
        '[' + fact.nameLink + ':]';
        break;
      default:throw new NotImplementedError_init('An operation is not implemented: ' + 'unexpected behaviour, should be handled better');
    }
    return result.toString();
  };
  FactConstructorViewer.prototype.data_1v8dcc$ = function ($receiver) {
    return $receiver ? '1' : '0';
  };
  FactConstructorViewer.prototype.booleanFromData_pdl1vz$ = function ($receiver) {
    return !equals($receiver, '0');
  };
  function FactConstructorViewer$constructIdentifierByFact$lambda(this$FactConstructorViewer) {
    return function (it) {
      return this$FactConstructorViewer.constructIdentifierByFact_wirlwz$(it);
    };
  }
  function FactConstructorViewer$constructIdentifierByFact$lambda$lambda(this$FactConstructorViewer) {
    return function (it) {
      return '{' + this$FactConstructorViewer.constructIdentifierByFact_wirlwz$(it) + '}';
    };
  }
  function FactConstructorViewer$constructIdentifierByFact$lambda_0(this$FactConstructorViewer) {
    return function (it) {
      return '{' + joinToString(it.chain, '', void 0, void 0, void 0, void 0, FactConstructorViewer$constructIdentifierByFact$lambda$lambda(this$FactConstructorViewer)) + '}';
    };
  }
  function FactConstructorViewer$constructIdentifierByFact$lambda$lambda_0(this$FactConstructorViewer) {
    return function (it) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
      if (it.type() === ComparableTransformationPartType$EXPRESSION_getInstance()) {
        tmp$_0 = Kotlin.isType(tmp$ = it, Expression) ? tmp$ : throwCCE();
        return '{' + this$FactConstructorViewer.constructIdentifierByFact_wirlwz$(tmp$_0) + '}';
      }
       else if (it.type() === ComparableTransformationPartType$RULE_getInstance()) {
        tmp$_2 = Kotlin.isType(tmp$_1 = it, Rule) ? tmp$_1 : throwCCE();
        return '{' + this$FactConstructorViewer.constructIdentifierByFact_wirlwz$(tmp$_2) + '}';
      }
       else {
        tmp$_4 = Kotlin.isType(tmp$_3 = it, RulePointer) ? tmp$_3 : throwCCE();
        return '{' + this$FactConstructorViewer.constructIdentifierByFact_wirlwz$(tmp$_4) + '}';
      }
    };
  }
  function FactConstructorViewer$constructIdentifierByFact$lambda_1(this$FactConstructorViewer) {
    return function (it) {
      return it.comparisonType.string + '{' + joinToString(it.chain, '', void 0, void 0, void 0, void 0, FactConstructorViewer$constructIdentifierByFact$lambda$lambda_0(this$FactConstructorViewer)) + '}';
    };
  }
  function FactConstructorViewer$constructIdentifierByFact$lambda_2(this$FactConstructorViewer) {
    return function (it) {
      return '{' + this$FactConstructorViewer.constructIdentifierByFact_wirlwz$(it) + '}';
    };
  }
  function FactConstructorViewer$constructIdentifierByFact$lambda_3(this$FactConstructorViewer) {
    return function (it) {
      return '{' + this$FactConstructorViewer.constructIdentifierByFact_wirlwz$(it) + '}';
    };
  }
  FactConstructorViewer.prototype.constructIdentifierByFact_wirlwz$ = function (fact) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    var result = StringBuilder_init_0();
    switch (fact.type().name) {
      case 'MAIN_LINE_AND_NODE':
      case 'MAIN_LINE_OR_NODE':
        result.append_gw00v9$(fact.type().toString() + '{');
        Kotlin.isType(tmp$ = fact, MainLineNode) ? tmp$ : throwCCE();
        result.append_gw00v9$('RULES{');
        result.append_gw00v9$(joinToString(fact.rules, '', void 0, void 0, void 0, void 0, FactConstructorViewer$constructIdentifierByFact$lambda(this)));
        result.append_gw00v9$('}FACT_TRANSFORMATION_CHAINS{');
        result.append_gw00v9$(joinToString(fact.factTransformationChains, '', void 0, void 0, void 0, void 0, FactConstructorViewer$constructIdentifierByFact$lambda_0(this)));
        result.append_gw00v9$('}EXPRESSION_TRANSFORMATION_CHAINS{');
        result.append_gw00v9$(joinToString(fact.expressionTransformationChains, '', void 0, void 0, void 0, void 0, FactConstructorViewer$constructIdentifierByFact$lambda_1(this)));
        result.append_gw00v9$('}IN_FACTS{');
        result.append_gw00v9$(joinToString(fact.inFacts, '', void 0, void 0, void 0, void 0, FactConstructorViewer$constructIdentifierByFact$lambda_2(this)));
        result.append_gw00v9$('}OUT_FACTS{');
        result.append_gw00v9$(joinToString(fact.outFacts, '', void 0, void 0, void 0, void 0, FactConstructorViewer$constructIdentifierByFact$lambda_3(this)));
        result.append_s8itvh$(125);
        result.append_s8itvh$(125);
        break;
      case 'EXPRESSION_COMPARISON':
        result.append_gw00v9$(fact.type().toString());
        Kotlin.isType(tmp$_0 = fact, ExpressionComparison) ? tmp$_0 : throwCCE();
        result.append_gw00v9$(String.fromCharCode(unboxChar(this.openBracket)) + this.constructIdentifierByFact_wirlwz$(fact.leftExpression) + String.fromCharCode(unboxChar(this.closeBracket)));
        result.append_gw00v9$(String.fromCharCode(unboxChar(this.openBracket)) + fact.comparisonType.string + String.fromCharCode(unboxChar(this.closeBracket)));
        result.append_gw00v9$(String.fromCharCode(unboxChar(this.openBracket)) + this.constructIdentifierByFact_wirlwz$(fact.rightExpression) + String.fromCharCode(unboxChar(this.closeBracket)));
        break;
      case 'EXPRESSION':
        result.append_gw00v9$((Kotlin.isType(tmp$_1 = fact, Expression) ? tmp$_1 : throwCCE()).data.toString());
        break;
      case 'RULE':
        Kotlin.isType(tmp$_2 = fact, Rule) ? tmp$_2 : throwCCE();
        tmp$_4 = '{' + fact.name + '{' + this.constructIdentifierByFact_wirlwz$(fact.root) + '}';
        if (fact.expressionSubstitution != null) {
          var subst = ensureNotNull(fact.expressionSubstitution);
          tmp$_3 = '{' + subst.left + '}{' + subst.right + '}{' + subst.comparisonType.string + '}{' + this.data_1v8dcc$(subst.basedOnTaskContext) + '}{' + subst.weight + '}';
        }
         else
          tmp$_3 = '';
        if (fact.factSubstitution != null) {
          var subst_0 = ensureNotNull(fact.factSubstitution);
          tmp$_5 = '{' + this.constructIdentifierByFact_wirlwz$(subst_0.left) + '}{' + this.constructIdentifierByFact_wirlwz$(subst_0.right) + '}{' + subst_0.direction + '}{' + this.data_1v8dcc$(subst_0.basedOnTaskContext) + '}{' + subst_0.weight + '}';
        }
         else
          tmp$_5 = '';
        result.append_gw00v9$(tmp$_4 + ('{EXPRESSION_SUBSTITUTION' + tmp$_3 + '}') + ('{FACT_SUBSTITUTION' + tmp$_5 + '}') + '}');
        break;
      case 'RULE_POINTER':
        Kotlin.isType(tmp$_6 = fact, RulePointer) ? tmp$_6 : throwCCE();
        '{' + fact.nameLink + ':}';
        break;
      default:throw new NotImplementedError_init('An operation is not implemented: ' + 'unexpected behaviour, should be handled better');
    }
    return result.toString();
  };
  FactConstructorViewer.prototype.splitStringByBracketsOnTopLevel_0 = function (identifier, startPosition) {
    if (startPosition === void 0)
      startPosition = 0;
    return splitStringByBracketsOnTopLevel(identifier, unboxChar(this.openBracket), unboxChar(this.closeBracket), startPosition);
  };
  FactConstructorViewer.prototype.constructFactByIdentifier_5jrdui$ = function (identifier, parent) {
    if (parent === void 0)
      parent = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21;
    if (contains_0(identifier, 123)) {
      var identifierData = this.splitStringByBracketsOnTopLevel_0(identifier);
      var factType = identifierData.name;
      if (equals(factType, ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance().toString()) || equals(factType, ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance().toString())) {
        if (equals(factType, ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance().toString())) {
          tmp$ = new MainLineAndNode(0, 0, parent, void 0, void 0, void 0, void 0, void 0, identifier);
        }
         else {
          tmp$ = new MainLineOrNode(0, 0, parent, void 0, void 0, void 0, void 0, void 0, identifier);
        }
        var newFact = tmp$;
        var i = 0;
        var mainNodeData = first(identifierData.list);
        while (i < mainNodeData.length) {
          var mainNodePartData = this.splitStringByBracketsOnTopLevel_0(mainNodeData, i);
          var mainLineNodePartName = mainNodePartData.name;
          var mainLineNodePartIdentifier = first(mainNodePartData.list);
          i = mainNodePartData.endPosition;
          var tmp$_22;
          switch (trim(Kotlin.isCharSequence(tmp$_22 = mainLineNodePartName) ? tmp$_22 : throwCCE()).toString()) {
            case 'FACT_TRANSFORMATION_CHAINS':
              var chains = this.splitStringByBracketsOnTopLevel_0(mainLineNodePartIdentifier);
              tmp$_0 = chains.list.iterator();
              while (tmp$_0.hasNext()) {
                var chain = tmp$_0.next();
                newFact.factTransformationChains.add_11rb$(new MainChain());
                var factIdentifiers = this.splitStringByBracketsOnTopLevel_0(chain);
                tmp$_1 = factIdentifiers.list.iterator();
                while (tmp$_1.hasNext()) {
                  var factIdentifier = tmp$_1.next();
                  last(newFact.factTransformationChains).chain.add_11rb$(this.constructFactByIdentifier_5jrdui$(factIdentifier, newFact));
                }
              }

              break;
            case 'EXPRESSION_TRANSFORMATION_CHAINS':
              var chains_0 = this.splitStringByBracketsOnTopLevel_0(mainLineNodePartIdentifier);
              tmp$_2 = chains_0.list.iterator();
              while (tmp$_2.hasNext()) {
                var chain_0 = tmp$_2.next();
                var factIdentifiers_0 = this.splitStringByBracketsOnTopLevel_0(chain_0);
                newFact.expressionTransformationChains.add_11rb$(new ExpressionChain(void 0, void 0, valueOfComparisonType(factIdentifiers_0.name)));
                tmp$_3 = factIdentifiers_0.list.iterator();
                while (tmp$_3.hasNext()) {
                  var factIdentifier_0 = tmp$_3.next();
                  last(newFact.expressionTransformationChains).chain.add_11rb$(this.constructFactByIdentifier_5jrdui$(factIdentifier_0, newFact));
                }
              }

              break;
            case 'RULES':
              var rules = this.splitStringByBracketsOnTopLevel_0(mainLineNodePartIdentifier);
              tmp$_4 = rules.list.iterator();
              while (tmp$_4.hasNext()) {
                var rule = tmp$_4.next();
                var ruleIdentifier = this.splitStringByBracketsOnTopLevel_0(rule);
                var expressionSubstitutionData = this.splitStringByBracketsOnTopLevel_0(ruleIdentifier.list.get_za3lpa$(1));
                if (expressionSubstitutionData.list.isEmpty())
                  tmp$_9 = null;
                else {
                  tmp$_5 = this.expressionNodeConstructor.construct_61zpoe$(expressionSubstitutionData.list.get_za3lpa$(0));
                  tmp$_6 = this.expressionNodeConstructor.construct_61zpoe$(expressionSubstitutionData.list.get_za3lpa$(1));
                  tmp$_7 = valueOfComparisonType(expressionSubstitutionData.list.get_za3lpa$(2));
                  tmp$_8 = this.booleanFromData_pdl1vz$(expressionSubstitutionData.list.get_za3lpa$(3));
                  tmp$_9 = new ExpressionSubstitution(tmp$_5, tmp$_6, toDouble(expressionSubstitutionData.list.get_za3lpa$(4)), tmp$_8, void 0, void 0, void 0, tmp$_7);
                }
                var expressionSubstitution = tmp$_9;
                var factSubstitutionData = this.splitStringByBracketsOnTopLevel_0(ruleIdentifier.list.get_za3lpa$(2));
                if (factSubstitutionData.list.isEmpty())
                  tmp$_14 = null;
                else {
                  tmp$_10 = this.constructFactByIdentifier_5jrdui$(factSubstitutionData.list.get_za3lpa$(0));
                  tmp$_11 = this.constructFactByIdentifier_5jrdui$(factSubstitutionData.list.get_za3lpa$(1));
                  tmp$_12 = SubstitutionDirection$valueOf(factSubstitutionData.list.get_za3lpa$(2));
                  tmp$_13 = this.booleanFromData_pdl1vz$(factSubstitutionData.list.get_za3lpa$(3));
                  tmp$_14 = new FactSubstitution(tmp$_10, tmp$_11, toDouble(factSubstitutionData.list.get_za3lpa$(4)), tmp$_13, tmp$_12, void 0, this.compiledConfiguration.factComparator);
                }
                var factSubstitution = tmp$_14;
                tmp$_17 = newFact.rules;
                tmp$_15 = ruleIdentifier.name;
                tmp$_17.add_11rb$(new Rule(0, 0, newFact, Kotlin.isType(tmp$_16 = this.constructFactByIdentifier_5jrdui$(ruleIdentifier.list.get_za3lpa$(0), newFact), MainLineAndNode) ? tmp$_16 : throwCCE(), tmp$_15, void 0, factSubstitution, expressionSubstitution));
              }

              break;
            case 'IN_FACTS':
              var factIdentifiers_1 = this.splitStringByBracketsOnTopLevel_0(mainLineNodePartIdentifier);
              tmp$_18 = factIdentifiers_1.list.iterator();
              while (tmp$_18.hasNext()) {
                var factIdentifier_1 = tmp$_18.next();
                newFact.inFacts.add_11rb$(this.constructFactByIdentifier_5jrdui$(factIdentifier_1, newFact));
              }

              break;
            case 'OUT_FACTS':
              var factIdentifiers_2 = this.splitStringByBracketsOnTopLevel_0(mainLineNodePartIdentifier);
              tmp$_19 = factIdentifiers_2.list.iterator();
              while (tmp$_19.hasNext()) {
                var factIdentifier_2 = tmp$_19.next();
                newFact.outFacts.add_11rb$(this.constructFactByIdentifier_5jrdui$(factIdentifier_2, newFact));
              }

              break;
          }
        }
        return newFact;
      }
       else if (equals(factType, ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance().toString())) {
        var newFact_0 = new ExpressionComparison(void 0, void 0, emptyExpression(), emptyExpression(), valueOfComparisonType(identifierData.list.get_za3lpa$(1)), parent);
        newFact_0.leftExpression = Kotlin.isType(tmp$_20 = this.constructFactByIdentifier_5jrdui$(identifierData.list.get_za3lpa$(0), parent), Expression) ? tmp$_20 : throwCCE();
        newFact_0.rightExpression = Kotlin.isType(tmp$_21 = this.constructFactByIdentifier_5jrdui$(identifierData.list.get_za3lpa$(2), parent), Expression) ? tmp$_21 : throwCCE();
        return newFact_0;
      }
       else {
        throw new NotImplementedError_init('An operation is not implemented: ' + 'unexpected behaviour, should be handled better');
      }
    }
     else {
      return new Expression(0, 0, this.expressionNodeConstructor.construct_61zpoe$(identifier), identifier, parent);
    }
  };
  FactConstructorViewer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FactConstructorViewer',
    interfaces: []
  };
  function ExpressionComparisonExpanse(compiledConfiguration) {
    this.compiledConfiguration = compiledConfiguration;
  }
  ExpressionComparisonExpanse.prototype.expanseGenerator_lmvlsj$ = function (expressionComparison, result, onlyExpressPairs) {
    this.expanseGeneratorRecursive_0(expressionComparison.leftExpression.data, expressionComparison.rightExpression.data, result, onlyExpressPairs, expressionComparison.comparisonType);
    this.expanseGeneratorRecursive_0(expressionComparison.rightExpression.data, expressionComparison.leftExpression.data, result, onlyExpressPairs, expressionComparison.comparisonType);
  };
  ExpressionComparisonExpanse.prototype.expanseGeneratorRecursive_0 = function (l, r, result, onlyExpressPairs, comparisonType) {
    var tmp$, tmp$_0;
    if (equals(l.value, '') && l.children.size === 1) {
      return this.expanseGeneratorRecursive_0(first(l.children), r, result, onlyExpressPairs, comparisonType);
    }
     else if (equals(r.value, '') && r.children.size === 1) {
      return this.expanseGeneratorRecursive_0(l, first(r.children), result, onlyExpressPairs, comparisonType);
    }
    if (l.nodeType === NodeType$VARIABLE_getInstance()) {
      if (!onlyExpressPairs || (!l.isNumberValue() && !r.containsVariables_ywdfdh$(setOf(l.value)))) {
        result.add_11rb$(new ExpressionComparison(void 0, void 0, new Expression(void 0, void 0, l), new Expression(void 0, void 0, r), comparisonType));
      }
    }
     else {
      if (l.children.size === 1) {
        if (equals(l.value, '+') && equals(first(l.children).value, '-') && first(l.children).children.size === 1) {
          var newL = first(first(l.children).children).clone();
          var $receiver = this.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
          $receiver.addChild_em03xr$(this.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
          $receiver.addChild_em03xr$(r.clone());
          var newR = $receiver;
          this.expanseGeneratorRecursive_0(newL, newR, result, onlyExpressPairs, reverse_0(comparisonType));
        }
        var newL_0 = first(l.children).clone();
        var newR_0 = r;
      }
       else if (equals(l.value, '+') || equals(l.value, '*')) {
        tmp$ = get_lastIndex(l.children);
        for (var i = 0; i <= tmp$; i++) {
          var $receiver_0 = l.copy_4anocu$();
          var tmp$_1;
          tmp$_1 = get_lastIndex(l.children);
          for (var j = 0; j <= tmp$_1; j++) {
            if (j !== i) {
              $receiver_0.addChild_em03xr$(l.children.get_za3lpa$(j).clone());
            }
          }
          var newL_1 = $receiver_0;
          if (equals(l.value, '+')) {
            var $receiver_1 = this.compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
            $receiver_1.addChild_em03xr$(r.clone());
            if (equals(l.children.get_za3lpa$(i).value, '-')) {
              $receiver_1.addChild_em03xr$(l.children.get_za3lpa$(i).clone());
            }
             else {
              $receiver_1.addChild_em03xr$(this.compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1, listOf(l.children.get_za3lpa$(i).clone())));
            }
            tmp$_0 = $receiver_1;
          }
           else {
            var $receiver_2 = this.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
            $receiver_2.addChild_em03xr$(r.clone());
            $receiver_2.addChild_em03xr$(l.children.get_za3lpa$(i).clone());
            tmp$_0 = $receiver_2;
          }
          var newR_1 = tmp$_0;
          if (newL_1.children.size === 1 && !equals(first(newL_1.children).value, '-')) {
            this.expanseGeneratorRecursive_0(first(newL_1.children), newR_1, result, onlyExpressPairs, comparisonType);
          }
           else {
            this.expanseGeneratorRecursive_0(newL_1, newR_1, result, onlyExpressPairs, comparisonType);
          }
        }
      }
       else if (equals(l.value, '/') && l.children.size === 2) {
        var newLA = l.children.get_za3lpa$(0).clone();
        var $receiver_3 = this.compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1);
        $receiver_3.addChild_em03xr$(r.clone());
        $receiver_3.addChild_em03xr$(l.children.get_za3lpa$(1).clone());
        var newRA = $receiver_3;
        this.expanseGeneratorRecursive_0(newLA, newRA, result, onlyExpressPairs, comparisonType);
        var newLB = l.children.get_za3lpa$(1).clone();
        var $receiver_4 = this.compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1);
        $receiver_4.addChild_em03xr$(l.children.get_za3lpa$(0).clone());
        $receiver_4.addChild_em03xr$(r.clone());
        var newRB = $receiver_4;
        this.expanseGeneratorRecursive_0(newLB, newRB, result, onlyExpressPairs, reverse_0(comparisonType));
      }
    }
  };
  ExpressionComparisonExpanse.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionComparisonExpanse',
    interfaces: []
  };
  function Comparator$ObjectLiteral_5(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_5.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_5.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_2 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function FactComparator() {
    this.compiledConfiguration_klcwm1$_0 = this.compiledConfiguration_klcwm1$_0;
    this.expressionComparator_w91byg$_0 = this.expressionComparator_w91byg$_0;
  }
  Object.defineProperty(FactComparator.prototype, 'compiledConfiguration', {
    get: function () {
      if (this.compiledConfiguration_klcwm1$_0 == null)
        return throwUPAE('compiledConfiguration');
      return this.compiledConfiguration_klcwm1$_0;
    },
    set: function (compiledConfiguration) {
      this.compiledConfiguration_klcwm1$_0 = compiledConfiguration;
    }
  });
  Object.defineProperty(FactComparator.prototype, 'expressionComparator', {
    get: function () {
      if (this.expressionComparator_w91byg$_0 == null)
        return throwUPAE('expressionComparator');
      return this.expressionComparator_w91byg$_0;
    },
    set: function (expressionComparator) {
      this.expressionComparator_w91byg$_0 = expressionComparator;
    }
  });
  FactComparator.prototype.init_9elrwz$ = function (compiledConfiguration, expressionComparator) {
    if (expressionComparator === void 0)
      expressionComparator = new ExpressionComparator();
    this.compiledConfiguration = compiledConfiguration;
    this.expressionComparator = expressionComparator;
    this.expressionComparator.init_3b06hw$(compiledConfiguration);
  };
  function FactComparator$compareAsIs$lambda() {
    return 'compareAsIs started';
  }
  function FactComparator$compareAsIs$lambda_0(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel.v;
    };
  }
  function FactComparator$compareAsIs$lambda_1() {
    return 'Expression pribability comparison';
  }
  function FactComparator$compareAsIs$lambda_2() {
    return "Result of comparison left.left with right.left: '";
  }
  function FactComparator$compareAsIs$lambda_3() {
    return "'";
  }
  function FactComparator$compareAsIs$lambda_4() {
    return "Result of comparison left.right with right.right: '";
  }
  function FactComparator$compareAsIs$lambda_5() {
    return "'";
  }
  function FactComparator$compareAsIs$lambda_6() {
    return 'Expression Comparisons are equal';
  }
  function FactComparator$compareAsIs$lambda_7() {
    return 'Simple check failed. Try to reverse comparison';
  }
  function FactComparator$compareAsIs$lambda_8() {
    return "Result of comparison left.left with right.right: '";
  }
  function FactComparator$compareAsIs$lambda_9() {
    return "'";
  }
  function FactComparator$compareAsIs$lambda_10() {
    return "Result of comparison left.right with right.left: '";
  }
  function FactComparator$compareAsIs$lambda_11() {
    return "'";
  }
  function FactComparator$compareAsIs$lambda_12() {
    return 'left';
  }
  function FactComparator$compareAsIs$lambda_13() {
    return 'right';
  }
  function FactComparator$compareAsIs$lambda_14() {
    return 'Comparison in exist order';
  }
  function FactComparator$compareAsIs$lambda_15() {
    return "facts at position '";
  }
  function FactComparator$compareAsIs$lambda_16() {
    return "' are not equal. Order may be different";
  }
  function FactComparator$compareAsIs$lambda_17() {
    return 'Comparison in sorted order';
  }
  function FactComparator$compareAsIs$lambda_18(it) {
    return it.computeSortedOutIdentifier_6taknv$(true);
  }
  function FactComparator$compareAsIs$lambda_19(it) {
    return it.computeSortedOutIdentifier_6taknv$(true);
  }
  function FactComparator$compareAsIs$lambda_20() {
    return 'sorted left';
  }
  function FactComparator$compareAsIs$lambda_21() {
    return 'sorted right';
  }
  function FactComparator$compareAsIs$lambda_22() {
    return "Additional fact used to match left fact at left: '";
  }
  function FactComparator$compareAsIs$lambda_23() {
    return "' and right '";
  }
  function FactComparator$compareAsIs$lambda_24() {
    return "'";
  }
  function FactComparator$compareAsIs$lambda_25() {
    return "DiscrepancyFound at left: '";
  }
  function FactComparator$compareAsIs$lambda_26() {
    return "' and right '";
  }
  function FactComparator$compareAsIs$lambda_27() {
    return "'";
  }
  function FactComparator$compareAsIs$lambda_28() {
    return "Additional fact used to match right fact at left: '";
  }
  function FactComparator$compareAsIs$lambda_29() {
    return "' and right '";
  }
  function FactComparator$compareAsIs$lambda_30() {
    return "'";
  }
  function FactComparator$compareAsIs$lambda_31() {
    return "DiscrepancyFound at left: '";
  }
  function FactComparator$compareAsIs$lambda_32() {
    return "' and right '";
  }
  function FactComparator$compareAsIs$lambda_33() {
    return "'";
  }
  function FactComparator$compareAsIs$lambda_34() {
    return "DiscrepancyFound at left: '";
  }
  function FactComparator$compareAsIs$lambda_35() {
    return "' and right '";
  }
  function FactComparator$compareAsIs$lambda_36() {
    return "' in not MAIN_LINE_AND_NODE";
  }
  function FactComparator$compareAsIs$lambda_37() {
    return "DiscrepancyFound at left: '";
  }
  function FactComparator$compareAsIs$lambda_38() {
    return "' and right '";
  }
  function FactComparator$compareAsIs$lambda_39() {
    return "'";
  }
  function FactComparator$compareAsIs$lambda_40() {
    return "DiscrepancyFound at left: '";
  }
  function FactComparator$compareAsIs$lambda_41() {
    return "' and right '";
  }
  function FactComparator$compareAsIs$lambda_42() {
    return "' during search in left facts";
  }
  function FactComparator$compareAsIs$lambda_43() {
    return "DiscrepancyFound at left: '";
  }
  function FactComparator$compareAsIs$lambda_44() {
    return "' and right '";
  }
  function FactComparator$compareAsIs$lambda_45() {
    return "' during search in right facts";
  }
  function FactComparator$compareAsIs$lambda_46() {
    return "result: '";
  }
  function FactComparator$compareAsIs$lambda_47() {
    return "'";
  }
  FactComparator.prototype.compareAsIs_4xgx46$ = function (left, right, additionalFactsSortedIdentifiers, compareExpressionsWithProbabilityTest) {
    if (additionalFactsSortedIdentifiers === void 0) {
      additionalFactsSortedIdentifiers = emptyList();
    }
    if (compareExpressionsWithProbabilityTest === void 0)
      compareExpressionsWithProbabilityTest = false;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    log_1.addMessage_cte53e$(FactComparator$compareAsIs$lambda, void 0, void 0, 1);
    log_1.logFactsCompareAsIsParams_69ddxq$(left, right, additionalFactsSortedIdentifiers, compareExpressionsWithProbabilityTest);
    var currentLogLevel = {v: log_1.currentLevel};
    log_1.addMessage_cte53e$(FactComparator$compareAsIs$lambda_0(currentLogLevel), void 0, currentLogLevel.v);
    if (left.type() !== right.type()) {
      return false;
    }
    switch (left.type().name) {
      case 'EXPRESSION':
        log_1.addMessage_cte53e$(FactComparator$compareAsIs$lambda_1, void 0, currentLogLevel.v);
        tmp$_5 = this.expressionComparator.probabilityTestComparison_je0ger$((Kotlin.isType(tmp$ = left, Expression) ? tmp$ : throwCCE()).data.clone(), (Kotlin.isType(tmp$_0 = right, Expression) ? tmp$_0 : throwCCE()).data.clone());
        break;
      case 'EXPRESSION_COMPARISON':
        var leftComparison = Kotlin.isType(tmp$_1 = left, ExpressionComparison) ? tmp$_1 : throwCCE();
        var rightComparison = Kotlin.isType(tmp$_2 = right, ExpressionComparison) ? tmp$_2 : throwCCE();
        var leftOriginal = this.compareAsIs_4xgx46$(leftComparison.leftExpression, rightComparison.leftExpression, additionalFactsSortedIdentifiers);
        log_1.add_ww6hhz$(leftOriginal, FactComparator$compareAsIs$lambda_2, FactComparator$compareAsIs$lambda_3, currentLogLevel.v);
        var rightOriginal = this.compareAsIs_4xgx46$(leftComparison.rightExpression, rightComparison.rightExpression, additionalFactsSortedIdentifiers);
        log_1.add_ww6hhz$(rightOriginal, FactComparator$compareAsIs$lambda_4, FactComparator$compareAsIs$lambda_5, currentLogLevel.v);
        if (leftOriginal && rightOriginal && leftComparison.comparisonType === rightComparison.comparisonType) {
          log_1.addMessage_cte53e$(FactComparator$compareAsIs$lambda_6, void 0, currentLogLevel.v);
          tmp$_5 = true;
        }
         else {
          log_1.addMessage_cte53e$(FactComparator$compareAsIs$lambda_7, void 0, currentLogLevel.v);
          var leftEqualRight = this.compareAsIs_4xgx46$(leftComparison.leftExpression, rightComparison.rightExpression, additionalFactsSortedIdentifiers);
          log_1.add_ww6hhz$(leftEqualRight, FactComparator$compareAsIs$lambda_8, FactComparator$compareAsIs$lambda_9, currentLogLevel.v);
          var rightEqualLeft = this.compareAsIs_4xgx46$(leftComparison.rightExpression, rightComparison.leftExpression, additionalFactsSortedIdentifiers);
          log_1.add_ww6hhz$(rightEqualLeft, FactComparator$compareAsIs$lambda_10, FactComparator$compareAsIs$lambda_11, currentLogLevel.v);
          if (!leftEqualRight || !rightEqualLeft)
            tmp$_5 = false;
          else {
            switch (leftComparison.comparisonType.name) {
              case 'EQUAL':
                tmp$_5 = rightComparison.comparisonType === ComparisonType$EQUAL_getInstance();
                break;
              case 'LEFT_MORE_OR_EQUAL':
                tmp$_5 = rightComparison.comparisonType === ComparisonType$LEFT_LESS_OR_EQUAL_getInstance();
                break;
              case 'LEFT_LESS_OR_EQUAL':
                tmp$_5 = rightComparison.comparisonType === ComparisonType$LEFT_MORE_OR_EQUAL_getInstance();
                break;
              case 'LEFT_MORE':
                tmp$_5 = rightComparison.comparisonType === ComparisonType$LEFT_LESS_getInstance();
                break;
              case 'LEFT_LESS':
                tmp$_5 = rightComparison.comparisonType === ComparisonType$LEFT_MORE_getInstance();
                break;
              default:tmp$_5 = Kotlin.noWhenBranchMatched();
                break;
            }
          }
        }

        break;
      case 'MAIN_LINE_AND_NODE':
      case 'MAIN_LINE_OR_NODE':
        var leftNodeOutFacts = getOutFactsFromMainLineNode(left);
        var rightNodeInFacts = getInFactsFromMainLineNode(right);
        log_1.logSystemFacts_s4ig9i$(left.type(), leftNodeOutFacts, FactComparator$compareAsIs$lambda_12);
        log_1.logSystemFacts_s4ig9i$(right.type(), rightNodeInFacts, FactComparator$compareAsIs$lambda_13);
        var orderIsDifferent = false;
        if (leftNodeOutFacts.size === rightNodeInFacts.size) {
          log_1.addMessage_cte53e$(FactComparator$compareAsIs$lambda_14, void 0, currentLogLevel.v);
          tmp$_3 = get_lastIndex(leftNodeOutFacts);
          for (var i = 0; i <= tmp$_3; i++) {
            if (!this.compareAsIs_4xgx46$(leftNodeOutFacts.get_za3lpa$(i), rightNodeInFacts.get_za3lpa$(i), additionalFactsSortedIdentifiers)) {
              orderIsDifferent = true;
              log_1.add_ww6hhz$(i, FactComparator$compareAsIs$lambda_15, FactComparator$compareAsIs$lambda_16, currentLogLevel.v);
              break;
            }
          }
        }

        if (!orderIsDifferent && leftNodeOutFacts.size === rightNodeInFacts.size) {
          tmp$_5 = true;
        }
         else {
          log_1.addMessage_cte53e$(FactComparator$compareAsIs$lambda_17);
          var leftNodeOutFactsSorted = sortedWith(leftNodeOutFacts, new Comparator$ObjectLiteral_5(compareBy$lambda_2(FactComparator$compareAsIs$lambda_18)));
          var rightNodeOutFactsSorted = sortedWith(rightNodeInFacts, new Comparator$ObjectLiteral_5(compareBy$lambda_2(FactComparator$compareAsIs$lambda_19)));
          log_1.logSystemFacts_s4ig9i$(left.type(), leftNodeOutFactsSorted, FactComparator$compareAsIs$lambda_20);
          log_1.logSystemFacts_s4ig9i$(right.type(), rightNodeOutFactsSorted, FactComparator$compareAsIs$lambda_21);
          var discrepancyFound = false;
          var leftCounter = 0;
          var rightCounter = 0;
          while (leftCounter < leftNodeOutFactsSorted.size && rightCounter < rightNodeOutFactsSorted.size) {
            var leftIdentifier = leftNodeOutFactsSorted.get_za3lpa$(leftCounter).computeSortedOutIdentifier_6taknv$(true);
            var rightIdentifier = rightNodeOutFactsSorted.get_za3lpa$(rightCounter).computeSortedOutIdentifier_6taknv$(true);
            if (equals(leftIdentifier, rightIdentifier)) {
              leftCounter = leftCounter + 1 | 0;
              rightCounter = rightCounter + 1 | 0;
            }
             else if (left.type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance()) {
              if (Kotlin.compareTo(leftIdentifier, rightIdentifier) < 0) {
                if (binarySearch(additionalFactsSortedIdentifiers, leftIdentifier) >= 0) {
                  log_1.add_jcldl0$(leftCounter, rightCounter, FactComparator$compareAsIs$lambda_22, FactComparator$compareAsIs$lambda_23, FactComparator$compareAsIs$lambda_24, currentLogLevel.v);
                  leftCounter = leftCounter + 1 | 0;
                }
                 else {
                  discrepancyFound = true;
                  log_1.add_jcldl0$(leftCounter, rightCounter, FactComparator$compareAsIs$lambda_25, FactComparator$compareAsIs$lambda_26, FactComparator$compareAsIs$lambda_27, currentLogLevel.v);
                  break;
                }
              }
               else if (Kotlin.compareTo(leftIdentifier, rightIdentifier) > 0) {
                if (binarySearch(additionalFactsSortedIdentifiers, rightIdentifier) >= 0) {
                  log_1.add_jcldl0$(leftCounter, rightCounter, FactComparator$compareAsIs$lambda_28, FactComparator$compareAsIs$lambda_29, FactComparator$compareAsIs$lambda_30, currentLogLevel.v);
                  tmp$_4 = rightCounter, rightCounter = tmp$_4 + 1 | 0;
                }
                 else {
                  log_1.add_jcldl0$(leftCounter, rightCounter, FactComparator$compareAsIs$lambda_31, FactComparator$compareAsIs$lambda_32, FactComparator$compareAsIs$lambda_33, currentLogLevel.v);
                  discrepancyFound = true;
                  break;
                }
              }
            }
             else {
              log_1.add_jcldl0$(leftCounter, rightCounter, FactComparator$compareAsIs$lambda_34, FactComparator$compareAsIs$lambda_35, FactComparator$compareAsIs$lambda_36, currentLogLevel.v);
              discrepancyFound = true;
              break;
            }
          }
          if (left.type() !== ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() && (leftCounter < leftNodeOutFactsSorted.size || rightCounter < rightNodeOutFactsSorted.size)) {
            log_1.add_jcldl0$(leftCounter, rightCounter, FactComparator$compareAsIs$lambda_37, FactComparator$compareAsIs$lambda_38, FactComparator$compareAsIs$lambda_39, currentLogLevel.v);
            discrepancyFound = true;
          }
          while (!discrepancyFound && leftCounter < leftNodeOutFactsSorted.size) {
            if (binarySearch(additionalFactsSortedIdentifiers, leftNodeOutFactsSorted.get_za3lpa$(leftCounter).computeSortedOutIdentifier_6taknv$(true)) >= 0) {
              leftCounter = leftCounter + 1 | 0;
            }
             else {
              log_1.add_jcldl0$(leftCounter, rightCounter, FactComparator$compareAsIs$lambda_40, FactComparator$compareAsIs$lambda_41, FactComparator$compareAsIs$lambda_42, currentLogLevel.v);
              discrepancyFound = true;
              break;
            }
          }
          while (!discrepancyFound && rightCounter < rightNodeOutFactsSorted.size) {
            if (binarySearch(additionalFactsSortedIdentifiers, rightNodeOutFactsSorted.get_za3lpa$(rightCounter).computeSortedOutIdentifier_6taknv$(true)) >= 0) {
              rightCounter = rightCounter + 1 | 0;
            }
             else {
              log_1.add_jcldl0$(leftCounter, rightCounter, FactComparator$compareAsIs$lambda_43, FactComparator$compareAsIs$lambda_44, FactComparator$compareAsIs$lambda_45, currentLogLevel.v);
              discrepancyFound = true;
              break;
            }
          }
          log_1.add_ww6hhz$(discrepancyFound, FactComparator$compareAsIs$lambda_46, FactComparator$compareAsIs$lambda_47, currentLogLevel.v);
          tmp$_5 = !discrepancyFound;
        }

        break;
      default:tmp$_5 = true;
        break;
    }
    return tmp$_5;
  };
  function FactComparator$compareWithoutSubstitutions$lambda() {
    return 'compareWithoutSubstitutions started';
  }
  function FactComparator$compareWithoutSubstitutions$lambda_0(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel.v;
    };
  }
  function FactComparator$compareWithoutSubstitutions$lambda_1() {
    return 'Left fact after normalization: ';
  }
  function FactComparator$compareWithoutSubstitutions$lambda_2() {
    return 'Right fact after normalization: ';
  }
  function FactComparator$compareWithoutSubstitutions$lambda_3() {
    return 'Left fact after complicated function replacement: ';
  }
  function FactComparator$compareWithoutSubstitutions$lambda_4() {
    return 'Right fact after complicated function replacement: ';
  }
  function FactComparator$compareWithoutSubstitutions$lambda_5() {
    return 'Expression numeric trees computed. ';
  }
  FactComparator.prototype.compareWithoutSubstitutions_m17jg3$ = function (left, right, additionalFacts, additionalFactsSortedIdentifiers) {
    if (additionalFactsSortedIdentifiers === void 0) {
      var destination = ArrayList_init_0(collectionSizeOrDefault(additionalFacts, 10));
      var tmp$;
      tmp$ = additionalFacts.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.computeOutIdentifier_6taknv$(true));
      }
      additionalFactsSortedIdentifiers = sorted(destination);
    }
    log_1.addMessage_cte53e$(FactComparator$compareWithoutSubstitutions$lambda, void 0, void 0, 1);
    log_1.logFactsCompareAsIsParams_69ddxq$(left, right, additionalFactsSortedIdentifiers);
    var currentLogLevel = {v: log_1.currentLevel};
    log_1.addMessage_cte53e$(FactComparator$compareWithoutSubstitutions$lambda_0(currentLogLevel), void 0, currentLogLevel.v);
    var l = left.cloneWithNormalization_1g1bdl$(LinkedHashMap_init_0(), true);
    var r = right.cloneWithNormalization_1g1bdl$(LinkedHashMap_init_0(), true);
    log_1.addMessageWithFactShort_d1xyjh$(FactComparator$compareWithoutSubstitutions$lambda_1, l, void 0, currentLogLevel.v);
    log_1.addMessageWithFactShort_d1xyjh$(FactComparator$compareWithoutSubstitutions$lambda_2, r, void 0, currentLogLevel.v);
    if (this.compiledConfiguration.comparisonSettings.compareExpressionsAndFactsWithProbabilityRules) {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'implement');
    }
     else if (this.compiledConfiguration.comparisonSettings.compareExpressionsWithProbabilityRulesWhenComparingFacts) {
      var functionIdentifierToVariableMap = LinkedHashMap_init_0();
      l.replaceNotDefinedFunctionsOnVariables_ioe5p3$(functionIdentifierToVariableMap, this.expressionComparator.definedFunctionNameNumberOfArgsSet);
      r.replaceNotDefinedFunctionsOnVariables_ioe5p3$(functionIdentifierToVariableMap, this.expressionComparator.definedFunctionNameNumberOfArgsSet);
      log_1.addMessageWithFactShort_d1xyjh$(FactComparator$compareWithoutSubstitutions$lambda_3, l, void 0, currentLogLevel.v);
      log_1.addMessageWithFactShort_d1xyjh$(FactComparator$compareWithoutSubstitutions$lambda_4, r, void 0, currentLogLevel.v);
      if (this.compareAsIs_4xgx46$(l, r, additionalFactsSortedIdentifiers, true)) {
        return true;
      }
      l.computeExpressionTrees_r1dnaj$(this.expressionComparator.baseOperationsDefinitions);
      r.computeExpressionTrees_r1dnaj$(this.expressionComparator.baseOperationsDefinitions);
      log_1.addMessage_cte53e$(FactComparator$compareWithoutSubstitutions$lambda_5, void 0, currentLogLevel.v);
      var res = this.compareAsIs_4xgx46$(l, r, additionalFactsSortedIdentifiers, true);
      return res;
    }
     else {
      var res_0 = this.compareAsIs_4xgx46$(l, r, additionalFactsSortedIdentifiers);
      return res_0;
    }
  };
  function FactComparator$compareWithTreeTransformationRules$lambda() {
    return 'compareWithTreeTransformationRules called';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_0(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel.v;
    };
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_1() {
    return 'Left fact after first normalization: ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_2() {
    return 'Right fact after first normalization: ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_3() {
    return 'COMPARISON_WITHOUT_SUBSTITUTIONS FAILED; Transformation rules search started.';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_4() {
    return 'Considering rule: ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_5() {
    return 'Left fact after fact wrapping: ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_6() {
    return 'Right fact after fact wrapping: ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_7() {
    return '';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_8() {
    return ' possible applications found';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_9() {
    return '';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_10() {
    return ' possible applications found => ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_11() {
    return ' possible combinations';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_12() {
    return "Possible application places count more than max count for boosting: '";
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_13() {
    return "'. Apply in all of them together";
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_14() {
    return 'Left fact after transformation: ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_15() {
    return 'Right fact after transformation: ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_16() {
    return 'TRANSFORMATION_VERIFIED. ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_17() {
    return 'TASK_CONTEXT_FACT_USED. ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_18() {
    return "bitmask: '";
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_19() {
    return "' of '";
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_20() {
    return "'";
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_21() {
    return 'Left fact after transformation: ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_22() {
    return 'Right fact after transformation: ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_23() {
    return 'TRANSFORMATION_VERIFIED. ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_24() {
    return 'TASK_CONTEXT_FACT_USED. ';
  }
  function FactComparator$compareWithTreeTransformationRules$lambda_25() {
    return 'applicable TRANSFORMATION_NOT_FOUND';
  }
  FactComparator.prototype.compareWithTreeTransformationRules_p9xvyu$ = function (leftOriginal, rightOriginal, additionalFacts, transformations, maxTransformationWeight, maxBustCount, minPossibleTransformationWeight, additionalFactsSortedIdentifiers, additionalFactUsed) {
    var tmp$, tmp$_0, tmp$_1;
    if (maxTransformationWeight === void 0)
      maxTransformationWeight = this.compiledConfiguration.comparisonSettings.maxTransformationWeight;
    if (maxBustCount === void 0)
      maxBustCount = this.compiledConfiguration.comparisonSettings.maxBustCount;
    if (minPossibleTransformationWeight === void 0) {
      var minBy$result;
      minBy$break: do {
        var iterator = transformations.iterator();
        if (!iterator.hasNext()) {
          minBy$result = null;
          break minBy$break;
        }
        var minElem = iterator.next();
        if (!iterator.hasNext()) {
          minBy$result = minElem;
          break minBy$break;
        }
        var minValue = minElem.weight;
        do {
          var e = iterator.next();
          var v = e.weight;
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }
        }
         while (iterator.hasNext());
        minBy$result = minElem;
      }
       while (false);
      minPossibleTransformationWeight = (tmp$_0 = (tmp$ = minBy$result) != null ? tmp$.weight : null) != null ? tmp$_0 : 1.0;
    }
    if (additionalFactsSortedIdentifiers === void 0) {
      var destination = ArrayList_init_0(collectionSizeOrDefault(additionalFacts, 10));
      var tmp$_2;
      tmp$_2 = additionalFacts.iterator();
      while (tmp$_2.hasNext()) {
        var item = tmp$_2.next();
        destination.add_11rb$(item.computeOutIdentifier_6taknv$(true));
      }
      additionalFactsSortedIdentifiers = sorted(destination);
    }
    var left = leftOriginal.clone();
    var right = rightOriginal.clone();
    log_1.addMessage_cte53e$(FactComparator$compareWithTreeTransformationRules$lambda, MessageType$USER_getInstance(), void 0, 1);
    log_1.logFactsCompareAsIsParams_6nwrqg$(left, right, additionalFacts, maxTransformationWeight, maxBustCount, minPossibleTransformationWeight, additionalFactUsed);
    var currentLogLevel = {v: log_1.currentLevel};
    log_1.addMessage_cte53e$(FactComparator$compareWithTreeTransformationRules$lambda_0(currentLogLevel), void 0, currentLogLevel.v);
    left.applyAllExpressionSubstitutions_itxcjl$(this.compiledConfiguration.compiledImmediateTreeTransformationRules);
    right.applyAllExpressionSubstitutions_itxcjl$(this.compiledConfiguration.compiledImmediateTreeTransformationRules);
    log_1.addMessageWithFactShort_d1xyjh$(FactComparator$compareWithTreeTransformationRules$lambda_1, left, void 0, currentLogLevel.v);
    log_1.addMessageWithFactShort_d1xyjh$(FactComparator$compareWithTreeTransformationRules$lambda_2, right, void 0, currentLogLevel.v);
    if (this.compareWithoutSubstitutions_m17jg3$(left, right, additionalFacts, additionalFactsSortedIdentifiers))
      return true;
    log_1.addMessage_cte53e$(FactComparator$compareWithTreeTransformationRules$lambda_3, MessageType$USER_getInstance(), currentLogLevel.v);
    if (maxTransformationWeight < minPossibleTransformationWeight)
      return false;
    var destination_0 = ArrayList_init();
    var tmp$_3;
    tmp$_3 = transformations.iterator();
    while (tmp$_3.hasNext()) {
      var element = tmp$_3.next();
      if (element.weight <= maxTransformationWeight)
        destination_0.add_11rb$(element);
    }
    tmp$_1 = destination_0.iterator();
    while (tmp$_1.hasNext()) {
      var transformation = tmp$_1.next();
      log_1.addMessageWithFactSubstitutionDetail_garven$(FactComparator$compareWithTreeTransformationRules$lambda_4, transformation, MessageType$USER_getInstance(), currentLogLevel.v);
      var transformationLogLevel = currentLogLevel.v + 1 | 0;
      var l = left.clone();
      var r = right.clone();
      var lParent = factWrapperForCheckingTransformations(l, true);
      var rParent = factWrapperForCheckingTransformations(r, false);
      log_1.addMessageWithFactShort_d1xyjh$(FactComparator$compareWithTreeTransformationRules$lambda_5, lParent, void 0, transformationLogLevel);
      log_1.addMessageWithFactShort_d1xyjh$(FactComparator$compareWithTreeTransformationRules$lambda_6, rParent, void 0, transformationLogLevel);
      var substitutionPlaces = plus(transformation.findAllPossibleSubstitutionPlaces_fyc0t6$(lParent, true, additionalFacts), transformation.findAllPossibleSubstitutionPlaces_fyc0t6$(rParent, false, additionalFacts));
      log_1.add_ww6hhz$(substitutionPlaces.size, FactComparator$compareWithTreeTransformationRules$lambda_7, FactComparator$compareWithTreeTransformationRules$lambda_8);
      var bitMaskCount = 1 << substitutionPlaces.size;
      log_1.add_jcldl0$(substitutionPlaces.size, bitMaskCount, FactComparator$compareWithTreeTransformationRules$lambda_9, FactComparator$compareWithTreeTransformationRules$lambda_10, FactComparator$compareWithTreeTransformationRules$lambda_11, transformationLogLevel, void 0, MessageType$USER_getInstance());
      if (Kotlin.imul(bitMaskCount, transformations.size) > maxBustCount) {
        log_1.add_ww6hhz$(maxBustCount / transformations.size | 0, FactComparator$compareWithTreeTransformationRules$lambda_12, FactComparator$compareWithTreeTransformationRules$lambda_13, transformationLogLevel, void 0, MessageType$USER_getInstance());
        var additionalFactInCurrentTransformationApplicationUsed = ArrayList_init();
        transformation.applySubstitution_7ayt38$(substitutionPlaces, additionalFacts, additionalFactInCurrentTransformationApplicationUsed);
        log_1.addMessageWithFactDetail_d1xyjh$(FactComparator$compareWithTreeTransformationRules$lambda_14, lParent, MessageType$USER_getInstance(), transformationLogLevel);
        log_1.addMessageWithFactDetail_d1xyjh$(FactComparator$compareWithTreeTransformationRules$lambda_15, rParent, MessageType$USER_getInstance(), transformationLogLevel);
        if (this.compareWithTreeTransformationRules_p9xvyu$(lParent, rParent, additionalFacts, transformations, maxTransformationWeight - transformation.weight, maxBustCount, minPossibleTransformationWeight, additionalFactsSortedIdentifiers, additionalFactInCurrentTransformationApplicationUsed)) {
          log_1.addMessage_cte53e$(FactComparator$compareWithTreeTransformationRules$lambda_16, MessageType$USER_getInstance(), transformationLogLevel);
          if (!additionalFactInCurrentTransformationApplicationUsed.isEmpty()) {
            additionalFactUsed.add_11rb$(true);
            log_1.addMessage_cte53e$(FactComparator$compareWithTreeTransformationRules$lambda_17, MessageType$USER_getInstance(), transformationLogLevel);
          }
          return true;
        }
      }
       else {
        for (var bitMask = 1; bitMask < bitMaskCount; bitMask++) {
          log_1.add_jcldl0$(toString_0(bitMask, 2), toString_0(bitMaskCount, 2), FactComparator$compareWithTreeTransformationRules$lambda_18, FactComparator$compareWithTreeTransformationRules$lambda_19, FactComparator$compareWithTreeTransformationRules$lambda_20, transformationLogLevel, void 0, MessageType$USER_getInstance());
          var additionalFactInCurrentTransformationApplicationUsed_0 = ArrayList_init();
          transformation.applySubstitutionByBitMask_anc5oi$(substitutionPlaces, bitMask, additionalFactInCurrentTransformationApplicationUsed_0);
          log_1.addMessageWithFactDetail_d1xyjh$(FactComparator$compareWithTreeTransformationRules$lambda_21, lParent, MessageType$USER_getInstance(), transformationLogLevel);
          log_1.addMessageWithFactDetail_d1xyjh$(FactComparator$compareWithTreeTransformationRules$lambda_22, rParent, MessageType$USER_getInstance(), transformationLogLevel);
          if (this.compareWithTreeTransformationRules_p9xvyu$(lParent.cloneWithNormalization_1g1bdl$(LinkedHashMap_init_0(), false), rParent.cloneWithNormalization_1g1bdl$(LinkedHashMap_init_0(), false), additionalFacts, transformations, maxTransformationWeight - transformation.weight, maxBustCount, minPossibleTransformationWeight, additionalFactsSortedIdentifiers, additionalFactInCurrentTransformationApplicationUsed_0)) {
            log_1.addMessage_cte53e$(FactComparator$compareWithTreeTransformationRules$lambda_23, MessageType$USER_getInstance(), transformationLogLevel);
            if (!additionalFactInCurrentTransformationApplicationUsed_0.isEmpty()) {
              additionalFactUsed.add_11rb$(true);
              log_1.addMessage_cte53e$(FactComparator$compareWithTreeTransformationRules$lambda_24, MessageType$USER_getInstance(), transformationLogLevel);
            }
            return true;
          }
        }
      }
    }
    log_1.addMessage_cte53e$(FactComparator$compareWithTreeTransformationRules$lambda_25, MessageType$USER_getInstance(), currentLogLevel.v);
    return false;
  };
  FactComparator.prototype.fullFactsCompare_nklmij$ = function (left, right, additionalFacts, additionalFactUsed) {
    left.applyAllExpressionSubstitutions_itxcjl$(this.compiledConfiguration.compiledImmediateTreeTransformationRules);
    right.applyAllExpressionSubstitutions_itxcjl$(this.compiledConfiguration.compiledImmediateTreeTransformationRules);
    if (this.compiledConfiguration.comparisonSettings.isComparisonWithRules) {
      var additionalFactInCurrentTransformationApplicationUsed = ArrayList_init();
      if (this.compareWithTreeTransformationRules_p9xvyu$(left, right, additionalFacts, this.compiledConfiguration.compiledFactTreeTransformationRules, this.compiledConfiguration.comparisonSettings.maxTransformationWeight, this.compiledConfiguration.comparisonSettings.maxBustCount, void 0, void 0, additionalFactInCurrentTransformationApplicationUsed)) {
        if (!additionalFactInCurrentTransformationApplicationUsed.isEmpty()) {
          additionalFactUsed.add_11rb$(true);
        }
        return true;
      }
      additionalFactInCurrentTransformationApplicationUsed.clear();
      left.computeExpressionTrees_r1dnaj$(this.expressionComparator.baseOperationsDefinitions);
      right.computeExpressionTrees_r1dnaj$(this.expressionComparator.baseOperationsDefinitions);
      if (this.compareWithTreeTransformationRules_p9xvyu$(left, right, additionalFacts, this.compiledConfiguration.compiledFactTreeTransformationRules, this.compiledConfiguration.comparisonSettings.maxTransformationWeight, this.compiledConfiguration.comparisonSettings.maxBustCount, void 0, void 0, additionalFactInCurrentTransformationApplicationUsed)) {
        if (!additionalFactInCurrentTransformationApplicationUsed.isEmpty()) {
          additionalFactUsed.add_11rb$(true);
        }
        return true;
      }
    }
     else {
      if (this.compareWithoutSubstitutions_m17jg3$(left, right, additionalFacts)) {
        return true;
      }
    }
    return false;
  };
  FactComparator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FactComparator',
    interfaces: []
  };
  function SubstitutionDirection(name, ordinal, beginString, endString) {
    Enum.call(this);
    this.beginString = beginString;
    this.endString = endString;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SubstitutionDirection_initFields() {
    SubstitutionDirection_initFields = function () {
    };
    SubstitutionDirection$LEFT_TO_RIGHT_instance = new SubstitutionDirection('LEFT_TO_RIGHT', 0, '-', '->');
    SubstitutionDirection$RIGHT_TO_LEFT_instance = new SubstitutionDirection('RIGHT_TO_LEFT', 1, '<-', '-');
    SubstitutionDirection$ALL_TO_ALL_instance = new SubstitutionDirection('ALL_TO_ALL', 2, '<-', '->');
  }
  var SubstitutionDirection$LEFT_TO_RIGHT_instance;
  function SubstitutionDirection$LEFT_TO_RIGHT_getInstance() {
    SubstitutionDirection_initFields();
    return SubstitutionDirection$LEFT_TO_RIGHT_instance;
  }
  var SubstitutionDirection$RIGHT_TO_LEFT_instance;
  function SubstitutionDirection$RIGHT_TO_LEFT_getInstance() {
    SubstitutionDirection_initFields();
    return SubstitutionDirection$RIGHT_TO_LEFT_instance;
  }
  var SubstitutionDirection$ALL_TO_ALL_instance;
  function SubstitutionDirection$ALL_TO_ALL_getInstance() {
    SubstitutionDirection_initFields();
    return SubstitutionDirection$ALL_TO_ALL_instance;
  }
  SubstitutionDirection.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SubstitutionDirection',
    interfaces: [Enum]
  };
  function SubstitutionDirection$values() {
    return [SubstitutionDirection$LEFT_TO_RIGHT_getInstance(), SubstitutionDirection$RIGHT_TO_LEFT_getInstance(), SubstitutionDirection$ALL_TO_ALL_getInstance()];
  }
  SubstitutionDirection.values = SubstitutionDirection$values;
  function SubstitutionDirection$valueOf(name) {
    switch (name) {
      case 'LEFT_TO_RIGHT':
        return SubstitutionDirection$LEFT_TO_RIGHT_getInstance();
      case 'RIGHT_TO_LEFT':
        return SubstitutionDirection$RIGHT_TO_LEFT_getInstance();
      case 'ALL_TO_ALL':
        return SubstitutionDirection$ALL_TO_ALL_getInstance();
      default:throwISE('No enum constant mathhelper.twf.factstransformations.SubstitutionDirection.' + name);
    }
  }
  SubstitutionDirection.valueOf_61zpoe$ = SubstitutionDirection$valueOf;
  function toUserString($receiver) {
    return $receiver.beginString + $receiver.endString;
  }
  function FactSubstitutionPlace(parentChain, replaceableNodeIndex, substitutionInstance, checkOutMainLineNodePart, originalValue) {
    this.parentChain = parentChain;
    this.replaceableNodeIndex = replaceableNodeIndex;
    this.substitutionInstance = substitutionInstance;
    this.checkOutMainLineNodePart = checkOutMainLineNodePart;
    this.originalValue = originalValue;
  }
  FactSubstitutionPlace.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FactSubstitutionPlace',
    interfaces: []
  };
  FactSubstitutionPlace.prototype.component1 = function () {
    return this.parentChain;
  };
  FactSubstitutionPlace.prototype.component2 = function () {
    return this.replaceableNodeIndex;
  };
  FactSubstitutionPlace.prototype.component3 = function () {
    return this.substitutionInstance;
  };
  FactSubstitutionPlace.prototype.component4 = function () {
    return this.checkOutMainLineNodePart;
  };
  FactSubstitutionPlace.prototype.component5 = function () {
    return this.originalValue;
  };
  FactSubstitutionPlace.prototype.copy_hf22lc$ = function (parentChain, replaceableNodeIndex, substitutionInstance, checkOutMainLineNodePart, originalValue) {
    return new FactSubstitutionPlace(parentChain === void 0 ? this.parentChain : parentChain, replaceableNodeIndex === void 0 ? this.replaceableNodeIndex : replaceableNodeIndex, substitutionInstance === void 0 ? this.substitutionInstance : substitutionInstance, checkOutMainLineNodePart === void 0 ? this.checkOutMainLineNodePart : checkOutMainLineNodePart, originalValue === void 0 ? this.originalValue : originalValue);
  };
  FactSubstitutionPlace.prototype.toString = function () {
    return 'FactSubstitutionPlace(parentChain=' + Kotlin.toString(this.parentChain) + (', replaceableNodeIndex=' + Kotlin.toString(this.replaceableNodeIndex)) + (', substitutionInstance=' + Kotlin.toString(this.substitutionInstance)) + (', checkOutMainLineNodePart=' + Kotlin.toString(this.checkOutMainLineNodePart)) + (', originalValue=' + Kotlin.toString(this.originalValue)) + ')';
  };
  FactSubstitutionPlace.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.parentChain) | 0;
    result = result * 31 + Kotlin.hashCode(this.replaceableNodeIndex) | 0;
    result = result * 31 + Kotlin.hashCode(this.substitutionInstance) | 0;
    result = result * 31 + Kotlin.hashCode(this.checkOutMainLineNodePart) | 0;
    result = result * 31 + Kotlin.hashCode(this.originalValue) | 0;
    return result;
  };
  FactSubstitutionPlace.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.parentChain, other.parentChain) && Kotlin.equals(this.replaceableNodeIndex, other.replaceableNodeIndex) && Kotlin.equals(this.substitutionInstance, other.substitutionInstance) && Kotlin.equals(this.checkOutMainLineNodePart, other.checkOutMainLineNodePart) && Kotlin.equals(this.originalValue, other.originalValue)))));
  };
  function FactSubstitution(left, right, weight, basedOnTaskContext, direction, name, factComparator) {
    if (weight === void 0)
      weight = 1.0;
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (direction === void 0)
      direction = SubstitutionDirection$ALL_TO_ALL_getInstance();
    if (name === void 0)
      name = '';
    this.left = left;
    this.right = right;
    this.weight = weight;
    this.basedOnTaskContext = basedOnTaskContext;
    this.direction = direction;
    this.name = name;
    this.factComparator = factComparator;
    this.identifier = '';
  }
  FactSubstitution.prototype.computeIdentifier_6taknv$ = function (recomputeIfComputed) {
    if (isBlank(this.identifier)) {
      this.identifier = '[' + this.left.computeIdentifier_6taknv$(recomputeIfComputed) + this.direction.beginString + (this.basedOnTaskContext ? 'InTaskContext' : '') + this.direction.endString + this.right.computeIdentifier_6taknv$(recomputeIfComputed) + ']';
    }
    return this.identifier;
  };
  FactSubstitution.prototype.checkCondition_ql5wdj$ = function (factNode, inputConditionNode, substitutionInstance, nameArgsMap, checkOutMainLineNodePart, additionalFacts, correspondingIndexes) {
    if (nameArgsMap === void 0) {
      nameArgsMap = LinkedHashMap_init_0();
    }
    if (additionalFacts === void 0) {
      additionalFacts = emptyList();
    }
    if (correspondingIndexes === void 0) {
      correspondingIndexes = ArrayList_init();
    }
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20;
    var conditionNode = inputConditionNode;
    if (inputConditionNode.type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() || inputConditionNode.type() === ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance()) {
      if ((Kotlin.isType(tmp$ = inputConditionNode, MainLineNode) ? tmp$ : throwCCE()).outFacts.size === 1 && factNode.type() !== ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() && factNode.type() !== ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance()) {
        conditionNode = first(inputConditionNode.outFacts);
      }
    }
     else if (factNode.type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() || factNode.type() === ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance()) {
      var actualFacts = checkOutMainLineNodePart ? getOutFactsFromMainLineNode(factNode) : getInFactsFromMainLineNode(factNode);
      if (actualFacts.size === 1) {
        switch (factNode.type().name) {
          case 'MAIN_LINE_AND_NODE':
            tmp$_2 = new MainLineAndNode(void 0, void 0, void 0, void 0, void 0, mutableListOf([Kotlin.isType(tmp$_0 = inputConditionNode, MainChainPart) ? tmp$_0 : throwCCE()]));
            break;
          case 'MAIN_LINE_OR_NODE':
            tmp$_2 = new MainLineOrNode(void 0, void 0, void 0, void 0, void 0, mutableListOf([Kotlin.isType(tmp$_1 = inputConditionNode, MainChainPart) ? tmp$_1 : throwCCE()]));
            break;
          default:tmp$_2 = new MainLineAndNode();
            break;
        }
        conditionNode = tmp$_2;
      }
    }
    if (conditionNode.type() === ComparableTransformationPartType$EXPRESSION_getInstance()) {
      Kotlin.isType(tmp$_3 = conditionNode, Expression) ? tmp$_3 : throwCCE();
      if (this.basedOnTaskContext) {
        if (!(factNode.type() !== ComparableTransformationPartType$EXPRESSION_getInstance()) ? !conditionNode.data.isNodeSubtreeEquals_cw9fud$((Kotlin.isType(tmp$_4 = factNode, Expression) ? tmp$_4 : throwCCE()).data) : true) {
          substitutionInstance.isApplicable = false;
          return;
        }
      }
       else {
        var designationName = conditionNode.getDesignation();
        if (designationName.length > 0) {
          var varValue = substitutionInstance.getComparableVar_61zpoe$(designationName);
          if (varValue == null) {
            if (substitutionInstance.getExprVar_61zpoe$(designationName) == null) {
              substitutionInstance.putComparableVar_3lmvpp$(designationName, factNode);
            }
             else {
              substitutionInstance.isApplicable = false;
              return;
            }
          }
           else {
            if (!this.factComparator.compareAsIs_4xgx46$(Kotlin.isType(tmp$_5 = varValue, MainChainPart) ? tmp$_5 : throwCCE(), Kotlin.isType(tmp$_6 = factNode, MainChainPart) ? tmp$_6 : throwCCE(), emptyList())) {
              substitutionInstance.isApplicable = false;
              return;
            }
          }
        }
         else {
          if (conditionNode.type() !== factNode.type()) {
            substitutionInstance.isApplicable = false;
            return;
          }
          ExpressionSubstitution$Companion_getInstance().checkConditionCompanion_tiu7wf$((Kotlin.isType(tmp$_7 = factNode, Expression) ? tmp$_7 : throwCCE()).data, (Kotlin.isType(tmp$_8 = conditionNode, Expression) ? tmp$_8 : throwCCE()).data, substitutionInstance, nameArgsMap, this.basedOnTaskContext);
          if (!substitutionInstance.isApplicable)
            return;
        }
      }
    }
     else {
      if (conditionNode.type() !== factNode.type()) {
        substitutionInstance.isApplicable = false;
        return;
      }
      loop_label: switch (conditionNode.type().name) {
        case 'EXPRESSION_COMPARISON':
          var isApplicable = false;
          var currentTime = substitutionInstance.varNamesTimeStorage.time;
          this.checkCondition_ql5wdj$((Kotlin.isType(tmp$_9 = factNode, ExpressionComparison) ? tmp$_9 : throwCCE()).leftExpression, (Kotlin.isType(tmp$_10 = conditionNode, ExpressionComparison) ? tmp$_10 : throwCCE()).leftExpression, substitutionInstance, nameArgsMap, checkOutMainLineNodePart);
          if (substitutionInstance.isApplicable && factNode.comparisonType === conditionNode.comparisonType) {
            this.checkCondition_ql5wdj$(factNode.rightExpression, conditionNode.rightExpression, substitutionInstance, nameArgsMap, checkOutMainLineNodePart);
            if (substitutionInstance.isApplicable) {
              isApplicable = true;
            }
          }

          if (!isApplicable) {
            substitutionInstance.isApplicable = false;
            switch (conditionNode.comparisonType.name) {
              case 'EQUAL':
                if (factNode.comparisonType !== ComparisonType$EQUAL_getInstance())
                  return;
                break;
              case 'LEFT_MORE_OR_EQUAL':
                if (factNode.comparisonType !== ComparisonType$LEFT_LESS_OR_EQUAL_getInstance())
                  return;
                break;
              case 'LEFT_LESS_OR_EQUAL':
                if (factNode.comparisonType !== ComparisonType$LEFT_MORE_OR_EQUAL_getInstance())
                  return;
                break;
              case 'LEFT_MORE':
                if (factNode.comparisonType !== ComparisonType$LEFT_LESS_getInstance())
                  return;
                break;
              case 'LEFT_LESS':
                if (factNode.comparisonType !== ComparisonType$LEFT_MORE_getInstance())
                  return;
                break;
            }
            substitutionInstance.dropExtraVarsAfter_za3lpa$(currentTime);
            substitutionInstance.isApplicable = true;
            this.checkCondition_ql5wdj$(factNode.leftExpression, conditionNode.rightExpression, substitutionInstance, nameArgsMap, checkOutMainLineNodePart);
            if (substitutionInstance.isApplicable) {
              this.checkCondition_ql5wdj$(factNode.rightExpression, conditionNode.leftExpression, substitutionInstance, nameArgsMap, checkOutMainLineNodePart);
              if (substitutionInstance.isApplicable) {
                isApplicable = true;
              }
            }
            if (!isApplicable) {
              substitutionInstance.isApplicable = false;
              return;
            }
          }

          break loop_label;
        case 'MAIN_LINE_AND_NODE':
        case 'MAIN_LINE_OR_NODE':
          var actualFacts_0 = checkOutMainLineNodePart ? getOutFactsFromMainLineNode(factNode) : getInFactsFromMainLineNode(factNode);
          var conditionFacts = getOutFactsFromMainLineNode(conditionNode);
          var array = Array_0(conditionFacts.size);
          var tmp$_21;
          tmp$_21 = array.length - 1 | 0;
          for (var i = 0; i <= tmp$_21; i++) {
            array[i] = LinkedHashSet_init();
          }

          var nodesCorrespondingToConditionFacts = array;
          var notMatchedConditionFactsIndexes = LinkedHashSet_init();
          tmp$_11 = get_lastIndex(conditionFacts);
          for (var j = 0; j <= tmp$_11; j++) {
            var conditionFact = conditionFacts.get_za3lpa$(j);
            tmp$_12 = get_lastIndex(actualFacts_0);
            for (var i_0 = 0; i_0 <= tmp$_12; i_0++) {
              var actualFact = actualFacts_0.get_za3lpa$(i_0);
              var startFactCheckingTime = substitutionInstance.varNamesTimeStorage.time;
              substitutionInstance.isApplicable = true;
              this.checkCondition_ql5wdj$(actualFact, conditionFact, substitutionInstance, nameArgsMap, checkOutMainLineNodePart);
              if (substitutionInstance.isApplicable) {
                nodesCorrespondingToConditionFacts[j].add_11rb$(i_0);
              }
              substitutionInstance.dropExtraVarsAfter_za3lpa$(startFactCheckingTime);
            }
            tmp$_13 = get_lastIndex(additionalFacts);
            for (var i_1 = 0; i_1 <= tmp$_13; i_1++) {
              var actualFact_0 = additionalFacts.get_za3lpa$(i_1);
              var startFactCheckingTime_0 = substitutionInstance.varNamesTimeStorage.time;
              substitutionInstance.isApplicable = true;
              this.checkCondition_ql5wdj$(actualFact_0, conditionFact, substitutionInstance, nameArgsMap, checkOutMainLineNodePart);
              if (substitutionInstance.isApplicable) {
                nodesCorrespondingToConditionFacts[j].add_11rb$(actualFacts_0.size + i_1 | 0);
              }
              substitutionInstance.dropExtraVarsAfter_za3lpa$(startFactCheckingTime_0);
            }
            if (nodesCorrespondingToConditionFacts[j].isEmpty()) {
              notMatchedConditionFactsIndexes.add_11rb$(j);
            }
          }

          var all$result;
          all$break: do {
            var tmp$_22;
            for (tmp$_22 = 0; tmp$_22 !== nodesCorrespondingToConditionFacts.length; ++tmp$_22) {
              var element = nodesCorrespondingToConditionFacts[tmp$_22];
              if (!(element.size <= 1)) {
                all$result = false;
                break all$break;
              }
            }
            all$result = true;
          }
           while (false);
          if (all$result) {
            var startGeneratingResultTime = substitutionInstance.varNamesTimeStorage.time;
            tmp$_14 = get_lastIndex(conditionFacts);
            for (var j_0 = 0; j_0 <= tmp$_14; j_0++) {
              if (notMatchedConditionFactsIndexes.contains_11rb$(j_0)) {
                continue;
              }
              var conditionFact_0 = conditionFacts.get_za3lpa$(j_0);
              var matchingFactIndex = first_0(nodesCorrespondingToConditionFacts[j_0]);
              if (matchingFactIndex >= actualFacts_0.size) {
                substitutionInstance.varNamesTimeStorage.addVarName_i6eyy4$(additionalFactUsedVarName, SubstitutionInstanceVarType$INFO_getInstance());
                tmp$_15 = additionalFacts.get_za3lpa$(matchingFactIndex - actualFacts_0.size | 0);
              }
               else {
                tmp$_15 = actualFacts_0.get_za3lpa$(matchingFactIndex);
              }
              var actualFact_1 = tmp$_15;
              substitutionInstance.isApplicable = true;
              var currentStartGeneratingResultTime = substitutionInstance.varNamesTimeStorage.time;
              this.checkCondition_ql5wdj$(actualFact_1, conditionFact_0, substitutionInstance, nameArgsMap, checkOutMainLineNodePart);
              if (!substitutionInstance.isApplicable) {
                substitutionInstance.dropExtraVarsAfter_za3lpa$(currentStartGeneratingResultTime);
                notMatchedConditionFactsIndexes.add_11rb$(j_0);
              }
              correspondingIndexes.add_11rb$(new MatchedNode(matchingFactIndex, actualFact_1.type()));
            }
            tmp$_16 = notMatchedConditionFactsIndexes.iterator();
            while (tmp$_16.hasNext()) {
              var j_1 = tmp$_16.next();
              var conditionFact_1 = conditionFacts.get_za3lpa$(j_1);
              switch (conditionFact_1.type().name) {
                case 'EXPRESSION_COMPARISON':
                  tmp$_19 = (Kotlin.isType(tmp$_17 = conditionFact_1, ExpressionComparison) ? tmp$_17 : throwCCE()).computeIfNumeric_gb8qxc$(substitutionInstance, this.factComparator.expressionComparator.baseOperationsDefinitions);
                  break;
                case 'MAIN_LINE_AND_NODE':
                case 'MAIN_LINE_OR_NODE':
                  tmp$_19 = (Kotlin.isType(tmp$_18 = conditionFact_1, MainLineNode) ? tmp$_18 : throwCCE()).computeIfNumeric_cazeuv$(substitutionInstance, this.factComparator.expressionComparator.baseOperationsDefinitions, true);
                  break;
                default:tmp$_19 = false;
                  break;
              }
              var isNumericAndCorrect = tmp$_19;
              if (isNumericAndCorrect !== true) {
                substitutionInstance.isApplicable = false;
                substitutionInstance.dropExtraVarsAfter_za3lpa$(startGeneratingResultTime);
                return;
              }
            }
            substitutionInstance.isApplicable = true;
          }
           else {
            var j_2 = 0;
            var startGeneratingResultTime_0 = substitutionInstance.varNamesTimeStorage.time;
            while (j_2 < conditionFacts.size) {
              var conditionFact_2 = conditionFacts.get_za3lpa$(j_2);
              if (nodesCorrespondingToConditionFacts[j_2].isEmpty()) {
                substitutionInstance.isApplicable = false;
                substitutionInstance.dropExtraVarsAfter_za3lpa$(startGeneratingResultTime_0);
                return;
              }
              var matchingFactIndex_0 = first_0(nodesCorrespondingToConditionFacts[j_2]);
              if (matchingFactIndex_0 >= actualFacts_0.size) {
                substitutionInstance.varNamesTimeStorage.addVarName_i6eyy4$(additionalFactUsedVarName, SubstitutionInstanceVarType$INFO_getInstance());
                tmp$_20 = additionalFacts.get_za3lpa$(matchingFactIndex_0 - actualFacts_0.size | 0);
              }
               else {
                tmp$_20 = actualFacts_0.get_za3lpa$(matchingFactIndex_0);
              }
              var actualFact_2 = tmp$_20;
              substitutionInstance.isApplicable = true;
              var startFactCheckingTime_1 = substitutionInstance.varNamesTimeStorage.time;
              this.checkCondition_ql5wdj$(actualFact_2, conditionFact_2, substitutionInstance, nameArgsMap, checkOutMainLineNodePart);
              if (!substitutionInstance.isApplicable) {
                substitutionInstance.dropExtraVarsAfter_za3lpa$(startFactCheckingTime_1);
                nodesCorrespondingToConditionFacts[j_2].remove_11rb$(matchingFactIndex_0);
                continue;
              }
              var tmp$_23;
              for (tmp$_23 = 0; tmp$_23 !== nodesCorrespondingToConditionFacts.length; ++tmp$_23) {
                var element_0 = nodesCorrespondingToConditionFacts[tmp$_23];
                element_0.remove_11rb$(matchingFactIndex_0);
              }
              correspondingIndexes.add_11rb$(new MatchedNode(matchingFactIndex_0, actualFact_2.type()));
              j_2 = j_2 + 1 | 0;
            }
          }

          break loop_label;
      }
    }
  };
  FactSubstitution.prototype.checkLeftCondition_j21732$ = function (factNode, checkOutMainLineNodePart, additionalFacts) {
    var substitutionInstance = new SubstitutionInstance();
    this.checkCondition_ql5wdj$(factNode, this.left, substitutionInstance, void 0, checkOutMainLineNodePart, additionalFacts, substitutionInstance.correspondingIndexes.children);
    substitutionInstance.correspondingIndexes.nodeType = factNode.type();
    substitutionInstance.correspondingIndexes.matchedFactIndex = 0;
    return substitutionInstance;
  };
  function FactSubstitution$findAllPossibleSubstitutionPlaces$lambda() {
    return 'findAllPossibleSubstitutionPlaces in fact: ';
  }
  function FactSubstitution$findAllPossibleSubstitutionPlaces$lambda_0(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel.v;
    };
  }
  function FactSubstitution$findAllPossibleSubstitutionPlaces$lambda_1() {
    return 'actualFacts';
  }
  function FactSubstitution$findAllPossibleSubstitutionPlaces$lambda_2() {
    return 'Applicable substitution found ';
  }
  FactSubstitution.prototype.findAllPossibleSubstitutionPlaces_0 = function (root, checkOutMainLineNodePart, additionalFacts, result) {
    var tmp$;
    log_1.addMessageWithFactShort_d1xyjh$(FactSubstitution$findAllPossibleSubstitutionPlaces$lambda, root, void 0, void 0, 1);
    var currentLogLevel = {v: log_1.currentLevel};
    log_1.addMessage_cte53e$(FactSubstitution$findAllPossibleSubstitutionPlaces$lambda_0(currentLogLevel), void 0, currentLogLevel.v);
    if (root.type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() || root.type() === ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance()) {
      var actualFacts = checkOutMainLineNodePart ? getOutFactsFromMainLineNode(root) : getInFactsFromMainLineNode(root);
      log_1.logSystemFacts_s4ig9i$(root.type(), actualFacts, FactSubstitution$findAllPossibleSubstitutionPlaces$lambda_1);
      tmp$ = actualFacts.size;
      for (var i = 0; i < tmp$; i++) {
        this.findAllPossibleSubstitutionPlaces_0(actualFacts.get_za3lpa$(i), checkOutMainLineNodePart, additionalFacts, result);
        var substitutionInstance = this.checkLeftCondition_j21732$(actualFacts.get_za3lpa$(i), checkOutMainLineNodePart, additionalFacts);
        if (substitutionInstance.isApplicable) {
          substitutionInstance.logValue_2gmaed$(FactSubstitution$findAllPossibleSubstitutionPlaces$lambda_2, void 0, currentLogLevel.v);
          result.add_11rb$(new FactSubstitutionPlace(actualFacts, i, substitutionInstance, checkOutMainLineNodePart, actualFacts.get_za3lpa$(i)));
        }
      }
    }
  };
  function FactSubstitution$findAllPossibleSubstitutionPlaces$lambda_3() {
    return 'search places for transformation';
  }
  FactSubstitution.prototype.findAllPossibleSubstitutionPlaces_fyc0t6$ = function (root, checkOutMainLineNodePart, additionalFacts) {
    var result = ArrayList_init();
    log_1.addMessage_cte53e$(FactSubstitution$findAllPossibleSubstitutionPlaces$lambda_3);
    this.findAllPossibleSubstitutionPlaces_0(root, checkOutMainLineNodePart, additionalFacts, result);
    return result;
  };
  FactSubstitution.prototype.applySubstitution_7ayt38$ = function (substitutionPlaces, additionalFacts, additionalFactUsed) {
    var tmp$;
    tmp$ = substitutionPlaces.iterator();
    while (tmp$.hasNext()) {
      var substitutionPlace = tmp$.next();
      var newValue = this.checkAndApply_fyc0t6$(substitutionPlace.parentChain.get_za3lpa$(substitutionPlace.replaceableNodeIndex), substitutionPlace.checkOutMainLineNodePart, additionalFacts);
      if (newValue != null) {
        substitutionPlace.parentChain.set_wxm5ur$(substitutionPlace.replaceableNodeIndex, newValue);
        var $receiver = substitutionPlace.substitutionInstance.varNamesTimeStorage.varsList;
        var destination = ArrayList_init();
        var tmp$_0;
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (element.type === SubstitutionInstanceVarType$INFO_getInstance() && equals(element.name, additionalFactUsedVarName))
            destination.add_11rb$(element);
        }
        if (!destination.isEmpty() && additionalFactUsed.isEmpty()) {
          additionalFactUsed.add_11rb$(true);
        }
      }
    }
  };
  FactSubstitution.prototype.applySubstitutionByBitMask_anc5oi$ = function (substitutionPlaces, bitMask, additionalFactUsed) {
    var tmp$, tmp$_0;
    tmp$ = substitutionPlaces.size;
    for (var i = 0; i < tmp$; i++) {
      var substitutionPlace = substitutionPlaces.get_za3lpa$(i);
      substitutionPlace.parentChain.set_wxm5ur$(substitutionPlace.replaceableNodeIndex, substitutionPlace.originalValue);
    }
    tmp$_0 = substitutionPlaces.size;
    for (var i_0 = 0; i_0 < tmp$_0; i_0++) {
      if ((bitMask & 1 << i_0) === 0)
        continue;
      var substitutionPlace_0 = substitutionPlaces.get_za3lpa$(i_0);
      var newValue = this.applyRight_fgvgxd$(substitutionPlace_0.substitutionInstance, !substitutionPlace_0.checkOutMainLineNodePart, this.right, substitutionPlace_0.parentChain.get_za3lpa$(substitutionPlace_0.replaceableNodeIndex));
      if (newValue != null) {
        substitutionPlace_0.parentChain.set_wxm5ur$(substitutionPlace_0.replaceableNodeIndex, newValue);
        var $receiver = substitutionPlace_0.substitutionInstance.varNamesTimeStorage.varsList;
        var destination = ArrayList_init();
        var tmp$_1;
        tmp$_1 = $receiver.iterator();
        while (tmp$_1.hasNext()) {
          var element = tmp$_1.next();
          if (element.type === SubstitutionInstanceVarType$INFO_getInstance() && equals(element.name, additionalFactUsedVarName))
            destination.add_11rb$(element);
        }
        if (!destination.isEmpty() && additionalFactUsed.isEmpty()) {
          additionalFactUsed.add_11rb$(true);
        }
      }
    }
  };
  FactSubstitution.prototype.applyRight_fgvgxd$ = function (substitutionInstance, checkOutMainLineNodePart, right, factNode) {
    if (factNode === void 0)
      factNode = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25, tmp$_26;
    if (right.type() === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance() || right.type() === ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance()) {
      var result = right.copyNode();
      var resultFacts = !checkOutMainLineNodePart ? getOutFactsFromMainLineNode(result) : getInFactsFromMainLineNode(result);
      var rightFacts = getInFactsFromMainLineNode(right);
      tmp$ = rightFacts.iterator();
      while (tmp$.hasNext()) {
        var fact = tmp$.next();
        switch (fact.type().name) {
          case 'MAIN_LINE_AND_NODE':
          case 'MAIN_LINE_OR_NODE':
            tmp$_13 = this.applyRight_fgvgxd$(substitutionInstance, checkOutMainLineNodePart, fact);
            break;
          case 'EXPRESSION_COMPARISON':
            var res = Kotlin.isType(tmp$_0 = fact.copyNode(), ExpressionComparison) ? tmp$_0 : throwCCE();
            var leftDesignationName = (Kotlin.isType(tmp$_1 = fact, ExpressionComparison) ? tmp$_1 : throwCCE()).leftExpression.getDesignation();
            var rightDesignationName = fact.rightExpression.getDesignation();
            if (isBlank(leftDesignationName) || substitutionInstance.getComparableVar_61zpoe$(leftDesignationName) == null) {
              tmp$_2 = ExpressionSubstitution$Companion_getInstance().applyRightCompanion_kkx7l8$(substitutionInstance, fact.leftExpression.data);
              if (tmp$_2 == null) {
                return null;
              }
              tmp$_5 = new Expression(void 0, void 0, tmp$_2);
            }
             else {
              tmp$_3 = substitutionInstance.getComparableVar_61zpoe$(leftDesignationName);
              if (tmp$_3 == null) {
                return null;
              }
              tmp$_5 = Kotlin.isType(tmp$_4 = tmp$_3.cloneWithNormalization_1g1bdl$(LinkedHashMap_init_0(), false), Expression) ? tmp$_4 : throwCCE();
            }

            res.leftExpression = tmp$_5;
            if (isBlank(rightDesignationName) || substitutionInstance.getComparableVar_61zpoe$(rightDesignationName) == null) {
              tmp$_6 = ExpressionSubstitution$Companion_getInstance().applyRightCompanion_kkx7l8$(substitutionInstance, fact.rightExpression.data);
              if (tmp$_6 == null) {
                return null;
              }
              tmp$_9 = new Expression(void 0, void 0, tmp$_6);
            }
             else {
              tmp$_7 = substitutionInstance.getComparableVar_61zpoe$(rightDesignationName);
              if (tmp$_7 == null) {
                return null;
              }
              tmp$_9 = Kotlin.isType(tmp$_8 = tmp$_7.cloneWithNormalization_1g1bdl$(LinkedHashMap_init_0(), false), Expression) ? tmp$_8 : throwCCE();
            }

            res.rightExpression = tmp$_9;
            res.identifier = res.computeIdentifier_6taknv$(false);
            tmp$_13 = res;
            break;
          case 'EXPRESSION':
            var designationName = (Kotlin.isType(tmp$_10 = fact, Expression) ? tmp$_10 : throwCCE()).getDesignation();
            if (isBlank(designationName))
              return null;
            tmp$_11 = substitutionInstance.getComparableVar_61zpoe$(designationName);
            if (tmp$_11 == null) {
              return null;
            }

            tmp$_13 = Kotlin.isType(tmp$_12 = tmp$_11.cloneWithNormalization_1g1bdl$(LinkedHashMap_init_0(), false), MainChainPart) ? tmp$_12 : throwCCE();
            break;
          default:tmp$_13 = null;
            break;
        }
        var child = tmp$_13;
        if (child == null) {
          return null;
        }
        resultFacts.add_11rb$(child);
      }
      if (factNode != null && right.type() === substitutionInstance.correspondingIndexes.nodeType) {
        var actualFacts = checkOutMainLineNodePart ? getOutFactsFromMainLineNode(factNode) : getInFactsFromMainLineNode(factNode);
        var $receiver = substitutionInstance.correspondingIndexes.children;
        var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
        var tmp$_27;
        tmp$_27 = $receiver.iterator();
        while (tmp$_27.hasNext()) {
          var item = tmp$_27.next();
          destination.add_11rb$(item.matchedFactIndex);
        }
        var correspondingIndexesSet = toSet(destination);
        tmp$_14 = actualFacts.size;
        for (var i = 0; i < tmp$_14; i++) {
          if (!correspondingIndexesSet.contains_11rb$(i)) {
            resultFacts.add_11rb$(actualFacts.get_za3lpa$(i));
          }
        }
      }
      return Kotlin.isType(tmp$_15 = result, MainChainPart) ? tmp$_15 : throwCCE();
    }
     else if (right.type() === ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance()) {
      var res_0 = Kotlin.isType(tmp$_16 = right.copyNode(), ExpressionComparison) ? tmp$_16 : throwCCE();
      var leftDesignationName_0 = (Kotlin.isType(tmp$_17 = right, ExpressionComparison) ? tmp$_17 : throwCCE()).leftExpression.getDesignation();
      var rightDesignationName_0 = (Kotlin.isType(tmp$_18 = right, ExpressionComparison) ? tmp$_18 : throwCCE()).rightExpression.getDesignation();
      if (isBlank(leftDesignationName_0) || substitutionInstance.getComparableVar_61zpoe$(leftDesignationName_0) == null) {
        tmp$_19 = ExpressionSubstitution$Companion_getInstance().applyRightCompanion_kkx7l8$(substitutionInstance, right.leftExpression.data);
        if (tmp$_19 == null) {
          return null;
        }
        tmp$_22 = new Expression(void 0, void 0, tmp$_19);
      }
       else {
        tmp$_20 = substitutionInstance.getComparableVar_61zpoe$(leftDesignationName_0);
        if (tmp$_20 == null) {
          return null;
        }
        tmp$_22 = Kotlin.isType(tmp$_21 = tmp$_20.cloneWithNormalization_1g1bdl$(LinkedHashMap_init_0(), false), Expression) ? tmp$_21 : throwCCE();
      }
      res_0.leftExpression = tmp$_22;
      if (isBlank(rightDesignationName_0) || substitutionInstance.getComparableVar_61zpoe$(rightDesignationName_0) == null) {
        tmp$_23 = ExpressionSubstitution$Companion_getInstance().applyRightCompanion_kkx7l8$(substitutionInstance, right.rightExpression.data);
        if (tmp$_23 == null) {
          return null;
        }
        tmp$_26 = new Expression(void 0, void 0, tmp$_23);
      }
       else {
        tmp$_24 = substitutionInstance.getComparableVar_61zpoe$(rightDesignationName_0);
        if (tmp$_24 == null) {
          return null;
        }
        tmp$_26 = Kotlin.isType(tmp$_25 = tmp$_24.cloneWithNormalization_1g1bdl$(LinkedHashMap_init_0(), false), Expression) ? tmp$_25 : throwCCE();
      }
      res_0.rightExpression = tmp$_26;
      res_0.identifier = res_0.computeIdentifier_6taknv$(false);
      return res_0;
    }
    return null;
  };
  FactSubstitution.prototype.checkAndApply_fyc0t6$ = function (factNode, checkOutMainLineNodePart, additionalFacts) {
    if (checkOutMainLineNodePart === void 0)
      checkOutMainLineNodePart = true;
    if (additionalFacts === void 0) {
      additionalFacts = emptyList();
    }
    var substitutionInstance = this.checkLeftCondition_j21732$(factNode, checkOutMainLineNodePart, additionalFacts);
    if (substitutionInstance.isApplicable)
      return this.applyRight_fgvgxd$(substitutionInstance, checkOutMainLineNodePart, this.right, factNode);
    else
      return null;
  };
  FactSubstitution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FactSubstitution',
    interfaces: []
  };
  function emptyFactSubstitution() {
    return new FactSubstitution(emptyExpression(), emptyExpression(), void 0, void 0, void 0, '', new FactComparator());
  }
  function TransformationChainParser(originalTransformationChain, nameForRuleDesignationsPossible, functionConfiguration, factsLogicConfiguration, compiledImmediateVariableReplacements, transformationChain, isMathML) {
    if (nameForRuleDesignationsPossible === void 0)
      nameForRuleDesignationsPossible = false;
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration();
    if (factsLogicConfiguration === void 0)
      factsLogicConfiguration = new FactsLogicConfiguration();
    if (compiledImmediateVariableReplacements === void 0) {
      compiledImmediateVariableReplacements = emptyMap();
    }
    if (transformationChain === void 0)
      transformationChain = originalTransformationChain;
    if (isMathML === void 0)
      isMathML = true;
    this.originalTransformationChain = originalTransformationChain;
    this.nameForRuleDesignationsPossible = nameForRuleDesignationsPossible;
    this.functionConfiguration = functionConfiguration;
    this.factsLogicConfiguration = factsLogicConfiguration;
    this.compiledImmediateVariableReplacements = compiledImmediateVariableReplacements;
    this.transformationChain = transformationChain;
    this.isMathML = isMathML;
    this.root = new MainLineAndNode(0, this.transformationChain.length, null);
    this.parserError = null;
    this.somethingUnexpectedCode_0 = 'Something unexpected';
  }
  function TransformationChainParser$ParserState(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function TransformationChainParser$ParserState_initFields() {
    TransformationChainParser$ParserState_initFields = function () {
    };
    TransformationChainParser$ParserState$EXPRESSION_START_instance = new TransformationChainParser$ParserState('EXPRESSION_START', 0);
    TransformationChainParser$ParserState$IN_EXPRESSION_instance = new TransformationChainParser$ParserState('IN_EXPRESSION', 1);
    TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_instance = new TransformationChainParser$ParserState('NOT_IN_EXPRESSION_END', 2);
    TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_instance = new TransformationChainParser$ParserState('IN_END_OF_FOLLOWING_STATEMENT', 3);
    TransformationChainParser$ParserState$AFTER_ROW_END_instance = new TransformationChainParser$ParserState('AFTER_ROW_END', 4);
  }
  var TransformationChainParser$ParserState$EXPRESSION_START_instance;
  function TransformationChainParser$ParserState$EXPRESSION_START_getInstance() {
    TransformationChainParser$ParserState_initFields();
    return TransformationChainParser$ParserState$EXPRESSION_START_instance;
  }
  var TransformationChainParser$ParserState$IN_EXPRESSION_instance;
  function TransformationChainParser$ParserState$IN_EXPRESSION_getInstance() {
    TransformationChainParser$ParserState_initFields();
    return TransformationChainParser$ParserState$IN_EXPRESSION_instance;
  }
  var TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_instance;
  function TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_getInstance() {
    TransformationChainParser$ParserState_initFields();
    return TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_instance;
  }
  var TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_instance;
  function TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance() {
    TransformationChainParser$ParserState_initFields();
    return TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_instance;
  }
  var TransformationChainParser$ParserState$AFTER_ROW_END_instance;
  function TransformationChainParser$ParserState$AFTER_ROW_END_getInstance() {
    TransformationChainParser$ParserState_initFields();
    return TransformationChainParser$ParserState$AFTER_ROW_END_instance;
  }
  TransformationChainParser$ParserState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ParserState',
    interfaces: [Enum]
  };
  function TransformationChainParser$ParserState$values() {
    return [TransformationChainParser$ParserState$EXPRESSION_START_getInstance(), TransformationChainParser$ParserState$IN_EXPRESSION_getInstance(), TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_getInstance(), TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance(), TransformationChainParser$ParserState$AFTER_ROW_END_getInstance()];
  }
  TransformationChainParser$ParserState.values = TransformationChainParser$ParserState$values;
  function TransformationChainParser$ParserState$valueOf(name) {
    switch (name) {
      case 'EXPRESSION_START':
        return TransformationChainParser$ParserState$EXPRESSION_START_getInstance();
      case 'IN_EXPRESSION':
        return TransformationChainParser$ParserState$IN_EXPRESSION_getInstance();
      case 'NOT_IN_EXPRESSION_END':
        return TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_getInstance();
      case 'IN_END_OF_FOLLOWING_STATEMENT':
        return TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance();
      case 'AFTER_ROW_END':
        return TransformationChainParser$ParserState$AFTER_ROW_END_getInstance();
      default:throwISE('No enum constant mathhelper.twf.factstransformations.TransformationChainParser.ParserState.' + name);
    }
  }
  TransformationChainParser$ParserState.valueOf_61zpoe$ = TransformationChainParser$ParserState$valueOf;
  TransformationChainParser.prototype.normalisePositionInParseError_0 = function (parserError) {
    return parserError;
  };
  TransformationChainParser.prototype.parse = function () {
    var error = this.splitOnMainLevelParts_0(this.root);
    if (error != null)
      return this.normalisePositionInParseError_0(error);
    return null;
  };
  function TransformationChainParser$logParserStateChange$lambda(closure$parserState, closure$oldValue) {
    return function () {
      return "parserState changed to '" + closure$parserState.toString() + "' from '" + closure$oldValue.toString() + "'";
    };
  }
  TransformationChainParser.prototype.logParserStateChange_0 = function (parserState, logLevel, oldValue) {
    log_1.addMessage_cte53e$(TransformationChainParser$logParserStateChange$lambda(parserState, oldValue), void 0, logLevel);
  };
  TransformationChainParser.prototype.assignAndLogParserState_0 = function (parserState, logLevel, currentValue) {
    if (parserState !== currentValue) {
      this.logParserStateChange_0(parserState, logLevel, currentValue);
    }
    return parserState;
  };
  function TransformationChainParser$SemanticRangeShift(rangeStart, rangeEnd, start, end) {
    if (rangeStart === void 0)
      rangeStart = 0;
    if (rangeEnd === void 0)
      rangeEnd = 0;
    if (start === void 0)
      start = 0;
    if (end === void 0)
      end = 0;
    this.rangeStart = rangeStart;
    this.rangeEnd = rangeEnd;
    this.start = start;
    this.end = end;
  }
  TransformationChainParser$SemanticRangeShift.prototype.addTagShift_vux9f0$ = function (openTagLen, closeTagLen) {
    this.start = this.start + openTagLen | 0;
    this.end = this.end + closeTagLen | 0;
  };
  TransformationChainParser$SemanticRangeShift.prototype.currentShiftKeepsSemantic_vux9f0$ = function (start, end) {
    return start <= (this.rangeStart + this.start | 0) && end >= (this.rangeEnd + this.end | 0);
  };
  TransformationChainParser$SemanticRangeShift.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SemanticRangeShift',
    interfaces: []
  };
  TransformationChainParser$SemanticRangeShift.prototype.component1 = function () {
    return this.rangeStart;
  };
  TransformationChainParser$SemanticRangeShift.prototype.component2 = function () {
    return this.rangeEnd;
  };
  TransformationChainParser$SemanticRangeShift.prototype.component3 = function () {
    return this.start;
  };
  TransformationChainParser$SemanticRangeShift.prototype.component4 = function () {
    return this.end;
  };
  TransformationChainParser$SemanticRangeShift.prototype.copy_tjonv8$ = function (rangeStart, rangeEnd, start, end) {
    return new TransformationChainParser$SemanticRangeShift(rangeStart === void 0 ? this.rangeStart : rangeStart, rangeEnd === void 0 ? this.rangeEnd : rangeEnd, start === void 0 ? this.start : start, end === void 0 ? this.end : end);
  };
  TransformationChainParser$SemanticRangeShift.prototype.toString = function () {
    return 'SemanticRangeShift(rangeStart=' + Kotlin.toString(this.rangeStart) + (', rangeEnd=' + Kotlin.toString(this.rangeEnd)) + (', start=' + Kotlin.toString(this.start)) + (', end=' + Kotlin.toString(this.end)) + ')';
  };
  TransformationChainParser$SemanticRangeShift.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.rangeStart) | 0;
    result = result * 31 + Kotlin.hashCode(this.rangeEnd) | 0;
    result = result * 31 + Kotlin.hashCode(this.start) | 0;
    result = result * 31 + Kotlin.hashCode(this.end) | 0;
    return result;
  };
  TransformationChainParser$SemanticRangeShift.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.rangeStart, other.rangeStart) && Kotlin.equals(this.rangeEnd, other.rangeEnd) && Kotlin.equals(this.start, other.start) && Kotlin.equals(this.end, other.end)))));
  };
  function TransformationChainParser$splitOnMainLevelParts$lambda() {
    return 'parsing part ';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_0() {
    return ' : ';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_1() {
    return '';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_2(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel;
    };
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_3() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_4() {
    return "comment found and parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_5() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_6() {
    return "whitespace found and parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_7() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_8() {
    return "math_tag found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_9() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_10(it) {
    return unboxChar(it) !== 62;
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_11() {
    return "math_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_12() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_13() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_14() {
    return "math_closing_tag found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_15() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_16() {
    return 'currentPartStartPosition < currentPosition; parseExpressionComparisonOrExpressionChainFromTransformationChain';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_17(it) {
    return unboxChar(it) !== 62;
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_18() {
    return "math_closing_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_19() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_20() {
    return "mtable_closing_tag found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_21() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_22(it) {
    return unboxChar(it) !== 62;
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_23() {
    return "mtable_closing_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_24() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_25() {
    return "mo_open_tag found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_26() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_27() {
    return "fact_divider following_statement found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_28() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_29() {
    return 'currentPartStartPosition < currentPosition; parseExpressionComparisonOrExpressionChainFromTransformationChain';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_30() {
    return "fact_divider following_statement parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_31() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_32() {
    return 'waitingForFollowingSignDoubling';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_33() {
    return "fact_divider_details_mo found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_34() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_35() {
    return "fact_divider_details_mo parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_36() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_37() {
    return 'waitingForFollowingSignDoubling';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_38() {
    return "fact_divider_details_mfenced found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_39() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_40() {
    return "fact_divider_details_mfenced parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_41() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_42() {
    return 'waitingForFollowingSignDoubling';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_43() {
    return "fact_divider_details rule_pointer found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_44() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_45() {
    return "RulePointer '''";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_46() {
    return "''' parsed";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_47() {
    return "fact_divider_details rule_pointer parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_48() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_49() {
    return 'waitingForFollowingSignDoubling';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_50() {
    return "second following_statement part parsing started; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_51() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_52() {
    return "second following_statement part parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_53() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_54() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_55() {
    return "mo[ found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_56() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_57() {
    return "mo[ parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_58() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_59() {
    return "rule_identified; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_60() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_61() {
    return "rule parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_62() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_63() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_64() {
    return "signsPointersOnNotEndedExpression '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_65() {
    return "' found and parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_66() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_67() {
    return "parserState != ParserState.NOT_IN_EXPRESSION_END; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_68() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_69() {
    return "mspace_tag_linebreak_newline found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_70() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_71() {
    return 'currentPartStartPosition < currentPosition; parseExpressionComparisonOrExpressionChainFromTransformationChain';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_72() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_73() {
    return 'currentMainLineNode.parent != null; currentMainLineNode.addStartNewFactChain() called';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_74() {
    return "mspace_tag_linebreak_newline parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_75() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_76() {
    return "mtd_mtr_closing_tag found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_77() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_78() {
    return 'parserState != ParserState.IN_END_OF_FOLLOWING_STATEMENT && currentPartStartPosition < currentPosition; parseExpressionComparisonOrExpressionChainFromTransformationChain';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_79() {
    return "mtd_mtr_closing_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_80() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_81() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_82() {
    return "mfenced_closing_tag found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_83() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_84() {
    return 'parserState != ParserState.IN_END_OF_FOLLOWING_STATEMENT && currentPartStartPosition < currentPosition; parseExpressionComparisonOrExpressionChainFromTransformationChain';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_85() {
    return "currentPosition == currentMainLineNode.endPosition; currentMainLineNode.parent is '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_86() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_87() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_88() {
    return "mfenced_closing_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_89() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_90() {
    return "actual_tag '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_91() {
    return "' found; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_92() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_93(it) {
    return it.key + "='" + it.value + "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_94() {
    return "extracted tag_data: '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_95() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_96() {
    return "tagData[name] == mfenced && tagData[close] == ''";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_97() {
    return 'currentPartStartPosition < currentPosition; parseExpressionComparisonOrExpressionChainFromTransformationChain';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_98() {
    return "actual_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_99() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_100() {
    return "internalEnd (closing_mfenced_tag) = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_101() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_102() {
    return "MainLineAndNode AND child_created 'from ";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_103() {
    return ' to ';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_104() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_105() {
    return "MainLineOrNode OR child_created 'from ";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_106() {
    return ' to ';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_107() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_108() {
    return 'currentMainLineNode.addExpressionComparisonFact() called; switch_to_child_node';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_109() {
    return "tagData[name] == mfenced && tagData[close] == '' && tagData[open] == ''";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_110() {
    return 'currentPartStartPosition < currentPosition; parseExpressionComparisonOrExpressionChainFromTransformationChain';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_111() {
    return "actual_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_112() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_113() {
    return 'parserState == ParserState.EXPRESSION_START && currentPartStartPosition < currentPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_114() {
    return "internalEnd (closing_mfenced_tag) = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_115() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_116() {
    return "rule parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_117() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_118() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_119() {
    return "actual_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_120() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_121() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_122() {
    return "actual_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_123() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_124() {
    return 'parserState == ParserState.AFTER_ROW_END';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_125() {
    return "mtd_mtr_tag found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_126() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_127() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_128() {
    return 'currentMainLineNode.parent != null; currentMainLineNode.addStartNewFactChain() called';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_129() {
    return "mtd_mtr_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_130() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_131() {
    return "mfenced_closing_tag found at position = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_132() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_133() {
    return "currentPosition == currentMainLineNode.endPosition; currentMainLineNode.parent is '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_134() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_135() {
    return 'currentPartStartPosition';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_136() {
    return "mfenced_closing_tag parsed; currentPosition = '";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_137() {
    return "'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_138() {
    return "exit from 'while (currentPosition < mainLineNode.endPosition)'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_139() {
    return 'parserState != ParserState.IN_END_OF_FOLLOWING_STATEMENT';
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_140() {
    return "currentPartStartPosition:'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_141() {
    return "' < currentPosition:'";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_142() {
    return "'; parseExpressionComparisonOrExpressionChainFromTransformationChain";
  }
  function TransformationChainParser$splitOnMainLevelParts$lambda_143() {
    return 'parsed fact: ';
  }
  TransformationChainParser.prototype.splitOnMainLevelParts_0 = function (mainLineNode) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    log_1.add_jcldl0$(mainLineNode.startPosition, mainLineNode.endPosition, TransformationChainParser$splitOnMainLevelParts$lambda, TransformationChainParser$splitOnMainLevelParts$lambda_0, TransformationChainParser$splitOnMainLevelParts$lambda_1, void 0, 1);
    var currentLogLevel = log_1.currentLevel;
    log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_2(currentLogLevel), void 0, currentLogLevel);
    var parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$EXPRESSION_START_getInstance(), currentLogLevel, TransformationChainParser$ParserState$EXPRESSION_START_getInstance());
    var currentMainLineNode = mainLineNode;
    var currentPosition = mainLineNode.startPosition;
    var currentPartStartPosition = log_1.assignAndLog_746w4o$(mainLineNode.startPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_3);
    var semanticRangeShift = new TransformationChainParser$SemanticRangeShift(mainLineNode.startPosition, mainLineNode.endPosition);
    while (currentPosition < mainLineNode.endPosition) {
      if (remainingExpressionStartsWith(StringExtension$Companion_getInstance().openCommentShort, this.transformationChain, currentPosition) || remainingExpressionStartsWith(StringExtension$Companion_getInstance().openCommentMathML, this.transformationChain, currentPosition)) {
        var commentStartPosition = currentPosition;
        currentPosition = currentPosition + 2 | 0;
        while (currentPosition < mainLineNode.endPosition && !(remainingExpressionStartsWith(StringExtension$Companion_getInstance().closeCommentShort, this.transformationChain, currentPosition) || remainingExpressionStartsWith(StringExtension$Companion_getInstance().closeCommentMathML, this.transformationChain, currentPosition))) {
          currentPosition = currentPosition + 1 | 0;
        }
        var tmp$_8;
        tmp$_8 = currentPosition;
        var tmp$_9;
        if (currentPosition < mainLineNode.endPosition && remainingExpressionStartsWith(StringExtension$Companion_getInstance().closeCommentShort, this.transformationChain, currentPosition)) {
          tmp$_9 = StringExtension$Companion_getInstance().closeCommentShort.length;
        }
         else if (currentPosition < mainLineNode.endPosition && remainingExpressionStartsWith(StringExtension$Companion_getInstance().closeCommentMathML, this.transformationChain, currentPosition)) {
          tmp$_9 = StringExtension$Companion_getInstance().closeCommentMathML.length;
        }
         else
          tmp$_9 = 0;
        currentPosition = tmp$_8 + tmp$_9 | 0;
        log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_4, TransformationChainParser$splitOnMainLevelParts$lambda_5, currentLogLevel);
        semanticRangeShift.addTagShift_vux9f0$(currentPosition - commentStartPosition | 0, 0);
        var tmp$_10 = this.transformationChain.substring(0, commentStartPosition) + repeat(' ', currentPosition - commentStartPosition | 0);
        var $receiver = this.transformationChain;
        var startIndex = currentPosition;
        var endIndex = this.transformationChain.length;
        this.transformationChain = tmp$_10 + $receiver.substring(startIndex, endIndex);
        continue;
      }
      if (remainingExpressionStartsWith(StringExtension$Companion_getInstance().newWhiteSpace, this.transformationChain, currentPosition)) {
        currentPosition = currentPosition + StringExtension$Companion_getInstance().newWhiteSpace.length | 0;
        log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_6, TransformationChainParser$splitOnMainLevelParts$lambda_7, currentLogLevel);
        semanticRangeShift.addTagShift_vux9f0$(StringExtension$Companion_getInstance().newWhiteSpace.length, 0);
        continue;
      }
      if (isWhitespace(this.transformationChain.charCodeAt(currentPosition))) {
        currentPosition = currentPosition + 1 | 0;
        semanticRangeShift.addTagShift_vux9f0$(1, 0);
        continue;
      }
      if (remainingExpressionStartsWith('<math', this.transformationChain, currentPosition)) {
        log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_8, TransformationChainParser$splitOnMainLevelParts$lambda_9, currentLogLevel);
        var currentPositionStamp = currentPosition;
        currentPosition = skipFromRemainingExpressionWhile(TransformationChainParser$splitOnMainLevelParts$lambda_10, this.transformationChain, currentPosition);
        currentPosition = currentPosition + 1 | 0;
        log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_11, TransformationChainParser$splitOnMainLevelParts$lambda_12, currentLogLevel);
        currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_13);
        semanticRangeShift.addTagShift_vux9f0$(currentPosition - currentPositionStamp | 0, 7);
        continue;
      }
       else if (remainingExpressionStartsWith('<\/math', this.transformationChain, currentPosition)) {
        log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_14, TransformationChainParser$splitOnMainLevelParts$lambda_15, currentLogLevel);
        if (parserState !== TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance()) {
          if (currentPartStartPosition < currentPosition) {
            log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_16, void 0, currentLogLevel);
            if (this.parseExpressionComparisonOrExpressionChainFromTransformationChain_0(currentPartStartPosition, currentPosition, currentMainLineNode, semanticRangeShift.currentShiftKeepsSemantic_vux9f0$(currentPartStartPosition, currentPosition)) == null)
              if (!equals(ensureNotNull(this.parserError).description, this.somethingUnexpectedCode_0))
                return this.parserError;
          }
          parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance(), currentLogLevel, parserState);
        }
        currentPosition = skipFromRemainingExpressionWhile(TransformationChainParser$splitOnMainLevelParts$lambda_17, this.transformationChain, currentPosition);
        currentPosition = currentPosition + 1 | 0;
        log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_18, TransformationChainParser$splitOnMainLevelParts$lambda_19, currentLogLevel);
        continue;
      }
       else if (remainingExpressionStartsWith('<\/mtable', this.transformationChain, currentPosition)) {
        log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_20, TransformationChainParser$splitOnMainLevelParts$lambda_21, currentLogLevel);
        currentPosition = skipFromRemainingExpressionWhile(TransformationChainParser$splitOnMainLevelParts$lambda_22, this.transformationChain, currentPosition);
        currentPosition = currentPosition + 1 | 0;
        log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_23, TransformationChainParser$splitOnMainLevelParts$lambda_24, currentLogLevel);
        continue;
      }
      if (parserState === TransformationChainParser$ParserState$IN_EXPRESSION_getInstance() || parserState === TransformationChainParser$ParserState$EXPRESSION_START_getInstance() || parserState === TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance() || parserState === TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_getInstance()) {
        if (remainingExpressionStartsWith('<mo>', this.transformationChain, currentPosition)) {
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_25, TransformationChainParser$splitOnMainLevelParts$lambda_26, currentLogLevel);
          var newCurrentPosition = currentPosition + 4 | 0;
          if (remainingExpressionStartsWith('<mo>=<\/mo><mo>&gt;<\/mo><mspace linebreak="newline"/>', this.transformationChain, currentPosition) || remainingExpressionStartsWith('<mo>=<\/mo><mo>&gt;<\/mo>', this.transformationChain, currentPosition) || remainingExpressionStartsWith('<mo>&#x21D2;<\/mo>', this.transformationChain, currentPosition)) {
            log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_27, TransformationChainParser$splitOnMainLevelParts$lambda_28, currentLogLevel);
            if (currentPartStartPosition < currentPosition) {
              log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_29, void 0, currentLogLevel);
              if (this.parseExpressionComparisonOrExpressionChainFromTransformationChain_0(currentPartStartPosition, currentPosition, currentMainLineNode, semanticRangeShift.currentShiftKeepsSemantic_vux9f0$(currentPartStartPosition, currentPosition)) == null)
                return this.parserError;
            }
            var tmp$_11;
            tmp$_11 = currentPosition;
            var tmp$_12;
            if (remainingExpressionStartsWith('<mo>&#x21D2;<\/mo>', this.transformationChain, currentPosition)) {
              tmp$_12 = 17;
            }
             else if (remainingExpressionStartsWith('<mo>=<\/mo><mo>&gt;<\/mo>', this.transformationChain, currentPosition)) {
              tmp$_12 = 23;
            }
             else {
              tmp$_12 = 52;
            }
            currentPosition = tmp$_11 + tmp$_12 | 0;
            log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_30, TransformationChainParser$splitOnMainLevelParts$lambda_31, currentLogLevel);
            var waitingForFollowingSignDoubling = log_1.assignAndLog_746w4o$(false, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_32);
            if (remainingExpressionStartsWith('<mo>[<\/mo>', this.transformationChain, currentPosition)) {
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_33, TransformationChainParser$splitOnMainLevelParts$lambda_34, currentLogLevel);
              currentPosition = currentPosition + 10 | 0;
              var internalEnd = skipFromRemainingExpressionWhileClosingBracketNotFound('<mo>]<\/mo>', '<mo>[<\/mo>', this.transformationChain, currentPosition);
              this.parseRule_0(currentPosition, internalEnd, Kotlin.isType(tmp$ = currentMainLineNode.getActualChain(), MutableList) ? tmp$ : throwCCE(), currentMainLineNode);
              currentPosition = internalEnd + 10 | 0;
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_35, TransformationChainParser$splitOnMainLevelParts$lambda_36, currentLogLevel);
              waitingForFollowingSignDoubling = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_37);
            }
             else if (remainingExpressionStartsWith('<mfenced open="[" close="]">', this.transformationChain, currentPosition)) {
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_38, TransformationChainParser$splitOnMainLevelParts$lambda_39, currentLogLevel);
              currentPosition = currentPosition + 28 | 0;
              var internalEnd_0 = skipFromRemainingExpressionWhileClosingTagNotFound('mfenced', this.transformationChain, currentPosition);
              this.parseRule_0(currentPosition, internalEnd_0, Kotlin.isType(tmp$_0 = currentMainLineNode.getActualChain(), MutableList) ? tmp$_0 : throwCCE(), currentMainLineNode);
              currentPosition = internalEnd_0 + 10 | 0;
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_40, TransformationChainParser$splitOnMainLevelParts$lambda_41, currentLogLevel);
              waitingForFollowingSignDoubling = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_42);
            }
             else if (remainingExpressionStartsWith('<mtext>', this.transformationChain, currentPosition)) {
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_43, TransformationChainParser$splitOnMainLevelParts$lambda_44, currentLogLevel);
              var ruleLinkNameStartPosition = currentPosition;
              currentPosition = currentPosition + 7 | 0;
              var internalEnd_1 = skipFromRemainingExpressionWhileClosingTagNotFound('mtext', this.transformationChain, currentPosition);
              var $receiver_0 = this.transformationChain;
              var startIndex_0 = currentPosition;
              var endIndex_0 = internalEnd_1 - 1 | 0;
              var ruleNameLink = $receiver_0.substring(startIndex_0, endIndex_0);
              currentPosition = internalEnd_1 + 8 | 0;
              currentMainLineNode.getActualChain().add_11rb$(new RulePointer(ruleLinkNameStartPosition, currentPosition, currentMainLineNode, ruleNameLink));
              log_1.add_ww6hhz$(last(currentMainLineNode.getActualChain()), TransformationChainParser$splitOnMainLevelParts$lambda_45, TransformationChainParser$splitOnMainLevelParts$lambda_46, currentLogLevel);
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_47, TransformationChainParser$splitOnMainLevelParts$lambda_48, currentLogLevel);
              waitingForFollowingSignDoubling = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_49);
            }
            if (waitingForFollowingSignDoubling) {
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_50, TransformationChainParser$splitOnMainLevelParts$lambda_51, currentLogLevel);
              if (remainingExpressionStartsWith('<mo>&#x21D2;<\/mo>', this.transformationChain, currentPosition)) {
                tmp$_1 = '<mo>&#x21D2;<\/mo>';
              }
               else if (remainingExpressionStartsWith('<mo>=<\/mo><mo>&gt;<\/mo>', this.transformationChain, currentPosition)) {
                tmp$_1 = '<mo>=<\/mo><mo>&gt;<\/mo>';
              }
               else if (remainingExpressionStartsWith('<mo>=<\/mo><mo>&gt;<\/mo><mspace linebreak="newline"/>', this.transformationChain, currentPosition)) {
                tmp$_1 = '<mo>=<\/mo><mo>&gt;<\/mo><mspace linebreak="newline"/>';
              }
               else
                return new ParserError(currentPosition, 'Following statement duplication expected', currentPosition);
              var currentSplittingSign = tmp$_1;
              currentPosition = currentPosition + currentSplittingSign.length | 0;
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_52, TransformationChainParser$splitOnMainLevelParts$lambda_53, currentLogLevel);
            }
            currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_54);
            parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance(), currentLogLevel, parserState);
            continue;
          }
           else if (remainingExpressionStartsWith('<mo>[<\/mo>', this.transformationChain, currentPosition)) {
            log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_55, TransformationChainParser$splitOnMainLevelParts$lambda_56, currentLogLevel);
            currentPosition = currentPosition + 10 | 0;
            log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_57, TransformationChainParser$splitOnMainLevelParts$lambda_58, currentLogLevel);
            if (parserState === TransformationChainParser$ParserState$EXPRESSION_START_getInstance()) {
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_59, TransformationChainParser$splitOnMainLevelParts$lambda_60, currentLogLevel);
              var internalEnd_2 = skipFromRemainingExpressionWhileClosingBracketNotFound('<mo>]<\/mo>', '<mo>[<\/mo>', this.transformationChain, currentPosition);
              this.parseRule_0(currentPosition, internalEnd_2, Kotlin.isType(tmp$_2 = currentMainLineNode.rules, MutableList) ? tmp$_2 : throwCCE(), currentMainLineNode);
              currentPosition = internalEnd_2 + 10 | 0;
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_61, TransformationChainParser$splitOnMainLevelParts$lambda_62, currentLogLevel);
              currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_63);
              parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$EXPRESSION_START_getInstance(), currentLogLevel, parserState);
            }
            continue;
          }
           else {
            parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$IN_EXPRESSION_getInstance(), currentLogLevel, parserState);
            tmp$_3 = this.factsLogicConfiguration.signsPointersOnNotEndedExpression.iterator();
            while (tmp$_3.hasNext()) {
              var sign = tmp$_3.next();
              if (remainingExpressionStartsWith(sign, this.transformationChain, newCurrentPosition)) {
                if (remainingExpressionStartsWith('<mo>' + sign + '<\/mo>', this.transformationChain, currentPosition)) {
                  currentPosition = currentPosition + ('<mo>' + sign + '<\/mo>').length | 0;
                  log_1.add_jcldl0$(sign, currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_64, TransformationChainParser$splitOnMainLevelParts$lambda_65, TransformationChainParser$splitOnMainLevelParts$lambda_66, currentLogLevel);
                  parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_getInstance(), currentLogLevel, parserState);
                  break;
                }
              }
            }
            if (parserState !== TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_getInstance()) {
              currentPosition = newCurrentPosition;
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_67, TransformationChainParser$splitOnMainLevelParts$lambda_68, currentLogLevel);
            }
            continue;
          }
        }
         else if (remainingExpressionStartsWith('<mspace linebreak="newline"/>', this.transformationChain, currentPosition)) {
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_69, TransformationChainParser$splitOnMainLevelParts$lambda_70, currentLogLevel);
          if (parserState !== TransformationChainParser$ParserState$NOT_IN_EXPRESSION_END_getInstance()) {
            var tmp$_13 = currentPartStartPosition < currentPosition;
            if (tmp$_13) {
              var $receiver_1 = this.transformationChain;
              var startIndex_1 = currentPartStartPosition;
              var endIndex_1 = currentPosition;
              tmp$_13 = !isBlank($receiver_1.substring(startIndex_1, endIndex_1));
            }
            if (tmp$_13) {
              log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_71, void 0, currentLogLevel);
              if (this.parseExpressionComparisonOrExpressionChainFromTransformationChain_0(currentPartStartPosition, currentPosition, currentMainLineNode, semanticRangeShift.currentShiftKeepsSemantic_vux9f0$(currentPartStartPosition, currentPosition)) == null)
                return this.parserError;
            }
            currentPosition = currentPosition + 29 | 0;
            currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_72);
            if (currentMainLineNode.parent != null) {
              currentMainLineNode.addStartNewFactChain();
              log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_73, void 0, currentLogLevel);
            }
            parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$EXPRESSION_START_getInstance(), currentLogLevel, parserState);
          }
           else {
            currentPosition = currentPosition + 29 | 0;
          }
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_74, TransformationChainParser$splitOnMainLevelParts$lambda_75, currentLogLevel);
          continue;
        }
         else if (remainingExpressionStartsWith('<\/mtd><\/mtr>', this.transformationChain, currentPosition)) {
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_76, TransformationChainParser$splitOnMainLevelParts$lambda_77, currentLogLevel);
          if (parserState !== TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance() && currentPartStartPosition < currentPosition) {
            log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_78, void 0, currentLogLevel);
            if (this.parseExpressionComparisonOrExpressionChainFromTransformationChain_0(currentPartStartPosition, currentPosition, currentMainLineNode, semanticRangeShift.currentShiftKeepsSemantic_vux9f0$(currentPartStartPosition, currentPosition)) == null)
              return this.parserError;
          }
          currentPosition = currentPosition + 12 | 0;
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_79, TransformationChainParser$splitOnMainLevelParts$lambda_80, currentLogLevel);
          currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_81);
          parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$AFTER_ROW_END_getInstance(), currentLogLevel, parserState);
          continue;
        }
         else if (remainingExpressionStartsWith('<\/mfenced>', this.transformationChain, currentPosition)) {
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_82, TransformationChainParser$splitOnMainLevelParts$lambda_83, currentLogLevel);
          if (currentPosition === currentMainLineNode.endPosition) {
            currentPosition = currentPosition + 10 | 0;
            if (currentMainLineNode.isEmpty()) {
              if (parserState !== TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance() && currentPartStartPosition < currentPosition) {
                log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_84, void 0, currentLogLevel);
                if (this.parseExpressionComparisonOrExpressionChainFromTransformationChain_0(currentPartStartPosition, currentPosition, currentMainLineNode, semanticRangeShift.currentShiftKeepsSemantic_vux9f0$(currentPartStartPosition, currentPosition)) == null)
                  return this.parserError;
              }
            }
            log_1.add_ww6hhz$(currentMainLineNode.parent == null ? 'null' : 'not null', TransformationChainParser$splitOnMainLevelParts$lambda_85, TransformationChainParser$splitOnMainLevelParts$lambda_86, currentLogLevel);
            tmp$_4 = currentMainLineNode.parent;
            if (tmp$_4 == null) {
              return new ParserError(currentPosition, 'Unexpected system closing');
            }
            currentMainLineNode = tmp$_4;
            currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_87);
            parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$EXPRESSION_START_getInstance(), currentLogLevel, parserState);
          }
           else {
            currentPosition = currentPosition + 10 | 0;
          }
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_88, TransformationChainParser$splitOnMainLevelParts$lambda_89, currentLogLevel);
          continue;
        }
         else {
          var actualTag = readOpenTagStringIfItPresent(this.transformationChain, currentPosition);
          if (actualTag != null && parserState !== TransformationChainParser$ParserState$IN_EXPRESSION_getInstance()) {
            log_1.add_jcldl0$(actualTag, currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_90, TransformationChainParser$splitOnMainLevelParts$lambda_91, TransformationChainParser$splitOnMainLevelParts$lambda_92, currentLogLevel);
            var tagData = getTagAttributes(actualTag);
            log_1.add_ww6hhz$(joinToString(tagData.entries, void 0, void 0, void 0, void 0, void 0, TransformationChainParser$splitOnMainLevelParts$lambda_93), TransformationChainParser$splitOnMainLevelParts$lambda_94, TransformationChainParser$splitOnMainLevelParts$lambda_95, currentLogLevel);
            if (equals(tagData.get_11rb$('name'), 'mfenced')) {
              if (equals(tagData.get_11rb$('close'), '""')) {
                log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_96, void 0, currentLogLevel);
                if (parserState !== TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance() && parserState !== TransformationChainParser$ParserState$EXPRESSION_START_getInstance() && currentPartStartPosition < currentPosition) {
                  log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_97, void 0, currentLogLevel);
                  if (this.parseExpressionComparisonOrExpressionChainFromTransformationChain_0(currentPartStartPosition, currentPosition, currentMainLineNode, semanticRangeShift.currentShiftKeepsSemantic_vux9f0$(currentPartStartPosition, currentPosition)) == null)
                    return this.parserError;
                }
                currentPosition = currentPosition + actualTag.length | 0;
                log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_98, TransformationChainParser$splitOnMainLevelParts$lambda_99, currentLogLevel);
                var internalEnd_3 = skipFromRemainingExpressionWhileClosingTagNotFound('mfenced', this.transformationChain, currentPosition);
                log_1.add_ww6hhz$(internalEnd_3, TransformationChainParser$splitOnMainLevelParts$lambda_100, TransformationChainParser$splitOnMainLevelParts$lambda_101, currentLogLevel);
                if (equals(tagData.get_11rb$('open'), '"{"')) {
                  log_1.add_jcldl0$(currentPosition, internalEnd_3, TransformationChainParser$splitOnMainLevelParts$lambda_102, TransformationChainParser$splitOnMainLevelParts$lambda_103, TransformationChainParser$splitOnMainLevelParts$lambda_104, currentLogLevel);
                  tmp$_5 = new MainLineAndNode(currentPosition, internalEnd_3, currentMainLineNode);
                }
                 else if (equals(tagData.get_11rb$('open'), '"["')) {
                  log_1.add_jcldl0$(currentPosition, internalEnd_3, TransformationChainParser$splitOnMainLevelParts$lambda_105, TransformationChainParser$splitOnMainLevelParts$lambda_106, TransformationChainParser$splitOnMainLevelParts$lambda_107, currentLogLevel);
                  tmp$_5 = new MainLineOrNode(currentPosition, internalEnd_3, currentMainLineNode);
                }
                 else
                  return new ParserError(currentPosition, 'Undefined system');
                var childMainLineNode = tmp$_5;
                currentMainLineNode.addExpressionComparisonFact_wirlwz$(childMainLineNode);
                log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_108, void 0, currentLogLevel);
                currentMainLineNode = childMainLineNode;
                parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$EXPRESSION_START_getInstance(), currentLogLevel, parserState);
              }
               else if (equals(tagData.get_11rb$('name'), 'mfenced') && equals(tagData.get_11rb$('close'), '"]"') && equals(tagData.get_11rb$('open'), '"["')) {
                log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_109, void 0, currentLogLevel);
                if (parserState === TransformationChainParser$ParserState$EXPRESSION_START_getInstance() && currentPartStartPosition < currentPosition) {
                  log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_110, void 0, currentLogLevel);
                  if (this.parseExpressionComparisonOrExpressionChainFromTransformationChain_0(currentPartStartPosition, currentPosition, currentMainLineNode, semanticRangeShift.currentShiftKeepsSemantic_vux9f0$(currentPartStartPosition, currentPosition)) == null)
                    return this.parserError;
                }
                currentPosition = currentPosition + actualTag.length | 0;
                log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_111, TransformationChainParser$splitOnMainLevelParts$lambda_112, currentLogLevel);
                if (parserState === TransformationChainParser$ParserState$EXPRESSION_START_getInstance() && currentPartStartPosition < currentPosition) {
                  log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_113, void 0, currentLogLevel);
                  var internalEnd_4 = skipFromRemainingExpressionWhileClosingTagNotFound('mfenced', this.transformationChain, currentPosition);
                  log_1.add_ww6hhz$(internalEnd_4, TransformationChainParser$splitOnMainLevelParts$lambda_114, TransformationChainParser$splitOnMainLevelParts$lambda_115, currentLogLevel);
                  this.parseRule_0(currentPosition, internalEnd_4, Kotlin.isType(tmp$_6 = currentMainLineNode.rules, MutableList) ? tmp$_6 : throwCCE(), currentMainLineNode);
                  currentPosition = internalEnd_4 + 10 | 0;
                  log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_116, TransformationChainParser$splitOnMainLevelParts$lambda_117, currentLogLevel);
                  currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_118);
                  parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$EXPRESSION_START_getInstance(), currentLogLevel, parserState);
                }
              }
               else {
                currentPosition = currentPosition + actualTag.length | 0;
              }
            }
             else if (equals(tagData.get_11rb$('name'), 'mtable') || equals(tagData.get_11rb$('name'), 'mtr') || equals(tagData.get_11rb$('name'), 'mtd')) {
              currentPosition = currentPosition + actualTag.length | 0;
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_119, TransformationChainParser$splitOnMainLevelParts$lambda_120, currentLogLevel);
              if (parserState === TransformationChainParser$ParserState$EXPRESSION_START_getInstance()) {
                currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_121);
              }
            }
             else {
              currentPosition = currentPosition + actualTag.length | 0;
              log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_122, TransformationChainParser$splitOnMainLevelParts$lambda_123, currentLogLevel);
            }
            continue;
          }
           else {
            currentPosition = currentPosition + 1 | 0;
            parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$IN_EXPRESSION_getInstance(), currentLogLevel, parserState);
            continue;
          }
        }
      }
       else if (parserState === TransformationChainParser$ParserState$AFTER_ROW_END_getInstance()) {
        log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_124, void 0, currentLogLevel);
        if (remainingExpressionStartsWith('<mtr><mtd>', this.transformationChain, currentPosition)) {
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_125, TransformationChainParser$splitOnMainLevelParts$lambda_126, currentLogLevel);
          currentPosition = currentPosition + 10 | 0;
          currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_127);
          semanticRangeShift.addTagShift_vux9f0$(10, 12);
          if (currentMainLineNode.parent != null) {
            currentMainLineNode.addStartNewFactChain();
            log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_128, void 0, currentLogLevel);
          }
          parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$EXPRESSION_START_getInstance(), currentLogLevel, parserState);
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_129, TransformationChainParser$splitOnMainLevelParts$lambda_130, currentLogLevel);
          continue;
        }
         else if (remainingExpressionStartsWith('<\/mfenced>', this.transformationChain, currentPosition)) {
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_131, TransformationChainParser$splitOnMainLevelParts$lambda_132, currentLogLevel);
          if (currentPosition === currentMainLineNode.endPosition) {
            log_1.add_ww6hhz$(currentMainLineNode.parent == null ? 'null' : 'not null', TransformationChainParser$splitOnMainLevelParts$lambda_133, TransformationChainParser$splitOnMainLevelParts$lambda_134, currentLogLevel);
            tmp$_7 = currentMainLineNode.parent;
            if (tmp$_7 == null) {
              return new ParserError(currentPosition, 'Unexpected system closing');
            }
            currentMainLineNode = tmp$_7;
            currentPosition = currentPosition + 10 | 0;
            currentPartStartPosition = log_1.assignAndLog_746w4o$(currentPosition, currentLogLevel, TransformationChainParser$splitOnMainLevelParts$lambda_135);
            parserState = this.assignAndLogParserState_0(TransformationChainParser$ParserState$EXPRESSION_START_getInstance(), currentLogLevel, parserState);
          }
           else {
            currentPosition = currentPosition + 10 | 0;
          }
          log_1.add_ww6hhz$(currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_136, TransformationChainParser$splitOnMainLevelParts$lambda_137, currentLogLevel);
          continue;
        }
      }
      return new ParserError(currentPosition, 'Unexpected action');
    }
    log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_138, void 0, currentLogLevel);
    if (parserState !== TransformationChainParser$ParserState$IN_END_OF_FOLLOWING_STATEMENT_getInstance()) {
      log_1.addMessage_cte53e$(TransformationChainParser$splitOnMainLevelParts$lambda_139, void 0, currentLogLevel);
      if (currentPartStartPosition < currentPosition) {
        log_1.add_jcldl0$(currentPartStartPosition, currentPosition, TransformationChainParser$splitOnMainLevelParts$lambda_140, TransformationChainParser$splitOnMainLevelParts$lambda_141, TransformationChainParser$splitOnMainLevelParts$lambda_142, currentLogLevel);
        if (this.parseExpressionComparisonOrExpressionChainFromTransformationChain_0(currentPartStartPosition, currentPosition, currentMainLineNode, semanticRangeShift.currentShiftKeepsSemantic_vux9f0$(currentPartStartPosition, currentPosition)) == null)
          if (!equals(ensureNotNull(this.parserError).description, this.somethingUnexpectedCode_0))
            return this.parserError;
      }
    }
    log_1.addMessageWithFactDetail_d1xyjh$(TransformationChainParser$splitOnMainLevelParts$lambda_143, mainLineNode, void 0, currentLogLevel);
    return null;
  };
  function TransformationChainParser$parseRule$lambda() {
    return "parseRule '''";
  }
  function TransformationChainParser$parseRule$lambda_0() {
    return "'''";
  }
  function TransformationChainParser$parseRule$lambda_1(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel;
    };
  }
  function TransformationChainParser$parseRule$lambda_2() {
    return "mrow cropped; currentPosition = '";
  }
  function TransformationChainParser$parseRule$lambda_3() {
    return "', currentEndPosition = '";
  }
  function TransformationChainParser$parseRule$lambda_4() {
    return "'";
  }
  function TransformationChainParser$parseRule$lambda_5() {
    return "ruleName = '";
  }
  function TransformationChainParser$parseRule$lambda_6() {
    return "' parsed; currentPosition = '";
  }
  function TransformationChainParser$parseRule$lambda_7() {
    return "'";
  }
  function TransformationChainParser$parseRule$lambda_8() {
    return 'currentPosition < currentEndPosition; parse rule fact';
  }
  function TransformationChainParser$parseRule$lambda_9() {
    return 'FACT_PARSER_ERROR: ';
  }
  function TransformationChainParser$parseRule$lambda_10() {
    return '';
  }
  function TransformationChainParser$parseRule$lambda_11() {
    return "Rule: '";
  }
  function TransformationChainParser$parseRule$lambda_12() {
    return "' added";
  }
  function TransformationChainParser$parseRule$lambda_13() {
    return "RulePointer: '";
  }
  function TransformationChainParser$parseRule$lambda_14() {
    return "' added";
  }
  function TransformationChainParser$parseRule$lambda_15() {
    return 'BLANK_RULE_POINTER_NAME_ERROR: ';
  }
  function TransformationChainParser$parseRule$lambda_16() {
    return '';
  }
  function TransformationChainParser$parseRule$lambda_17(it) {
    return it.toString();
  }
  function TransformationChainParser$parseRule$lambda_18() {
    return "current ruleChain: '''";
  }
  function TransformationChainParser$parseRule$lambda_19() {
    return "'''";
  }
  TransformationChainParser.prototype.parseRule_0 = function (startPosition, endPosition, ruleChain, parent) {
    var tmp$;
    log_1.add_ww6hhz$(this.transformationChain.substring(startPosition, endPosition), TransformationChainParser$parseRule$lambda, TransformationChainParser$parseRule$lambda_0, void 0, 1);
    var currentLogLevel = log_1.currentLevel;
    log_1.addMessage_cte53e$(TransformationChainParser$parseRule$lambda_1(currentLogLevel), void 0, currentLogLevel);
    var currentPosition = startPosition;
    var currentEndPosition = endPosition;
    if (remainingExpressionStartsWith('<mrow>', this.transformationChain, currentPosition)) {
      currentPosition = currentPosition + 6 | 0;
      currentEndPosition = currentEndPosition - 7 | 0;
      log_1.add_jcldl0$(currentPosition, currentEndPosition, TransformationChainParser$parseRule$lambda_2, TransformationChainParser$parseRule$lambda_3, TransformationChainParser$parseRule$lambda_4, currentLogLevel);
    }
    if (remainingExpressionStartsWith('<mtext>', this.transformationChain, currentPosition)) {
      var nameStartPosition = currentPosition;
      currentPosition = currentPosition + 7 | 0;
      currentPosition = skipFromRemainingExpressionWhileClosingTagNotFound('mtext', this.transformationChain, currentPosition);
      if (elementAt(this.transformationChain, currentPosition - 1 | 0) === 58) {
        var $receiver = this.transformationChain;
        var startIndex = nameStartPosition + 7 | 0;
        var endIndex = currentPosition - 1 | 0;
        var name = $receiver.substring(startIndex, endIndex);
        currentPosition = currentPosition + 8 | 0;
        tmp$ = name;
      }
       else
        tmp$ = '';
    }
     else
      tmp$ = '';
    var ruleName = tmp$;
    log_1.add_jcldl0$(ruleName, currentPosition, TransformationChainParser$parseRule$lambda_5, TransformationChainParser$parseRule$lambda_6, TransformationChainParser$parseRule$lambda_7, currentLogLevel);
    if (currentPosition < currentEndPosition) {
      log_1.addMessage_cte53e$(TransformationChainParser$parseRule$lambda_8, void 0, currentLogLevel);
      var ruleRoot = new MainLineAndNode(currentPosition, currentEndPosition, parent);
      var error = this.splitOnMainLevelParts_0(ruleRoot);
      if (error != null) {
        this.parserError = error;
        log_1.add_ww6hhz$(toString(this.parserError), TransformationChainParser$parseRule$lambda_9, TransformationChainParser$parseRule$lambda_10, currentLogLevel);
        return null;
      }
      ruleChain.add_11rb$(new Rule(startPosition, currentEndPosition, parent, ruleRoot, ruleName));
      log_1.add_ww6hhz$(last(ruleChain).toString(), TransformationChainParser$parseRule$lambda_11, TransformationChainParser$parseRule$lambda_12, currentLogLevel);
    }
     else {
      if (!isBlank(ruleName)) {
        ruleChain.add_11rb$(new RulePointer(startPosition, currentEndPosition, parent, ruleName));
        log_1.add_ww6hhz$(last(ruleChain).toString(), TransformationChainParser$parseRule$lambda_13, TransformationChainParser$parseRule$lambda_14, currentLogLevel);
      }
       else {
        this.parserError = new ParserError(startPosition, 'Unexpected rule end', endPosition);
        log_1.add_ww6hhz$(toString(this.parserError), TransformationChainParser$parseRule$lambda_15, TransformationChainParser$parseRule$lambda_16, currentLogLevel);
        return null;
      }
    }
    log_1.add_ww6hhz$(joinToString(ruleChain, void 0, void 0, void 0, void 0, void 0, TransformationChainParser$parseRule$lambda_17), TransformationChainParser$parseRule$lambda_18, TransformationChainParser$parseRule$lambda_19, currentLogLevel);
    return ruleChain;
  };
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda() {
    return "parseExpressionComparisonOrExpressionChain: '''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_0() {
    return "'''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_1() {
    return 'expressionChainExpected: ';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_2() {
    return '';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_3(closure$currentLogLevel) {
    return function () {
      return 'Current log level: ' + closure$currentLogLevel;
    };
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_4() {
    return 'Splitting_on_parts_started';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda() {
    return "part positions: from '";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_0() {
    return "' to '";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_1() {
    return "'; split by '";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_2() {
    return "'";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_3() {
    return "part string: '''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_4() {
    return "'''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_5() {
    return 'Splitting_on_parts_ended';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_6() {
    return 'ExpressionComparison parsing start';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_7() {
    return "left expression = '''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_8() {
    return "''' parsing started";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_9() {
    return 'EXPRESSION_PARSER_ERROR: ';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_10() {
    return '';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_11() {
    return "left expression = '''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_12() {
    return "''' parsed";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_13() {
    return "right expression = '''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_14() {
    return "''' parsing started";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_15() {
    return 'EXPRESSION_PARSER_ERROR: ';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_16() {
    return '';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_17() {
    return "right expression = '''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_18() {
    return "''' parsed";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_19() {
    return "sign = '";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_20() {
    return "' parsed";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_21() {
    return 'parsed fact:';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_22() {
    return 'currentMainLineNode.addExpressionComparisonFact() called';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_23() {
    return 'unreachable place 2019_01_27_17_33';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_24() {
    return 'currentMainLineNode.addExpressionComparisonFact() called';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_25() {
    return 'ExpressionChain parsing start';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_26() {
    return "part string: '''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_27() {
    return "'''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_28() {
    return "rule link: '";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_29() {
    return "' found and parsed";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_30() {
    return 'fact_divider_details_mo found; parseRule';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_31() {
    return 'fact_divider_details_mfenced found; parseRule';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_32() {
    return 'EXPRESSION_PARSER_ERROR: ';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_33() {
    return '';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_34() {
    return "parsed part expression: '''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_35() {
    return "'''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_36() {
    return "part.splittingSign: '";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_37() {
    return "'";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_38() {
    return 'hasEquality';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_39() {
    return 'hasEquality';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_40() {
    return 'hasLeftMore';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_41() {
    return 'hasEquality';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_42() {
    return 'hasLeftLess';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_43() {
    return 'hasLeftMore';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_44() {
    return 'hasLeftLess';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_45() {
    return 'CHAIN_SIGN_ERROR: ';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_46() {
    return '';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_47() {
    return "result chain: '''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_48() {
    return "'''";
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_49() {
    return 'LESS_THEN_2_PARTS_ERROR: ';
  }
  function TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_50() {
    return '';
  }
  TransformationChainParser.prototype.parseExpressionComparisonOrExpressionChainFromTransformationChain_0 = function (startPosition, endPosition, currentMainLineNode, expressionChainExpected) {
    if (expressionChainExpected === void 0)
      expressionChainExpected = false;
    var tmp$, tmp$_0;
    var significantPart = this.transformationChain.substring(startPosition, endPosition);
    log_1.add_ww6hhz$(significantPart, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_0, void 0, 1);
    var currentLogLevel = log_1.currentLevel;
    log_1.add_ww6hhz$(expressionChainExpected, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_1, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_2, currentLogLevel);
    log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_3(currentLogLevel), void 0, currentLogLevel);
    log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_4, void 0, currentLogLevel);
    var allParts = splitBySubstringOnTopLevel(getAllComparisonTypeSignStrings(this.isMathML), this.transformationChain, startPosition, endPosition);
    var destination = ArrayList_init();
    var tmp$_1;
    tmp$_1 = allParts.iterator();
    while (tmp$_1.hasNext()) {
      var element = tmp$_1.next();
      var tmp$_0_0;
      log_1.add_czegqf$(element.startPosition, element.endPosition, toString(element.splittingSubstring), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_0, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_1, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_2, currentLogLevel);
      var $receiver = this.transformationChain;
      var startIndex = element.startPosition;
      var endIndex = element.endPosition;
      var partString = trimmedMathML($receiver.substring(startIndex, endIndex));
      log_1.add_ww6hhz$(partString, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_3, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda$lambda_4, currentLogLevel);
      if ((tmp$_0_0 = partString.length === 0 ? null : element) != null) {
        destination.add_11rb$(tmp$_0_0);
      }
    }
    var parts = destination;
    log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_5, void 0, currentLogLevel);
    if (parts.size === 2 && !expressionChainExpected) {
      log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_6, void 0, currentLogLevel);
      var $receiver_0 = this.transformationChain;
      var startIndex_0 = parts.get_za3lpa$(0).startPosition;
      var endIndex_0 = parts.get_za3lpa$(0).endPosition;
      var leftPartParser = new ExpressionTreeParser($receiver_0.substring(startIndex_0, endIndex_0), void 0, this.functionConfiguration, this.compiledImmediateVariableReplacements);
      var tmp$_2 = log_1;
      var $receiver_1 = this.transformationChain;
      var startIndex_1 = parts.get_za3lpa$(0).startPosition;
      var endIndex_1 = parts.get_za3lpa$(0).endPosition;
      tmp$_2.add_ww6hhz$($receiver_1.substring(startIndex_1, endIndex_1), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_7, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_8, currentLogLevel);
      var error = leftPartParser.parse();
      if (error != null) {
        this.parserError = new ParserError(error.position + parts.get_za3lpa$(0).startPosition | 0, error.description, parts.get_za3lpa$(0).endPosition);
        log_1.add_ww6hhz$(toString(this.parserError), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_9, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_10, currentLogLevel);
        return null;
      }
      log_1.add_ww6hhz$(leftPartParser.root, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_11, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_12, currentLogLevel);
      var $receiver_2 = this.transformationChain;
      var startIndex_2 = parts.get_za3lpa$(1).startPosition;
      var endIndex_2 = parts.get_za3lpa$(1).endPosition;
      var rightPartParser = new ExpressionTreeParser($receiver_2.substring(startIndex_2, endIndex_2), void 0, this.functionConfiguration, this.compiledImmediateVariableReplacements);
      var tmp$_3 = log_1;
      var $receiver_3 = this.transformationChain;
      var startIndex_3 = parts.get_za3lpa$(1).startPosition;
      var endIndex_3 = parts.get_za3lpa$(1).endPosition;
      tmp$_3.add_ww6hhz$($receiver_3.substring(startIndex_3, endIndex_3), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_13, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_14, currentLogLevel);
      error = rightPartParser.parse();
      if (error != null) {
        this.parserError = new ParserError(error.position + parts.get_za3lpa$(1).startPosition | 0, error.description, parts.get_za3lpa$(1).endPosition);
        log_1.add_ww6hhz$(toString(this.parserError), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_15, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_16, currentLogLevel);
        return null;
      }
      log_1.add_ww6hhz$(rightPartParser.root, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_17, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_18, currentLogLevel);
      var sign = valueFromSignString(ensureNotNull(parts.get_za3lpa$(0).splittingSubstring));
      log_1.add_ww6hhz$(sign, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_19, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_20, currentLogLevel);
      if (this.factsLogicConfiguration.alwaysLetTwoPartsComparisonsAsExpressionComparisons) {
        var result = new ExpressionComparison(startPosition, endPosition, new Expression(parts.get_za3lpa$(0).startPosition, parts.get_za3lpa$(0).endPosition, leftPartParser.root), new Expression(parts.get_za3lpa$(1).startPosition, parts.get_za3lpa$(1).endPosition, rightPartParser.root), sign);
        log_1.addMessageWithFactDetail_d1xyjh$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_21, result, void 0, currentLogLevel);
        currentMainLineNode.addExpressionComparisonFact_wirlwz$(result);
        log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_22, void 0, currentLogLevel);
        return result;
      }
       else {
        log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_23, void 0, currentLogLevel);
        if (!true) {
          var result_0 = new ExpressionComparison(startPosition, endPosition, new Expression(parts.get_za3lpa$(0).startPosition, parts.get_za3lpa$(0).endPosition, leftPartParser.root), new Expression(parts.get_za3lpa$(1).startPosition, parts.get_za3lpa$(1).endPosition, rightPartParser.root), sign);
          currentMainLineNode.addExpressionComparisonFact_wirlwz$(result_0);
          log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_24, void 0, currentLogLevel);
          return result_0;
        }
      }
    }
     else if (parts.size >= 2) {
      log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_25, void 0, currentLogLevel);
      var expressions = ArrayList_init();
      var hasEquality = false;
      var hasLeftMore = false;
      var hasLeftLess = false;
      tmp$ = parts.iterator();
      while (tmp$.hasNext()) {
        var part = tmp$.next();
        var $receiver_4 = this.transformationChain;
        var startIndex_4 = part.startPosition;
        var endIndex_4 = part.endPosition;
        var partString_0 = $receiver_4.substring(startIndex_4, endIndex_4);
        log_1.add_ww6hhz$(partString_0, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_26, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_27, currentLogLevel);
        if (startsWith(partString_0, '<mtext>') && endsWith_0(partString_0, '<\/mtext>')) {
          var endIndex_5 = partString_0.length - 9 | 0;
          var ruleNameLink = partString_0.substring(7, endIndex_5);
          log_1.add_ww6hhz$(ruleNameLink, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_28, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_29, currentLogLevel);
          expressions.add_11rb$(new RulePointer(part.startPosition, part.endPosition, null, ruleNameLink));
        }
         else if (startsWith(partString_0, '<mo>[<\/mo>') && endsWith_0(partString_0, '<mo>]<\/mo>')) {
          log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_30, void 0, currentLogLevel);
          this.parseRule_0(part.startPosition + 10 | 0, part.endPosition - 10 | 0, expressions, null);
        }
         else if (startsWith(partString_0, '<mfenced open="[" close="]">') && endsWith_0(partString_0, '<\/mfenced>')) {
          log_1.addMessage_cte53e$(TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_31, void 0, currentLogLevel);
          this.parseRule_0(part.startPosition + 28 | 0, part.endPosition - 10 | 0, expressions, null);
        }
         else {
          var partParser = new ExpressionTreeParser(partString_0, void 0, this.functionConfiguration, this.compiledImmediateVariableReplacements);
          var error_0 = partParser.parse();
          if (error_0 != null) {
            this.parserError = new ParserError(error_0.position + part.startPosition | 0, error_0.description, part.endPosition);
            log_1.add_ww6hhz$(toString(this.parserError), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_32, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_33, currentLogLevel);
            return null;
          }
          log_1.add_ww6hhz$(partParser.root, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_34, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_35, currentLogLevel);
          log_1.add_ww6hhz$(toString(part.splittingSubstring), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_36, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_37, currentLogLevel);
          if (part.splittingSubstring != null) {
            var sign_0 = valueFromSignString(ensureNotNull(part.splittingSubstring));
            switch (sign_0.name) {
              case 'EQUAL':
                hasEquality = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_38);
                break;
              case 'LEFT_MORE_OR_EQUAL':
                hasEquality = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_39);
                hasLeftMore = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_40);
                break;
              case 'LEFT_LESS_OR_EQUAL':
                hasEquality = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_41);
                hasLeftLess = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_42);
                break;
              case 'LEFT_MORE':
                hasLeftMore = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_43);
                break;
              case 'LEFT_LESS':
                hasLeftLess = log_1.assignAndLog_746w4o$(true, currentLogLevel, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_44);
                break;
            }
          }
          if (hasLeftMore && hasLeftLess) {
            this.parserError = new ParserError(startPosition, "Expression transformation chain cannot contains both signs '<' and '>'", endPosition);
            log_1.add_ww6hhz$(toString(this.parserError), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_45, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_46, currentLogLevel);
            return null;
          }
          expressions.add_11rb$(new Expression(part.startPosition, part.endPosition, partParser.root));
        }
      }
      if (hasEquality) {
        tmp$_0 = hasLeftMore ? ComparisonType$LEFT_MORE_OR_EQUAL_getInstance() : hasLeftLess ? ComparisonType$LEFT_LESS_OR_EQUAL_getInstance() : ComparisonType$EQUAL_getInstance();
      }
       else
        tmp$_0 = hasLeftMore ? ComparisonType$LEFT_MORE_getInstance() : ComparisonType$LEFT_LESS_getInstance();
      var sign_1 = tmp$_0;
      var result_1 = new ExpressionChain(startPosition, endPosition, sign_1, expressions);
      currentMainLineNode.expressionTransformationChains.add_11rb$(result_1);
      log_1.add_ww6hhz$(result_1.toString(), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_47, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_48, currentLogLevel);
      return result_1;
    }
    var actualTag = readOpenTagStringIfItPresent(this.transformationChain, startPosition);
    if (actualTag != null) {
      var tagData = getTagAttributes(actualTag);
      if (endsWith_0(significantPart, '<\/' + toString(tagData.get_11rb$('name')) + '>') && (equals(tagData.get_11rb$('name'), 'mfenced') || equals(tagData.get_11rb$('name'), 'mrow'))) {
        return this.parseExpressionComparisonOrExpressionChainFromTransformationChain_0(startPosition + actualTag.length | 0, endPosition - ('<\/' + toString(tagData.get_11rb$('name')) + '>').length | 0, currentMainLineNode, expressionChainExpected);
      }
    }
    this.parserError = new ParserError(startPosition, this.somethingUnexpectedCode_0, endPosition);
    log_1.add_ww6hhz$(toString(this.parserError), TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_49, TransformationChainParser$parseExpressionComparisonOrExpressionChainFromTransformationChain$lambda_50, currentLogLevel);
    return null;
  };
  TransformationChainParser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TransformationChainParser',
    interfaces: []
  };
  function MessageType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function MessageType_initFields() {
    MessageType_initFields = function () {
    };
    MessageType$USER_instance = new MessageType('USER', 0);
    MessageType$TECHNICAL_instance = new MessageType('TECHNICAL', 1);
    MessageType$ALL_instance = new MessageType('ALL', 2);
  }
  var MessageType$USER_instance;
  function MessageType$USER_getInstance() {
    MessageType_initFields();
    return MessageType$USER_instance;
  }
  var MessageType$TECHNICAL_instance;
  function MessageType$TECHNICAL_getInstance() {
    MessageType_initFields();
    return MessageType$TECHNICAL_instance;
  }
  var MessageType$ALL_instance;
  function MessageType$ALL_getInstance() {
    MessageType_initFields();
    return MessageType$ALL_instance;
  }
  MessageType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MessageType',
    interfaces: [Enum]
  };
  function MessageType$values() {
    return [MessageType$USER_getInstance(), MessageType$TECHNICAL_getInstance(), MessageType$ALL_getInstance()];
  }
  MessageType.values = MessageType$values;
  function MessageType$valueOf(name) {
    switch (name) {
      case 'USER':
        return MessageType$USER_getInstance();
      case 'TECHNICAL':
        return MessageType$TECHNICAL_getInstance();
      case 'ALL':
        return MessageType$ALL_getInstance();
      default:throwISE('No enum constant mathhelper.twf.logs.MessageType.' + name);
    }
  }
  MessageType.valueOf_61zpoe$ = MessageType$valueOf;
  function LazyMessage(message, messageType, level) {
    this.messageType = messageType;
    this.level = level;
    this.message_llxwty$_0 = lazy(LazyMessage$message$lambda(message));
  }
  Object.defineProperty(LazyMessage.prototype, 'message', {
    get: function () {
      return this.message_llxwty$_0.value;
    }
  });
  function LazyMessage$message$lambda(closure$message) {
    return function () {
      return closure$message();
    };
  }
  LazyMessage.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LazyMessage',
    interfaces: []
  };
  function LazyLog() {
    this.factConstructorViewer = null;
    this.log = ArrayList_init();
    this.currentLevel = 0;
  }
  LazyLog.prototype.addMessage_cte53e$ = function (message, messageType, level, levelChange) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    this.changeLevel_2c627j$(level, levelChange);
    this.log.add_11rb$(new LazyMessage(message, messageType, this.currentLevel));
  };
  function LazyLog$addMessageWithFactDetail$lambda(closure$fact, this$LazyLog) {
    return function () {
      return this$LazyLog.factToUserString_0(closure$fact);
    };
  }
  function LazyLog$addMessageWithFactDetail$lambda_0(closure$fact, this$LazyLog) {
    return function () {
      return this$LazyLog.factToTechnicalString_0(closure$fact);
    };
  }
  LazyLog.prototype.addMessageWithFactDetail_d1xyjh$ = function (message, fact, messageType, level, levelChange) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    this.changeLevel_2c627j$(level, levelChange);
    this.log.add_11rb$(new LazyMessage(message, messageType, this.currentLevel));
    this.log.add_11rb$(new LazyMessage(LazyLog$addMessageWithFactDetail$lambda(fact, this), messageType, this.currentLevel + 1 | 0));
    this.log.add_11rb$(new LazyMessage(LazyLog$addMessageWithFactDetail$lambda_0(fact, this), MessageType$TECHNICAL_getInstance(), this.currentLevel + 1 | 0));
  };
  function LazyLog$addMessageWithFactShort$lambda(closure$message, closure$fact, this$LazyLog) {
    return function () {
      return closure$message() + ("'" + this$LazyLog.factToUserString_0(closure$fact) + "'");
    };
  }
  LazyLog.prototype.addMessageWithFactShort_d1xyjh$ = function (message, fact, messageType, level, levelChange) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    this.changeLevel_2c627j$(level, levelChange);
    this.log.add_11rb$(new LazyMessage(LazyLog$addMessageWithFactShort$lambda(message, fact, this), messageType, this.currentLevel));
  };
  function LazyLog$addMessageWithFactSubstitutionDetail$lambda() {
    return 'Left: ';
  }
  function LazyLog$addMessageWithFactSubstitutionDetail$lambda_0() {
    return 'Right: ';
  }
  LazyLog.prototype.addMessageWithFactSubstitutionDetail_garven$ = function (message, substitution, messageType, level, levelChange) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    this.changeLevel_2c627j$(level, levelChange);
    this.log.add_11rb$(new LazyMessage(message, messageType, this.currentLevel));
    this.addMessageWithFactDetail_d1xyjh$(LazyLog$addMessageWithFactSubstitutionDetail$lambda, substitution.left, messageType);
    this.addMessageWithFactDetail_d1xyjh$(LazyLog$addMessageWithFactSubstitutionDetail$lambda_0, substitution.right, messageType);
  };
  function LazyLog$addMessageWithFactSubstitutionShort$lambda(closure$message, closure$substitution, this$LazyLog) {
    return function () {
      return closure$message() + ("'" + this$LazyLog.factToUserString_0(closure$substitution.left) + "' -> '" + this$LazyLog.factToUserString_0(closure$substitution.right) + "'");
    };
  }
  LazyLog.prototype.addMessageWithFactSubstitutionShort_garven$ = function (message, substitution, messageType, level, levelChange) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    this.changeLevel_2c627j$(level, levelChange);
    this.log.add_11rb$(new LazyMessage(LazyLog$addMessageWithFactSubstitutionShort$lambda(message, substitution, this), messageType, this.currentLevel));
  };
  function LazyLog$addMessageWithExpression$lambda(closure$message, closure$expressionNode, this$LazyLog) {
    return function () {
      return closure$message() + ("'" + this$LazyLog.expressionToString_0(closure$expressionNode) + "'");
    };
  }
  LazyLog.prototype.addMessageWithExpression_3hyvb1$ = function (message, expressionNode, messageType, level, levelChange) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    this.changeLevel_2c627j$(level, levelChange);
    this.log.add_11rb$(new LazyMessage(LazyLog$addMessageWithExpression$lambda(message, expressionNode, this), messageType, this.currentLevel));
  };
  function LazyLog$addMessageWithExpressionSubstitutionShort$lambda(closure$message, closure$substitution, this$LazyLog) {
    return function () {
      return closure$message() + ("'" + this$LazyLog.expressionToString_0(closure$substitution.left) + "' -> '" + this$LazyLog.expressionToString_0(closure$substitution.right) + "'");
    };
  }
  LazyLog.prototype.addMessageWithExpressionSubstitutionShort_w3y3zc$ = function (message, substitution, messageType, level, levelChange) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    this.changeLevel_2c627j$(level, levelChange);
    this.log.add_11rb$(new LazyMessage(LazyLog$addMessageWithExpressionSubstitutionShort$lambda(message, substitution, this), messageType, this.currentLevel));
  };
  LazyLog.prototype.changeLevel_2c627j$ = function (newLevel, levelChange) {
    if (newLevel === void 0)
      newLevel = null;
    if (levelChange === void 0)
      levelChange = 0;
    this.currentLevel = newLevel != null ? newLevel : this.currentLevel + levelChange | 0;
  };
  LazyLog.prototype.getLogInPlainText_ap6kjd$ = function (messageType, maxLevel, returnLogWithLogLevel, logLevelPrefixInPlainText, levelChangeShift, suffixChar) {
    if (messageType === void 0)
      messageType = MessageType$ALL_getInstance();
    if (maxLevel === void 0)
      maxLevel = 2147483647;
    if (returnLogWithLogLevel === void 0)
      returnLogWithLogLevel = true;
    if (logLevelPrefixInPlainText === void 0)
      logLevelPrefixInPlainText = 'LL_';
    if (levelChangeShift === void 0)
      levelChangeShift = '|   ';
    if (suffixChar === void 0)
      suffixChar = 32;
    var tmp$;
    var result = new StringBuilder("Log type = '" + messageType.toString() + "', max message level = '" + maxLevel + "'" + '\n');
    var messages = this.filterMessages_j7vfu1$(messageType, maxLevel);
    var maxLevelNumberLength = maxLevel.toString().length;
    tmp$ = messages.iterator();
    while (tmp$.hasNext()) {
      var message = tmp$.next();
      if (returnLogWithLogLevel) {
        result.append_gw00v9$(logLevelPrefixInPlainText);
        result.append_gw00v9$(toStringWithMinLength(message.level, maxLevelNumberLength, 32));
      }
      result.append_gw00v9$(repeat(levelChangeShift, message.level));
      result.append_gw00v9$(message.message);
      result.append_s8itvh$(10);
    }
    return result.toString();
  };
  LazyLog.prototype.getLogInJson_j7vfu1$ = function (messageType, maxLevel) {
    if (messageType === void 0)
      messageType = MessageType$ALL_getInstance();
    if (maxLevel === void 0)
      maxLevel = 2147483647;
    var tmp$;
    var result = new StringBuilder('{' + '"' + 'logType_' + messageType + '__MaxMessageLevel_' + maxLevel + '"' + ':[');
    var messages = this.filterMessages_j7vfu1$(messageType, maxLevel);
    var currentLevel = 0;
    tmp$ = messages.iterator();
    while (tmp$.hasNext()) {
      var message = tmp$.next();
      while (message.level > currentLevel) {
        result.append_gw00v9$('{"message":"root", "details":[');
        currentLevel = currentLevel + 1 | 0;
      }
      while (message.level < currentLevel) {
        result.append_gw00v9$(']}');
        currentLevel = currentLevel - 1 | 0;
      }
      if (message.level === currentLevel) {
        if (last_0(result) === 125) {
          result.append_s8itvh$(44);
        }
        result.append_gw00v9$('{' + '"' + 'message' + '"' + ':' + '"' + replace_0(message.message, 34, 39) + '"' + ', ' + '"' + 'details' + '"' + ':[');
        currentLevel = currentLevel + 1 | 0;
      }
    }
    while (0 < currentLevel) {
      result.append_gw00v9$(']}');
      currentLevel = currentLevel - 1 | 0;
    }
    result.append_gw00v9$(']}');
    return result.toString();
  };
  LazyLog.prototype.filterMessages_j7vfu1$ = function (messageType, maxLevel) {
    var tmp$;
    if (equals(messageType, MessageType$ALL_getInstance()))
      tmp$ = this.log;
    else {
      var $receiver = this.log;
      var destination = ArrayList_init();
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (element.messageType === messageType)
          destination.add_11rb$(element);
      }
      tmp$ = destination;
    }
    var $receiver_0 = tmp$;
    var destination_0 = ArrayList_init();
    var tmp$_1;
    tmp$_1 = $receiver_0.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      if (element_0.level <= maxLevel)
        destination_0.add_11rb$(element_0);
    }
    return destination_0;
  };
  LazyLog.prototype.clear = function () {
    this.currentLevel = 0;
    this.log.clear();
  };
  LazyLog.prototype.factToUserString_0 = function (fact) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.factConstructorViewer) != null ? tmp$.constructFactUserView_wirlwz$(fact) : null) != null ? tmp$_0 : '';
  };
  LazyLog.prototype.factToTechnicalString_0 = function (fact) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.factConstructorViewer) != null ? tmp$.constructIdentifierByFact_wirlwz$(fact) : null) != null ? tmp$_0 : '';
  };
  LazyLog.prototype.expressionToString_0 = function (expressionNode) {
    return expressionNode.toString();
  };
  function LazyLog$add$lambda(closure$prefix, closure$value, closure$suffix) {
    return function () {
      return closure$prefix() + closure$value.toString() + closure$suffix();
    };
  }
  LazyLog.prototype.add_ww6hhz$ = function (value, prefix, suffix, level, levelChange, messageType) {
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    this.addMessage_cte53e$(LazyLog$add$lambda(prefix, value, suffix), messageType, level, levelChange);
  };
  function LazyLog$add$lambda_0(closure$prefix, closure$value1, closure$middle, closure$value2, closure$suffix) {
    return function () {
      return closure$prefix() + closure$value1.toString() + closure$middle() + closure$value2.toString() + closure$suffix();
    };
  }
  LazyLog.prototype.add_jcldl0$ = function (value1, value2, prefix, middle, suffix, level, levelChange, messageType) {
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    this.addMessage_cte53e$(LazyLog$add$lambda_0(prefix, value1, middle, value2, suffix), messageType, level, levelChange);
  };
  function LazyLog$add$lambda_1(closure$prefix, closure$value1, closure$middle1, closure$value2, closure$middle2, closure$value3, closure$suffix) {
    return function () {
      return closure$prefix() + closure$value1.toString() + closure$middle1() + closure$value2.toString() + closure$middle2() + closure$value3.toString() + closure$suffix();
    };
  }
  LazyLog.prototype.add_czegqf$ = function (value1, value2, value3, prefix, middle1, middle2, suffix, level, levelChange, messageType) {
    if (level === void 0)
      level = null;
    if (levelChange === void 0)
      levelChange = 0;
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    this.addMessage_cte53e$(LazyLog$add$lambda_1(prefix, value1, middle1, value2, middle2, value3, suffix), messageType, level, levelChange);
  };
  function LazyLog$assignAndLog$lambda(closure$variableName, closure$data) {
    return function () {
      return closure$variableName() + " = '" + toString(closure$data) + "'";
    };
  }
  LazyLog.prototype.assignAndLog_746w4o$ = function (data, logLevel, variableName) {
    this.addMessage_cte53e$(LazyLog$assignAndLog$lambda(variableName, data), void 0, logLevel);
    return data;
  };
  function LazyLog$logCheckParams$lambda() {
    return 'function parameters:';
  }
  function LazyLog$logCheckParams$lambda_0(closure$onExpressionLevel) {
    return function () {
      return "onExpressionLevel: '" + toString(closure$onExpressionLevel) + "'";
    };
  }
  function LazyLog$logCheckParams$lambda_1() {
    return 'factsTransformations';
  }
  function LazyLog$logCheckParams$lambda_2(closure$j, closure$factsTransformation) {
    return function () {
      return closure$j.toString() + '. ' + closure$factsTransformation.name + ':';
    };
  }
  function LazyLog$logCheckParams$lambda_3() {
    return 'expressionTransformations';
  }
  function LazyLog$logCheckParams$lambda_4(closure$j, closure$expressionTransformation) {
    return function () {
      return closure$j.toString() + '. ' + closure$expressionTransformation.code + ':';
    };
  }
  function LazyLog$logCheckParams$lambda_5() {
    return 'additionalFacts';
  }
  function LazyLog$logCheckParams$lambda_6(closure$j) {
    return function () {
      return closure$j.toString() + '. ';
    };
  }
  LazyLog.prototype.logCheckParams_yiwyc7$ = function (onExpressionLevel, factsTransformations, expressionTransformations, additionalFacts, messageType) {
    if (onExpressionLevel === void 0)
      onExpressionLevel = null;
    if (factsTransformations === void 0)
      factsTransformations = null;
    if (expressionTransformations === void 0)
      expressionTransformations = null;
    if (additionalFacts === void 0)
      additionalFacts = null;
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    var tmp$, tmp$_0, tmp$_1;
    var originalLogLevel = this.currentLevel;
    this.addMessage_cte53e$(LazyLog$logCheckParams$lambda, messageType);
    this.currentLevel = this.currentLevel + 1 | 0;
    this.addMessage_cte53e$(LazyLog$logCheckParams$lambda_0(onExpressionLevel), messageType);
    this.addMessage_cte53e$(LazyLog$logCheckParams$lambda_1, messageType, originalLogLevel + 1 | 0);
    var i = 0;
    if (factsTransformations != null) {
      tmp$ = factsTransformations.iterator();
      while (tmp$.hasNext()) {
        var factsTransformation = tmp$.next();
        var j = i;
        this.addMessageWithFactSubstitutionDetail_garven$(LazyLog$logCheckParams$lambda_2(j, factsTransformation), factsTransformation, messageType, originalLogLevel + 2 | 0);
        i = i + 1 | 0;
      }
    }
    this.addMessage_cte53e$(LazyLog$logCheckParams$lambda_3, void 0, originalLogLevel + 1 | 0);
    if (expressionTransformations != null) {
      i = 0;
      tmp$_0 = expressionTransformations.iterator();
      while (tmp$_0.hasNext()) {
        var expressionTransformation = tmp$_0.next();
        var j_0 = i;
        this.addMessageWithExpressionSubstitutionShort_w3y3zc$(LazyLog$logCheckParams$lambda_4(j_0, expressionTransformation), expressionTransformation, messageType, originalLogLevel + 2 | 0);
        i = i + 1 | 0;
      }
    }
    this.addMessage_cte53e$(LazyLog$logCheckParams$lambda_5, void 0, originalLogLevel + 1 | 0);
    if (additionalFacts != null) {
      i = 0;
      tmp$_1 = additionalFacts.iterator();
      while (tmp$_1.hasNext()) {
        var additionalFact = tmp$_1.next();
        var j_1 = i;
        this.addMessageWithFactDetail_d1xyjh$(LazyLog$logCheckParams$lambda_6(j_1), additionalFact, messageType, originalLogLevel + 2 | 0);
        i = i + 1 | 0;
      }
    }
    this.currentLevel = originalLogLevel;
  };
  function LazyLog$logSystemFacts$lambda(closure$message) {
    return function () {
      return closure$message() + ' AND system facts:';
    };
  }
  function LazyLog$logSystemFacts$lambda_0(closure$message) {
    return function () {
      return closure$message() + ' OR system facts:';
    };
  }
  function LazyLog$logSystemFacts$lambda_1(closure$j) {
    return function () {
      return closure$j.toString() + '. ';
    };
  }
  LazyLog.prototype.logSystemFacts_s4ig9i$ = function (type, facts, message, messageType) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    var tmp$;
    var originalLogLevel = this.currentLevel;
    if (type === ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance()) {
      this.addMessage_cte53e$(LazyLog$logSystemFacts$lambda(message), messageType);
    }
     else {
      this.addMessage_cte53e$(LazyLog$logSystemFacts$lambda_0(message), messageType);
    }
    if (facts != null) {
      var i = 0;
      tmp$ = facts.iterator();
      while (tmp$.hasNext()) {
        var additionalFact = tmp$.next();
        var j = i;
        this.addMessageWithFactDetail_d1xyjh$(LazyLog$logSystemFacts$lambda_1(j), additionalFact, messageType, originalLogLevel + 1 | 0);
        i = i + 1 | 0;
      }
    }
    this.currentLevel = originalLogLevel;
  };
  function LazyLog$logFactsCompareAsIsParams$lambda() {
    return 'Left fact: ';
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_0() {
    return 'Right fact: ';
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_1(closure$j) {
    return function () {
      return closure$j.toString() + '. ';
    };
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_2(closure$maxTransformationWeight) {
    return function () {
      return "maxTransformationWeight: '" + closure$maxTransformationWeight + "'";
    };
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_3(closure$maxBustCount) {
    return function () {
      return "maxBustCount: '" + closure$maxBustCount + "'";
    };
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_4(closure$minPossibleTransformationWeight) {
    return function () {
      return "compareExpressionsWithProbabilityTest: '" + closure$minPossibleTransformationWeight + "'";
    };
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_5() {
    return 'additionalFactsSortedIdentifiers:';
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_6(it) {
    return it ? '1' : '0';
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_7() {
    return "additionalFactUsed: '";
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_8() {
    return "'";
  }
  LazyLog.prototype.logFactsCompareAsIsParams_6nwrqg$ = function (left, right, additionalFacts, maxTransformationWeight, maxBustCount, minPossibleTransformationWeight, additionalFactUsed, messageType) {
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    var tmp$;
    var originalLogLevel = this.currentLevel;
    this.addMessageWithFactDetail_d1xyjh$(LazyLog$logFactsCompareAsIsParams$lambda, left, messageType, originalLogLevel + 1 | 0);
    this.addMessageWithFactDetail_d1xyjh$(LazyLog$logFactsCompareAsIsParams$lambda_0, right, messageType, originalLogLevel + 1 | 0);
    var i = 0;
    tmp$ = additionalFacts.iterator();
    while (tmp$.hasNext()) {
      var additionalFact = tmp$.next();
      var j = i;
      this.addMessageWithFactDetail_d1xyjh$(LazyLog$logFactsCompareAsIsParams$lambda_1(j), additionalFact, messageType, originalLogLevel + 1 | 0);
      i = i + 1 | 0;
    }
    this.addMessage_cte53e$(LazyLog$logFactsCompareAsIsParams$lambda_2(maxTransformationWeight), messageType, originalLogLevel + 1 | 0);
    this.addMessage_cte53e$(LazyLog$logFactsCompareAsIsParams$lambda_3(maxBustCount), messageType, originalLogLevel + 1 | 0);
    this.addMessage_cte53e$(LazyLog$logFactsCompareAsIsParams$lambda_4(minPossibleTransformationWeight), messageType, originalLogLevel + 1 | 0);
    this.addMessage_cte53e$(LazyLog$logFactsCompareAsIsParams$lambda_5, messageType, originalLogLevel + 1 | 0);
    this.add_ww6hhz$(joinToString(additionalFactUsed, void 0, void 0, void 0, void 0, void 0, LazyLog$logFactsCompareAsIsParams$lambda_6), LazyLog$logFactsCompareAsIsParams$lambda_7, LazyLog$logFactsCompareAsIsParams$lambda_8, originalLogLevel + 1 | 0, void 0, messageType);
    this.currentLevel = originalLogLevel;
  };
  function LazyLog$logFactsCompareAsIsParams$lambda_9() {
    return 'Left fact: ';
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_10() {
    return 'Right fact: ';
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_11(closure$compareExpressionsWithProbabilityTest) {
    return function () {
      return "compareExpressionsWithProbabilityTest: '" + toString(closure$compareExpressionsWithProbabilityTest) + "'";
    };
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_12() {
    return 'additionalFactsSortedIdentifiers:';
  }
  function LazyLog$logFactsCompareAsIsParams$lambda_13(closure$j, closure$additionalFactsSortedIdentifiers) {
    return function () {
      return closure$j.toString() + ". '''" + closure$additionalFactsSortedIdentifiers + "'''";
    };
  }
  LazyLog.prototype.logFactsCompareAsIsParams_69ddxq$ = function (left, right, additionalFactsSortedIdentifiers, compareExpressionsWithProbabilityTest, messageType) {
    if (compareExpressionsWithProbabilityTest === void 0)
      compareExpressionsWithProbabilityTest = null;
    if (messageType === void 0)
      messageType = MessageType$TECHNICAL_getInstance();
    var tmp$;
    var originalLogLevel = this.currentLevel;
    this.addMessageWithFactDetail_d1xyjh$(LazyLog$logFactsCompareAsIsParams$lambda_9, left, messageType, originalLogLevel + 1 | 0);
    this.addMessageWithFactDetail_d1xyjh$(LazyLog$logFactsCompareAsIsParams$lambda_10, right, messageType, originalLogLevel + 1 | 0);
    if (compareExpressionsWithProbabilityTest != null) {
      this.addMessage_cte53e$(LazyLog$logFactsCompareAsIsParams$lambda_11(compareExpressionsWithProbabilityTest), messageType, originalLogLevel + 1 | 0);
    }
    this.addMessage_cte53e$(LazyLog$logFactsCompareAsIsParams$lambda_12, messageType, originalLogLevel + 1 | 0);
    var i = 0;
    tmp$ = additionalFactsSortedIdentifiers.iterator();
    while (tmp$.hasNext()) {
      var additionalFactsSortedIdentifier = tmp$.next();
      var j = i;
      this.addMessage_cte53e$(LazyLog$logFactsCompareAsIsParams$lambda_13(j, additionalFactsSortedIdentifiers), messageType, originalLogLevel + 2 | 0);
      i = i + 1 | 0;
    }
    this.currentLevel = originalLogLevel;
  };
  LazyLog.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LazyLog',
    interfaces: []
  };
  var log_1;
  function checkFactsInMathML$lambda(closure$brushedMathML) {
    return function () {
      return "input transformations in mathML: '''" + closure$brushedMathML + "'''";
    };
  }
  function checkFactsInMathML$lambda_0(closure$mathML) {
    return function () {
      return "input transformations in mathML without brushing: '''" + closure$mathML + "'''";
    };
  }
  function checkFactsInMathML$lambda_1() {
    return 'input transformations parsing started';
  }
  function checkFactsInMathML$lambda_2() {
    return 'input transformations are parsed successfully';
  }
  function checkFactsInMathML$lambda_3() {
    return 'parsed input transformations: ';
  }
  function checkFactsInMathML$lambda_4() {
    return 'input transformations checking started';
  }
  function checkFactsInMathML$lambda_5(closure$checkingResult) {
    return function () {
      return "input transformations checking result: '" + (closure$checkingResult.isCorrect ? 'correct' : 'incorrect - ' + closure$checkingResult.description) + "'";
    };
  }
  function checkFactsInMathML$lambda_6(closure$result) {
    return function () {
      return "transformations in mathML after brushing: '''" + closure$result + "'''";
    };
  }
  function checkFactsInMathML$lambda_7(closure$error) {
    return function () {
      return closure$error.description;
    };
  }
  function checkFactsInMathML$lambda_8(closure$error) {
    return function () {
      return closure$error.description;
    };
  }
  function checkFactsInMathML$lambda_9(closure$variable) {
    return function () {
      return "variable '" + closure$variable + "' is not expressed";
    };
  }
  function checkFactsInMathML$lambda_10(closure$error) {
    return function () {
      return closure$error.description;
    };
  }
  function checkFactsInMathML$lambda_11(closure$error) {
    return function () {
      return closure$error.description;
    };
  }
  function checkFactsInMathML$lambda_12() {
    return 'Answer checked successfully';
  }
  function checkFactsInMathML(brushedMathML, wellKnownFunctions, expressionTransformationRules, targetFactIdentifier, targetVariablesNames, minNumberOfMultipliersInAnswer, maxNumberOfDivisionsInAnswer, additionalFactsIdentifiers, maxExpressionTransformationWeight, unlimitedWellKnownFunctions, shortErrorDescription, taskContextExpressionTransformationRules, allowedVariablesNames, maxDistBetweenDiffSteps, forbiddenFunctions, scopeFilter, makeFirstSingleTransformationChainFactCorrectWithoutAdditionalFacts) {
    if (wellKnownFunctions === void 0)
      wellKnownFunctions = '+;;;-1;;;-;;;-1;;;*;;;-1;;;/;;;-1';
    if (expressionTransformationRules === void 0)
      expressionTransformationRules = 'S(i, a, a, f(i));;;f(a);;;S(i, a, b, f(i));;;S(i, a, b-1, f(i)) + f(b)';
    if (targetFactIdentifier === void 0)
      targetFactIdentifier = '';
    if (targetVariablesNames === void 0)
      targetVariablesNames = '';
    if (minNumberOfMultipliersInAnswer === void 0)
      minNumberOfMultipliersInAnswer = '';
    if (maxNumberOfDivisionsInAnswer === void 0)
      maxNumberOfDivisionsInAnswer = '';
    if (additionalFactsIdentifiers === void 0)
      additionalFactsIdentifiers = '';
    if (maxExpressionTransformationWeight === void 0)
      maxExpressionTransformationWeight = '1.0';
    if (unlimitedWellKnownFunctions === void 0)
      unlimitedWellKnownFunctions = wellKnownFunctions;
    if (shortErrorDescription === void 0)
      shortErrorDescription = '0';
    if (taskContextExpressionTransformationRules === void 0)
      taskContextExpressionTransformationRules = '';
    if (allowedVariablesNames === void 0)
      allowedVariablesNames = '';
    if (maxDistBetweenDiffSteps === void 0)
      maxDistBetweenDiffSteps = '';
    if (forbiddenFunctions === void 0)
      forbiddenFunctions = '';
    if (scopeFilter === void 0)
      scopeFilter = '';
    if (makeFirstSingleTransformationChainFactCorrectWithoutAdditionalFacts === void 0)
      makeFirstSingleTransformationChainFactCorrectWithoutAdditionalFacts = '0';
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    log_1.clear();
    var compiledConfiguration = compiledConfigurationBySettings(wellKnownFunctions, expressionTransformationRules, maxExpressionTransformationWeight, unlimitedWellKnownFunctions, taskContextExpressionTransformationRules, maxDistBetweenDiffSteps, scopeFilter);
    log_1.factConstructorViewer = new FactConstructorViewer(compiledConfiguration);
    log_1.addMessage_cte53e$(checkFactsInMathML$lambda(brushedMathML), void 0, 0);
    var mathMLWithoutUnexpectedCodes = replaceSpaceMathMLAliases(brushedMathML);
    var mathMLWithoutSuffix = deleteErrorStringFromMathMLSolution(mathMLWithoutUnexpectedCodes, listOf_0([errorPrefix, syntaxErrorPrefix]));
    var mathMLWithoutBrushing = dropPerformedMathMLBrushing(mathMLWithoutSuffix);
    var mathMLWithoutSupportingTags = deleteUnsupportedMathMLTags(mathMLWithoutBrushing);
    var mathMLAfterSpecificSystemReplacements = specificMathMlSystemReplacements(mathMLWithoutSupportingTags);
    var mathML = correctMathMlTagsAccordingToBracketsFromEnd(mathMLAfterSpecificSystemReplacements);
    if (contains_1(mathML, 'error', true) && contains_1(mathML, '#FF')) {
      return mathML;
    }
    log_1.addMessage_cte53e$(checkFactsInMathML$lambda_0(mathML), void 0, 0);
    var transformationChainParser = new TransformationChainParser(mathML, false, compiledConfiguration.functionConfiguration, compiledConfiguration.factsLogicConfiguration, compiledConfiguration.compiledImmediateVariableReplacements, void 0, true);
    log_1.addMessage_cte53e$(checkFactsInMathML$lambda_1, MessageType$USER_getInstance(), 0);
    var error = transformationChainParser.parse();
    if (error != null) {
      return returnParsingErrorMathML(error, mathML);
    }
     else {
      log_1.addMessage_cte53e$(checkFactsInMathML$lambda_2, MessageType$USER_getInstance(), 0);
      log_1.addMessageWithFactDetail_d1xyjh$(checkFactsInMathML$lambda_3, transformationChainParser.root, MessageType$USER_getInstance());
      var factComparator = compiledConfiguration.factComparator;
      var solutionRoot = combineSolutionRoot(targetFactIdentifier, transformationChainParser, compiledConfiguration);
      log_1.addMessage_cte53e$(checkFactsInMathML$lambda_4, MessageType$USER_getInstance(), 0);
      tmp$ = emptyList();
      tmp$_0 = emptyList();
      tmp$_2 = additionalFactsFromItsIdentifiers(ensureNotNull(log_1.factConstructorViewer), additionalFactsIdentifiers);
      if (equals(makeFirstSingleTransformationChainFactCorrectWithoutAdditionalFacts, '1')) {
        tmp$_1 = getListOfExpressionComparisonFactsFromFirstSystem(solutionRoot);
      }
       else
        tmp$_1 = emptyList();
      var checkingResult = solutionRoot.check_i0qcxd$(factComparator, false, tmp$, tmp$_0, plus(tmp$_2, tmp$_1));
      log_1.addMessage_cte53e$(checkFactsInMathML$lambda_5(checkingResult), MessageType$USER_getInstance(), 0);
      var resultWithColoredTasks = brushMathMl(transformationChainParser.originalTransformationChain, checkingResult.coloringTasks);
      var result = setBackgroundColorMathMl(resultWithColoredTasks, compiledConfiguration.checkedFactAccentuation.checkedFactColor.checkedFactBackgroundColor);
      log_1.addMessage_cte53e$(checkFactsInMathML$lambda_6(result), void 0, 0);
      if (!checkingResult.isCorrect) {
        if (!startsWith(brushedMathML, '<')) {
          return errorPrefix + ': ' + checkingResult.description;
        }
        if (equals(shortErrorDescription, '1')) {
          tmp$_3 = addErrorStringToMathMLSolution(result, 'Unclear transformation or incomplete solution. Try to fix errors or to write more details.', errorPrefix);
        }
         else
          tmp$_3 = addErrorStringToMathMLSolution(result, checkingResult.description, errorPrefix);
        return tmp$_3;
      }
      if (!isBlank(minNumberOfMultipliersInAnswer)) {
        var minNumberOfMultipliers = toInt(minNumberOfMultipliersInAnswer);
        var $receiver = split(targetVariablesNames, [configSeparator]);
        var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
        var tmp$_9;
        tmp$_9 = $receiver.iterator();
        while (tmp$_9.hasNext()) {
          var item = tmp$_9.next();
          var tmp$_10;
          destination.add_11rb$(trim(Kotlin.isCharSequence(tmp$_10 = item) ? tmp$_10 : throwCCE()).toString());
        }
        var targetVariables = toSet(destination);
        var targetExpression = (Kotlin.isType(tmp$_4 = ensureNotNull(log_1.factConstructorViewer).constructFactByIdentifier_5jrdui$(targetFactIdentifier), Expression) ? tmp$_4 : throwCCE()).data;
        var error_0 = solutionRoot.isFactorizationForVariables_s6qnlc$(minNumberOfMultipliers, targetVariables, targetExpression, factComparator);
        if (error_0 != null) {
          log_1.addMessage_cte53e$(checkFactsInMathML$lambda_7(error_0), MessageType$USER_getInstance(), 0);
          return addErrorStringToMathMLSolution(result, error_0.description, errorPrefix);
        }
      }
       else {
        if (!isBlank(maxNumberOfDivisionsInAnswer)) {
          var maxNumberOfDivisions = toInt(maxNumberOfDivisionsInAnswer);
          var targetExpression_0 = (Kotlin.isType(tmp$_5 = ensureNotNull(log_1.factConstructorViewer).constructFactByIdentifier_5jrdui$(targetFactIdentifier), Expression) ? tmp$_5 : throwCCE()).data;
          var error_1 = solutionRoot.hasNoFractions_qclyqr$(maxNumberOfDivisions, targetExpression_0, factComparator);
          if (error_1 != null) {
            log_1.addMessage_cte53e$(checkFactsInMathML$lambda_8(error_1), MessageType$USER_getInstance(), 0);
            return addErrorStringToMathMLSolution(result, error_1.description, errorPrefix);
          }
        }
         else {
          if (!isBlank(targetVariablesNames)) {
            var $receiver_0 = split(targetVariablesNames, [configSeparator]);
            var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
            var tmp$_11;
            tmp$_11 = $receiver_0.iterator();
            while (tmp$_11.hasNext()) {
              var item_0 = tmp$_11.next();
              var tmp$_12;
              destination_0.add_11rb$(new Pair(trim(Kotlin.isCharSequence(tmp$_12 = item_0) ? tmp$_12 : throwCCE()).toString(), false));
            }
            var targetVariables_0 = toMutableMap(toMap(destination_0));
            if (!equals(allowedVariablesNames, '')) {
              var $receiver_1 = split(allowedVariablesNames, [configSeparator]);
              var destination_1 = ArrayList_init_0(collectionSizeOrDefault($receiver_1, 10));
              var tmp$_13;
              tmp$_13 = $receiver_1.iterator();
              while (tmp$_13.hasNext()) {
                var item_1 = tmp$_13.next();
                var tmp$_14;
                destination_1.add_11rb$(trim(Kotlin.isCharSequence(tmp$_14 = item_1) ? tmp$_14 : throwCCE()).toString());
              }
              tmp$_6 = toSet(destination_1);
            }
             else {
              tmp$_6 = emptySet();
            }
            var allowedVariables = tmp$_6;
            var error_2 = solutionRoot.isSolutionForVariables_axkv0l$(targetVariables_0, void 0, allowedVariables);
            tmp$_7 = targetVariables_0.entries.iterator();
            while (tmp$_7.hasNext()) {
              var tmp$_15 = tmp$_7.next();
              var variable = tmp$_15.key;
              var expressed = tmp$_15.value;
              if (!expressed) {
                log_1.addMessage_cte53e$(checkFactsInMathML$lambda_9(variable), MessageType$USER_getInstance(), 0);
                return addErrorStringToMathMLSolution(result, "variable '" + variable + "' is not expressed", errorPrefix);
              }
            }
            if (error_2 != null) {
              log_1.addMessage_cte53e$(checkFactsInMathML$lambda_10(error_2), MessageType$USER_getInstance(), 0);
              return addErrorStringToMathMLSolution(result, error_2.description, errorPrefix);
            }
          }
          if (!isBlank(forbiddenFunctions)) {
            var forbidden = pairsStringIntFromString(forbiddenFunctions);
            var targetExpression_1 = (Kotlin.isType(tmp$_8 = ensureNotNull(log_1.factConstructorViewer).constructFactByIdentifier_5jrdui$(targetFactIdentifier), Expression) ? tmp$_8 : throwCCE()).data;
            var error_3 = solutionRoot.isSolutionWithoutFunctions_o78e5l$(forbidden, targetExpression_1, factComparator);
            if (error_3 != null) {
              log_1.addMessage_cte53e$(checkFactsInMathML$lambda_11(error_3), MessageType$USER_getInstance(), 0);
              return addErrorStringToMathMLSolution(result, error_3.description, errorPrefix);
            }
          }
          log_1.addMessage_cte53e$(checkFactsInMathML$lambda_12, MessageType$USER_getInstance(), 0);
        }
      }
      return result;
    }
  }
  function returnParsingErrorMathML(error, mathML) {
    return returnParsingErrorMathML_0(error.description, error.position, error.endPosition, mathML);
  }
  function returnParsingErrorMathML$lambda(closure$description) {
    return function () {
      return "transformations parsing error: '" + closure$description + "'";
    };
  }
  function returnParsingErrorMathML_0(description, start, end, mathML) {
    log_1.addMessage_cte53e$(returnParsingErrorMathML$lambda(description), MessageType$USER_getInstance(), 0);
    var positions = selectPlacesForColoringByFragment(mathML, start, end);
    var endIndex = positions.first;
    var tmp$ = mathML.substring(0, endIndex) + underliningStartMathML;
    var startIndex = positions.first;
    var endIndex_0 = positions.second;
    var tmp$_0 = tmp$ + mathML.substring(startIndex, endIndex_0) + underliningEndMathML;
    var startIndex_0 = positions.second;
    var endIndex_1 = mathML.length;
    var result = tmp$_0 + mathML.substring(startIndex_0, endIndex_1);
    return addErrorStringToMathMLSolution(result, description, 'Syntax&#xA0;error&#xA0;(underlined)');
  }
  function replaceSpaceMathMLAliases(string) {
    var result = spaceRegex.replace_x2uqeu$(string, '&#xA0;');
    return result;
  }
  var spaceRegex;
  function deleteUnsupportedMathMLTags(string) {
    var tmp$;
    var result = StringBuilder_init_0();
    var pos = 0;
    while (pos < string.length) {
      var toWhile = false;
      tmp$ = unsupportedTagListMathML.iterator();
      while (tmp$.hasNext()) {
        var tag = tmp$.next();
        if (remainingExpressionStartsWith('<\/' + tag + '>', string, pos)) {
          pos = pos + ('<\/' + tag + '>').length | 0;
          toWhile = true;
          result.append_gw00v9$('<\/mrow>');
        }
         else if (remainingExpressionStartsWith('<' + tag, string, pos)) {
          var actualTag = readOpenTagStringIfItPresent(string, pos);
          pos = pos + ensureNotNull(actualTag).length | 0;
          toWhile = true;
          result.append_gw00v9$('<mrow>');
        }
        if (toWhile) {
          break;
        }
      }
      if (toWhile) {
        continue;
      }
      result.append_s8itvh$(string.charCodeAt(pos));
      pos = pos + 1 | 0;
    }
    return result.toString();
  }
  function correctMathMlTagsAccordingToBracketsFromEnd(mathML) {
    var result = StringBuilder_init_0();
    var tag = 'msup';
    var tagBracketsStack = ArrayList_init();
    var valuesToAddMap = LinkedHashMap_init_0();
    var currentPos = get_lastIndex_0(mathML);
    while (currentPos >= 0) {
      result.append_s8itvh$(mathML.charCodeAt(currentPos));
      if (mathML.charCodeAt(currentPos) === 41) {
        tagBracketsStack.add_11rb$(')');
      }
       else if (mathML.charCodeAt(currentPos) === 60) {
        if (remainingExpressionStartsWith('<\/msup', mathML, currentPos)) {
          tagBracketsStack.add_11rb$(tag);
        }
         else if (remainingExpressionStartsWith('<msup', mathML, currentPos)) {
          if (tagBracketsStack.isEmpty()) {
            return returnParsingErrorMathML_0("Not closed tag: '<msup>'", currentPos - 4 | 0, currentPos + 6 | 0, mathML);
          }
          if (equals(last(tagBracketsStack), tag)) {
            tagBracketsStack = toMutableList(dropLast_0(tagBracketsStack, 1));
          }
           else {
            tagBracketsStack = toMutableList(dropLast_0(tagBracketsStack, 1));
            var tagToMove = remainingExpressionStartsWith('<msup><mrow>', mathML, currentPos) ? '<msup><mrow>' : '';
            result = StringBuilder_init_1(dropLast(result, tagToMove.length));
            var tmp$;
            valuesToAddMap.put_xwzc9p$(tag, reversed(Kotlin.isCharSequence(tmp$ = tagToMove) ? tmp$ : throwCCE()).toString());
          }
        }
      }
       else if (mathML.charCodeAt(currentPos) === 40) {
        if (tagBracketsStack.isEmpty()) {
          return returnParsingErrorMathML_0("Not closed bracket: '('", currentPos - 4 | 0, currentPos + 6 | 0, mathML);
        }
        if (equals(last(tagBracketsStack), '(')) {
          tagBracketsStack = toMutableList(dropLast_0(tagBracketsStack, 1));
        }
         else {
          var currentTag = last(tagBracketsStack);
          tagBracketsStack = toMutableList(dropLast_0(tagBracketsStack, 1));
          if (valuesToAddMap.containsKey_11rb$(currentTag)) {
            var tmp$_0;
            result.append_gw00v9$(reversed(Kotlin.isCharSequence(tmp$_0 = '<mo>') ? tmp$_0 : throwCCE()).toString());
            currentPos = currentPos - 4 | 0;
            result.append_gw00v9$(valuesToAddMap.get_11rb$(currentTag));
          }
        }
      }
      currentPos = currentPos - 1 | 0;
    }
    return result.reverse().toString();
  }
  function specificMathMlSystemReplacements(mathML) {
    return replace(replace(replace(mathML, '<\/mtd><\/mtr><\/mtable><mo>=<\/mo><mo>&gt;<\/mo><\/mrow><\/mfenced>', '<\/mtd><\/mtr><\/mtable><\/mfenced><mo>=<\/mo><mo>&gt;<\/mo>'), '<\/mtd><\/mtr><\/mtable><mo>&#x21D2;<\/mo><\/mrow><\/mfenced>', '<\/mtd><\/mtr><\/mtable><\/mfenced><mo>&#x21D2;<\/mo>'), '<mrow><mtable columnalign="left"><mtr><mtd>', '<mtable columnalign="left"><mtr><mtd>');
  }
  function addErrorStringToMathMLSolution(mathML, error, errorPrefix) {
    var tmp$;
    var endIndex = mathML.length - 7 | 0;
    var withoutEnd = mathML.substring(0, endIndex);
    if (contains_1(error, '<=')) {
      tmp$ = replace(error, '<=', '<\/mtext><mo mathvariant="bold" mathcolor="#FF0000">&le;<\/mo><mtext mathvariant="bold" mathcolor="#FF0000">');
    }
     else if (contains_1(error, '>=')) {
      tmp$ = replace(error, '>=', '<\/mtext><mo mathvariant="bold" mathcolor="#FF0000">&ge;<\/mo><mtext mathvariant="bold" mathcolor="#FF0000">');
    }
     else if (contains_1(error, '<')) {
      tmp$ = replace(error, '<', '<\/mtext><mo mathvariant="bold" mathcolor="#FF0000">&lt;<\/mo><mtext mathvariant="bold" mathcolor="#FF0000">');
    }
     else {
      tmp$ = replace(error, '>', '<\/mtext><mo mathvariant="bold" mathcolor="#FF0000">&gt;<\/mo><mtext mathvariant="bold" mathcolor="#FF0000">');
    }
    var escapedError = tmp$;
    return withoutEnd + '<mspace linebreak="newline"/>' + ('<mtext mathvariant=' + '"' + 'bold' + '"' + ' mathcolor=' + '"' + '#FF0000' + '"' + '>' + errorPrefix + ': ') + escapedError + '<\/mtext><\/math>';
  }
  function deleteErrorStringFromMathMLSolution(mathML, errorPrefix) {
    var tmp$;
    if (endsWith_0(mathML, '<\/mtext><\/math>')) {
      var errorMessage = substringAfterLast(mathML, '<mspace linebreak="newline"/><mtext mathvariant="bold" mathcolor="#FF0000">');
      tmp$ = errorPrefix.iterator();
      while (tmp$.hasNext()) {
        var prefix = tmp$.next();
        if (startsWith(errorMessage, prefix)) {
          var withoutEnd = substringBeforeLast(mathML, '<mspace linebreak="newline"/><mtext mathvariant="bold" mathcolor="#FF0000">');
          return withoutEnd + '<\/math>';
        }
      }
    }
    return mathML;
  }
  function getListOfExpressionComparisonFactsFromFirstSystem(solutionRoot) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    tmp$_1 = (tmp$_0 = (tmp$ = firstOrNull_1(solutionRoot.factTransformationChains)) != null ? tmp$.chain : null) != null ? firstOrNull_1(tmp$_0) : null;
    if (tmp$_1 == null) {
      return emptyList();
    }
    var firstInputSystem = tmp$_1;
    if (Kotlin.isType(firstInputSystem, MainLineAndNode)) {
      var result = ArrayList_init();
      tmp$_2 = firstInputSystem.factTransformationChains.iterator();
      while (tmp$_2.hasNext()) {
        var factTransformationChain = tmp$_2.next();
        if (factTransformationChain.chain.size === 1 && Kotlin.isType(first(factTransformationChain.chain), ExpressionComparison)) {
          var fact = Kotlin.isType(tmp$_3 = first(factTransformationChain.chain), ExpressionComparison) ? tmp$_3 : throwCCE();
          result.add_11rb$(fact);
        }
      }
      return result;
    }
    return emptyList();
  }
  var unsupportedTagListMathML;
  var underliningStartMathML;
  var underliningEndMathML;
  function TexVerificationResult(validatedSolution, errorMessage) {
    this.validatedSolution = validatedSolution;
    this.errorMessage = errorMessage;
  }
  TexVerificationResult.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TexVerificationResult',
    interfaces: []
  };
  TexVerificationResult.prototype.component1 = function () {
    return this.validatedSolution;
  };
  TexVerificationResult.prototype.component2 = function () {
    return this.errorMessage;
  };
  TexVerificationResult.prototype.copy_puj7f4$ = function (validatedSolution, errorMessage) {
    return new TexVerificationResult(validatedSolution === void 0 ? this.validatedSolution : validatedSolution, errorMessage === void 0 ? this.errorMessage : errorMessage);
  };
  TexVerificationResult.prototype.toString = function () {
    return 'TexVerificationResult(validatedSolution=' + Kotlin.toString(this.validatedSolution) + (', errorMessage=' + Kotlin.toString(this.errorMessage)) + ')';
  };
  TexVerificationResult.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.validatedSolution) | 0;
    result = result * 31 + Kotlin.hashCode(this.errorMessage) | 0;
    return result;
  };
  TexVerificationResult.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.validatedSolution, other.validatedSolution) && Kotlin.equals(this.errorMessage, other.errorMessage)))));
  };
  function checkFactsInTex$lambda(closure$originalTexSolution) {
    return function () {
      return "input transformations in TEX: '''" + closure$originalTexSolution + "'''";
    };
  }
  function checkFactsInTex$lambda_0(closure$texSolution) {
    return function () {
      return "input transformations in TEX without brushing: '''" + closure$texSolution + "'''";
    };
  }
  function checkFactsInTex$lambda_1() {
    return 'input transformations parsing started';
  }
  function checkFactsInTex$lambda_2() {
    return 'input transformations are parsed successfully';
  }
  function checkFactsInTex$lambda_3() {
    return 'parsed input transformations: ';
  }
  function checkFactsInTex$lambda_4() {
    return 'input transformations checking started';
  }
  function checkFactsInTex$lambda_5(closure$checkingResult) {
    return function () {
      return "input transformations checking result: '" + (closure$checkingResult.isCorrect ? 'correct' : 'incorrect - ' + closure$checkingResult.description) + "'";
    };
  }
  function checkFactsInTex$lambda_6(closure$result) {
    return function () {
      return "transformations in tex after brushing: '''" + closure$result + "'''";
    };
  }
  function checkFactsInTex$lambda_7() {
    return 'input transformations checked successfully; answer checking started';
  }
  function checkFactsInTex$lambda_8(closure$otherGoalData) {
    return function () {
      return "otherGoalData: '''" + toString(closure$otherGoalData) + "'''";
    };
  }
  function checkFactsInTex$lambda_9(closure$otherGoalData) {
    return function () {
      return "hidden goal expression: '''" + toString(closure$otherGoalData != null ? closure$otherGoalData.get_11rb$('hiddenGoalExpressions') : null) + "'''";
    };
  }
  function checkFactsInTex$lambda_10(closure$hiddenGoalExpressions) {
    return function () {
      return "hiddenGoalExpressions: '''" + closure$hiddenGoalExpressions + "'''";
    };
  }
  function checkFactsInTex$lambda_11(closure$hiddenGoalExpression) {
    return function () {
      return "compare with hidden goal expression: '''" + toString(closure$hiddenGoalExpression) + "'''";
    };
  }
  function checkFactsInTex$lambda_12(closure$hiddenGoalExpressionNode) {
    return function () {
      return "compare with hidden goal expression parsed as: '''" + closure$hiddenGoalExpressionNode + "'''";
    };
  }
  function checkFactsInTex$lambda_13(closure$hiddenGoalExpression) {
    return function () {
      return "answer is matched by hidden goal expression: '''" + toString(closure$hiddenGoalExpression) + "'''";
    };
  }
  function checkFactsInTex$lambda_14(closure$patternNode) {
    return function () {
      return "parsed answer pattern: '''" + closure$patternNode + "'''";
    };
  }
  function checkFactsInTex$lambda_15(closure$patternNode) {
    return function () {
      return "answer is matched by pattern: '''" + closure$patternNode + "'''";
    };
  }
  function checkFactsInTex$lambda_16(closure$patternNode) {
    return function () {
      return "answer is not matched by pattern: '''" + closure$patternNode + "'''";
    };
  }
  function checkFactsInTex$lambda_17() {
    return 'Full solution checked successfully';
  }
  function checkFactsInTex(originalTexSolution, startExpressionIdentifier, endExpressionIdentifier, targetFactIdentifier, targetFactPattern, comparisonSign, additionalFactsIdentifiers, shortErrorDescription, skipTrivialCheck, compiledConfiguration, otherGoalData) {
    if (startExpressionIdentifier === void 0)
      startExpressionIdentifier = '';
    if (endExpressionIdentifier === void 0)
      endExpressionIdentifier = '';
    if (targetFactIdentifier === void 0)
      targetFactIdentifier = '';
    if (targetFactPattern === void 0)
      targetFactPattern = '';
    if (comparisonSign === void 0)
      comparisonSign = '';
    if (additionalFactsIdentifiers === void 0)
      additionalFactsIdentifiers = '';
    if (shortErrorDescription === void 0)
      shortErrorDescription = '0';
    if (skipTrivialCheck === void 0)
      skipTrivialCheck = false;
    var tmp$, tmp$_0, tmp$_1;
    log_1.factConstructorViewer = new FactConstructorViewer(compiledConfiguration);
    log_1.addMessage_cte53e$(checkFactsInTex$lambda(originalTexSolution), void 0, 0);
    var texSolution = dropPerformedTexBrushing(originalTexSolution);
    log_1.addMessage_cte53e$(checkFactsInTex$lambda_0(texSolution), void 0, 0);
    var transformationChainParser = new TransformationChainParser(texSolution, false, compiledConfiguration.functionConfiguration, compiledConfiguration.factsLogicConfiguration, compiledConfiguration.compiledImmediateVariableReplacements, void 0, false);
    log_1.addMessage_cte53e$(checkFactsInTex$lambda_1, MessageType$USER_getInstance(), 0);
    var error = transformationChainParser.parse();
    if (error != null) {
      return new TexVerificationResult(returnParsingErrorTex(error, texSolution), 'Syntax error (underlined): ' + error.description);
    }
     else if (transformationChainParser.root.factTransformationChains.isEmpty() && transformationChainParser.root.expressionTransformationChains.isEmpty()) {
      return new TexVerificationResult(texSolution, 'Error: No transformations found');
    }
     else {
      log_1.addMessage_cte53e$(checkFactsInTex$lambda_2, MessageType$USER_getInstance(), 0);
      log_1.addMessageWithFactDetail_d1xyjh$(checkFactsInTex$lambda_3, transformationChainParser.root, MessageType$USER_getInstance());
      var factComparator = compiledConfiguration.factComparator;
      var solutionRoot = combineSolutionRoot(targetFactIdentifier, transformationChainParser, compiledConfiguration, startExpressionIdentifier, endExpressionIdentifier, comparisonSign);
      log_1.addMessage_cte53e$(checkFactsInTex$lambda_4, MessageType$USER_getInstance(), 0);
      var checkingResult = solutionRoot.check_i0qcxd$(factComparator, false, emptyList(), emptyList(), additionalFactsFromItsIdentifiers(ensureNotNull(log_1.factConstructorViewer), additionalFactsIdentifiers), skipTrivialCheck);
      log_1.addMessage_cte53e$(checkFactsInTex$lambda_5(checkingResult), MessageType$USER_getInstance(), 0);
      var tmp$_2 = transformationChainParser.originalTransformationChain;
      var $receiver = checkingResult.coloringTasks;
      var destination = ArrayList_init();
      var tmp$_3;
      tmp$_3 = $receiver.iterator();
      while (tmp$_3.hasNext()) {
        var element = tmp$_3.next();
        if (element.startPosition > 0 || element.endPosition > 0)
          destination.add_11rb$(element);
      }
      var resultWithColoredTasks = brushTex(tmp$_2, destination);
      var result = setBackgroundColorTex(resultWithColoredTasks, 'purple');
      log_1.addMessage_cte53e$(checkFactsInTex$lambda_6(result), void 0, 0);
      if (!checkingResult.isCorrect) {
        if (equals(shortErrorDescription, '1')) {
          tmp$ = new TexVerificationResult(result, 'Error: Unclear transformation or incomplete solution. Try to fix errors or to write more details');
        }
         else
          tmp$ = new TexVerificationResult(result, errorPrefix + ': ' + checkingResult.description);
        return tmp$;
      }
      if (!isBlank(targetFactPattern) || otherGoalData != null) {
        log_1.addMessage_cte53e$(checkFactsInTex$lambda_7, MessageType$USER_getInstance(), 0);
        var resultExpression = solutionRoot.getLastExpression();
        if (resultExpression == null || resultExpression.data.children.isEmpty()) {
          return new TexVerificationResult(result, 'Error: answer is empty');
        }
        var answerPatterFound = false;
        log_1.addMessage_cte53e$(checkFactsInTex$lambda_8(otherGoalData), void 0, 0);
        log_1.addMessage_cte53e$(checkFactsInTex$lambda_9(otherGoalData), void 0, 0);
        if (otherGoalData != null && Kotlin.isType(otherGoalData.get_11rb$('hiddenGoalExpressions'), List)) {
          var hiddenGoalExpressions = Kotlin.isType(tmp$_0 = otherGoalData.get_11rb$('hiddenGoalExpressions'), List) ? tmp$_0 : throwCCE();
          log_1.addMessage_cte53e$(checkFactsInTex$lambda_10(hiddenGoalExpressions), void 0, 0);
          var expressionNodeConstructor = new ExpressionNodeConstructor(compiledConfiguration.functionConfiguration);
          tmp$_1 = hiddenGoalExpressions.iterator();
          while (tmp$_1.hasNext()) {
            var hiddenGoalExpression = tmp$_1.next();
            log_1.addMessage_cte53e$(checkFactsInTex$lambda_11(hiddenGoalExpression), void 0, 0);
            if (typeof hiddenGoalExpression === 'string') {
              var hiddenGoalExpressionNode = expressionNodeConstructor.construct_61zpoe$(hiddenGoalExpression);
              log_1.addMessage_cte53e$(checkFactsInTex$lambda_12(hiddenGoalExpressionNode), void 0, 0);
              if (compiledConfiguration.factComparator.expressionComparator.compareAsIs_5gxvt3$(hiddenGoalExpressionNode, resultExpression.data, void 0, true)) {
                log_1.addMessage_cte53e$(checkFactsInTex$lambda_13(hiddenGoalExpression), void 0, 0);
                answerPatterFound = true;
              }
            }
          }
        }
        if (!isBlank(targetFactPattern)) {
          var expressionStructureConditionConstructor = new ExpressionStructureConditionConstructor(compiledConfiguration);
          var patternNode = expressionStructureConditionConstructor.parse_61zpoe$(targetFactPattern);
          log_1.addMessage_cte53e$(checkFactsInTex$lambda_14(patternNode), void 0, 0);
          if (checkExpressionStructure(resultExpression.data, patternNode)) {
            log_1.addMessage_cte53e$(checkFactsInTex$lambda_15(patternNode), void 0, 0);
            answerPatterFound = true;
          }
           else {
            log_1.addMessage_cte53e$(checkFactsInTex$lambda_16(patternNode), void 0, 0);
          }
        }
        if (!answerPatterFound) {
          return new TexVerificationResult(result, 'Error: answer does not match given condition');
        }
      }
      log_1.addMessage_cte53e$(checkFactsInTex$lambda_17, MessageType$USER_getInstance(), 0);
      return new TexVerificationResult(result, '');
    }
  }
  function returnParsingErrorTex(error, tex) {
    return returnParsingErrorTex_0(error.description, error.position, error.endPosition, tex);
  }
  function returnParsingErrorTex$lambda(closure$description) {
    return function () {
      return "transformations parsing error: '" + closure$description + "'";
    };
  }
  function returnParsingErrorTex_0(description, start, end, tex) {
    log_1.addMessage_cte53e$(returnParsingErrorTex$lambda(description), MessageType$USER_getInstance(), 0);
    var endPosition = findClosestPlaceToTargetOnTheSameLevel(tex, start, end, false);
    var tmp$ = tex.substring(0, start) + '\\underline{' + tex.substring(start, endPosition) + '}';
    var endIndex = tex.length;
    var result = tmp$ + tex.substring(endPosition, endIndex);
    return result;
  }
  function deleteUnsupportedTags(string) {
    var tmp$;
    var result = StringBuilder_init_0();
    var pos = 0;
    while (pos < string.length) {
      var toWhile = false;
      tmp$ = unsupportedTagListMathML.iterator();
      while (tmp$.hasNext()) {
        var tag = tmp$.next();
        if (remainingExpressionStartsWith('<\/' + tag + '>', string, pos)) {
          pos = pos + ('<\/' + tag + '>').length | 0;
          toWhile = true;
          result.append_gw00v9$('<\/mrow>');
        }
         else if (remainingExpressionStartsWith('<' + tag, string, pos)) {
          var actualTag = readOpenTagStringIfItPresent(string, pos);
          pos = pos + ensureNotNull(actualTag).length | 0;
          toWhile = true;
          result.append_gw00v9$('<mrow>');
        }
        if (toWhile) {
          break;
        }
      }
      if (toWhile) {
        continue;
      }
      result.append_s8itvh$(string.charCodeAt(pos));
      pos = pos + 1 | 0;
    }
    return result.toString();
  }
  function compiledConfigurationBySettings(wellKnownFunctionsString, expressionTransformationRulesString, maxExpressionTransformationWeightString, unlimitedWellKnownFunctionsString, taskContextExpressionTransformationRulesString, maxDistBetweenDiffStepsString, scopeFilterString, wellKnownFunctions, unlimitedWellKnownFunctions, expressionTransformationRules, subjectType, additionalParamsMap) {
    if (wellKnownFunctionsString === void 0)
      wellKnownFunctionsString = '';
    if (expressionTransformationRulesString === void 0)
      expressionTransformationRulesString = '';
    if (maxExpressionTransformationWeightString === void 0)
      maxExpressionTransformationWeightString = '';
    if (unlimitedWellKnownFunctionsString === void 0)
      unlimitedWellKnownFunctionsString = '';
    if (taskContextExpressionTransformationRulesString === void 0)
      taskContextExpressionTransformationRulesString = '';
    if (maxDistBetweenDiffStepsString === void 0)
      maxDistBetweenDiffStepsString = '';
    if (scopeFilterString === void 0)
      scopeFilterString = '';
    if (wellKnownFunctions === void 0) {
      wellKnownFunctions = emptyList();
    }
    if (unlimitedWellKnownFunctions === void 0) {
      unlimitedWellKnownFunctions = emptyList();
    }
    if (expressionTransformationRules === void 0) {
      expressionTransformationRules = emptyList();
    }
    if (subjectType === void 0)
      subjectType = '';
    if (additionalParamsMap === void 0) {
      additionalParamsMap = emptyMap();
    }
    var $receiver = split(scopeFilterString, [configSeparator]);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0;
      destination.add_11rb$(trim(Kotlin.isCharSequence(tmp$_0 = item) ? tmp$_0 : throwCCE()).toString());
    }
    var functionConfiguration = new FunctionConfiguration(toSet(destination));
    if (!wellKnownFunctions.isEmpty()) {
      functionConfiguration.notChangesOnVariablesInComparisonFunction = wellKnownFunctions;
    }
     else {
      if (!isBlank(wellKnownFunctionsString)) {
        var pairs = pairsFromString(wellKnownFunctionsString);
        var destination_0 = ArrayList_init_0(collectionSizeOrDefault(pairs, 10));
        var tmp$_1;
        tmp$_1 = pairs.iterator();
        while (tmp$_1.hasNext()) {
          var item_0 = tmp$_1.next();
          destination_0.add_11rb$(new FunctionIdentifier(item_0.first, toInt(item_0.second)));
        }
        functionConfiguration.notChangesOnVariablesInComparisonFunction = toMutableList(destination_0);
      }
    }
    if (!unlimitedWellKnownFunctions.isEmpty()) {
      functionConfiguration.notChangesOnVariablesInComparisonFunctionWithoutTransformations = unlimitedWellKnownFunctions;
    }
     else {
      if (!isBlank(unlimitedWellKnownFunctionsString)) {
        var pairs_0 = pairsFromString(unlimitedWellKnownFunctionsString);
        var destination_1 = ArrayList_init_0(collectionSizeOrDefault(pairs_0, 10));
        var tmp$_2;
        tmp$_2 = pairs_0.iterator();
        while (tmp$_2.hasNext()) {
          var item_1 = tmp$_2.next();
          destination_1.add_11rb$(new FunctionIdentifier(item_1.first, toInt(item_1.second)));
        }
        functionConfiguration.notChangesOnVariablesInComparisonFunctionWithoutTransformations = toMutableList(destination_1);
      }
    }
    if (expressionTransformationRulesString.length > 0) {
      var $receiver_0 = functionConfiguration.treeTransformationRules;
      var destination_2 = ArrayList_init();
      var tmp$_3;
      tmp$_3 = $receiver_0.iterator();
      while (tmp$_3.hasNext()) {
        var element = tmp$_3.next();
        if (element.isImmediate === true)
          destination_2.add_11rb$(element);
      }
      functionConfiguration.treeTransformationRules = toMutableList(destination_2);
      var pairs_1 = pairsFromString(expressionTransformationRulesString);
      var tmp$_4 = functionConfiguration.treeTransformationRules;
      var destination_3 = ArrayList_init_0(collectionSizeOrDefault(pairs_1, 10));
      var tmp$_5;
      tmp$_5 = pairs_1.iterator();
      while (tmp$_5.hasNext()) {
        var item_2 = tmp$_5.next();
        destination_3.add_11rb$(new TreeTransformationRule(item_2.first, item_2.second));
      }
      tmp$_4.addAll_brywnq$(destination_3);
    }
    if (taskContextExpressionTransformationRulesString.length > 0) {
      var $receiver_1 = functionConfiguration.taskContextTreeTransformationRules;
      var destination_4 = ArrayList_init();
      var tmp$_6;
      tmp$_6 = $receiver_1.iterator();
      while (tmp$_6.hasNext()) {
        var element_0 = tmp$_6.next();
        if (element_0.isImmediate === true)
          destination_4.add_11rb$(element_0);
      }
      functionConfiguration.taskContextTreeTransformationRules = toMutableList(destination_4);
      var pairs_2 = pairsFromString(taskContextExpressionTransformationRulesString);
      var tmp$_7 = functionConfiguration.taskContextTreeTransformationRules;
      var destination_5 = ArrayList_init_0(collectionSizeOrDefault(pairs_2, 10));
      var tmp$_8;
      tmp$_8 = pairs_2.iterator();
      while (tmp$_8.hasNext()) {
        var item_3 = tmp$_8.next();
        destination_5.add_11rb$(new TreeTransformationRule(item_3.first, item_3.second));
      }
      tmp$_7.addAll_brywnq$(destination_5);
    }
    var compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration, void 0, void 0, void 0, void 0, additionalParamsMap, void 0, void 0, void 0, subjectType);
    if (!expressionTransformationRules.isEmpty()) {
      compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers.clear();
      var tmp$_9 = compiledConfiguration.expressionTreeAutogeneratedTransformationRuleIdentifiers;
      var destination_6 = ArrayList_init();
      var tmp$_10;
      tmp$_10 = expressionTransformationRules.iterator();
      while (tmp$_10.hasNext()) {
        var element_1 = tmp$_10.next();
        var tmp$_11 = element_1.left.nodeType === NodeType$EMPTY_getInstance() || element_1.right.nodeType === NodeType$EMPTY_getInstance();
        if (tmp$_11) {
          tmp$_11 = element_1.code.length > 0;
        }
        if (tmp$_11)
          destination_6.add_11rb$(element_1);
      }
      var destination_7 = ArrayList_init_0(collectionSizeOrDefault(destination_6, 10));
      var tmp$_12;
      tmp$_12 = destination_6.iterator();
      while (tmp$_12.hasNext()) {
        var item_4 = tmp$_12.next();
        destination_7.add_11rb$(new Pair(item_4.code, item_4));
      }
      putAll(tmp$_9, destination_7);
      compiledConfiguration.compiledExpressionTreeTransformationRules.clear();
      var tmp$_13 = compiledConfiguration.compiledExpressionTreeTransformationRules;
      var destination_8 = ArrayList_init();
      var tmp$_14;
      tmp$_14 = expressionTransformationRules.iterator();
      while (tmp$_14.hasNext()) {
        var element_2 = tmp$_14.next();
        if (!(element_2.left.nodeType === NodeType$EMPTY_getInstance() || element_2.right.nodeType === NodeType$EMPTY_getInstance()))
          destination_8.add_11rb$(element_2);
      }
      tmp$_13.addAll_brywnq$(destination_8);
    }
    if (!isBlank(maxExpressionTransformationWeightString)) {
      compiledConfiguration.comparisonSettings.maxExpressionTransformationWeight = toDouble(maxExpressionTransformationWeightString);
    }
    if (!isBlank(maxDistBetweenDiffStepsString)) {
      compiledConfiguration.comparisonSettings.maxDistBetweenDiffSteps = toDouble(maxDistBetweenDiffStepsString);
    }
    return compiledConfiguration;
  }
  function combineSolutionRoot$lambda() {
    return 'solution with task target joined: ';
  }
  function combineSolutionRoot(targetFactIdentifier, transformationChainParser, compiledConfiguration, startExpressionIdentifier, endExpressionIdentifier, comparisonSign) {
    if (startExpressionIdentifier === void 0)
      startExpressionIdentifier = '';
    if (endExpressionIdentifier === void 0)
      endExpressionIdentifier = '';
    if (comparisonSign === void 0)
      comparisonSign = '';
    var tmp$;
    if (!isBlank(startExpressionIdentifier) && transformationChainParser.root.factTransformationChains.isEmpty() && transformationChainParser.root.expressionTransformationChains.size === 1) {
      var expressionNodeConstructor = new ExpressionNodeConstructor(compiledConfiguration.functionConfiguration);
      var startExpression = expressionNodeConstructor.construct_61zpoe$(startExpressionIdentifier);
      first(transformationChainParser.root.expressionTransformationChains).chain.add_wxm5ur$(0, new Expression(void 0, void 0, startExpression, void 0, transformationChainParser.root));
      if (!isBlank(endExpressionIdentifier)) {
        var endExpression = expressionNodeConstructor.construct_61zpoe$(endExpressionIdentifier);
        first(transformationChainParser.root.expressionTransformationChains).chain.add_11rb$(new Expression(void 0, void 0, endExpression, void 0, transformationChainParser.root));
      }
      if (comparisonSign.length > 0) {
        first(transformationChainParser.root.expressionTransformationChains).comparisonType = valueOfComparisonType(comparisonSign);
      }
    }
    if (contains_1(targetFactIdentifier, '}{=}{') || contains_1(targetFactIdentifier, '}{<}{') || contains_1(targetFactIdentifier, '}{>}{') || contains_1(targetFactIdentifier, '}{<=}{') || contains_1(targetFactIdentifier, '}{>=}{')) {
      var taskTargetFact = ensureNotNull(log_1.factConstructorViewer).constructFactByIdentifier_5jrdui$(targetFactIdentifier);
      var taskTargetRoot = taskTargetFact.type() === transformationChainParser.root.type() ? taskTargetFact : new MainLineAndNode(void 0, void 0, void 0, void 0, mutableListOf([taskTargetFact]));
      var newRoot = new MainLineAndNode(void 0, void 0, void 0, mutableListOf([new MainChain(mutableListOf([transformationChainParser.root, taskTargetRoot]))]));
      log_1.addMessageWithFactDetail_d1xyjh$(combineSolutionRoot$lambda, newRoot, MessageType$USER_getInstance());
      tmp$ = newRoot;
    }
     else {
      tmp$ = transformationChainParser.root;
    }
    return tmp$;
  }
  function pairsFromString(data) {
    var result = ArrayList_init();
    var tmp$;
    var $receiver = split(trim(Kotlin.isCharSequence(tmp$ = data) ? tmp$ : throwCCE()).toString(), [configSeparator]);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      var tmp$_1;
      destination.add_11rb$(trim(Kotlin.isCharSequence(tmp$_1 = item) ? tmp$_1 : throwCCE()).toString());
    }
    var parts = destination;
    var i = 1;
    while (i < parts.size) {
      result.add_11rb$(new Pair(parts.get_za3lpa$(i - 1 | 0), parts.get_za3lpa$(i)));
      i = i + 2 | 0;
    }
    return result;
  }
  function pairsStringIntFromString(data) {
    var result = ArrayList_init();
    var tmp$;
    var $receiver = split(trim(Kotlin.isCharSequence(tmp$ = data) ? tmp$ : throwCCE()).toString(), [configSeparator]);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      var tmp$_1;
      destination.add_11rb$(trim(Kotlin.isCharSequence(tmp$_1 = item) ? tmp$_1 : throwCCE()).toString());
    }
    var parts = destination;
    var i = 1;
    while (i < parts.size) {
      result.add_11rb$(new Pair(parts.get_za3lpa$(i - 1 | 0), toInt(parts.get_za3lpa$(i))));
      i = i + 2 | 0;
    }
    return result;
  }
  function additionalFactsFromItsIdentifiers($receiver, additionalFactsIdentifiers) {
    var $receiver_0 = split(additionalFactsIdentifiers, [configSeparator]);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0;
      destination.add_11rb$(trim(Kotlin.isCharSequence(tmp$_0 = item) ? tmp$_0 : throwCCE()).toString());
    }
    var destination_0 = ArrayList_init();
    var tmp$_1;
    tmp$_1 = destination.iterator();
    while (tmp$_1.hasNext()) {
      var element = tmp$_1.next();
      if (element.length > 0)
        destination_0.add_11rb$(element);
    }
    var identifiers = destination_0;
    var destination_1 = ArrayList_init_0(collectionSizeOrDefault(identifiers, 10));
    var tmp$_2;
    tmp$_2 = identifiers.iterator();
    while (tmp$_2.hasNext()) {
      var item_0 = tmp$_2.next();
      destination_1.add_11rb$($receiver.constructFactByIdentifier_5jrdui$(item_0));
    }
    return destination_1;
  }
  var configSeparator;
  var errorPrefix;
  var syntaxErrorPrefix;
  function CageHolder(minPoint, maxPoint) {
    CageHolder$Companion_getInstance();
    this.minPoint_0 = minPoint;
    this.maxPoint_0 = maxPoint;
    var tmp$;
    if (this.minPoint_0.size !== this.maxPoint_0.size) {
      throw IllegalArgumentException_init('Points have different dimensions');
    }
    tmp$ = this.minPoint_0.size;
    for (var i = 0; i <= tmp$; i++) {
      if (this.minPoint_0.get_za3lpa$(i) > this.maxPoint_0.get_za3lpa$(i)) {
        throw IllegalArgumentException_init('Min point greater than max point in position ' + i);
      }
    }
  }
  function CageHolder$Companion() {
    CageHolder$Companion_instance = this;
  }
  CageHolder$Companion.prototype.fullSpaceCageHolder_za3lpa$ = function (dimension) {
    var minPoint = ArrayList_init();
    var maxPoint = ArrayList_init();
    for (var i = 0; i <= dimension; i++) {
      minPoint.add_11rb$(kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY);
      maxPoint.add_11rb$(kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY);
    }
    return new CageHolder(minPoint, maxPoint);
  };
  CageHolder$Companion.prototype.emptyCageHolder_za3lpa$ = function (dimension) {
    var minPoint = ArrayList_init();
    var maxPoint = ArrayList_init();
    for (var i = 0; i <= dimension; i++) {
      minPoint.add_11rb$(kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY);
      maxPoint.add_11rb$(kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY);
    }
    return new CageHolder(minPoint, maxPoint);
  };
  CageHolder$Companion.prototype.domainIntersection_cvc6z0$ = function (domains, dimension) {
    var tmp$, tmp$_0, tmp$_1;
    var intersectionMinPoint = ArrayList_init();
    var intersectionMaxPoint = ArrayList_init();
    if (domains.isEmpty()) {
      return this.fullSpaceCageHolder_za3lpa$(dimension);
    }
    tmp$ = domains.iterator();
    while (tmp$.hasNext()) {
      var domain = tmp$.next();
      if (domain.getDimension() !== dimension) {
        throw IllegalArgumentException_init("Different point's dimensions");
      }
    }
    loop_label: for (var i = 0; i <= dimension; i++) {
      var maxBy$result;
      maxBy$break: do {
        var iterator = domains.iterator();
        if (!iterator.hasNext()) {
          maxBy$result = null;
          break maxBy$break;
        }
        var maxElem = iterator.next();
        if (!iterator.hasNext()) {
          maxBy$result = maxElem;
          break maxBy$break;
        }
        var maxValue = maxElem.minPoint_0.get_za3lpa$(i);
        do {
          var e = iterator.next();
          var v = e.minPoint_0.get_za3lpa$(i);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }
        }
         while (iterator.hasNext());
        maxBy$result = maxElem;
      }
       while (false);
      intersectionMinPoint.add_11rb$(ensureNotNull((tmp$_0 = maxBy$result) != null ? tmp$_0.minPoint_0 : null).get_za3lpa$(i));
      var minBy$result;
      minBy$break: do {
        var iterator_0 = domains.iterator();
        if (!iterator_0.hasNext()) {
          minBy$result = null;
          break minBy$break;
        }
        var minElem = iterator_0.next();
        if (!iterator_0.hasNext()) {
          minBy$result = minElem;
          break minBy$break;
        }
        var minValue = minElem.maxPoint_0.get_za3lpa$(i);
        do {
          var e_0 = iterator_0.next();
          var v_0 = e_0.maxPoint_0.get_za3lpa$(i);
          if (Kotlin.compareTo(minValue, v_0) > 0) {
            minElem = e_0;
            minValue = v_0;
          }
        }
         while (iterator_0.hasNext());
        minBy$result = minElem;
      }
       while (false);
      intersectionMaxPoint.add_11rb$(ensureNotNull((tmp$_1 = minBy$result) != null ? tmp$_1.maxPoint_0 : null).get_za3lpa$(i));
    }
    for (var i_0 = 0; i_0 <= dimension; i_0++) {
      if (intersectionMaxPoint.get_za3lpa$(i_0) < intersectionMinPoint.get_za3lpa$(i_0)) {
        return this.emptyCageHolder_za3lpa$(dimension);
      }
    }
    return new CageHolder(intersectionMinPoint, intersectionMaxPoint);
  };
  CageHolder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var CageHolder$Companion_instance = null;
  function CageHolder$Companion_getInstance() {
    if (CageHolder$Companion_instance === null) {
      new CageHolder$Companion();
    }
    return CageHolder$Companion_instance;
  }
  CageHolder.prototype.pointInDomain_l8u4bv$ = function (point) {
    var tmp$;
    if (point.size !== this.minPoint_0.size) {
      throw IllegalArgumentException_init("Point's dimension " + point.size + ' != cage dimension ' + this.minPoint_0.size + '$');
    }
    tmp$ = this.getDimension();
    for (var i = 0; i <= tmp$; i++) {
      if (point.get_za3lpa$(i) < this.minPoint_0.get_za3lpa$(i) || point.get_za3lpa$(i) > this.maxPoint_0.get_za3lpa$(i)) {
        return false;
      }
    }
    return true;
  };
  CageHolder.prototype.getDimension = function () {
    return this.minPoint_0.size;
  };
  CageHolder.prototype.isEmpty = function () {
    var tmp$;
    tmp$ = this.getDimension();
    for (var i = 0; i <= tmp$; i++) {
      if (this.minPoint_0.get_za3lpa$(i) !== kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY) {
        return false;
      }
    }
    return true;
  };
  CageHolder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CageHolder',
    interfaces: []
  };
  function Form(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Form_initFields() {
    Form_initFields = function () {
    };
    Form$ALGEBRAIC_instance = new Form('ALGEBRAIC', 0);
    Form$TRIGONOMETRIC_instance = new Form('TRIGONOMETRIC', 1);
  }
  var Form$ALGEBRAIC_instance;
  function Form$ALGEBRAIC_getInstance() {
    Form_initFields();
    return Form$ALGEBRAIC_instance;
  }
  var Form$TRIGONOMETRIC_instance;
  function Form$TRIGONOMETRIC_getInstance() {
    Form_initFields();
    return Form$TRIGONOMETRIC_instance;
  }
  Form.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Form',
    interfaces: [Enum]
  };
  function Form$values() {
    return [Form$ALGEBRAIC_getInstance(), Form$TRIGONOMETRIC_getInstance()];
  }
  Form.values = Form$values;
  function Form$valueOf(name) {
    switch (name) {
      case 'ALGEBRAIC':
        return Form$ALGEBRAIC_getInstance();
      case 'TRIGONOMETRIC':
        return Form$TRIGONOMETRIC_getInstance();
      default:throwISE('No enum constant mathhelper.twf.numbers.Form.' + name);
    }
  }
  Form.valueOf_61zpoe$ = Form$valueOf;
  function toComplex($receiver) {
    return Complex_init(toReal($receiver), toReal(0), Form$ALGEBRAIC_getInstance());
  }
  function toComplex_0($receiver) {
    return Complex_init(toReal_0($receiver), toReal(0), Form$ALGEBRAIC_getInstance());
  }
  function toComplexOrNull($receiver) {
    var realValue = toRealOrNull($receiver);
    if (realValue != null) {
      return Complex_init(realValue, Real_init(0), Form$ALGEBRAIC_getInstance());
    }
    if ($receiver.length > 0 && $receiver.charCodeAt(0) === 105) {
      var imaginaryValue = toRealOrNull($receiver.substring(1));
      if (imaginaryValue != null) {
        return Complex_init(Real_init(0), imaginaryValue, Form$ALGEBRAIC_getInstance());
      }
    }
    var partsOfNumber = split($receiver, ['+i']);
    if (partsOfNumber.size !== 2) {
      return null;
    }
    var realPart = toRealOrNull(partsOfNumber.get_za3lpa$(0));
    var imaginaryPart = toRealOrNull(partsOfNumber.get_za3lpa$(1));
    if (realPart == null || imaginaryPart == null) {
      return null;
    }
    return Complex_init(realPart, imaginaryPart, Form$ALGEBRAIC_getInstance());
  }
  function toComplex_1($receiver) {
    var result = toComplexOrNull($receiver);
    if (result == null) {
      throw IllegalStateException_init_0($receiver + ' cannot be converted to complex');
    }
     else {
      return result;
    }
  }
  function Complex() {
    Complex$Companion_getInstance();
    this.real_0 = Real_init(0);
    this.imaginary_0 = Real_init(0);
  }
  function Complex$Companion() {
    Complex$Companion_instance = this;
    this.i = Complex_init(Real_init(0), Real_init(1), Form$ALGEBRAIC_getInstance());
  }
  Complex$Companion.prototype.exp_m1n3ex$ = function (z) {
    return Complex_init(Real$Companion_getInstance().exp_lnp2qj$(z.real_0), z.imaginary_0, Form$TRIGONOMETRIC_getInstance());
  };
  Complex$Companion.prototype.ln_m1n3ex$ = function (z) {
    return Complex_init(Real$Companion_getInstance().ln_lnp2qj$(z.getRadius()), z.getAngle(), Form$ALGEBRAIC_getInstance());
  };
  Complex$Companion.prototype.sin_m1n3ex$ = function (z) {
    return this.exp_m1n3ex$(this.i.times_m1n3ex$(z)).minus_m1n3ex$(this.exp_m1n3ex$(this.i.unaryMinus().times_m1n3ex$(z))).div_m1n3ex$(this.i.times_lnp2qj$(toReal(2)));
  };
  Complex$Companion.prototype.cos_m1n3ex$ = function (z) {
    return this.exp_m1n3ex$(this.i.times_m1n3ex$(z)).plus_m1n3ex$(this.exp_m1n3ex$(this.i.unaryMinus().times_m1n3ex$(z))).div_lnp2qj$(toReal(2));
  };
  Complex$Companion.prototype.tan_m1n3ex$ = function (z) {
    return this.sin_m1n3ex$(z).div_m1n3ex$(this.cos_m1n3ex$(z));
  };
  Complex$Companion.prototype.sinh_m1n3ex$ = function (z) {
    return this.i.unaryMinus().times_m1n3ex$(this.sin_m1n3ex$(this.i.times_m1n3ex$(z)));
  };
  Complex$Companion.prototype.cosh_m1n3ex$ = function (z) {
    return this.cos_m1n3ex$(this.i.times_m1n3ex$(z));
  };
  Complex$Companion.prototype.tanh_m1n3ex$ = function (z) {
    return this.i.unaryMinus().times_m1n3ex$(this.tan_m1n3ex$(this.i.times_m1n3ex$(z)));
  };
  Complex$Companion.prototype.abs_m1n3ex$ = function (z) {
    return z.getRadius();
  };
  Complex$Companion.prototype.sqrt_m1n3ex$ = function (z) {
    if (z.imaginary_0.additivelyEqualToZero()) {
      if (z.real_0.additivelyEqualToZero())
        return toComplex(0);
      if (z.real_0.compareTo_11rb$(toReal(0)) > 0)
        return Complex_init(Real$Companion_getInstance().sqrt_lnp2qj$(z.real_0), toReal(0));
      if (z.imaginary_0.value < -Real$Companion_getInstance().EPSILON)
        return Complex_init(toReal(0), Real$Companion_getInstance().sqrt_lnp2qj$(z.real_0.unaryMinus()).unaryMinus());
      return Complex_init(toReal(0), Real$Companion_getInstance().sqrt_lnp2qj$(z.real_0.unaryMinus()));
    }
     else {
      var r = z.getRadius();
      var zz = z.plus_m1n3ex$(toComplex(1).minus_m1n3ex$(z).times_lnp2qj$(r).div_lnp2qj$(r.plus_lnp2qj$(toReal(1))));
      var rz = zz.getRadius();
      zz.timesAssign_lnp2qj$(Real$Companion_getInstance().sqrt_lnp2qj$(r).div_lnp2qj$(rz));
      return zz;
    }
  };
  Complex$Companion.prototype.pow2_m1n3ex$ = function (z) {
    return z.pow_lnp2qj$(Real_init(2));
  };
  Complex$Companion.prototype.asin_m1n3ex$ = function (z) {
    return this.i.unaryMinus().times_m1n3ex$(this.ln_m1n3ex$(this.i.times_m1n3ex$(z).plus_m1n3ex$(this.sqrt_m1n3ex$(this.pow2_m1n3ex$(z).unaryMinus().plus_m1n3ex$(toComplex(1))))));
  };
  Complex$Companion.prototype.acos_m1n3ex$ = function (z) {
    return this.i.unaryMinus().times_m1n3ex$(this.ln_m1n3ex$(z.plus_m1n3ex$(this.sqrt_m1n3ex$(this.pow2_m1n3ex$(z).minus_m1n3ex$(toComplex(1))))));
  };
  Complex$Companion.prototype.atan_m1n3ex$ = function (z) {
    return this.i.div_lnp2qj$(toReal(2)).unaryMinus().times_m1n3ex$(this.ln_m1n3ex$(toComplex(1).plus_m1n3ex$(this.i.times_m1n3ex$(z)).div_m1n3ex$(toComplex(1).minus_m1n3ex$(this.i.times_m1n3ex$(z)))));
  };
  Complex$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Complex$Companion_instance = null;
  function Complex$Companion_getInstance() {
    if (Complex$Companion_instance === null) {
      new Complex$Companion();
    }
    return Complex$Companion_instance;
  }
  Complex.prototype.plus_m1n3ex$ = function (other) {
    return Complex_init(this.real_0.plus_lnp2qj$(other.real_0), this.imaginary_0.plus_lnp2qj$(other.imaginary_0));
  };
  Complex.prototype.minus_m1n3ex$ = function (other) {
    return Complex_init(this.real_0.minus_lnp2qj$(other.real_0), this.imaginary_0.minus_lnp2qj$(other.imaginary_0));
  };
  Complex.prototype.times_m1n3ex$ = function (other) {
    var r = this.real_0.times_lnp2qj$(other.real_0).minus_lnp2qj$(this.imaginary_0.times_lnp2qj$(other.imaginary_0));
    var i = this.real_0.times_lnp2qj$(other.imaginary_0).plus_lnp2qj$(other.real_0.times_lnp2qj$(this.imaginary_0));
    return Complex_init(r, i);
  };
  Complex.prototype.div_m1n3ex$ = function (other) {
    var res = this.times_m1n3ex$(Complex_init(other.real_0, other.imaginary_0.unaryMinus()));
    var radius2 = Real$Companion_getInstance().pow2_lnp2qj$(other.real_0).plus_lnp2qj$(Real$Companion_getInstance().pow2_lnp2qj$(other.imaginary_0));
    res.real_0 = res.real_0.div_lnp2qj$(radius2);
    res.imaginary_0 = res.imaginary_0.div_lnp2qj$(radius2);
    return res;
  };
  Complex.prototype.times_lnp2qj$ = function (other) {
    return Complex_init(this.real_0.times_lnp2qj$(other), this.imaginary_0.times_lnp2qj$(other));
  };
  Complex.prototype.div_lnp2qj$ = function (other) {
    return Complex_init(this.real_0.div_lnp2qj$(other), this.imaginary_0.div_lnp2qj$(other));
  };
  Complex.prototype.unaryMinus = function () {
    return Complex_init(this.real_0.unaryMinus(), this.imaginary_0.unaryMinus());
  };
  Complex.prototype.plusAssign_m1n3ex$ = function (other) {
    this.real_0 = this.real_0.plus_lnp2qj$(other.real_0);
    this.imaginary_0 = this.imaginary_0.plus_lnp2qj$(other.imaginary_0);
  };
  Complex.prototype.minusAssign_m1n3ex$ = function (other) {
    this.real_0 = this.real_0.minus_lnp2qj$(other.real_0);
    this.imaginary_0 = this.imaginary_0.minus_lnp2qj$(other.imaginary_0);
  };
  Complex.prototype.timesAssign_m1n3ex$ = function (other) {
    var r = this.real_0.times_lnp2qj$(other.real_0).minus_lnp2qj$(this.imaginary_0.times_lnp2qj$(other.imaginary_0));
    var i = this.real_0.times_lnp2qj$(other.imaginary_0).plus_lnp2qj$(other.real_0.times_lnp2qj$(this.imaginary_0));
    this.real_0 = r;
    this.imaginary_0 = i;
  };
  Complex.prototype.divAssign_m1n3ex$ = function (other) {
    this.timesAssign_m1n3ex$(Complex_init(other.real_0, other.imaginary_0.unaryMinus()));
    var radius2 = Real$Companion_getInstance().pow2_lnp2qj$(other.real_0).plus_lnp2qj$(Real$Companion_getInstance().pow2_lnp2qj$(other.imaginary_0));
    this.real_0 = this.real_0.div_lnp2qj$(radius2);
    this.imaginary_0 = this.imaginary_0.div_lnp2qj$(radius2);
  };
  Complex.prototype.timesAssign_lnp2qj$ = function (other) {
    this.real_0 = this.real_0.times_lnp2qj$(other);
    this.imaginary_0 = this.imaginary_0.times_lnp2qj$(other);
  };
  Complex.prototype.divAssign_lnp2qj$ = function (other) {
    this.real_0 = this.real_0.div_lnp2qj$(other);
    this.imaginary_0 = this.imaginary_0.div_lnp2qj$(other);
  };
  Complex.prototype.equals_m1n3ex$ = function (other) {
    return this.real_0.additivelyEqualTo_lnp2qj$(other.real_0) && this.imaginary_0.additivelyEqualTo_lnp2qj$(other.imaginary_0);
  };
  Complex.prototype.pow_m1n3ex$ = function (arg) {
    var tmp$;
    if (this.additivelyEqualToZero_0()) {
      tmp$ = toComplex(0);
    }
     else {
      tmp$ = Complex$Companion_getInstance().exp_m1n3ex$(arg.times_m1n3ex$(Complex$Companion_getInstance().ln_m1n3ex$(this)));
    }
    return tmp$;
  };
  Complex.prototype.additivelyEqualToZero_0 = function () {
    return this.getRadius().additivelyEqualToZero();
  };
  Complex.prototype.getAngle_0 = function (r) {
    if (r.additivelyEqualToZero())
      return toReal(0);
    return this.imaginary_0.compareTo_11rb$(toReal(0)) >= 0 ? Real$Companion_getInstance().acos_lnp2qj$(this.real_0.div_lnp2qj$(r)) : Real$Companion_getInstance().acos_lnp2qj$(this.real_0.div_lnp2qj$(r)).unaryMinus();
  };
  Complex.prototype.pow_lnp2qj$ = function (arg) {
    return this.pow_m1n3ex$(Complex_init(arg, Real_init(0)));
  };
  Complex.prototype.toString = function () {
    return this.real_0.toString() + '+i' + this.imaginary_0;
  };
  Complex.prototype.toDouble = function () {
    return this.real_0.toDouble();
  };
  Complex.prototype.getRadius = function () {
    return Real$Companion_getInstance().sqrt_lnp2qj$(Real$Companion_getInstance().pow2_lnp2qj$(this.real_0).plus_lnp2qj$(Real$Companion_getInstance().pow2_lnp2qj$(this.imaginary_0)));
  };
  Complex.prototype.getAngle = function () {
    var r = this.getRadius();
    return this.getAngle_0(r);
  };
  Complex.prototype.getReal = function () {
    return this.real_0;
  };
  Complex.prototype.getImaginary = function () {
    return this.imaginary_0;
  };
  Complex.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Complex',
    interfaces: []
  };
  function Complex_init(realOrRadius, imaginaryOrAngle, form, $this) {
    if (form === void 0)
      form = Form$ALGEBRAIC_getInstance();
    $this = $this || Object.create(Complex.prototype);
    Complex.call($this);
    switch (form.name) {
      case 'ALGEBRAIC':
        $this.real_0 = realOrRadius;
        $this.imaginary_0 = imaginaryOrAngle;
        break;
      case 'TRIGONOMETRIC':
        if (realOrRadius.compareTo_11rb$(toReal(0)) < 0) {
          throw IllegalArgumentException_init('error: radius < 0');
        }

        $this.real_0 = realOrRadius.times_lnp2qj$(Real$Companion_getInstance().cos_lnp2qj$(imaginaryOrAngle));
        $this.imaginary_0 = realOrRadius.times_lnp2qj$(Real$Companion_getInstance().sin_lnp2qj$(imaginaryOrAngle));
        break;
    }
    return $this;
  }
  function LineSegmentHolder(from, to) {
    LineSegmentHolder$Companion_getInstance();
    this.from_0 = from;
    this.to_0 = to;
    if (this.from_0 > this.to_0) {
      var temporary = this.from_0;
      this.from_0 = this.to_0;
      this.to_0 = temporary;
    }
  }
  function LineSegmentHolder$Companion() {
    LineSegmentHolder$Companion_instance = this;
    this.fullSegment = new LineSegmentHolder(kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY, kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY);
    this.emptySegment = new LineSegmentHolder(kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY, kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY);
    this.positiveSegment = new LineSegmentHolder(0.0, kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY);
  }
  LineSegmentHolder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var LineSegmentHolder$Companion_instance = null;
  function LineSegmentHolder$Companion_getInstance() {
    if (LineSegmentHolder$Companion_instance === null) {
      new LineSegmentHolder$Companion();
    }
    return LineSegmentHolder$Companion_instance;
  }
  LineSegmentHolder.prototype.pointInSegment_14dthe$ = function (point) {
    return rangeTo(this.from_0, this.to_0).contains_mef7kx$(point);
  };
  LineSegmentHolder.prototype.isSubzero = function () {
    return this.to_0 < 0;
  };
  LineSegmentHolder.prototype.isSubSegment_3th67w$ = function (segment) {
    return segment.from_0 <= this.from_0 && segment.to_0 >= this.to_0;
  };
  LineSegmentHolder.prototype.hasIntersection_3th67w$ = function (segment) {
    return !(segment.from_0 > this.to_0 || this.from_0 > segment.to_0);
  };
  LineSegmentHolder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LineSegmentHolder',
    interfaces: []
  };
  function toReal($receiver) {
    return Real_init($receiver);
  }
  function toReal_0($receiver) {
    return new Real($receiver);
  }
  function toRealOrNull($receiver) {
    var tmp$;
    var resultDouble = toDoubleOrNull($receiver);
    if (resultDouble === null) {
      tmp$ = null;
    }
     else {
      tmp$ = new Real(resultDouble);
    }
    return tmp$;
  }
  function Real(value) {
    Real$Companion_getInstance();
    this.value = value;
  }
  function Real$Companion() {
    Real$Companion_instance = this;
    this.PI = new Real(math.PI);
    this.EPSILON = 1.19E-6;
    this.POSITIVE_INFINITY_0 = new Real(kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY);
    this.NEGATIVE_INFINITY_0 = new Real(kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY);
  }
  Real$Companion.prototype.sin_lnp2qj$ = function (arg) {
    var x = arg.value;
    return new Real(Math_0.sin(x));
  };
  Real$Companion.prototype.cos_lnp2qj$ = function (arg) {
    var x = arg.value;
    return new Real(Math_0.cos(x));
  };
  Real$Companion.prototype.tan_lnp2qj$ = function (arg) {
    var x = arg.value;
    return new Real(Math_0.tan(x));
  };
  Real$Companion.prototype.exp_lnp2qj$ = function (arg) {
    var tmp$;
    if (arg === this.POSITIVE_INFINITY_0)
      tmp$ = this.POSITIVE_INFINITY_0;
    else if (arg === this.NEGATIVE_INFINITY_0)
      tmp$ = Real_init(0);
    else {
      var x = arg.value;
      tmp$ = new Real(Math_0.exp(x));
    }
    return tmp$;
  };
  Real$Companion.prototype.asin_lnp2qj$ = function (arg) {
    var x = arg.value;
    return new Real(Math_0.asin(x));
  };
  Real$Companion.prototype.acos_lnp2qj$ = function (arg) {
    var x = arg.value;
    return new Real(Math_0.acos(x));
  };
  Real$Companion.prototype.atan_lnp2qj$ = function (arg) {
    var tmp$;
    if (arg === this.POSITIVE_INFINITY_0)
      tmp$ = new Real(math.PI / 2);
    else if (arg === this.NEGATIVE_INFINITY_0)
      tmp$ = new Real(-math.PI / 2);
    else {
      var x = arg.value;
      tmp$ = new Real(Math_0.atan(x));
    }
    return tmp$;
  };
  Real$Companion.prototype.sinh_lnp2qj$ = function (arg) {
    var x = arg.value;
    return new Real(Math_0.sinh(x));
  };
  Real$Companion.prototype.cosh_lnp2qj$ = function (arg) {
    var x = arg.value;
    return new Real(Math_0.cosh(x));
  };
  Real$Companion.prototype.tanh_lnp2qj$ = function (arg) {
    var x = arg.value;
    return new Real(Math_0.tanh(x));
  };
  Real$Companion.prototype.ln_lnp2qj$ = function (arg) {
    var tmp$;
    if (arg === this.POSITIVE_INFINITY_0)
      tmp$ = this.POSITIVE_INFINITY_0;
    else {
      var x = arg.value;
      if (Math_0.log(x) === kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY)
        tmp$ = this.NEGATIVE_INFINITY_0;
      else {
        var x_0 = arg.value;
        tmp$ = new Real(Math_0.log(x_0));
      }
    }
    return tmp$;
  };
  Real$Companion.prototype.abs_lnp2qj$ = function (arg) {
    var tmp$;
    if (arg === this.POSITIVE_INFINITY_0 || arg === this.NEGATIVE_INFINITY_0) {
      tmp$ = this.POSITIVE_INFINITY_0;
    }
     else {
      var x = arg.value;
      tmp$ = new Real(Math_0.abs(x));
    }
    return tmp$;
  };
  Real$Companion.prototype.pow2_lnp2qj$ = function (arg) {
    var tmp$;
    if (arg === this.POSITIVE_INFINITY_0 || arg === this.NEGATIVE_INFINITY_0) {
      tmp$ = this.POSITIVE_INFINITY_0;
    }
     else {
      tmp$ = new Real(arg.value * arg.value);
    }
    return tmp$;
  };
  Real$Companion.prototype.sqrt_lnp2qj$ = function (arg) {
    var tmp$;
    if (arg === this.POSITIVE_INFINITY_0) {
      tmp$ = this.POSITIVE_INFINITY_0;
    }
     else {
      var x = arg.value;
      tmp$ = new Real(Math_0.sqrt(x));
    }
    return tmp$;
  };
  Real$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Real$Companion_instance = null;
  function Real$Companion_getInstance() {
    if (Real$Companion_instance === null) {
      new Real$Companion();
    }
    return Real$Companion_instance;
  }
  Real.prototype.compareTo_11rb$ = function (other) {
    return Kotlin.compareTo(this.value, other.value);
  };
  Real.prototype.plus_lnp2qj$ = function (other) {
    return new Real(this.value + other.value);
  };
  Real.prototype.minus_lnp2qj$ = function (other) {
    return new Real(this.value - other.value);
  };
  Real.prototype.times_lnp2qj$ = function (other) {
    return new Real(this.value * other.value);
  };
  Real.prototype.div_lnp2qj$ = function (other) {
    return new Real(this.value / other.value);
  };
  Real.prototype.unaryMinus = function () {
    return new Real(-this.value);
  };
  Real.prototype.additivelyEqualTo_lnp2qj$ = function (number) {
    return rangeTo(-Real$Companion_getInstance().EPSILON, Real$Companion_getInstance().EPSILON).contains_mef7kx$(this.value - number.value);
  };
  Real.prototype.additivelyEqualToZero = function () {
    return rangeTo(-Real$Companion_getInstance().EPSILON, Real$Companion_getInstance().EPSILON).contains_mef7kx$(this.value);
  };
  Real.prototype.pow_lnp2qj$ = function (arg) {
    var tmp$;
    if (this.additivelyEqualToZero()) {
      tmp$ = Real_init(0);
    }
     else {
      var $receiver = this.value;
      var x = arg.value;
      tmp$ = new Real(Math_0.pow($receiver, x));
    }
    return tmp$;
  };
  Real.prototype.toDouble = function () {
    return this.value;
  };
  Real.prototype.toString = function () {
    return this.value.toString();
  };
  Real.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Real',
    interfaces: [Comparable]
  };
  function Real_init(value, $this) {
    $this = $this || Object.create(Real.prototype);
    Real.call($this, value);
    return $this;
  }
  function NumberIntervalType(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function NumberIntervalType_initFields() {
    NumberIntervalType_initFields = function () {
    };
    NumberIntervalType$SMALL_NATURAL_instance = new NumberIntervalType('SMALL_NATURAL', 0);
    NumberIntervalType$NATURAL_instance = new NumberIntervalType('NATURAL', 1);
    NumberIntervalType$INTEGER_instance = new NumberIntervalType('INTEGER', 2);
    NumberIntervalType$REAL_instance = new NumberIntervalType('REAL', 3);
  }
  var NumberIntervalType$SMALL_NATURAL_instance;
  function NumberIntervalType$SMALL_NATURAL_getInstance() {
    NumberIntervalType_initFields();
    return NumberIntervalType$SMALL_NATURAL_instance;
  }
  var NumberIntervalType$NATURAL_instance;
  function NumberIntervalType$NATURAL_getInstance() {
    NumberIntervalType_initFields();
    return NumberIntervalType$NATURAL_instance;
  }
  var NumberIntervalType$INTEGER_instance;
  function NumberIntervalType$INTEGER_getInstance() {
    NumberIntervalType_initFields();
    return NumberIntervalType$INTEGER_instance;
  }
  var NumberIntervalType$REAL_instance;
  function NumberIntervalType$REAL_getInstance() {
    NumberIntervalType_initFields();
    return NumberIntervalType$REAL_instance;
  }
  NumberIntervalType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NumberIntervalType',
    interfaces: [Enum]
  };
  function NumberIntervalType$values() {
    return [NumberIntervalType$SMALL_NATURAL_getInstance(), NumberIntervalType$NATURAL_getInstance(), NumberIntervalType$INTEGER_getInstance(), NumberIntervalType$REAL_getInstance()];
  }
  NumberIntervalType.values = NumberIntervalType$values;
  function NumberIntervalType$valueOf(name) {
    switch (name) {
      case 'SMALL_NATURAL':
        return NumberIntervalType$SMALL_NATURAL_getInstance();
      case 'NATURAL':
        return NumberIntervalType$NATURAL_getInstance();
      case 'INTEGER':
        return NumberIntervalType$INTEGER_getInstance();
      case 'REAL':
        return NumberIntervalType$REAL_getInstance();
      default:throwISE('No enum constant mathhelper.twf.numbers.NumberIntervalType.' + name);
    }
  }
  NumberIntervalType.valueOf_61zpoe$ = NumberIntervalType$valueOf;
  function InequalityApproximateSolver(baseOperationsDefinitions) {
    if (baseOperationsDefinitions === void 0)
      baseOperationsDefinitions = new BaseOperationsDefinitions();
    this.baseOperationsDefinitions_0 = baseOperationsDefinitions;
  }
  InequalityApproximateSolver.prototype.isLinear_em03xr$ = function (expressionNode) {
    return true;
  };
  InequalityApproximateSolver.prototype.isQuadratic_em03xr$ = function (expressionNode) {
    return true;
  };
  InequalityApproximateSolver.prototype.isConstant_ucqqkr$ = function ($receiver, variables) {
    var tmp$;
    if (variables.contains_11rb$($receiver.value))
      return false;
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (!this.isConstant_ucqqkr$(child, variables))
        return false;
    }
    return true;
  };
  InequalityApproximateSolver.prototype.isPolynom_ucqqkr$ = function ($receiver, variables) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if ($receiver.children.isEmpty())
      return true;
    tmp$ = $receiver.value;
    if (contains_1('', tmp$) || equals(tmp$, '+') || equals(tmp$, '-') || equals(tmp$, '*')) {
      tmp$_0 = $receiver.children.iterator();
      while (tmp$_0.hasNext()) {
        var child = tmp$_0.next();
        if (!this.isPolynom_ucqqkr$(child, variables))
          return false;
      }
    }
     else if (contains_1('/', tmp$) || equals(tmp$, '^')) {
      if (!this.isPolynom_ucqqkr$(first($receiver.children), variables))
        return false;
      tmp$_1 = $receiver.children.size;
      for (var i = 1; i < tmp$_1; i++) {
        if (!this.isConstant_ucqqkr$($receiver.children.get_za3lpa$(i), variables))
          return false;
      }
    }
     else {
      tmp$_2 = $receiver.children.iterator();
      while (tmp$_2.hasNext()) {
        var child_0 = tmp$_2.next();
        if (!this.isConstant_ucqqkr$(child_0, variables))
          return false;
      }
    }
    return true;
  };
  InequalityApproximateSolver.prototype.isPolynomThatCanHaveDivsOnlyOnTopLevel_ucqqkr$ = function ($receiver, variables) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = $receiver.value;
    if (contains_1('*', tmp$) || equals(tmp$, '')) {
      tmp$_0 = $receiver.children.iterator();
      while (tmp$_0.hasNext()) {
        var child = tmp$_0.next();
        if (!this.isPolynomThatCanHaveDivsOnlyOnTopLevel_ucqqkr$(child, variables))
          return false;
      }
    }
     else if (contains_1('/', tmp$)) {
      tmp$_1 = $receiver.children.iterator();
      while (tmp$_1.hasNext()) {
        var child_0 = tmp$_1.next();
        if (!this.isPolynom_ucqqkr$(child_0, variables))
          return false;
      }
    }
     else
      return this.isPolynom_ucqqkr$($receiver, variables);
    return true;
  };
  InequalityApproximateSolver.prototype.findTopMultipliers_fno42m$ = function ($receiver, variable) {
  };
  InequalityApproximateSolver.prototype.findVariableNode_fno42m$ = function ($receiver, variable) {
    var tmp$;
    var variableChildNumber = -1;
    tmp$ = get_lastIndex($receiver.children);
    for (var i = 0; i <= tmp$; i++) {
      if (!this.isConstant_ucqqkr$($receiver.children.get_za3lpa$(i), setOf(variable))) {
        if (variableChildNumber < 0)
          variableChildNumber = i;
        else
          return $receiver.children.size;
      }
    }
    return variableChildNumber;
  };
  InequalityApproximateSolver.prototype.fastTopResolver_fno42m$ = function ($receiver, variable) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10;
    var result = new VariableProperties(variable, mutableListOf([new SegmentsUnion()]));
    var variableChildNumber = this.findVariableNode_fno42m$($receiver, variable);
    tmp$ = get_lastIndex($receiver.children);
    if (!(0 <= variableChildNumber && variableChildNumber <= tmp$))
      return null;
    var varChild = $receiver.children.get_za3lpa$(variableChildNumber);
    var root = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    if (equals(varChild.value, variable)) {
      switch ($receiver.value) {
        case '+':
          root.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '+'));
          tmp$_0 = get_lastIndex($receiver.children);
          for (var i = 0; i <= tmp$_0; i++) {
            if (i !== variableChildNumber) {
              if (equals($receiver.children.get_za3lpa$(i).value, '-')) {
                first(root.children).addChild_em03xr$(first($receiver.children.get_za3lpa$(i).children).clone());
              }
               else {
                var additive = new ExpressionNode(NodeType$FUNCTION_getInstance(), '-');
                additive.addChild_em03xr$($receiver.children.get_za3lpa$(i).clone());
                first(root.children).addChild_em03xr$(additive);
              }
            }
          }

          first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
          break;
        case '-':
          if ($receiver.children.size === 1) {
            root.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0'));
            first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(void 0, root));
          }
           else {
            if (variableChildNumber === 0) {
              root.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '+'));
              tmp$_1 = get_lastIndex($receiver.children);
              for (var i_0 = 1; i_0 <= tmp$_1; i_0++) {
                first(root.children).addChild_em03xr$($receiver.children.get_za3lpa$(i_0).clone());
              }
              first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
            }
             else {
              if ($receiver.children.size === 2)
                root.addChild_em03xr$($receiver.children.get_za3lpa$(0).clone());
              else {
                root.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
                tmp$_2 = get_lastIndex($receiver.children);
                for (var i_1 = 0; i_1 <= tmp$_2; i_1++) {
                  if (i_1 !== variableChildNumber) {
                    first(root.children).addChild_em03xr$($receiver.children.get_za3lpa$(i_1).clone());
                  }
                }
              }
              first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(void 0, root));
            }
          }

          break;
        case '*':
          if ($receiver.children.size === 2) {
            tmp$_3 = toDoubleOrNull($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).value);
            if (tmp$_3 == null) {
              return null;
            }
            var mult = tmp$_3;
            if (mult > 0) {
              root.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0'));
              first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
            }
             else if (mult < 0) {
              root.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0'));
              first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(void 0, root));
            }
             else
              first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment());
          }
           else
            return null;
          break;
        case '/':
          if ($receiver.children.size === 2) {
            tmp$_4 = toDoubleOrNull($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).value);
            if (tmp$_4 == null) {
              return null;
            }
            var mult_0 = tmp$_4;
            if (mult_0 > 0) {
              root.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0'));
              first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
            }
             else if (mult_0 < 0) {
              root.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0'));
              first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(void 0, root));
            }
          }
           else
            return null;
          break;
        case '^':
          if (variableChildNumber === 0) {
            root.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0'));
            first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
          }
           else if ($receiver.children.size === 2) {
            first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment());
          }
           else
            return null;
          break;
        case 'exp':
          first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment());
          break;
        case 'ln':
          root.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
          first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root, void 0, void 0, false));
          break;
        case 'S':
          if ($receiver.children.size !== 4)
            return null;
          switch (variableChildNumber) {
            case 1:
            case 2:
              if (equals($receiver.children.get_za3lpa$(3).value, $receiver.children.get_za3lpa$(0).value)) {
                root.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '+'));
                first(root.children).addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
                first(first(root.children).children).addChild_em03xr$($receiver.children.get_za3lpa$(variableChildNumber - 1 | 0).clone());
                first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
              }
               else
                return null;
              break;
            case 3:
              var multNode = new ExpressionNode(NodeType$FUNCTION_getInstance(), '-');
              multNode.addChild_em03xr$($receiver.children.get_za3lpa$(2).clone());
              multNode.addChild_em03xr$($receiver.children.get_za3lpa$(1).clone());
              this.baseOperationsDefinitions_0.simplifyExpressionTree_em03xr$(multNode);
              tmp$_5 = toDoubleOrNull(multNode.value);
              if (tmp$_5 == null) {
                return null;
              }

              var mult_1 = tmp$_5;
              if (mult_1 > 0) {
                root.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0'));
                first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
              }
               else if (mult_1 < 0) {
                root.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '0'));
                first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(void 0, root));
              }
               else
                first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment());
              break;
            default:first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment());
              break;
          }

          break;
        default:return null;
      }
      return result;
    }
     else if ($receiver.children.size > 2)
      return null;
    else if (equals($receiver.value, '+')) {
      var variableGrandSonNumber = this.findVariableNode_fno42m$(varChild, variable);
      var varGrandSon = varChild.children.get_za3lpa$(variableGrandSonNumber);
      if (equals(varGrandSon.value, variable)) {
        switch (varChild.value) {
          case '-':
            if (varChild.children.size === 1) {
              root.addChild_em03xr$($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).clone());
              first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(void 0, root));
            }
             else {
              root.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '+'));
              if (variableGrandSonNumber === 0) {
                tmp$_6 = get_lastIndex(varChild.children);
                for (var i_2 = 1; i_2 <= tmp$_6; i_2++) {
                  first(root.children).addChild_em03xr$(varChild.children.get_za3lpa$(i_2).clone());
                }
                if (equals($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).value, '-')) {
                  first(root.children).addChild_em03xr$($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).clone());
                }
                 else {
                  first(root.children).addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
                  first(first(root.children).children).addChild_em03xr$($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).clone());
                }
                first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
              }
               else {
                first(root.children).addChild_em03xr$($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).clone());
                if (varChild.children.size === 2)
                  first(root.children).addChild_em03xr$(varChild.children.get_za3lpa$(0).clone());
                else {
                  first(root.children).addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
                  tmp$_7 = get_lastIndex(varChild.children);
                  for (var i_3 = 0; i_3 <= tmp$_7; i_3++) {
                    if (i_3 !== variableGrandSonNumber) {
                      first(first(root.children).children).addChild_em03xr$(varChild.children.get_za3lpa$(i_3).clone());
                    }
                  }
                }
                first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(void 0, root));
              }
            }

            break;
          case '*':
            if (varChild.children.size === 2) {
              tmp$_8 = toDoubleOrNull(varChild.children.get_za3lpa$(1 - variableGrandSonNumber | 0).value);
              if (tmp$_8 == null) {
                return null;
              }
              var mult_2 = tmp$_8;
              root.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '/'));
              if (equals($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).value, '-')) {
                first(root.children).addChild_em03xr$($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).clone());
              }
               else {
                first(root.children).addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '+'));
                first(first(root.children).children).addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
                first(first(first(root.children).children).children).addChild_em03xr$($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).clone());
              }
              if (mult_2 > 0) {
                first(root.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), mult_2.toString()));
                first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
              }
               else if (mult_2 < 0) {
                first(root.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), (-mult_2).toString()));
                first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(void 0, root));
              }
               else {
                tmp$_9 = toDoubleOrNull($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).value);
                if (tmp$_9 == null) {
                  return null;
                }
                var const_0 = tmp$_9;
                if (const_0 > 0)
                  first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment());
              }
            }
             else
              return null;
            break;
          case '/':
            if ($receiver.children.size === 2) {
              tmp$_10 = toDoubleOrNull(varChild.children.get_za3lpa$(1 - variableGrandSonNumber | 0).value);
              if (tmp$_10 == null) {
                return null;
              }
              var mult_3 = tmp$_10;
              if (variableGrandSonNumber === 0) {
                root.addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '*'));
                if (equals($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).value, '-')) {
                  first(root.children).addChild_em03xr$($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).clone());
                }
                 else {
                  first(root.children).addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '+'));
                  first(first(root.children).children).addChild_em03xr$(new ExpressionNode(NodeType$FUNCTION_getInstance(), '-'));
                  first(first(first(root.children).children).children).addChild_em03xr$($receiver.children.get_za3lpa$(1 - variableChildNumber | 0).clone());
                }
                if (mult_3 > 0) {
                  first(root.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), mult_3.toString()));
                  first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(root));
                }
                 else if (mult_3 < 0) {
                  first(root.children).addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), (-mult_3).toString()));
                  first(result.segmentsUnionsIntersection).segmentsUnion.add_11rb$(new Segment(void 0, root));
                }
              }
               else
                return null;
            }
             else
              return null;
            break;
          default:return null;
        }
        return result;
      }
       else if (equals(varChild.value, '-')) {
        var variableGreatGrandSonNumber = this.findVariableNode_fno42m$(varGrandSon, variable);
        var varGreatGrandSon = varChild.children.get_za3lpa$(variableGreatGrandSonNumber);
        if (!equals(varGreatGrandSon.value, variable))
          return null;
      }
       else
        return null;
    }
     else if (!equals($receiver.value, '-'))
      return null;
    return result;
  };
  InequalityApproximateSolver.prototype.solveExpressionMoreThanNull_em03xr$ = function (expressionNode) {
    var tmp$;
    var expression = expressionNode.cloneWithNormalization_1g1bdl$(void 0, false);
    this.baseOperationsDefinitions_0.simplifyExpressionTree_em03xr$(expression.children.get_za3lpa$(0));
    var variables = expression.getVariableNames_ywdfdh$();
    var result = LinkedHashMap_init_0();
    tmp$ = variables.iterator();
    while (tmp$.hasNext()) {
      var variable = tmp$.next();
      var fastResolverResult = this.fastTopResolver_fno42m$(expression, variable);
      if (fastResolverResult == null) {
        if (!this.isPolynomThatCanHaveDivsOnlyOnTopLevel_ucqqkr$(expression, setOf(variable)))
          result.put_xwzc9p$(variable, new VariableProperties(variable, void 0, true));
      }
       else {
        result.put_xwzc9p$(variable, fastResolverResult);
      }
    }
    return result;
  };
  InequalityApproximateSolver.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InequalityApproximateSolver',
    interfaces: []
  };
  function Case(name, ordinal, string) {
    Enum.call(this);
    this.string = string;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Case_initFields() {
    Case_initFields = function () {
    };
    Case$ONE_DIMENSIONAL_POLYNOMIAL_instance = new Case('ONE_DIMENSIONAL_POLYNOMIAL', 0, 'one dimensional polynomial');
    Case$NONE_instance = new Case('NONE', 1, 'none');
  }
  var Case$ONE_DIMENSIONAL_POLYNOMIAL_instance;
  function Case$ONE_DIMENSIONAL_POLYNOMIAL_getInstance() {
    Case_initFields();
    return Case$ONE_DIMENSIONAL_POLYNOMIAL_instance;
  }
  var Case$NONE_instance;
  function Case$NONE_getInstance() {
    Case_initFields();
    return Case$NONE_instance;
  }
  Case.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Case',
    interfaces: [Enum]
  };
  function Case$values() {
    return [Case$ONE_DIMENSIONAL_POLYNOMIAL_getInstance(), Case$NONE_getInstance()];
  }
  Case.values = Case$values;
  function Case$valueOf(name) {
    switch (name) {
      case 'ONE_DIMENSIONAL_POLYNOMIAL':
        return Case$ONE_DIMENSIONAL_POLYNOMIAL_getInstance();
      case 'NONE':
        return Case$NONE_getInstance();
      default:throwISE('No enum constant mathhelper.twf.optimizerutils.Case.' + name);
    }
  }
  Case.valueOf_61zpoe$ = Case$valueOf;
  function SpecialCaseSolver(left, right) {
    this.left = left;
    this.right = right;
    this.case = Case$NONE_getInstance();
    this.eps_0 = 1.0E-7;
    if (this.isPolynomial_0(this.left) && this.isPolynomial_0(this.right)) {
      var leftVariables = this.left.getContainedVariables();
      var rightVariables = this.right.getContainedVariables();
      if (leftVariables.size <= 1 && rightVariables.size <= 1 && union(leftVariables, rightVariables).size <= 1) {
        this.case = Case$ONE_DIMENSIONAL_POLYNOMIAL_getInstance();
      }
    }
    this.preciseSolutionDegree_0 = 10;
    this.approximatePolynomialSolutionDegree_0 = 100;
  }
  SpecialCaseSolver.prototype.currentCase = function () {
    return this.case;
  };
  SpecialCaseSolver.prototype.solve_ot0be8$ = function (comparisonType, leftBorder, rightBorder) {
    if (leftBorder === void 0)
      leftBorder = kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY;
    if (rightBorder === void 0)
      rightBorder = kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY;
    if (equals(this.case, Case$ONE_DIMENSIONAL_POLYNOMIAL_getInstance()))
      return this.solveForPolynomials_0(comparisonType, leftBorder, rightBorder);
    else
      throw Exception_init("I can't solve this type of tasks");
  };
  SpecialCaseSolver.prototype.polynomialCanBeNegative_0 = function (coefs, leftBorder, rightBorder) {
    var tmp$;
    var deg = this.getPolynomialDegree_0(coefs);
    if (deg < 0)
      return false;
    if (deg === 0)
      return coefs.get_za3lpa$(0) < -this.eps_0;
    if (this.valueAt_0(coefs, leftBorder) < -this.eps_0 || this.valueAt_0(coefs, rightBorder) < -this.eps_0)
      return true;
    if (deg < this.preciseSolutionDegree_0) {
      switch (deg) {
        case 1:
          tmp$ = this.solutionForPolynomialWithDeg1_0(coefs, leftBorder, rightBorder);
          break;
        case 2:
          tmp$ = this.solutionForPolynomialWithDeg2_0(coefs, leftBorder, rightBorder);
          break;
        case 3:
          tmp$ = this.solutionForPolynomialWithDeg3_0(coefs, leftBorder, rightBorder);
          break;
        case 4:
          tmp$ = this.solutionForPolynomialWithDeg4_0(coefs, leftBorder, rightBorder);
          break;
        default:tmp$ = this.solutionForPolynomialWithMediumDeg_0(coefs, leftBorder, rightBorder);
          break;
      }
      return tmp$;
    }
     else if (deg < this.approximatePolynomialSolutionDegree_0)
      return this.solutionForPolynomialWithLargeDeg_0(coefs, leftBorder, rightBorder);
    else
      throw Exception_init("I can't solve this type of tasks");
  };
  SpecialCaseSolver.prototype.getPolynomialRoots_0 = function (coefs, leftBorder, rightBorder, iterCount, newtonIterationCount) {
    if (iterCount === void 0)
      iterCount = 20;
    if (newtonIterationCount === void 0)
      newtonIterationCount = 5;
    var tmp$, tmp$_0;
    var deg = this.getPolynomialDegree_0(coefs);
    if (deg <= 0) {
      return ArrayList_init();
    }
    if (deg === 1) {
      var root = -coefs.get_za3lpa$(0) / coefs.get_za3lpa$(1);
      if (root < leftBorder - this.eps_0 || root > rightBorder + this.eps_0) {
        return ArrayList_init();
      }
      return arrayListOf([root]);
    }
    var derivative = this.derivativeForPolynomial_l8u4bv$(coefs);
    var derivativeRoots = this.getPolynomialRoots_0(derivative, leftBorder, rightBorder, iterCount, newtonIterationCount);
    var values = ArrayList_init();
    if (derivativeRoots.isEmpty() || derivativeRoots.get_za3lpa$(0) - leftBorder > this.eps_0) {
      derivativeRoots.add_wxm5ur$(0, leftBorder);
      values.add_11rb$(this.valueAt_0(coefs, leftBorder));
    }
    tmp$ = derivativeRoots.size;
    for (var i = 1; i < tmp$; i++)
      values.add_11rb$(this.valueAt_0(coefs, derivativeRoots.get_za3lpa$(i)));
    if (derivativeRoots.isEmpty() || rightBorder - derivativeRoots.get_za3lpa$(derivativeRoots.size - 1 | 0) > this.eps_0) {
      derivativeRoots.add_11rb$(rightBorder);
      values.add_11rb$(this.valueAt_0(coefs, rightBorder));
    }
    var roots = ArrayList_init();
    tmp$_0 = values.size;
    for (var i_0 = 1; i_0 < tmp$_0; i_0++) {
      if (Kotlin.imul(this.sign_0(values.get_za3lpa$(i_0 - 1 | 0)), this.sign_0(values.get_za3lpa$(i_0))) === 1)
        continue;
      if (this.sign_0(values.get_za3lpa$(i_0 - 1 | 0)) === 0)
        roots.add_11rb$(derivativeRoots.get_za3lpa$(i_0 - 1 | 0));
      else {
        if (this.sign_0(values.get_za3lpa$(i_0)) === 0 && (i_0 + 1 | 0) < values.size)
          continue;
        var l = derivativeRoots.get_za3lpa$(i_0 - 1 | 0);
        var r = derivativeRoots.get_za3lpa$(i_0);
        for (var iter = 0; iter < iterCount; iter++) {
          var m = (l + r) / 2;
          if (l > 0 || r < 0) {
            var x = l * r;
            m = Math_0.sqrt(x) * this.sign_0(l);
          }
           else {
            if (l * l < r && r > 1) {
              var x_0 = r;
              var a = Math_0.sqrt(x_0);
              var b = m;
              m = Math_0.min(a, b);
            }
            if (r * r < -l && l < -1) {
              var x_1 = -l;
              var a_0 = -Math_0.sqrt(x_1);
              var b_0 = m;
              m = Math_0.max(a_0, b_0);
            }
          }
          if (this.sign_0(this.valueAt_0(coefs, m)) !== this.sign_0(values.get_za3lpa$(i_0)))
            l = m;
          else
            r = m;
        }
        for (var iter_0 = 0; iter_0 < newtonIterationCount; iter_0++)
          l += -this.valueAt_0(coefs, l) / this.valueAt_0(derivative, l);
        if (this.sign_0(this.valueAt_0(coefs, l)) === 0)
          roots.add_11rb$(l);
      }
    }
    return roots;
  };
  SpecialCaseSolver.prototype.isPolynomial_0 = function (node) {
    var tmp$;
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      if (!this.isPolynomial_0(child))
        return false;
    }
    if (node.nodeType === NodeType$FUNCTION_getInstance()) {
      if (equals(node.value, '+') || equals(node.value, '*') || equals(node.value, '-') || equals(node.value, ''))
        return true;
      if (equals(node.value, '^')) {
        if (node.children.size !== 2)
          return false;
        var n = toIntOrNull(node.children.get_za3lpa$(1).value);
        return n != null && n >= 0;
      }
      return false;
    }
    return true;
  };
  SpecialCaseSolver.prototype.solveForPolynomials_0 = function (comparisonType, leftBorder, rightBorder) {
    var tmp$;
    var leftPoly = this.toPolynomial_em03xr$(this.left);
    var rightPoly = this.toPolynomial_em03xr$(this.right);
    var a = leftPoly.size;
    var b = rightPoly.size;
    tmp$ = Math_0.max(a, b);
    for (var i = 0; i < tmp$; i++) {
      if (i >= leftPoly.size)
        leftPoly.add_11rb$(0.0);
      if (i < rightPoly.size)
        leftPoly.set_wxm5ur$(i, leftPoly.get_za3lpa$(i) - rightPoly.get_za3lpa$(i));
    }
    if (comparisonType === ComparisonType$LEFT_MORE_OR_EQUAL_getInstance())
      return !this.polynomialCanBeNegative_0(leftPoly, leftBorder, rightBorder);
    if (comparisonType === ComparisonType$LEFT_MORE_getInstance()) {
      leftPoly.set_wxm5ur$(0, leftPoly.get_za3lpa$(0) - 5 * this.eps_0);
      return !this.polynomialCanBeNegative_0(leftPoly, leftBorder, rightBorder);
    }
    for (var i_0 = 0; i_0 !== leftPoly.size; ++i_0) {
      leftPoly.set_wxm5ur$(i_0, -leftPoly.get_za3lpa$(i_0));
    }
    if (comparisonType === ComparisonType$LEFT_LESS_OR_EQUAL_getInstance())
      return !this.polynomialCanBeNegative_0(leftPoly, leftBorder, rightBorder);
    if (comparisonType === ComparisonType$LEFT_LESS_getInstance()) {
      leftPoly.set_wxm5ur$(0, leftPoly.get_za3lpa$(0) - 5 * this.eps_0);
      return !this.polynomialCanBeNegative_0(leftPoly, leftBorder, rightBorder);
    }
    if (comparisonType === ComparisonType$EQUAL_getInstance()) {
      if (leftBorder !== kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY && rightBorder !== kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY && leftBorder === rightBorder)
        return this.sign_0(this.valueAt_0(leftPoly, leftBorder)) === 0;
      return this.getPolynomialDegree_0(leftPoly) === -1;
    }
    return false;
  };
  SpecialCaseSolver.prototype.toPolynomial_em03xr$ = function (node) {
    var tmp$, tmp$_0, tmp$_1;
    if (node.nodeType === NodeType$VARIABLE_getInstance()) {
      if (node.isNumberValue())
        return arrayListOf([toDouble(node.value)]);
      return arrayListOf([0.0, 1.0]);
    }
    if (node.nodeType === NodeType$FUNCTION_getInstance()) {
      if (equals(node.value, '+')) {
        var res = ArrayList_init();
        tmp$ = node.children.iterator();
        while (tmp$.hasNext()) {
          var child = tmp$.next();
          var childPoly = this.toPolynomial_em03xr$(child);
          tmp$_0 = childPoly.size;
          for (var i = 0; i < tmp$_0; i++) {
            if (i >= res.size)
              res.add_11rb$(0.0);
            res.set_wxm5ur$(i, res.get_za3lpa$(i) + childPoly.get_za3lpa$(i));
          }
        }
        return res;
      }
      if (equals(node.value, '-')) {
        var res_0 = this.toPolynomial_em03xr$(node.children.get_za3lpa$(0));
        for (var i_0 = 0; i_0 !== res_0.size; ++i_0) {
          res_0.set_wxm5ur$(i_0, -res_0.get_za3lpa$(i_0));
        }
        return res_0;
      }
      if (equals(node.value, '*')) {
        var res_1 = arrayListOf([1.0]);
        tmp$_1 = node.children.iterator();
        while (tmp$_1.hasNext()) {
          var child_0 = tmp$_1.next();
          res_1 = this.multiplyPolynomials_0(res_1, this.toPolynomial_em03xr$(child_0));
        }
        return res_1;
      }
      if (equals(node.value, '^')) {
        var res_2 = this.toPolynomial_em03xr$(node.children.get_za3lpa$(0));
        res_2 = this.power_0(res_2, toInt(node.children.get_za3lpa$(1).value));
        return res_2;
      }
      if (equals(node.value, ''))
        return this.toPolynomial_em03xr$(node.children.get_za3lpa$(0));
    }
    return ArrayList_init();
  };
  SpecialCaseSolver.prototype.multiplyPolynomials_0 = function (a, b) {
    var tmp$;
    var res = ArrayList_init();
    tmp$ = a.size + b.size - 1 | 0;
    for (var i = 0; i < tmp$; i++)
      res.add_11rb$(0.0);
    for (var i_0 = 0; i_0 !== a.size; ++i_0) {
      for (var j = 0; j !== b.size; ++j) {
        res.set_wxm5ur$(i_0 + j | 0, res.get_za3lpa$(i_0 + j | 0) + a.get_za3lpa$(i_0) * b.get_za3lpa$(j));
      }
    }
    return res;
  };
  SpecialCaseSolver.prototype.power_0 = function (poly, n) {
    var t = n;
    var cur = poly;
    var res = arrayListOf([1.0]);
    while (t > 0) {
      if (t % 2 === 1)
        res = this.multiplyPolynomials_0(res, cur);
      cur = this.multiplyPolynomials_0(cur, cur);
      t = t / 2 | 0;
    }
    return res;
  };
  SpecialCaseSolver.prototype.sign_0 = function (x) {
    if (x < -this.eps_0)
      return -1;
    if (x > this.eps_0)
      return 1;
    return 0;
  };
  SpecialCaseSolver.prototype.valueAt_0 = function (coef, point) {
    var tmp$;
    if (point > kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY && point < kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY) {
      var cur = 1.0;
      var res = 0.0;
      tmp$ = coef.iterator();
      while (tmp$.hasNext()) {
        var c = tmp$.next();
        res += c * cur;
        cur *= point;
      }
      return res;
    }
    var deg = this.getPolynomialDegree_0(coef);
    if (deg % 2 === 0 || point === kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY)
      return coef.get_za3lpa$(deg) > this.eps_0 ? kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY : kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY;
    return coef.get_za3lpa$(deg) > this.eps_0 ? kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY : kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY;
  };
  SpecialCaseSolver.prototype.derivativeForPolynomial_l8u4bv$ = function (coefs) {
    var deg = this.getPolynomialDegree_0(coefs);
    if (deg <= 0)
      return arrayListOf([0.0]);
    var derivative = ArrayList_init();
    for (var i = 0; i < deg; i++)
      derivative.add_11rb$(coefs.get_za3lpa$(i + 1 | 0) * (i + 1 | 0));
    return derivative;
  };
  SpecialCaseSolver.prototype.getPolynomialDegree_0 = function (coefs) {
    var deg = coefs.size - 1 | 0;
    while (deg >= 0 && abs_0(coefs.get_za3lpa$(deg)) < this.eps_0) {
      deg = deg - 1 | 0;
    }
    return deg;
  };
  SpecialCaseSolver.prototype.solutionForPolynomialWithDeg1_0 = function (coefs, leftBorder, rightBorder) {
    var root = -coefs.get_za3lpa$(0) / coefs.get_za3lpa$(1);
    var pointsToCheck = arrayListOf([leftBorder, rightBorder]);
    if (leftBorder - this.eps_0 < root && root < rightBorder + this.eps_0)
      pointsToCheck.add_11rb$(root);
    return this.checkCertainPoints_0(coefs, pointsToCheck);
  };
  SpecialCaseSolver.prototype.solutionForPolynomialWithDeg2_0 = function (coefs, leftBorder, rightBorder) {
    var pointsToCheck = arrayListOf([leftBorder, rightBorder]);
    var vert = -coefs.get_za3lpa$(1) / 2 / coefs.get_za3lpa$(2);
    if (leftBorder - this.eps_0 < vert && vert < rightBorder + this.eps_0)
      pointsToCheck.add_11rb$(vert);
    return this.checkCertainPoints_0(coefs, pointsToCheck);
  };
  SpecialCaseSolver.prototype.solutionForPolynomialWithDeg3_0 = function (coefs, leftBorder, rightBorder) {
    var pointsToCheck = arrayListOf([leftBorder, rightBorder]);
    var semiDiscriminant = coefs.get_za3lpa$(2) * coefs.get_za3lpa$(2) - 3 * coefs.get_za3lpa$(3) - coefs.get_za3lpa$(1);
    if (semiDiscriminant > this.eps_0) {
      var r1 = (-coefs.get_za3lpa$(2) + Math_0.sqrt(semiDiscriminant)) / 3 / coefs.get_za3lpa$(3);
      if (r1 > leftBorder - this.eps_0 && r1 < rightBorder + this.eps_0)
        pointsToCheck.add_11rb$(r1);
      var r2 = (-coefs.get_za3lpa$(2) - Math_0.sqrt(semiDiscriminant)) / 3 / coefs.get_za3lpa$(3);
      if (r2 > leftBorder - this.eps_0 && r2 < rightBorder + this.eps_0)
        pointsToCheck.add_11rb$(r2);
    }
    return this.checkCertainPoints_0(coefs, pointsToCheck);
  };
  SpecialCaseSolver.prototype.solutionForPolynomialWithDeg4_0 = function (coefs, leftBorder, rightBorder) {
    var tmp$;
    var derivative = this.derivativeForPolynomial_l8u4bv$(coefs);
    var pointsToCheck = arrayListOf([leftBorder, rightBorder]);
    var roots = this.rootsOfCubicPolynomial_l8u4bv$(derivative);
    tmp$ = roots.iterator();
    while (tmp$.hasNext()) {
      var root = tmp$.next();
      if (root > leftBorder - this.eps_0 && root < rightBorder + this.eps_0)
        pointsToCheck.add_11rb$(root);
    }
    return this.checkCertainPoints_0(coefs, pointsToCheck);
  };
  SpecialCaseSolver.prototype.solutionForPolynomialWithMediumDeg_0 = function (coefs, leftBorder, rightBorder) {
    var tmp$;
    var derivative = this.derivativeForPolynomial_l8u4bv$(coefs);
    var b = -1.0E9;
    var left = Math_0.max(leftBorder, b);
    var right = Math_0.min(rightBorder, 1.0E9);
    var derivativeRoots = this.getPolynomialRoots_0(derivative, left, right);
    derivativeRoots.add_11rb$(left);
    derivativeRoots.add_11rb$(right);
    tmp$ = derivativeRoots.iterator();
    while (tmp$.hasNext()) {
      var root = tmp$.next();
      if (this.valueAt_0(coefs, root) < -this.eps_0)
        return true;
    }
    return false;
  };
  SpecialCaseSolver.prototype.solutionForPolynomialWithLargeDeg_0 = function (coefs, leftBorder, rightBorder, iterCount) {
    if (iterCount === void 0)
      iterCount = 10;
    var tmp$;
    if (this.solutionForPolynomialWithMediumDeg_0(coefs, leftBorder, rightBorder))
      return true;
    var pointsToCheck = arrayListOf([leftBorder, rightBorder]);
    var derivative = this.derivativeForPolynomial_l8u4bv$(coefs);
    var deg = this.getPolynomialDegree_0(derivative);
    var q = ArrayList_init();
    tmp$ = derivative.iterator();
    while (tmp$.hasNext()) {
      var v = tmp$.next();
      q.add_11rb$(v / last(derivative));
    }
    var m = deg % 2 === 1 ? -1 : 1;
    for (var iterNumber = 1; iterNumber <= iterCount; iterNumber++) {
      for (var i = 0; i <= deg; i++) {
        var res = 0.0;
        for (var j = 0; j <= i; j++) {
          var c = j % 2 === 1 ? -1 : 1;
          res += q.get_za3lpa$(j) * q.get_za3lpa$(i - j | 0) * c;
        }
        q.set_wxm5ur$(i, res * m);
      }
      var tmp$_0 = q.get_za3lpa$(0);
      var x = 1 / Math_0.pow(2.0, iterNumber);
      var root1 = Math_0.pow(tmp$_0, x);
      if (leftBorder - this.eps_0 < root1 && root1 < rightBorder + this.eps_0)
        pointsToCheck.add_11rb$(root1);
      var tmp$_1 = q.get_za3lpa$(0);
      var x_0 = 1 / Math_0.pow(2.0, iterNumber);
      var root2 = Math_0.pow(tmp$_1, x_0);
      if (leftBorder - this.eps_0 < root2 && root2 < rightBorder + this.eps_0)
        pointsToCheck.add_11rb$(root2);
    }
    return this.checkCertainPoints_0(coefs, pointsToCheck);
  };
  SpecialCaseSolver.prototype.checkCertainPoints_0 = function (coefs, points) {
    var tmp$;
    tmp$ = points.iterator();
    while (tmp$.hasNext()) {
      var point = tmp$.next();
      if (this.valueAt_0(coefs, point) < -this.eps_0)
        return true;
    }
    return false;
  };
  SpecialCaseSolver.prototype.rootsOfCubicPolynomial_l8u4bv$ = function (poly) {
    var tmp$ = poly.get_za3lpa$(1) / poly.get_za3lpa$(3);
    var $receiver = poly.get_za3lpa$(2);
    var tmp$_0 = Math_0.pow($receiver, 2) / 3;
    var $receiver_0 = poly.get_za3lpa$(3);
    var p = tmp$ - tmp$_0 / Math_0.pow($receiver_0, 2);
    var tmp$_1 = poly.get_za3lpa$(0) / poly.get_za3lpa$(3);
    var $receiver_1 = poly.get_za3lpa$(2);
    var tmp$_2 = 2 * Math_0.pow($receiver_1, 3) / 27;
    var $receiver_2 = poly.get_za3lpa$(3);
    var tmp$_3 = tmp$_1 + tmp$_2 / Math_0.pow($receiver_2, 3);
    var tmp$_4 = poly.get_za3lpa$(2) * poly.get_za3lpa$(1) / 3;
    var $receiver_3 = poly.get_za3lpa$(3);
    var q = tmp$_3 - tmp$_4 / Math_0.pow($receiver_3, 2);
    var $receiver_4 = p / 3;
    var tmp$_5 = Math_0.pow($receiver_4, 3);
    var $receiver_5 = q / 2;
    var Q = tmp$_5 + Math_0.pow($receiver_5, 2);
    var r1;
    var r2 = null;
    var r3 = null;
    if (Q > this.eps_0) {
      var $receiver_6 = -q / 2 + Math_0.sqrt(Q);
      var x = 1.0 / 3;
      var alpha = Math_0.pow($receiver_6, x);
      var $receiver_7 = -q / 2 - Math_0.sqrt(Q);
      var x_0 = 1.0 / 3;
      var beta = Math_0.pow($receiver_7, x_0);
      r1 = alpha + beta;
    }
     else if (Q > -this.eps_0) {
      var $receiver_8 = -q / 2;
      var x_1 = 1.0 / 3;
      var alpha_0 = Math_0.pow($receiver_8, x_1);
      r1 = 2 * alpha_0;
      r2 = -alpha_0;
    }
     else {
      var $receiver_9 = q / 2;
      var $receiver_10 = Math_0.pow($receiver_9, 2) + -Q;
      var x_2 = 1.0 / 6;
      var r = Math_0.pow($receiver_10, x_2);
      var x_3 = -Q;
      var y = Math_0.sqrt(x_3);
      var x_4 = -q / 2;
      var phi = Math_0.atan2(y, x_4) / 3;
      var re = r * Math_0.cos(phi);
      var im = r * Math_0.sin(phi);
      r1 = 2 * re;
      r2 = -re + Math_0.sqrt(3.0) * im;
      r3 = -re - Math_0.sqrt(3.0) * im;
    }
    var roots = arrayListOf([r1 - poly.get_za3lpa$(2) / 3 / poly.get_za3lpa$(3)]);
    if (r2 != null)
      roots.add_11rb$(r2 - poly.get_za3lpa$(2) / 3 / poly.get_za3lpa$(3));
    if (r3 != null)
      roots.add_11rb$(r3 - poly.get_za3lpa$(2) / 3 / poly.get_za3lpa$(3));
    return roots;
  };
  SpecialCaseSolver.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SpecialCaseSolver',
    interfaces: []
  };
  function CompressedNodeDouble(func, value) {
    if (func === void 0)
      func = '';
    if (value === void 0)
      value = 0.0;
    this.func = func;
    this.value = value;
    this.children = ArrayList_init();
    this.functor = null;
    if (this.func.length > 0) {
      var baseFunctions = (new BaseOperationsComputation(ComputationType$DOUBLE_getInstance())).baseComputationDouble;
      var key = this.func;
      var tmp$;
      if ((Kotlin.isType(tmp$ = baseFunctions, Map) ? tmp$ : throwCCE()).containsKey_11rb$(key))
        this.functor = baseFunctions.get_11rb$(this.func);
      else
        throw Kotlin.newThrowable('invalid function ' + this.func);
    }
  }
  CompressedNodeDouble.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CompressedNodeDouble',
    interfaces: []
  };
  CompressedNodeDouble.prototype.component1 = function () {
    return this.func;
  };
  CompressedNodeDouble.prototype.component2 = function () {
    return this.value;
  };
  CompressedNodeDouble.prototype.copy_io5o9c$ = function (func, value) {
    return new CompressedNodeDouble(func === void 0 ? this.func : func, value === void 0 ? this.value : value);
  };
  CompressedNodeDouble.prototype.toString = function () {
    return 'CompressedNodeDouble(func=' + Kotlin.toString(this.func) + (', value=' + Kotlin.toString(this.value)) + ')';
  };
  CompressedNodeDouble.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.func) | 0;
    result = result * 31 + Kotlin.hashCode(this.value) | 0;
    return result;
  };
  CompressedNodeDouble.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.func, other.func) && Kotlin.equals(this.value, other.value)))));
  };
  function OptimizerUtils(expression, baseOperationsDefinitions, compiledConfiguration, domain) {
    if (baseOperationsDefinitions === void 0)
      baseOperationsDefinitions = new BaseOperationsDefinitions();
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration();
    if (domain === void 0)
      domain = null;
    this.expression = expression;
    this.compiledConfiguration = compiledConfiguration;
    this.baseOperationsComputationDouble_0 = new BaseOperationsComputation(ComputationType$DOUBLE_getInstance());
    this.domainPointGenerator_0 = domain != null ? domain : new DomainPointGenerator(arrayListOf([this.expression]), baseOperationsDefinitions);
    this.variablesList_0 = ArrayList_init();
    this.treeNodes_0 = ArrayList_init();
    this.nodesWithVariables_0 = ArrayList_init();
    this.partialDerivativesTreeNodes_0 = ArrayList_init();
    this.partialDerivativesNodesWithVariables_0 = ArrayList_init();
    var tmp$;
    baseOperationsDefinitions.init_3b06hw$(this.compiledConfiguration);
    var variablesNamesList = ArrayList_init();
    variablesNamesList.addAll_brywnq$(this.expression.getVariableNames_ywdfdh$());
    var tmp$_0;
    tmp$_0 = variablesNamesList.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      this.variablesList_0.add_11rb$(new VariableInfo(element));
    }
    tmp$ = this.variablesList_0.iterator();
    while (tmp$.hasNext()) {
      var tmp$_1 = tmp$.next();
      var name = tmp$_1.component1();
      var partialDerivative = diff(buildDiffNode(this.expression, name, this.compiledConfiguration), void 0, this.compiledConfiguration);
      this.partialDerivativesTreeNodes_0.add_11rb$(ArrayList_init());
      this.partialDerivativesNodesWithVariables_0.add_11rb$(ArrayList_init());
      this.findAllVariables_0(partialDerivative, last(this.partialDerivativesTreeNodes_0), last(this.partialDerivativesNodesWithVariables_0));
      reverse(last(this.partialDerivativesTreeNodes_0));
    }
    this.findAllVariables_0(this.expression, this.treeNodes_0, this.nodesWithVariables_0);
    reverse(this.treeNodes_0);
  }
  OptimizerUtils.prototype.run_224j3y$ = function (descentStartPointsCount, iterationCount, threshold) {
    if (descentStartPointsCount === void 0)
      descentStartPointsCount = this.compiledConfiguration.gradientDescentComparisonConfiguration.startPointsCount;
    if (iterationCount === void 0)
      iterationCount = this.compiledConfiguration.gradientDescentComparisonConfiguration.iterationCount;
    if (threshold === void 0)
      threshold = 0.0;
    var tmp$, tmp$_0;
    var tmp$_1 = this.domainPointGenerator_0;
    var b = descentStartPointsCount - this.domainPointGenerator_0.foundPointsCount() | 0;
    tmp$_1.findPoints_za3lpa$(Math_0.max(0, b));
    if (!this.canStart()) {
      return false;
    }
    var b_0 = this.domainPointGenerator_0.foundPointsCount();
    tmp$ = Math_0.min(descentStartPointsCount, b_0);
    for (var run = 0; run < tmp$; run++) {
      var point = this.domainPointGenerator_0.generateNewPointInDomain_mqu1mq$(void 0, void 0, run % this.domainPointGenerator_0.foundPointsCount());
      tmp$_0 = this.variablesList_0.iterator();
      while (tmp$_0.hasNext()) {
        var variable = tmp$_0.next();
        variable.value = toDouble(ensureNotNull(point.get_11rb$(variable.name)));
      }
      if (this.runGradientDescent_0(iterationCount, threshold)) {
        return true;
      }
    }
    return false;
  };
  OptimizerUtils.prototype.runGradientDescent_0 = function (iterationCount, threshold) {
    var tmp$;
    for (var iter = 0; iter < iterationCount; iter++) {
      var direction = this.calculateDirection_0(this.variablesList_0);
      var lambda = this.runTernarySearch_0(this.variablesList_0, direction, this.compiledConfiguration.gradientDescentComparisonConfiguration.ternarySearchLeftBorder, this.compiledConfiguration.gradientDescentComparisonConfiguration.ternarySearchRightBorder, this.compiledConfiguration.gradientDescentComparisonConfiguration.ternarySearchIterationCount, threshold);
      if (lambda === 0.0) {
        break;
      }
      tmp$ = this.variablesList_0;
      for (var i = 0; i !== tmp$.size; ++i) {
        this.variablesList_0.get_za3lpa$(i).value = this.variablesList_0.get_za3lpa$(i).value + lambda * direction.get_za3lpa$(i);
      }
      var result = this.calculateValue_0(this.variablesList_0, this.treeNodes_0, this.nodesWithVariables_0);
      if (result < threshold)
        return true;
    }
    return false;
  };
  OptimizerUtils.prototype.canStart = function () {
    return this.domainPointGenerator_0.hasPointsInDomain();
  };
  OptimizerUtils.prototype.calculateDirection_0 = function (variableList) {
    var direction = ArrayList_init();
    for (var i = 0; i !== variableList.size; ++i) {
      var result = this.calculateValue_0(variableList, this.partialDerivativesTreeNodes_0.get_za3lpa$(i), this.partialDerivativesNodesWithVariables_0.get_za3lpa$(i));
      direction.add_11rb$(!isNaN_0(result) && isFinite(result) ? -result : 0.0);
    }
    return direction;
  };
  OptimizerUtils.prototype.runTernarySearch_0 = function (variableList, direction, leftBorder, rightBorder, iterationsCount, threshold) {
    var left = leftBorder;
    var right = rightBorder;
    var leftOk = this.valueAt_0(left, variableList, direction) != null;
    if (!leftOk && this.valueAt_0(right, variableList, direction) == null) {
      return 0.0;
    }
    var alpha = this.compiledConfiguration.gradientDescentComparisonConfiguration.ternarySearchAlpha;
    var beta = this.compiledConfiguration.gradientDescentComparisonConfiguration.ternarySearchBeta;
    for (var iter = 0; iter < iterationsCount; iter++) {
      var m1 = (alpha * left + beta * right) / (alpha + beta);
      var m2 = (beta * left + alpha * right) / (alpha + beta);
      var value1 = this.valueAt_0(m1, variableList, direction);
      var value2 = this.valueAt_0(m2, variableList, direction);
      if (value1 != null && value1 < threshold)
        return m1;
      if (value2 != null && value2 < threshold)
        return m2;
      if (value1 == null && value2 == null) {
        right = m1;
        continue;
      }
      if (value1 == null || (value2 != null && value1 > value2)) {
        left = m1;
        leftOk = true;
      }
       else {
        right = m2;
      }
    }
    return leftOk ? left : right;
  };
  OptimizerUtils.prototype.valueAt_0 = function (lambda, variableList, direction) {
    var variableListCloned = this.cloneVariableList_0(variableList);
    for (var i = 0; i !== variableList.size; ++i) {
      variableListCloned.get_za3lpa$(i).value = variableListCloned.get_za3lpa$(i).value + direction.get_za3lpa$(i) * lambda;
    }
    var result = this.calculateValue_0(variableListCloned, this.treeNodes_0, this.nodesWithVariables_0);
    return isNaN_0(result) || isInfinite(result) ? null : result;
  };
  OptimizerUtils.prototype.cloneVariableList_0 = function (variablesList) {
    var tmp$;
    var values = ArrayList_init();
    tmp$ = variablesList.iterator();
    while (tmp$.hasNext()) {
      var variable = tmp$.next();
      values.add_11rb$(variable.clone());
    }
    return values;
  };
  OptimizerUtils.prototype.calculateValue_0 = function (variableList, treeNodes, nodesWithVariables) {
    var tmp$, tmp$_0;
    tmp$ = nodesWithVariables.iterator();
    while (tmp$.hasNext()) {
      var tmp$_1 = tmp$.next();
      var nodeInd = tmp$_1.component1()
      , valInd = tmp$_1.component2();
      treeNodes.get_za3lpa$(treeNodes.size - 1 - nodeInd | 0).value = variableList.get_za3lpa$(valInd).value;
    }
    this.baseOperationsComputationDouble_0.computeValue_ejnlsg$(Kotlin.isType(tmp$_0 = treeNodes, ArrayList) ? tmp$_0 : throwCCE());
    return last(treeNodes).value;
  };
  OptimizerUtils.prototype.findAllVariables_0 = function (node, nodesList, nodesWithVariables) {
    var tmp$, tmp$_0;
    var ind = nodesList.size;
    if (node.nodeType === NodeType$FUNCTION_getInstance()) {
      nodesList.add_11rb$(new CompressedNodeDouble(node.value));
      tmp$ = node.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        var childIndex = this.findAllVariables_0(child, nodesList, nodesWithVariables);
        nodesList.get_za3lpa$(ind).children.add_11rb$(nodesList.get_za3lpa$(childIndex));
      }
    }
     else {
      var isVariable = false;
      tmp$_0 = this.variablesList_0;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        if (equals(this.variablesList_0.get_za3lpa$(i).name, node.value)) {
          nodesWithVariables.add_11rb$(new Pair(ind, i));
          isVariable = true;
        }
      }
      if (isVariable)
        nodesList.add_11rb$(new CompressedNodeDouble());
      else
        nodesList.add_11rb$(new CompressedNodeDouble(void 0, toDouble(node.value)));
    }
    return ind;
  };
  OptimizerUtils.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OptimizerUtils',
    interfaces: []
  };
  function VariableInfo(name, value) {
    if (value === void 0)
      value = 0.0;
    this.name = name;
    this.value = value;
  }
  VariableInfo.prototype.clone = function () {
    return new VariableInfo(this.name, this.value);
  };
  VariableInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VariableInfo',
    interfaces: []
  };
  VariableInfo.prototype.component1 = function () {
    return this.name;
  };
  VariableInfo.prototype.component2 = function () {
    return this.value;
  };
  VariableInfo.prototype.copy_io5o9c$ = function (name, value) {
    return new VariableInfo(name === void 0 ? this.name : name, value === void 0 ? this.value : value);
  };
  VariableInfo.prototype.toString = function () {
    return 'VariableInfo(name=' + Kotlin.toString(this.name) + (', value=' + Kotlin.toString(this.value)) + ')';
  };
  VariableInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.value) | 0;
    return result;
  };
  VariableInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.value, other.value)))));
  };
  function Segment(leftBorder, rightBorder, point, isLeftBorderIncluded, isRightBorderIncluded) {
    if (leftBorder === void 0)
      leftBorder = null;
    if (rightBorder === void 0)
      rightBorder = null;
    if (point === void 0)
      point = null;
    if (isLeftBorderIncluded === void 0)
      isLeftBorderIncluded = true;
    if (isRightBorderIncluded === void 0)
      isRightBorderIncluded = true;
    this.leftBorder = leftBorder;
    this.rightBorder = rightBorder;
    this.point = point;
    this.isLeftBorderIncluded = isLeftBorderIncluded;
    this.isRightBorderIncluded = isRightBorderIncluded;
  }
  Segment.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Segment',
    interfaces: []
  };
  Segment.prototype.component1 = function () {
    return this.leftBorder;
  };
  Segment.prototype.component2 = function () {
    return this.rightBorder;
  };
  Segment.prototype.component3 = function () {
    return this.point;
  };
  Segment.prototype.component4 = function () {
    return this.isLeftBorderIncluded;
  };
  Segment.prototype.component5 = function () {
    return this.isRightBorderIncluded;
  };
  Segment.prototype.copy_l5y7qg$ = function (leftBorder, rightBorder, point, isLeftBorderIncluded, isRightBorderIncluded) {
    return new Segment(leftBorder === void 0 ? this.leftBorder : leftBorder, rightBorder === void 0 ? this.rightBorder : rightBorder, point === void 0 ? this.point : point, isLeftBorderIncluded === void 0 ? this.isLeftBorderIncluded : isLeftBorderIncluded, isRightBorderIncluded === void 0 ? this.isRightBorderIncluded : isRightBorderIncluded);
  };
  Segment.prototype.toString = function () {
    return 'Segment(leftBorder=' + Kotlin.toString(this.leftBorder) + (', rightBorder=' + Kotlin.toString(this.rightBorder)) + (', point=' + Kotlin.toString(this.point)) + (', isLeftBorderIncluded=' + Kotlin.toString(this.isLeftBorderIncluded)) + (', isRightBorderIncluded=' + Kotlin.toString(this.isRightBorderIncluded)) + ')';
  };
  Segment.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.leftBorder) | 0;
    result = result * 31 + Kotlin.hashCode(this.rightBorder) | 0;
    result = result * 31 + Kotlin.hashCode(this.point) | 0;
    result = result * 31 + Kotlin.hashCode(this.isLeftBorderIncluded) | 0;
    result = result * 31 + Kotlin.hashCode(this.isRightBorderIncluded) | 0;
    return result;
  };
  Segment.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.leftBorder, other.leftBorder) && Kotlin.equals(this.rightBorder, other.rightBorder) && Kotlin.equals(this.point, other.point) && Kotlin.equals(this.isLeftBorderIncluded, other.isLeftBorderIncluded) && Kotlin.equals(this.isRightBorderIncluded, other.isRightBorderIncluded)))));
  };
  function SegmentsUnion(segmentsUnion) {
    if (segmentsUnion === void 0) {
      segmentsUnion = ArrayList_init();
    }
    this.segmentsUnion = segmentsUnion;
  }
  SegmentsUnion.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SegmentsUnion',
    interfaces: []
  };
  SegmentsUnion.prototype.component1 = function () {
    return this.segmentsUnion;
  };
  SegmentsUnion.prototype.copy_hl5wp4$ = function (segmentsUnion) {
    return new SegmentsUnion(segmentsUnion === void 0 ? this.segmentsUnion : segmentsUnion);
  };
  SegmentsUnion.prototype.toString = function () {
    return 'SegmentsUnion(segmentsUnion=' + Kotlin.toString(this.segmentsUnion) + ')';
  };
  SegmentsUnion.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.segmentsUnion) | 0;
    return result;
  };
  SegmentsUnion.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.segmentsUnion, other.segmentsUnion))));
  };
  function VariableProperties(name, segmentsUnionsIntersection, unableToCompute) {
    if (segmentsUnionsIntersection === void 0) {
      segmentsUnionsIntersection = ArrayList_init();
    }
    if (unableToCompute === void 0)
      unableToCompute = false;
    this.name = name;
    this.segmentsUnionsIntersection = segmentsUnionsIntersection;
    this.unableToCompute = unableToCompute;
  }
  VariableProperties.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VariableProperties',
    interfaces: []
  };
  VariableProperties.prototype.component1 = function () {
    return this.name;
  };
  VariableProperties.prototype.component2 = function () {
    return this.segmentsUnionsIntersection;
  };
  VariableProperties.prototype.component3 = function () {
    return this.unableToCompute;
  };
  VariableProperties.prototype.copy_m9lvhj$ = function (name, segmentsUnionsIntersection, unableToCompute) {
    return new VariableProperties(name === void 0 ? this.name : name, segmentsUnionsIntersection === void 0 ? this.segmentsUnionsIntersection : segmentsUnionsIntersection, unableToCompute === void 0 ? this.unableToCompute : unableToCompute);
  };
  VariableProperties.prototype.toString = function () {
    return 'VariableProperties(name=' + Kotlin.toString(this.name) + (', segmentsUnionsIntersection=' + Kotlin.toString(this.segmentsUnionsIntersection)) + (', unableToCompute=' + Kotlin.toString(this.unableToCompute)) + ')';
  };
  VariableProperties.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.segmentsUnionsIntersection) | 0;
    result = result * 31 + Kotlin.hashCode(this.unableToCompute) | 0;
    return result;
  };
  VariableProperties.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.segmentsUnionsIntersection, other.segmentsUnionsIntersection) && Kotlin.equals(this.unableToCompute, other.unableToCompute)))));
  };
  function CompressedNode(func, value) {
    if (func === void 0)
      func = '';
    if (value === void 0)
      value = toComplex_1('0');
    this.func = func;
    this.value = value;
    this.subtreeValue = this.value;
    this.children = ArrayList_init();
    this.functor = null;
    if (this.func.length > 0) {
      var baseFunctions = (new BaseOperationsComputation(ComputationType$COMPLEX_getInstance())).baseComputationComplex;
      var key = this.func;
      var tmp$;
      if ((Kotlin.isType(tmp$ = baseFunctions, Map) ? tmp$ : throwCCE()).containsKey_11rb$(key)) {
        this.functor = baseFunctions.get_11rb$(this.func);
      }
       else {
        throw Kotlin.newThrowable('invalid function ' + this.func);
      }
    }
  }
  CompressedNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CompressedNode',
    interfaces: []
  };
  CompressedNode.prototype.component1 = function () {
    return this.func;
  };
  CompressedNode.prototype.component2 = function () {
    return this.value;
  };
  CompressedNode.prototype.copy_c44ocp$ = function (func, value) {
    return new CompressedNode(func === void 0 ? this.func : func, value === void 0 ? this.value : value);
  };
  CompressedNode.prototype.toString = function () {
    return 'CompressedNode(func=' + Kotlin.toString(this.func) + (', value=' + Kotlin.toString(this.value)) + ')';
  };
  CompressedNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.func) | 0;
    result = result * 31 + Kotlin.hashCode(this.value) | 0;
    return result;
  };
  CompressedNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.func, other.func) && Kotlin.equals(this.value, other.value)))));
  };
  function DomainPointGenerator(_expressions, baseOperationsDefinitions, fastVersionWithoutConsiderationOfDomain, numberIntervalType, randomPointCount, goodEnough, annealingRuns, annealingAttemptsCount, annealingIterationCount, annealingTemperatureMultiplier, annealingPenaltyRestrictionMultiplier, gradientDescentRuns, gradientDescentIterationCount, gradientDescentTernarySearchIterationCount, gradientDescentTernarySearchOrderStep, gradientDescentTernarySearchOrderIterCount, gradientDescentDelta, maxValueMultiplier) {
    if (_expressions === void 0) {
      _expressions = ArrayList_init();
    }
    if (baseOperationsDefinitions === void 0)
      baseOperationsDefinitions = new BaseOperationsDefinitions();
    if (fastVersionWithoutConsiderationOfDomain === void 0)
      fastVersionWithoutConsiderationOfDomain = false;
    if (numberIntervalType === void 0)
      numberIntervalType = NumberIntervalType$REAL_getInstance();
    if (randomPointCount === void 0)
      randomPointCount = 10;
    if (goodEnough === void 0)
      goodEnough = 5;
    if (annealingRuns === void 0)
      annealingRuns = 2;
    if (annealingAttemptsCount === void 0)
      annealingAttemptsCount = 2;
    if (annealingIterationCount === void 0)
      annealingIterationCount = 1000;
    if (annealingTemperatureMultiplier === void 0)
      annealingTemperatureMultiplier = 0.99;
    if (annealingPenaltyRestrictionMultiplier === void 0)
      annealingPenaltyRestrictionMultiplier = 1000.0;
    if (gradientDescentRuns === void 0)
      gradientDescentRuns = 1;
    if (gradientDescentIterationCount === void 0)
      gradientDescentIterationCount = 50;
    if (gradientDescentTernarySearchIterationCount === void 0)
      gradientDescentTernarySearchIterationCount = 13;
    if (gradientDescentTernarySearchOrderStep === void 0)
      gradientDescentTernarySearchOrderStep = 1000.0;
    if (gradientDescentTernarySearchOrderIterCount === void 0)
      gradientDescentTernarySearchOrderIterCount = 3;
    if (gradientDescentDelta === void 0)
      gradientDescentDelta = 0.001;
    if (maxValueMultiplier === void 0)
      maxValueMultiplier = 10.0;
    this.baseOperationsDefinitions = baseOperationsDefinitions;
    this.fastVersionWithoutConsiderationOfDomain = fastVersionWithoutConsiderationOfDomain;
    this.numberIntervalType = numberIntervalType;
    this.annealingAttemptsCount_0 = annealingAttemptsCount;
    this.annealingIterationCount_0 = annealingIterationCount;
    this.annealingTemperatureMultiplier_0 = annealingTemperatureMultiplier;
    this.annealingPenaltyRestrictionMultiplier_0 = annealingPenaltyRestrictionMultiplier;
    this.gradientDescentRuns_0 = gradientDescentRuns;
    this.gradientDescentIterationCount_0 = gradientDescentIterationCount;
    this.gradientDescentTernarySearchIterationCount_0 = gradientDescentTernarySearchIterationCount;
    this.gradientDescentTernarySearchOrderStep_0 = gradientDescentTernarySearchOrderStep;
    this.gradientDescentTernarySearchOrderIterCount_0 = gradientDescentTernarySearchOrderIterCount;
    this.gradientDescentDelta_0 = gradientDescentDelta;
    this.maxValueMultiplier = maxValueMultiplier;
    this.variablesNamesSet = ArrayList_init();
    this.variablesList_0 = ArrayList_init();
    this.pointsInDomain_0 = ArrayList_init();
    this.maxConstant_0 = 1.0;
    this.border_0 = 1.0;
    this.pointsFoundUsingAnnealing_0 = 0;
    this.pointsFoundUsingGradientDescent_0 = 0;
    this.epsilon = 1.0E-6;
    this.baseOperationsComputationComplex = new BaseOperationsComputation(ComputationType$COMPLEX_getInstance());
    this.treeNodes_0 = ArrayList_init();
    this.nodesWithVariables_0 = ArrayList_init();
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = _expressions.iterator();
    while (tmp$.hasNext()) {
      var expression = tmp$.next();
      this.variablesNamesSet.addAll_brywnq$(expression.getVariableNames_ywdfdh$());
      var a = expression.getMaxConstant();
      var b = this.maxConstant_0;
      this.maxConstant_0 = Math_0.max(a, b);
    }
    this.border_0 = this.maxConstant_0 * this.maxValueMultiplier;
    if (this.numberIntervalType !== NumberIntervalType$REAL_getInstance()) {
      this.fastVersionWithoutConsiderationOfDomain = true;
    }
    if (!this.fastVersionWithoutConsiderationOfDomain) {
      var tmp$_2;
      tmp$_2 = this.variablesNamesSet.iterator();
      while (tmp$_2.hasNext()) {
        var element = tmp$_2.next();
        this.variablesList_0.add_11rb$(new VariableInfo(element));
      }
      tmp$_0 = _expressions.iterator();
      while (tmp$_0.hasNext()) {
        var expression_0 = tmp$_0.next();
        this.findAllVariables_0(expression_0);
      }
      reverse(this.treeNodes_0);
      tmp$_1 = randomPointCount;
      for (var attempt = 0; attempt < tmp$_1; attempt++) {
        var tmp$_3;
        tmp$_3 = this.variablesList_0.iterator();
        while (tmp$_3.hasNext()) {
          var element_0 = tmp$_3.next();
          element_0.value = this.typedRandom_lu1900$(-this.maxConstant_0, this.maxConstant_0);
        }
        if (this.calculatePenaltyForImaginaryValue_0(this.variablesList_0) < this.epsilon)
          this.pointsInDomain_0.add_11rb$(this.clone_0(this.variablesList_0));
      }
      if (this.pointsInDomain_0.size < goodEnough) {
        this.findPoints_za3lpa$(annealingRuns);
      }
    }
  }
  DomainPointGenerator.prototype.findPoints_za3lpa$ = function (annealingRuns) {
    var tmp$, tmp$_0;
    for (var attempt = 0; attempt < annealingRuns; attempt++) {
      var tmp$_1;
      tmp$_1 = this.variablesList_0.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        element.value = this.typedRandom_lu1900$(-this.maxConstant_0, this.maxConstant_0);
      }
      var foundSomething = false;
      tmp$ = this.annealingAttemptsCount_0;
      for (var i = 0; i < tmp$; i++) {
        if (this.runAnnealing_0(this.variablesList_0, this.annealingTemperatureMultiplier_0, this.annealingIterationCount_0)) {
          this.pointsFoundUsingAnnealing_0 = this.pointsFoundUsingAnnealing_0 + 1 | 0;
          this.pointsInDomain_0.add_11rb$(this.clone_0(this.variablesList_0));
          foundSomething = true;
          break;
        }
      }
      if (!foundSomething) {
        tmp$_0 = this.gradientDescentRuns_0;
        for (var run = 0; run < tmp$_0; run++) {
          if (this.runGradientDescent_0(this.variablesList_0, this.gradientDescentIterationCount_0, this.gradientDescentTernarySearchIterationCount_0, this.gradientDescentTernarySearchOrderStep_0, this.gradientDescentTernarySearchOrderIterCount_0, this.gradientDescentDelta_0)) {
            this.pointsFoundUsingGradientDescent_0 = this.pointsFoundUsingGradientDescent_0 + 1 | 0;
            this.pointsInDomain_0.add_11rb$(this.clone_0(this.variablesList_0));
            break;
          }
        }
      }
    }
  };
  DomainPointGenerator.prototype.hasPointsInDomain = function () {
    return !this.pointsInDomain_0.isEmpty();
  };
  DomainPointGenerator.prototype.foundPointsCount = function () {
    return this.pointsInDomain_0.size;
  };
  DomainPointGenerator.prototype.getResult = function () {
    var tmp$;
    println('points found using:' + '\n' + 'Annealing ' + this.pointsFoundUsingAnnealing_0 + '\n' + 'Gradient descent ' + this.pointsFoundUsingGradientDescent_0);
    var result = 'points found: ' + this.pointsInDomain_0.size + '\n';
    if (!this.pointsInDomain_0.isEmpty()) {
      tmp$ = this.pointsInDomain_0.get_za3lpa$(0).iterator();
      while (tmp$.hasNext()) {
        var vari = tmp$.next();
        result += vari.name + ' = ' + vari.value + '\n';
      }
    }
    return result;
  };
  DomainPointGenerator.prototype.hasVariables = function () {
    return this.variablesNamesSet.size > 0;
  };
  DomainPointGenerator.prototype.generateSimplePoints = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    var points = ArrayList_init();
    tmp$ = this.variablesList_0.size;
    for (var zeroIndex = 0; zeroIndex <= tmp$; zeroIndex++) {
      var point = LinkedHashMap_init_0();
      tmp$_0 = get_lastIndex(this.variablesList_0);
      for (var i = 0; i <= tmp$_0; i++) {
        var key = this.variablesList_0.get_za3lpa$(i).name;
        var value = i === zeroIndex ? '0' : '1';
        point.put_xwzc9p$(key, value);
      }
      points.add_11rb$(point);
    }
    tmp$_1 = this.variablesList_0.size;
    for (var oneIndex = 0; oneIndex <= tmp$_1; oneIndex++) {
      var point_0 = LinkedHashMap_init_0();
      tmp$_2 = get_lastIndex(this.variablesList_0);
      for (var i_0 = 0; i_0 <= tmp$_2; i_0++) {
        var key_0 = this.variablesList_0.get_za3lpa$(i_0).name;
        var value_0 = i_0 === oneIndex ? '1' : '-1';
        point_0.put_xwzc9p$(key_0, value_0);
      }
      points.add_11rb$(point_0);
    }
    tmp$_3 = this.variablesList_0.size;
    for (var minusOneIndex = 0; minusOneIndex <= tmp$_3; minusOneIndex++) {
      var point_1 = LinkedHashMap_init_0();
      tmp$_4 = get_lastIndex(this.variablesList_0);
      for (var i_1 = 0; i_1 <= tmp$_4; i_1++) {
        var key_1 = this.variablesList_0.get_za3lpa$(i_1).name;
        var value_1 = i_1 === minusOneIndex ? '-1' : '0';
        point_1.put_xwzc9p$(key_1, value_1);
      }
      points.add_11rb$(point_1);
    }
    var encreasingPoint = LinkedHashMap_init_0();
    var currentVal = 1.0;
    tmp$_5 = get_lastIndex(this.variablesList_0);
    for (var i_2 = 0; i_2 <= tmp$_5; i_2++) {
      var key_2 = this.variablesList_0.get_za3lpa$(i_2).name;
      var value_2 = currentVal.toString();
      encreasingPoint.put_xwzc9p$(key_2, value_2);
      currentVal *= 10000;
    }
    points.add_11rb$(encreasingPoint);
    var decreasingPoint = LinkedHashMap_init_0();
    tmp$_6 = get_lastIndex(this.variablesList_0);
    for (var i_3 = 0; i_3 <= tmp$_6; i_3++) {
      var key_3 = this.variablesList_0.get_za3lpa$(i_3).name;
      var value_3 = currentVal.toString();
      encreasingPoint.put_xwzc9p$(key_3, value_3);
      currentVal /= 10000;
    }
    points.add_11rb$(encreasingPoint);
    var encreasingSmallPoint = LinkedHashMap_init_0();
    currentVal = 1.0E-5;
    tmp$_7 = get_lastIndex(this.variablesList_0);
    for (var i_4 = 0; i_4 <= tmp$_7; i_4++) {
      var key_4 = this.variablesList_0.get_za3lpa$(i_4).name;
      var value_4 = currentVal.toString();
      encreasingSmallPoint.put_xwzc9p$(key_4, value_4);
      currentVal *= 10000;
    }
    points.add_11rb$(encreasingSmallPoint);
    var decreasingSmallPoint = LinkedHashMap_init_0();
    tmp$_8 = get_lastIndex(this.variablesList_0);
    for (var i_5 = 0; i_5 <= tmp$_8; i_5++) {
      var key_5 = this.variablesList_0.get_za3lpa$(i_5).name;
      var value_5 = currentVal.toString();
      decreasingSmallPoint.put_xwzc9p$(key_5, value_5);
      currentVal /= 10000;
    }
    points.add_11rb$(decreasingSmallPoint);
    return points;
  };
  DomainPointGenerator.prototype.generateNewPoint = function () {
    var tmp$;
    var result = LinkedHashMap_init_0();
    tmp$ = this.variablesNamesSet.iterator();
    while (tmp$.hasNext()) {
      var variableName = tmp$.next();
      result.put_xwzc9p$(variableName, this.typedRandom_lu1900$(-this.border_0, this.border_0).toString());
    }
    return result;
  };
  DomainPointGenerator.prototype.generateNewPointInDomain_mqu1mq$ = function (domainArea, randomPointTries, centreID) {
    if (domainArea === void 0)
      domainArea = 1.0E-5;
    if (randomPointTries === void 0)
      randomPointTries = 10;
    if (centreID === void 0)
      centreID = -1;
    var tmp$, tmp$_0;
    for (var iterNumber = 0; iterNumber < randomPointTries; iterNumber++) {
      tmp$ = this.variablesList_0.iterator();
      while (tmp$.hasNext()) {
        var variable = tmp$.next();
        variable.value = this.typedRandom_lu1900$(-2 * this.maxConstant_0, 2 * this.maxConstant_0);
      }
      if (this.calculatePenaltyForImaginaryValue_0(this.variablesList_0) < this.epsilon)
        return this.variablesListToMap_hfc6ya$(this.variablesList_0);
    }
    if (!this.pointsInDomain_0.isEmpty()) {
      var pointIndex = centreID === -1 ? randomInt(0, this.pointsInDomain_0.size) : centreID;
      return this.variablesListToMap_hfc6ya$(this.pointsInDomain_0.get_za3lpa$(pointIndex));
    }
     else {
      var result = LinkedHashMap_init_0();
      tmp$_0 = this.variablesList_0.iterator();
      while (tmp$_0.hasNext()) {
        var variable_0 = tmp$_0.next();
        var key = variable_0.name;
        var value = this.typedRandom_lu1900$(-this.maxConstant_0, this.maxConstant_0).toString();
        result.put_xwzc9p$(key, value);
      }
      return result;
    }
  };
  DomainPointGenerator.prototype.typedRandom_lu1900$ = function (from, to) {
    switch (this.numberIntervalType.name) {
      case 'SMALL_NATURAL':
        var a = numberToInt(Math_0.floor(from));
        var tmp$ = Math_0.max(a, 1);
        var a_0 = numberToInt(Math_0.ceil(to));
        var a_1 = Math_0.max(a_0, 1);
        return randomInt(tmp$, Math_0.min(a_1, 5));
      case 'NATURAL':
        var a_2 = numberToInt(Math_0.floor(from));
        var tmp$_0 = Math_0.max(a_2, 1);
        var a_3 = numberToInt(Math_0.ceil(to));
        return randomInt(tmp$_0, Math_0.max(a_3, 1));
      case 'INTEGER':
        return randomInt(numberToInt(Math_0.floor(from)), numberToInt(Math_0.ceil(to)));
      default:return random_1(from, to);
    }
  };
  DomainPointGenerator.prototype.variablesListToMap_hfc6ya$ = function (variableList) {
    var tmp$;
    var result = LinkedHashMap_init_0();
    tmp$ = variableList.iterator();
    while (tmp$.hasNext()) {
      var variable = tmp$.next();
      var key = variable.name;
      var value = variable.value.toString();
      result.put_xwzc9p$(key, value);
    }
    return result;
  };
  DomainPointGenerator.prototype.clone_0 = function (variableList) {
    var tmp$;
    var values = ArrayList_init();
    tmp$ = variableList.iterator();
    while (tmp$.hasNext()) {
      var variable = tmp$.next();
      values.add_11rb$(variable.clone());
    }
    return values;
  };
  DomainPointGenerator.prototype.runGradientDescent_0 = function (variableList, iterationCount, ternarySearchIterationCount, ternarySearchOrderStep, ternarySearchOrderIterationCount, delta) {
    var tmp$;
    var currentPenalty = this.calculatePenaltyForImaginaryValue_0(variableList);
    if (currentPenalty < this.epsilon)
      return true;
    for (var iterNumber = 0; iterNumber < iterationCount; iterNumber++) {
      var direction = this.calculateDirection_0(variableList, delta, currentPenalty);
      if (ternarySearchIterationCount > 0) {
        currentPenalty = this.runTernarySearch_0(variableList, direction, ternarySearchIterationCount, ternarySearchOrderStep, ternarySearchOrderIterationCount);
      }
       else {
        tmp$ = variableList.size;
        for (var i = 0; i < tmp$; i++)
          variableList.get_za3lpa$(i).value = variableList.get_za3lpa$(i).value + direction.get_za3lpa$(i);
        currentPenalty = this.calculatePenaltyForImaginaryValue_0(variableList);
      }
      if (currentPenalty < this.epsilon)
        return true;
    }
    return false;
  };
  DomainPointGenerator.prototype.runTernarySearch_0 = function (variableList, direction, iterationCount, orderStep, orderIterationCount) {
    var curOrder = 1.0;
    var optimalMultiplier = 1.0;
    var minPenalty = this.substituteDirectionMultiplier_0(1.0, variableList, direction);
    for (var iter = 0; iter < orderIterationCount; iter++) {
      curOrder *= orderStep;
      var penalty = this.substituteDirectionMultiplier_0(curOrder, variableList, direction);
      if (penalty < minPenalty) {
        minPenalty = penalty;
        optimalMultiplier = curOrder;
      }
    }
    curOrder = 1.0;
    for (var iter_0 = 0; iter_0 < orderIterationCount; iter_0++) {
      curOrder /= orderStep;
      var penalty_0 = this.substituteDirectionMultiplier_0(curOrder, variableList, direction);
      if (penalty_0 < minPenalty) {
        minPenalty = penalty_0;
        optimalMultiplier = curOrder;
      }
    }
    var leftBorder = optimalMultiplier / Math_0.sqrt(orderStep);
    var rightBorder = Math_0.sqrt(orderStep) * optimalMultiplier;
    var penaltyLeft = null;
    var penaltyRight = null;
    for (var iterNumber = 0; iterNumber < iterationCount; iterNumber++) {
      if (minPenalty < this.epsilon)
        break;
      var tmp$ = this.generateMedians_0(leftBorder, rightBorder);
      var med1 = tmp$.component1()
      , med2 = tmp$.component2();
      if (penaltyLeft == null) {
        penaltyLeft = this.substituteDirectionMultiplier_0(med1, variableList, direction);
        if (penaltyLeft < minPenalty) {
          minPenalty = penaltyLeft;
          optimalMultiplier = med1;
        }
      }
      if (penaltyRight == null) {
        penaltyRight = this.substituteDirectionMultiplier_0(med2, variableList, direction);
        if (penaltyRight < minPenalty) {
          minPenalty = penaltyRight;
          optimalMultiplier = med2;
        }
      }
      if (penaltyLeft < penaltyRight) {
        rightBorder = med2;
        penaltyRight = penaltyLeft;
        penaltyLeft = null;
      }
       else {
        leftBorder = med1;
        penaltyLeft = penaltyRight;
        penaltyRight = null;
      }
    }
    for (var i = 0; i !== variableList.size; ++i) {
      variableList.get_za3lpa$(i).value = variableList.get_za3lpa$(i).value + optimalMultiplier * direction.get_za3lpa$(i);
    }
    return minPenalty;
  };
  DomainPointGenerator.prototype.substituteDirectionMultiplier_0 = function (coef, variableList, direction) {
    for (var i = 0; i !== variableList.size; ++i) {
      variableList.get_za3lpa$(i).value = variableList.get_za3lpa$(i).value + coef * direction.get_za3lpa$(i);
    }
    var penalty = this.calculatePenaltyForImaginaryValue_0(variableList);
    for (var i_0 = 0; i_0 !== variableList.size; ++i_0) {
      variableList.get_za3lpa$(i_0).value = variableList.get_za3lpa$(i_0).value - coef * direction.get_za3lpa$(i_0);
    }
    return penalty;
  };
  DomainPointGenerator.prototype.generateMedians_0 = function (left, right) {
    var phi = (3 - Math_0.sqrt(5.0)) / 2;
    return new Pair(left + (right - left) * phi, right - (right - left) * phi);
  };
  DomainPointGenerator.prototype.calculateDirection_0 = function (variableList, delta, currentPenalty) {
    var tmp$;
    var direction = ArrayList_init();
    tmp$ = variableList.iterator();
    while (tmp$.hasNext()) {
      var variable = tmp$.next();
      var x = variable.value;
      var a = Math_0.abs(x);
      var dx = Math_0.max(a, 1.0) * delta;
      variable.value = variable.value + dx;
      direction.add_11rb$(-(this.calculatePenaltyForImaginaryValue_0(variableList) - currentPenalty) / dx);
      variable.value = variable.value - dx;
    }
    return direction;
  };
  DomainPointGenerator.prototype.runAnnealing_0 = function (variableList, temperatureMultiplier, iterationCount) {
    var tmp$;
    var currentTemperature = 1.0;
    var currentPenalty = this.calculatePenaltyForImaginaryValue_0(this.variablesList_0);
    if (variableList.isEmpty())
      return currentPenalty < this.epsilon;
    if (currentPenalty < this.epsilon)
      return true;
    for (var iterNumber = 0; iterNumber < iterationCount; iterNumber++) {
      var newPoint = ArrayList_init();
      tmp$ = variableList.iterator();
      while (tmp$.hasNext()) {
        var variable = tmp$.next();
        newPoint.add_11rb$(variable.clone());
      }
      var varIndex = randomInt(0, newPoint.size);
      newPoint.set_wxm5ur$(varIndex, this.generateNextValue_0(newPoint.get_za3lpa$(varIndex), currentPenalty));
      var newPenalty = this.calculatePenaltyForImaginaryValue_0(newPoint);
      if (this.newPointGoodEnough_0(currentPenalty, newPenalty, currentTemperature)) {
        currentPenalty = newPenalty;
        for (var i = 0; i !== newPoint.size; ++i) {
          variableList.get_za3lpa$(i).value = newPoint.get_za3lpa$(i).value;
        }
        if (currentPenalty < this.epsilon)
          return true;
      }
      currentTemperature *= temperatureMultiplier;
    }
    return false;
  };
  DomainPointGenerator.prototype.newPointGoodEnough_0 = function (currentPenalty, newPenalty, temperature) {
    var tmp$ = currentPenalty > newPenalty;
    if (!tmp$) {
      var tmp$_0 = random_1(0.0, 1.0);
      var x = (currentPenalty - newPenalty) / temperature;
      tmp$ = tmp$_0 < Math_0.exp(x) * 0.5;
    }
    return tmp$;
  };
  DomainPointGenerator.prototype.calculatePenaltyForImaginaryValue_0 = function (variableList) {
    var tmp$, tmp$_0;
    tmp$ = this.nodesWithVariables_0.iterator();
    while (tmp$.hasNext()) {
      var tmp$_1 = tmp$.next();
      var nodeInd = tmp$_1.component1()
      , valInd = tmp$_1.component2();
      this.treeNodes_0.get_za3lpa$(this.treeNodes_0.size - 1 - nodeInd | 0).value = toComplex_0(variableList.get_za3lpa$(valInd).value);
    }
    return this.baseOperationsComputationComplex.computePenalty_7oy7zz$(Kotlin.isType(tmp$_0 = this.treeNodes_0, ArrayList) ? tmp$_0 : throwCCE());
  };
  DomainPointGenerator.prototype.generateNextValue_0 = function (variable, currentPenalty) {
    var b = abs_0(variable.value) / 10;
    var c = currentPenalty / this.annealingPenaltyRestrictionMultiplier_0;
    var step = Math_0.max(1.0, b, c);
    var a = step;
    var b_0 = currentPenalty * this.annealingPenaltyRestrictionMultiplier_0;
    step = Math_0.min(a, b_0);
    variable.value = random_1(variable.value - step, variable.value + step);
    return variable;
  };
  DomainPointGenerator.prototype.findAllVariables_0 = function (node) {
    var tmp$, tmp$_0;
    var ind = this.treeNodes_0.size;
    if (node.nodeType === NodeType$FUNCTION_getInstance()) {
      this.treeNodes_0.add_11rb$(new CompressedNode(node.value));
      tmp$ = node.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        var childIndex = this.findAllVariables_0(child);
        this.treeNodes_0.get_za3lpa$(ind).children.add_11rb$(this.treeNodes_0.get_za3lpa$(childIndex));
      }
    }
     else {
      var isVariable = false;
      tmp$_0 = this.variablesList_0;
      for (var i = 0; i !== tmp$_0.size; ++i) {
        if (equals(this.variablesList_0.get_za3lpa$(i).name, node.value)) {
          this.nodesWithVariables_0.add_11rb$(new Pair(ind, i));
          isVariable = true;
        }
      }
      if (isVariable)
        this.treeNodes_0.add_11rb$(new CompressedNode());
      else
        this.treeNodes_0.add_11rb$(new CompressedNode(void 0, toComplex_1(node.value)));
    }
    return ind;
  };
  DomainPointGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DomainPointGenerator',
    interfaces: []
  };
  function entriesOf(jsObject) {
    var tmp$;
    var $receiver = (typeof (tmp$ = Object.entries) === 'function' ? tmp$ : throwCCE())(jsObject);
    var destination = ArrayList_init_0($receiver.length);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== $receiver.length; ++tmp$_0) {
      var item = $receiver[tmp$_0];
      var tmp$_1;
      destination.add_11rb$(to(typeof (tmp$_1 = item[0]) === 'string' ? tmp$_1 : throwCCE(), item[1]));
    }
    return destination;
  }
  function mapOf_1(jsObject) {
    return toMap(entriesOf(jsObject));
  }
  function JsonParser() {
    JsonParser$Companion_getInstance();
  }
  function JsonParser$Companion() {
    JsonParser$Companion_instance = this;
  }
  JsonParser$Companion.prototype.parseMap_61zpoe$ = function (json) {
    var jsonObj = JSON.parse(json);
    console.log('jsonObj', jsonObj);
    return this.parseMapRecursive_qk3xy8$(jsonObj);
  };
  JsonParser$Companion.prototype.parseMapRecursive_qk3xy8$ = function (jsonObj) {
    var tmp$, tmp$_0, tmp$_1;
    var res = LinkedHashMap_init_0();
    var jsonMap = toMap(entriesOf(jsonObj));
    console.log('jsonMap', jsonMap);
    tmp$ = jsonMap.entries.iterator();
    while (tmp$.hasNext()) {
      var tmp$_2 = tmp$.next();
      var key = tmp$_2.key;
      var valueObj = tmp$_2.value;
      console.log('key', key);
      console.log('valueObj', valueObj);
      if (valueObj != null) {
        if (typeof valueObj === 'string' || equals(valueObj, kotlin_js_internal_IntCompanionObject) || equals(valueObj, kotlin_js_internal_LongCompanionObject) || equals(valueObj, kotlin_js_internal_DoubleCompanionObject) || equals(valueObj, kotlin_js_internal_FloatCompanionObject)) {
          console.log('String, Int, Long, Double, Float');
          tmp$_1 = valueObj;
        }
         else if (Kotlin.isArray(valueObj)) {
          console.log('is Collection');
          var destination = ArrayList_init_0(valueObj.length);
          var tmp$_3;
          for (tmp$_3 = 0; tmp$_3 !== valueObj.length; ++tmp$_3) {
            var item = valueObj[tmp$_3];
            var tmp$_4 = destination.add_11rb$;
            var transform$result;
            var tmp$_5;
            if (typeof item === 'string' || equals(item, kotlin_js_internal_IntCompanionObject) || equals(item, kotlin_js_internal_LongCompanionObject) || equals(item, kotlin_js_internal_DoubleCompanionObject) || equals(item, kotlin_js_internal_FloatCompanionObject)) {
              transform$result = item;
            }
             else {
              transform$result = this.parseMapRecursive_qk3xy8$(Kotlin.isType(tmp$_5 = item, Object) ? tmp$_5 : throwCCE());
            }
            tmp$_4.call(destination, transform$result);
          }
          tmp$_1 = destination;
        }
         else {
          console.log('else');
          tmp$_1 = this.parseMapRecursive_qk3xy8$(Kotlin.isType(tmp$_0 = valueObj, Object) ? tmp$_0 : throwCCE());
        }
        var value = tmp$_1;
        console.log('value', value);
        res.put_xwzc9p$(key, value);
      }
    }
    return res;
  };
  JsonParser$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var JsonParser$Companion_instance = null;
  function JsonParser$Companion_getInstance() {
    if (JsonParser$Companion_instance === null) {
      new JsonParser$Companion();
    }
    return JsonParser$Companion_instance;
  }
  JsonParser.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'JsonParser',
    interfaces: []
  };
  var random_0;
  function defaultRandom() {
    return random_0.nextDouble();
  }
  function random_1(from, to) {
    return random_0.nextDouble() * (to - from) + from;
  }
  function randomInt(from, to) {
    return from === to ? from : random_0.nextInt_vux9f0$(from, to);
  }
  function randomBoolean() {
    return randomInt(0, 2) === 0;
  }
  function abs(x) {
    return x > 0 ? x : -x | 0;
  }
  function toStringWithMinLength($receiver, minLength, suffixChar) {
    var tmp$;
    var res = $receiver.toString();
    var suffixLen = minLength - res.length | 0;
    if (suffixLen > 0) {
      tmp$ = res + repeat(String.fromCharCode(suffixChar), suffixLen);
    }
     else {
      tmp$ = res;
    }
    return tmp$;
  }
  function escapeCharacters(string, characterEscapingDepth) {
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    return escapeBackSlash(string, characterEscapingDepth);
  }
  function escapeBackSlash(string, characterEscapingDepth) {
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    var replacement = repeat('\\', characterEscapingDepth);
    return replace(string, '\\', replacement);
  }
  function toShortString($receiver) {
    var stringValue = $receiver.toString();
    if (contains_0(stringValue, 46)) {
      if (contains_1(stringValue, '999')) {
        var fractionPart = substringBefore_0(substringAfter(stringValue, '.'), '999');
        stringValue = substringBefore_0(stringValue, '.');
        if (fractionPart.length > 0 && !equals(fractionPart, '9'))
          stringValue = stringValue + '.' + substringBefore_0(fractionPart, '999');
        if (last_0(stringValue) !== 57) {
          var newLast = toChar(last_0(stringValue) + 1);
          stringValue = removeSuffix(stringValue, String.fromCharCode(last_0(stringValue))) + String.fromCharCode(toBoxedChar(newLast));
        }
         else {
          stringValue = (toInt(stringValue) + 1 | 0).toString();
        }
      }
       else {
        var fractionPart_0 = substringBefore_0(substringAfter(stringValue, '.'), '000');
        stringValue = substringBefore_0(stringValue, '.');
        if (fractionPart_0.length > 0 && !equals(fractionPart_0, '0'))
          stringValue = stringValue + '.' + substringBefore_0(fractionPart_0, '000');
      }
    }
    return stringValue;
  }
  function lazyPrintln(condition, message) {
    if (condition) {
      println(message());
    }
  }
  function abs_0($receiver) {
    return $receiver < 0 ? -$receiver : $receiver;
  }
  function isNumberValuesEqual(l, r) {
    var tmp$, tmp$_0;
    var l_copy = l;
    var r_copy = r;
    if (equals(r, l)) {
      return true;
    }
     else {
      var confVar = new VariableConfiguration();
      if (confVar.variableImmediateReplacementMap.containsKey_11rb$(l)) {
        l_copy = ensureNotNull(confVar.variableImmediateReplacementMap.get_11rb$(l));
      }
      if (confVar.variableImmediateReplacementMap.containsKey_11rb$(r)) {
        r_copy = ensureNotNull(confVar.variableImmediateReplacementMap.get_11rb$(r));
      }
    }
    tmp$ = toDoubleOrNull(l_copy);
    if (tmp$ == null) {
      return false;
    }
    var lValue = tmp$;
    tmp$_0 = toDoubleOrNull(r_copy);
    if (tmp$_0 == null) {
      return false;
    }
    var rValue = tmp$_0;
    return abs_0(lValue - rValue) < 1.19E-6;
  }
  function isLowerCaseLetter($receiver) {
    return (new CharRange(97, 122)).contains_mef7kx$($receiver) || (new CharRange(945, 969)).contains_mef7kx$($receiver);
  }
  function isUpperCaseLetter($receiver) {
    return (new CharRange(65, 90)).contains_mef7kx$($receiver) || (new CharRange(913, 937)).contains_mef7kx$($receiver);
  }
  function isLetter($receiver) {
    return isLowerCaseLetter($receiver) || isUpperCaseLetter($receiver);
  }
  function isLatinLetter($receiver) {
    return (new CharRange(97, 122)).contains_mef7kx$($receiver) || (new CharRange(65, 90)).contains_mef7kx$($receiver);
  }
  function isLetterOrUnderscore($receiver) {
    return isLetter($receiver) || $receiver === 95;
  }
  function isDigit($receiver) {
    return (new CharRange(48, 57)).contains_mef7kx$($receiver);
  }
  function isLetterOrDigit($receiver) {
    return isLetter($receiver) || isDigit($receiver);
  }
  function isLetterOrDigitOrUnderscore($receiver) {
    return isLetterOrDigit($receiver) || $receiver === 95;
  }
  function isNamePart($receiver) {
    return isLetterOrDigitOrUnderscore($receiver) || ($receiver > 126 && $receiver !== 8593 && $receiver !== 8595 && $receiver !== 8743 && $receiver !== 8744 && $receiver !== 8853 && $receiver !== 8801 && $receiver !== 172 && $receiver !== 8594 && $receiver !== 8726);
  }
  function isNameOrNumberPart($receiver) {
    return isNamePart($receiver) || $receiver === 46;
  }
  function isNumberPart($receiver) {
    return isDigit($receiver) || $receiver === 46;
  }
  function isOpenBracket($receiver) {
    return $receiver === 40 || $receiver === 123 || $receiver === 91;
  }
  function isCloseBracket($receiver) {
    return $receiver === 41 || $receiver === 125 || $receiver === 93;
  }
  function isTexArgumentsSeparator($receiver) {
    return $receiver === 94 || $receiver === 95 || $receiver === 32;
  }
  function isBracket($receiver) {
    return isOpenBracket($receiver) || isCloseBracket($receiver);
  }
  function isUnarySignPart(c) {
    return c === 33 || c === 35 || c === 39 || c === 172;
  }
  function isBinarySignPart(c, prevC, isMathML, hasUpAnd) {
    if (isMathML === void 0)
      isMathML = false;
    if (hasUpAnd === void 0)
      hasUpAnd = false;
    return c === 43 || c === 45 || c === 42 || c === 47 || c === 94 || c === 37 || c === 124 || c === 8593 || c === 8595 || c === 8743 || c === 8744 || c === 8853 || c === 8801 || c === 8594 || c === 8726 || (c === 92 && (prevC === 92 || (hasUpAnd && prevC === 47) || !isSign(prevC, 32, isMathML))) || (c === 38 && !isMathML);
  }
  function isSign($receiver, prevC, isMathML) {
    if (isMathML === void 0)
      isMathML = false;
    return isUnarySignPart($receiver) || isBinarySignPart($receiver, prevC, isMathML);
  }
  function isWhiteSpace($receiver, index) {
    return isWhitespace($receiver.charCodeAt(index)) || ($receiver.charCodeAt(index) === 92 && ((index + 1 | 0) >= $receiver.length || isWhitespace($receiver.charCodeAt(index + 1 | 0))));
  }
  function prevCharOrSpace($receiver, pos) {
    var tmp$;
    tmp$ = get_lastIndex_0($receiver);
    return unboxChar(0 <= (pos - 1 | 0) && (pos - 1 | 0) <= tmp$ ? $receiver.charCodeAt(pos - 1 | 0) : 32);
  }
  function removeAllExceptLatin($receiver) {
    var tmp$;
    var result = StringBuilder_init_0();
    tmp$ = iterator($receiver);
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      if (isLetterOrDigitOrUnderscore(c)) {
        result.append_s8itvh$(c);
      }
       else if (isWhitespace(c)) {
        result.append_s8itvh$(95);
      }
    }
    return result.toString();
  }
  function toCustomCodeSuffixPart($receiver) {
    var tmp$;
    var result = StringBuilder_init_0();
    var capilizeNext = true;
    tmp$ = iterator($receiver);
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      if (isLetterOrDigitOrUnderscore(c)) {
        if (capilizeNext) {
          result.append_s8itvh$(toChar(String.fromCharCode(c | 0).toUpperCase().charCodeAt(0)));
          capilizeNext = false;
        }
         else {
          result.append_s8itvh$(c);
        }
      }
       else if (isWhitespace(c)) {
        capilizeNext = true;
      }
    }
    return result.toString();
  }
  function texStringPrefiltering(string) {
    var i = 0;
    var result = StringBuilder_init_0();
    while (i < string.length) {
      if (remainingExpressionStartsWith('\\operatorname{', string, i)) {
        i = i + 14 | 0;
        while (i < string.length && string.charCodeAt(i) !== 125) {
          result.append_s8itvh$(string.charCodeAt(i));
          i = i + 1 | 0;
        }
      }
       else {
        result.append_s8itvh$(string.charCodeAt(i));
      }
      i = i + 1 | 0;
    }
    return result.toString();
  }
  function remainingExpressionStartsWith(string, expression, currentPosition) {
    var tmp$;
    if (currentPosition < 0) {
      return false;
    }
    tmp$ = string.length;
    for (var i = 0; i < tmp$; i++)
      if ((currentPosition + i | 0) >= expression.length || expression.charCodeAt(currentPosition + i | 0) !== string.charCodeAt(i))
        return false;
    return true;
  }
  function readFromRemainingExpressionWhile(symbolCondition, expression, currentPosition) {
    var value = '';
    var pos = currentPosition;
    while (pos < expression.length && symbolCondition(toBoxedChar(expression.charCodeAt(pos)))) {
      value += String.fromCharCode(expression.charCodeAt(pos));
      pos = pos + 1 | 0;
    }
    return value;
  }
  function skipFromRemainingExpressionWhile(symbolCondition, expression, currentPosition) {
    var pos = currentPosition;
    while (pos < expression.length && symbolCondition(toBoxedChar(expression.charCodeAt(pos)))) {
      pos = pos + 1 | 0;
    }
    return pos;
  }
  function skipFromRemainingExpressionWhileClosingTagNotFound(closingTag, expression, currentPosition) {
    var tmp$;
    var pos = currentPosition;
    var openTagsCount = 1;
    while (pos < expression.length) {
      if (remainingExpressionStartsWith('<' + closingTag, expression, pos)) {
        openTagsCount = openTagsCount + 1 | 0;
      }
       else if (remainingExpressionStartsWith('<\/' + closingTag, expression, pos))
        tmp$ = openTagsCount, openTagsCount = tmp$ - 1 | 0;
      if (openTagsCount === 0)
        break;
      pos = pos + 1 | 0;
    }
    return pos;
  }
  function getBracketLevelChangeBeforeClosingTag(closingTag, expression, currentPosition) {
    var tmp$, tmp$_0;
    var pos = currentPosition;
    var openTagsCount = 0;
    var openBracketsCount = 0;
    while (pos < expression.length) {
      if (remainingExpressionStartsWith('<' + closingTag, expression, pos)) {
        openTagsCount = openTagsCount + 1 | 0;
      }
       else if (remainingExpressionStartsWith('<\/' + closingTag, expression, pos))
        tmp$ = openTagsCount, openTagsCount = tmp$ - 1 | 0;
      if (openTagsCount === 0)
        break;
      if (isOpenBracket(expression.charCodeAt(pos))) {
        openBracketsCount = openBracketsCount + 1 | 0;
      }
       else if (isCloseBracket(expression.charCodeAt(pos))) {
        tmp$_0 = openBracketsCount, openBracketsCount = tmp$_0 - 1 | 0;
      }
      pos = pos + 1 | 0;
    }
    return openBracketsCount;
  }
  function findFirstNotInTagNotInMtext(string, startPosition) {
    var tmp$;
    tmp$ = get_lastIndex_0(string);
    for (var i = startPosition; i <= tmp$; i++) {
      if (string.charCodeAt(i) === 60) {
        if (remainingExpressionStartsWith('<\/mtext>', string, i)) {
          for (var j = startPosition; j >= 0; j--) {
            if (string.charCodeAt(j) === 62) {
              return j - 6 | 0;
            }
          }
        }
        return startPosition;
      }
       else if (string.charCodeAt(i) === 62) {
        if (remainingExpressionStartsWith('<mtext>', string, i - 6 | 0)) {
          return i - 6 | 0;
        }
        return i + 1 | 0;
      }
    }
    return string.length;
  }
  function skipClosingTags(string, startPosition) {
    var currentStartPosition = startPosition;
    while (remainingExpressionStartsWith('<\/', string, currentStartPosition)) {
      while (string.charCodeAt(currentStartPosition) !== 62) {
        currentStartPosition = currentStartPosition + 1 | 0;
      }
      currentStartPosition = currentStartPosition + 1 | 0;
    }
    return currentStartPosition;
  }
  function selectPlacesForColoringByFragment(mathML, approxStartPosition, approxEndPosition) {
    var startPosition = approxStartPosition;
    var endPosition = approxEndPosition;
    while (startPosition >= 0 && mathML.charCodeAt(startPosition) !== 60 && mathML.charCodeAt(startPosition) !== 62) {
      startPosition = startPosition - 1 | 0;
    }
    if (mathML.charCodeAt(startPosition) === 62) {
      startPosition = startPosition + 1 | 0;
    }
    while (endPosition < mathML.length && mathML.charCodeAt(endPosition) !== 60 && mathML.charCodeAt(endPosition) !== 62) {
      endPosition = endPosition + 1 | 0;
    }
    if (mathML.charCodeAt(endPosition) === 62) {
      endPosition = endPosition + 1 | 0;
    }
    var numberOfNotClosedTags = 0;
    var currentStartPosition = startPosition;
    while (currentStartPosition < endPosition) {
      if (mathML.charCodeAt(currentStartPosition) === 60) {
        if ((currentStartPosition + 1 | 0) < mathML.length && mathML.charCodeAt(currentStartPosition + 1 | 0) === 47) {
          numberOfNotClosedTags = numberOfNotClosedTags - 1 | 0;
        }
         else {
          numberOfNotClosedTags = numberOfNotClosedTags + 1 | 0;
        }
      }
      currentStartPosition = currentStartPosition + 1 | 0;
    }
    while (numberOfNotClosedTags > 0) {
      while (endPosition < mathML.length && mathML.charCodeAt(endPosition) !== 60) {
        endPosition = endPosition + 1 | 0;
      }
      if ((endPosition + 1 | 0) < mathML.length && mathML.charCodeAt(endPosition + 1 | 0) === 47) {
        numberOfNotClosedTags = numberOfNotClosedTags - 1 | 0;
      }
       else {
        numberOfNotClosedTags = numberOfNotClosedTags + 1 | 0;
      }
      while (endPosition < mathML.length && mathML.charCodeAt(endPosition) !== 62) {
        endPosition = endPosition + 1 | 0;
      }
      endPosition = endPosition + 1 | 0;
    }
    while (numberOfNotClosedTags < 0) {
      startPosition = startPosition - 1 | 0;
      while (startPosition >= 0 && mathML.charCodeAt(startPosition) !== 60) {
        startPosition = startPosition - 1 | 0;
      }
      if ((startPosition + 1 | 0) < mathML.length && mathML.charCodeAt(startPosition + 1 | 0) === 47) {
        numberOfNotClosedTags = numberOfNotClosedTags - 1 | 0;
      }
       else {
        numberOfNotClosedTags = numberOfNotClosedTags + 1 | 0;
      }
    }
    return new Pair(startPosition, endPosition);
  }
  function findClosestPlaceToTargetOnTheSameLevel(string, startPosition, targetEndPosition, isMathML) {
    if (isMathML === void 0)
      isMathML = true;
    var pos = startPosition;
    var openTagsCount = 0;
    var inTag = false;
    var minDist = 2147483647;
    var currentResultPos = pos;
    var a = string.length;
    var b = targetEndPosition + targetEndPosition - startPosition | 0;
    var maxEnd = Math_0.min(a, b);
    while (pos < maxEnd) {
      if (isMathML && remainingExpressionStartsWith('<\/', string, pos)) {
        openTagsCount = openTagsCount - 1 | 0;
        pos = pos + 1 | 0;
        inTag = true;
      }
       else if (isMathML && string.charCodeAt(pos) === 60) {
        openTagsCount = openTagsCount + 1 | 0;
        inTag = true;
      }
       else if (isMathML && string.charCodeAt(pos) === 62) {
        inTag = false;
      }
       else if (isOpenBracket(string.charCodeAt(pos))) {
        openTagsCount = openTagsCount + 1 | 0;
      }
       else if (isCloseBracket(string.charCodeAt(pos))) {
        openTagsCount = openTagsCount - 1 | 0;
      }
       else if (!isMathML && remainingExpressionStartsWith('\\left(', string, pos)) {
        openTagsCount = openTagsCount + 1 | 0;
        pos = pos + 5 | 0;
      }
       else if (!isMathML && remainingExpressionStartsWith('\\right)', string, pos)) {
        openTagsCount = openTagsCount - 1 | 0;
        pos = pos + 6 | 0;
      }
      pos = pos + 1 | 0;
      if (openTagsCount === 0 && !inTag) {
        var currentDist = abs(targetEndPosition - pos | 0);
        if (currentDist < minDist) {
          minDist = currentDist;
          currentResultPos = pos;
        }
         else if (pos > targetEndPosition) {
          break;
        }
      }
       else if (openTagsCount < 0) {
        return currentResultPos;
      }
    }
    return currentResultPos;
  }
  function skipFromRemainingExpressionWhileClosingBracketNotFound(closingBracket, openingBracket, expression, currentPosition) {
    var tmp$;
    var pos = currentPosition;
    var openTagsCount = 1;
    while (pos < expression.length) {
      if (remainingExpressionStartsWith(openingBracket, expression, pos)) {
        openTagsCount = openTagsCount + 1 | 0;
      }
       else if (remainingExpressionStartsWith(closingBracket, expression, pos))
        tmp$ = openTagsCount, openTagsCount = tmp$ - 1 | 0;
      if (openTagsCount === 0)
        break;
      pos = pos + 1 | 0;
    }
    return pos;
  }
  function getIndexOfFirstBracketsValueEnd(string, startPosition, openBracket, closingBracket) {
    var i = startPosition;
    var numberOfOpenBrackets = 1;
    while (i < string.length) {
      if (string.charCodeAt(i) === openBracket) {
        numberOfOpenBrackets = numberOfOpenBrackets + 1 | 0;
      }
       else if (string.charCodeAt(i) === closingBracket) {
        numberOfOpenBrackets = numberOfOpenBrackets - 1 | 0;
        if (numberOfOpenBrackets === 0) {
          return i;
        }
      }
      i = i + 1 | 0;
    }
    return string.length;
  }
  function NamedList(name, list, endPosition) {
    this.name = name;
    this.list = list;
    this.endPosition = endPosition;
  }
  NamedList.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NamedList',
    interfaces: []
  };
  NamedList.prototype.component1 = function () {
    return this.name;
  };
  NamedList.prototype.component2 = function () {
    return this.list;
  };
  NamedList.prototype.component3 = function () {
    return this.endPosition;
  };
  NamedList.prototype.copy_hjdhk9$ = function (name, list, endPosition) {
    return new NamedList(name === void 0 ? this.name : name, list === void 0 ? this.list : list, endPosition === void 0 ? this.endPosition : endPosition);
  };
  NamedList.prototype.toString = function () {
    return 'NamedList(name=' + Kotlin.toString(this.name) + (', list=' + Kotlin.toString(this.list)) + (', endPosition=' + Kotlin.toString(this.endPosition)) + ')';
  };
  NamedList.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.list) | 0;
    result = result * 31 + Kotlin.hashCode(this.endPosition) | 0;
    return result;
  };
  NamedList.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.list, other.list) && Kotlin.equals(this.endPosition, other.endPosition)))));
  };
  function splitStringByBracketsOnTopLevel(originalString, openBracket, closingBracket, startPosition) {
    if (startPosition === void 0)
      startPosition = 0;
    var string = originalString.substring(startPosition);
    var result = ArrayList_init();
    var indexOfFirst$result;
    indexOfFirst$break: do {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      tmp$ = get_indices(string);
      tmp$_0 = tmp$.first;
      tmp$_1 = tmp$.last;
      tmp$_2 = tmp$.step;
      for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
        if (unboxChar(toBoxedChar(string.charCodeAt(index))) === openBracket) {
          indexOfFirst$result = index;
          break indexOfFirst$break;
        }
      }
      indexOfFirst$result = -1;
    }
     while (false);
    var firstOpenBracketIndex = indexOfFirst$result;
    if (firstOpenBracketIndex < 0) {
      return new NamedList(originalString, emptyList(), originalString.length);
    }
    var $receiver = string.substring(0, firstOpenBracketIndex);
    var tmp$_3;
    var name = trim(Kotlin.isCharSequence(tmp$_3 = $receiver) ? tmp$_3 : throwCCE()).toString();
    var j = firstOpenBracketIndex;
    var endPosition = originalString.length;
    while (j < string.length && string.charCodeAt(j) === openBracket) {
      var partStart = j + 1 | 0;
      var partEnd = getIndexOfFirstBracketsValueEnd(string, partStart, 123, 125);
      if (partEnd >= string.length) {
        break;
      }
      result.add_11rb$(string.substring(partStart, partEnd));
      j = partEnd + 1 | 0;
    }
    if (j < string.length) {
      endPosition = j + startPosition | 0;
    }
    return new NamedList(name, result, endPosition);
  }
  function SplittingString(string, keywordsWithStringAsPrefix) {
    if (keywordsWithStringAsPrefix === void 0) {
      keywordsWithStringAsPrefix = emptyList();
    }
    this.string = string;
    this.keywordsWithStringAsPrefix = keywordsWithStringAsPrefix;
  }
  SplittingString.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SplittingString',
    interfaces: []
  };
  SplittingString.prototype.component1 = function () {
    return this.string;
  };
  SplittingString.prototype.component2 = function () {
    return this.keywordsWithStringAsPrefix;
  };
  SplittingString.prototype.copy_kwv3np$ = function (string, keywordsWithStringAsPrefix) {
    return new SplittingString(string === void 0 ? this.string : string, keywordsWithStringAsPrefix === void 0 ? this.keywordsWithStringAsPrefix : keywordsWithStringAsPrefix);
  };
  SplittingString.prototype.toString = function () {
    return 'SplittingString(string=' + Kotlin.toString(this.string) + (', keywordsWithStringAsPrefix=' + Kotlin.toString(this.keywordsWithStringAsPrefix)) + ')';
  };
  SplittingString.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.string) | 0;
    result = result * 31 + Kotlin.hashCode(this.keywordsWithStringAsPrefix) | 0;
    return result;
  };
  SplittingString.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.string, other.string) && Kotlin.equals(this.keywordsWithStringAsPrefix, other.keywordsWithStringAsPrefix)))));
  };
  function splitBySubstringOnTopLevel(substrings, expression, startPosition, endPosition) {
    if (startPosition === void 0)
      startPosition = 0;
    if (endPosition === void 0)
      endPosition = expression.length;
    var tmp$, tmp$_0;
    var result = ArrayList_init();
    var pos = {v: startPosition};
    var lastStartPos = startPosition;
    var expressionNotCompleted = false;
    while (pos.v < endPosition) {
      var splittingSubstring = null;
      tmp$ = substrings.iterator();
      loop_label: while (tmp$.hasNext()) {
        var substring = tmp$.next();
        var tmp$_1 = remainingExpressionStartsWith(substring.string, expression, pos.v);
        if (tmp$_1) {
          var $receiver = substring.keywordsWithStringAsPrefix;
          var all$result;
          all$break: do {
            var tmp$_2;
            if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
              all$result = true;
              break all$break;
            }
            tmp$_2 = $receiver.iterator();
            while (tmp$_2.hasNext()) {
              var element = tmp$_2.next();
              if (!!remainingExpressionStartsWith(element, expression, pos.v)) {
                all$result = false;
                break all$break;
              }
            }
            all$result = true;
          }
           while (false);
          tmp$_1 = all$result;
        }
        if (tmp$_1) {
          splittingSubstring = substring.string;
          break loop_label;
        }
      }
      if (splittingSubstring != null && !expressionNotCompleted) {
        result.add_11rb$(new StringPart(lastStartPos, pos.v, splittingSubstring));
        pos.v = pos.v + splittingSubstring.length | 0;
        lastStartPos = pos.v;
      }
       else if (remainingExpressionStartsWith('<mo>', expression, pos.v)) {
        pos.v = pos.v + 4 | 0;
      }
       else if (remainingExpressionStartsWith('<\/mo>', expression, pos.v)) {
        pos.v = pos.v + 5 | 0;
      }
       else if (remainingExpressionStartsWith('<mrow>', expression, pos.v)) {
        pos.v = pos.v + 6 | 0;
      }
       else if (remainingExpressionStartsWith('<\/mrow>', expression, pos.v)) {
        pos.v = pos.v + 7 | 0;
      }
       else if (isOpenBracket(expression.charCodeAt(pos.v))) {
        var numberOfOpenBrackets = 1;
        expressionNotCompleted = true;
        pos.v = pos.v + 1 | 0;
        while (pos.v < endPosition) {
          if (isOpenBracket(expression.charCodeAt(pos.v))) {
            numberOfOpenBrackets = numberOfOpenBrackets + 1 | 0;
          }
           else if (isCloseBracket(expression.charCodeAt(pos.v)))
            tmp$_0 = numberOfOpenBrackets, numberOfOpenBrackets = tmp$_0 - 1 | 0;
          pos.v = pos.v + 1 | 0;
          if (numberOfOpenBrackets === 0) {
            expressionNotCompleted = false;
            break;
          }
        }
      }
       else {
        var actualTag = readOpenTagStringIfItPresent(expression, pos.v);
        if (actualTag != null) {
          pos.v = pos.v + actualTag.length | 0;
          if (!endsWith_0(actualTag, '/>')) {
            var tagName = ensureNotNull(getTagAttributes(actualTag).get_11rb$('name'));
            pos.v = skipFromRemainingExpressionWhileClosingTagNotFound(tagName, expression, pos.v) + tagName.length + StringExtension$Companion_getInstance().closing.length | 0;
          }
        }
         else {
          pos.v = pos.v + 1 | 0;
        }
      }
    }
    if (!expressionNotCompleted) {
      result.add_11rb$(new StringPart(lastStartPos, pos.v));
    }
    return result;
  }
  function readOpenTagStringIfItPresent$lambda(it) {
    return unboxChar(it) !== 62;
  }
  function readOpenTagStringIfItPresent(expression, currentPosition) {
    if (expression.charCodeAt(currentPosition) === 60 && expression.length > (currentPosition + 1 | 0) && isNamePart(expression.charCodeAt(currentPosition + 1 | 0))) {
      var end = skipFromRemainingExpressionWhile(readOpenTagStringIfItPresent$lambda, expression, currentPosition);
      if (end >= expression.length || expression.charCodeAt(end) !== 62)
        return null;
      var endIndex = end + 1 | 0;
      return expression.substring(currentPosition, endIndex);
    }
     else
      return null;
  }
  function trimmedMathML($receiver) {
    var startPosition = 0;
    while (startPosition < $receiver.length) {
      if (remainingExpressionStartsWith(StringExtension$Companion_getInstance().newWhiteSpace, $receiver, startPosition)) {
        startPosition = startPosition + StringExtension$Companion_getInstance().newWhiteSpace.length | 0;
      }
       else if (remainingExpressionStartsWith(StringExtension$Companion_getInstance().newLineMspace, $receiver, startPosition)) {
        startPosition = startPosition + StringExtension$Companion_getInstance().newLineMspace.length | 0;
      }
       else if (isWhitespace($receiver.charCodeAt(startPosition))) {
        startPosition = startPosition + 1 | 0;
      }
       else {
        break;
      }
    }
    var endPosition = $receiver.length;
    while (endPosition > 0) {
      if (remainingExpressionStartsWith(StringExtension$Companion_getInstance().newWhiteSpace, $receiver, endPosition - StringExtension$Companion_getInstance().newWhiteSpace.length | 0)) {
        endPosition = endPosition - StringExtension$Companion_getInstance().newWhiteSpace.length | 0;
      }
       else if (remainingExpressionStartsWith(StringExtension$Companion_getInstance().newLineMspace, $receiver, endPosition - StringExtension$Companion_getInstance().newLineMspace.length | 0)) {
        endPosition = endPosition - StringExtension$Companion_getInstance().newLineMspace.length | 0;
      }
       else if (isWhitespace($receiver.charCodeAt(endPosition - 1 | 0))) {
        endPosition = endPosition - 1 | 0;
      }
       else {
        break;
      }
    }
    var tmp$;
    if (endPosition < startPosition)
      tmp$ = '';
    else {
      var startIndex = startPosition;
      var endIndex = endPosition;
      tmp$ = $receiver.substring(startIndex, endIndex);
    }
    return tmp$;
  }
  function getTagAttributes(tagString) {
    var tmp$;
    var data = substringBefore(substringAfter_0(tagString, 60), 62);
    var attrValues = split_0(data, Kotlin.charArrayOf(32));
    var result = mutableMapOf([new Pair('name', attrValues.get_za3lpa$(0))]);
    tmp$ = get_lastIndex(attrValues);
    for (var i = 1; i <= tmp$; i++) {
      var attrValue = split_0(attrValues.get_za3lpa$(i), Kotlin.charArrayOf(61));
      result.put_xwzc9p$(attrValue.get_za3lpa$(0), attrValue.get_za3lpa$(1));
    }
    return result;
  }
  function removeNewLinesFromExpression(expression) {
    return replace(expression, '<mspace linebreak="newline"/>', '');
  }
  function findNewLinePlaces(expression) {
    var result = ArrayList_init();
    var startPosition = 0;
    while (startPosition < expression.length) {
      var pos = indexOf_0(expression, StringExtension$Companion_getInstance().newLineMspace, startPosition);
      if (pos < 0) {
        break;
      }
      result.add_11rb$(pos);
      startPosition = pos + 1 | 0;
    }
    return result;
  }
  function StringExtension() {
    StringExtension$Companion_getInstance();
  }
  function StringExtension$Companion() {
    StringExtension$Companion_instance = this;
    this.mtable = 'mtable';
    this.mfenced = 'mfenced';
    this.closing = '<\/>';
    this.newLineMspace = '<mspace linebreak="newline"/>';
    this.newWhiteSpace = '<mo>&#xA0;<\/mo>';
    this.openCommentMathML = '<mo>/<\/mo><mo>*<\/mo>';
    this.openCommentShort = '/*';
    this.closeCommentMathML = '<mo>*<\/mo><mo>/<\/mo>';
    this.closeCommentShort = '*/';
  }
  StringExtension$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StringExtension$Companion_instance = null;
  function StringExtension$Companion_getInstance() {
    if (StringExtension$Companion_instance === null) {
      new StringExtension$Companion();
    }
    return StringExtension$Companion_instance;
  }
  StringExtension.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StringExtension',
    interfaces: []
  };
  function TransformationsPart() {
  }
  TransformationsPart.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TransformationsPart',
    interfaces: []
  };
  function StringPart(startPosition, endPosition, splittingSubstring) {
    if (splittingSubstring === void 0)
      splittingSubstring = null;
    this.startPosition_nnmpn0$_0 = startPosition;
    this.endPosition_f4ztx$_0 = endPosition;
    this.splittingSubstring = splittingSubstring;
  }
  Object.defineProperty(StringPart.prototype, 'startPosition', {
    get: function () {
      return this.startPosition_nnmpn0$_0;
    }
  });
  Object.defineProperty(StringPart.prototype, 'endPosition', {
    get: function () {
      return this.endPosition_f4ztx$_0;
    }
  });
  StringPart.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StringPart',
    interfaces: [TransformationsPart]
  };
  function containsAny($receiver, o) {
    var tmp$;
    tmp$ = o.iterator();
    while (tmp$.hasNext()) {
      var e = tmp$.next();
      if ($receiver.contains_11rb$(e)) {
        return true;
      }
    }
    return false;
  }
  function containsAny_0($receiver, o) {
    var tmp$;
    for (tmp$ = 0; tmp$ !== o.length; ++tmp$) {
      var e = o[tmp$];
      if ($receiver.contains_11rb$(e)) {
        return true;
      }
    }
    return false;
  }
  function Letter(unicode, unicodeCode, tex, mathMl) {
    this.unicode = toBoxedChar(unicode);
    this.unicodeCode = unicodeCode;
    this.tex = tex;
    this.mathMl = mathMl;
  }
  Letter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Letter',
    interfaces: []
  };
  Letter.prototype.component1 = function () {
    return this.unicode;
  };
  Letter.prototype.component2 = function () {
    return this.unicodeCode;
  };
  Letter.prototype.component3 = function () {
    return this.tex;
  };
  Letter.prototype.component4 = function () {
    return this.mathMl;
  };
  Letter.prototype.copy_n6w77z$ = function (unicode, unicodeCode, tex, mathMl) {
    return new Letter(unicode === void 0 ? this.unicode : unicode, unicodeCode === void 0 ? this.unicodeCode : unicodeCode, tex === void 0 ? this.tex : tex, mathMl === void 0 ? this.mathMl : mathMl);
  };
  Letter.prototype.toString = function () {
    return 'Letter(unicode=' + Kotlin.toString(this.unicode) + (', unicodeCode=' + Kotlin.toString(this.unicodeCode)) + (', tex=' + Kotlin.toString(this.tex)) + (', mathMl=' + Kotlin.toString(this.mathMl)) + ')';
  };
  Letter.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.unicode) | 0;
    result = result * 31 + Kotlin.hashCode(this.unicodeCode) | 0;
    result = result * 31 + Kotlin.hashCode(this.tex) | 0;
    result = result * 31 + Kotlin.hashCode(this.mathMl) | 0;
    return result;
  };
  Letter.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.unicode, other.unicode) && Kotlin.equals(this.unicodeCode, other.unicodeCode) && Kotlin.equals(this.tex, other.tex) && Kotlin.equals(this.mathMl, other.mathMl)))));
  };
  var lettersData;
  var texToUnicode;
  var unicodeToTex;
  var texOpenBracket;
  var texCloseBracket;
  function trigonometryShortMultiplicationStartExpressionGeneration(compiledConfiguration) {
    var result = new GeneratedExpression(new ExpressionNode(NodeType$FUNCTION_getInstance(), ''), '', '', '', '', '', '', '', 'standard_math', mutableSetOf(['trigonometry', 'short_multiplication']));
    var trigonometryFunctions = listOf_0(['Sin', 'Cos', 'Tg', 'Ctg']);
    var capitalizedFunctionA = trigonometryFunctions.get_za3lpa$(randomInt(0, trigonometryFunctions.size));
    var capitalizedFunctionB = trigonometryFunctions.get_za3lpa$(randomInt(0, trigonometryFunctions.size));
    var functionA = capitalizedFunctionA.toLowerCase();
    var functionB = capitalizedFunctionB.toLowerCase();
    result.tags.add_11rb$(functionA);
    result.tags.add_11rb$(functionB);
    var variableA = 'x';
    var variableB = equals(functionA, functionB) ? 'y' : String.fromCharCode(toChar(120 + randomInt(0, 2)));
    var $receiver = compiledConfiguration.createExpressionFunctionNode_twmih4$(functionA, 1);
    $receiver.addChild_em03xr$(compiledConfiguration.createExpressionVariableNode_61zpoe$(variableA));
    var nodeA = $receiver;
    var $receiver_0 = compiledConfiguration.createExpressionFunctionNode_twmih4$(functionB, 1);
    $receiver_0.addChild_em03xr$(compiledConfiguration.createExpressionVariableNode_61zpoe$(variableB));
    var nodeB = $receiver_0;
    var pow = randomInt(2, 4);
    if (randomInt(0, 2) === 1) {
      var powWord = pow === 2 ? 'Squares' : 'Cubes';
      var powWordRu = pow === 2 ? '\u043A\u0432\u0430\u0434\u0440\u0430\u0442\u043E\u0432' : '\u043A\u0443\u0431\u043E\u0432';
      var $receiver_1 = compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
      $receiver_1.addChild_em03xr$(nodeA);
      $receiver_1.addChild_em03xr$(compiledConfiguration.createExpressionVariableNode_61zpoe$(pow.toString()));
      var powedA = $receiver_1;
      var $receiver_2 = compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
      $receiver_2.addChild_em03xr$(nodeB);
      $receiver_2.addChild_em03xr$(compiledConfiguration.createExpressionVariableNode_61zpoe$(pow.toString()));
      var powedB = $receiver_2;
      var tmp$ = result.expressionNode;
      var $receiver_3 = compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1);
      $receiver_3.addChild_em03xr$(powedA);
      tmp$.addChild_em03xr$($receiver_3);
      if (randomInt(0, 2) === 1) {
        result.code = result.code + ('Sum' + powWord + capitalizedFunctionA + variableA + capitalizedFunctionB + variableB);
        result.nameEn = result.nameEn + ('Sum of ' + powWord + ' of ' + capitalizedFunctionA + ' and ' + capitalizedFunctionB);
        result.nameRu = result.nameRu + ('\u0421\u0443\u043C\u043C\u0430 ' + powWordRu + ' ' + functionA + ' \u0438 ' + functionB);
        first(result.expressionNode.children).addChild_em03xr$(powedB);
      }
       else {
        result.code = result.code + ('Diff' + powWord + capitalizedFunctionA + variableA + capitalizedFunctionB + variableB);
        result.nameEn = result.nameEn + ('Difference of ' + powWord + ' of ' + capitalizedFunctionA + ' and ' + capitalizedFunctionB);
        result.nameRu = result.nameRu + ('\u0420\u0430\u0437\u043D\u043E\u0441\u0442\u044C ' + powWordRu + ' ' + functionA + ' \u0438 ' + functionB);
        first(result.expressionNode.children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
        last(first(result.expressionNode.children).children).addChild_em03xr$(powedB);
      }
    }
     else {
      var powWord_0 = pow === 2 ? 'Square' : 'Cube';
      var powWordRu_0 = pow === 2 ? '\u041A\u0432\u0430\u0434\u0440\u0430\u0442' : '\u041A\u0443\u0431';
      var tmp$_0 = result.expressionNode;
      var $receiver_4 = compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1);
      $receiver_4.addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1));
      $receiver_4.addChild_em03xr$(compiledConfiguration.createExpressionVariableNode_61zpoe$(pow.toString()));
      tmp$_0.addChild_em03xr$($receiver_4);
      first(first(result.expressionNode.children).children).addChild_em03xr$(nodeA);
      if (randomInt(0, 2) === 1) {
        result.code = result.code + (powWord_0 + 'Sum' + capitalizedFunctionA + variableA + capitalizedFunctionB + variableB);
        result.nameEn = result.nameEn + (powWord_0 + ' of Sum of ' + capitalizedFunctionA + ' and ' + capitalizedFunctionB);
        result.nameRu = result.nameRu + (powWordRu_0 + ' \u0441\u0443\u043C\u043C\u044B ' + functionA + ' \u0438 ' + functionB);
        first(first(result.expressionNode.children).children).addChild_em03xr$(nodeB);
      }
       else {
        result.code = result.code + (powWord_0 + 'Diff' + capitalizedFunctionA + variableA + capitalizedFunctionB + variableB);
        result.nameEn = result.nameEn + (powWord_0 + ' of Difference of ' + capitalizedFunctionA + ' and ' + capitalizedFunctionB);
        result.nameRu = result.nameRu + (powWordRu_0 + ' \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438 ' + functionA + ' \u0438 ' + functionB);
        first(first(result.expressionNode.children).children).addChild_em03xr$(compiledConfiguration.createExpressionFunctionNode_twmih4$('-', -1));
        last(first(first(result.expressionNode.children).children).children).addChild_em03xr$(nodeB);
      }
    }
    return result;
  }
  function ExpressionNodeBuilder() {
    ExpressionNodeBuilder$Companion_getInstance();
  }
  function ExpressionNodeBuilder$Companion() {
    ExpressionNodeBuilder$Companion_instance = this;
  }
  ExpressionNodeBuilder$Companion.prototype.buildNodeFromConstant_73ahh6$ = function (value, parent) {
    if (parent === void 0)
      parent = null;
    var tmp$;
    if (numberToInt(value) < 0) {
      tmp$ = '-(' + value.toString() + ')';
    }
     else {
      tmp$ = value.toString();
    }
    var valueAsString = tmp$;
    return new ExpressionNode(NodeType$VARIABLE_getInstance(), valueAsString, void 0, void 0, void 0, parent, void 0, valueAsString);
  };
  ExpressionNodeBuilder$Companion.prototype.buildNodeFromMultipliers_n3gvqs$ = function (multipliers, compiledConfiguration) {
    if (multipliers.size === 1) {
      return multipliers.get_za3lpa$(0);
    }
    return compiledConfiguration.createExpressionFunctionNode_twmih4$('*', -1, multipliers);
  };
  ExpressionNodeBuilder$Companion.prototype.buildNodeFromTerms_seplnl$ = function (terms, compiledConfiguration) {
    var destination = ArrayList_init_0(collectionSizeOrDefault(terms, 10));
    var tmp$;
    tmp$ = terms.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item);
    }
    return compiledConfiguration.createExpressionFunctionNode_twmih4$('+', -1, destination);
  };
  ExpressionNodeBuilder$Companion.prototype.buildNodeFromDividendAndDivisor_19bx18$ = function (nominator, denominator, compiledConfiguration) {
    return compiledConfiguration.createExpressionFunctionNode_twmih4$('/', -1, listOf_0([nominator, denominator]));
  };
  ExpressionNodeBuilder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ExpressionNodeBuilder$Companion_instance = null;
  function ExpressionNodeBuilder$Companion_getInstance() {
    if (ExpressionNodeBuilder$Companion_instance === null) {
      new ExpressionNodeBuilder$Companion();
    }
    return ExpressionNodeBuilder$Companion_instance;
  }
  ExpressionNodeBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionNodeBuilder',
    interfaces: []
  };
  function ExpressionSimilarityMetric() {
  }
  ExpressionSimilarityMetric.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ExpressionSimilarityMetric',
    interfaces: []
  };
  function CompoundSimilarityMetric(metrics, combinator) {
    if (combinator === void 0)
      combinator = CompoundSimilarityMetric_init$lambda;
    this.metrics = metrics;
    this.combinator = combinator;
  }
  CompoundSimilarityMetric.prototype.invoke_heho5o$ = function (lhs, rhs) {
    var $receiver = this.metrics;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item.invoke_heho5o$(lhs, rhs));
    }
    var operation = this.combinator;
    var tmp$_0;
    var accumulator = 0.0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      accumulator = operation(accumulator, element);
    }
    return accumulator;
  };
  function CompoundSimilarityMetric_init$lambda(acc, metricVal) {
    return acc + metricVal;
  }
  CompoundSimilarityMetric.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CompoundSimilarityMetric',
    interfaces: [ExpressionSimilarityMetric]
  };
  function variableOnlyInLeft$ObjectLiteral() {
  }
  variableOnlyInLeft$ObjectLiteral.prototype.invoke_heho5o$ = function (lhs, rhs) {
    var lhsVars = lhs.getContainedVariables();
    var rhsVars = rhs.getContainedVariables();
    return minus(lhsVars, rhsVars).size;
  };
  variableOnlyInLeft$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [ExpressionSimilarityMetric]
  };
  var variableOnlyInLeft;
  function variableOnlyInRight$ObjectLiteral() {
  }
  variableOnlyInRight$ObjectLiteral.prototype.invoke_heho5o$ = function (lhs, rhs) {
    var lhsVars = lhs.getContainedVariables();
    var rhsVars = rhs.getContainedVariables();
    return minus(rhsVars, lhsVars).size;
  };
  variableOnlyInRight$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [ExpressionSimilarityMetric]
  };
  var variableOnlyInRight;
  function LambdaExpressionSimilarityMetric(metric) {
    this.metric = metric;
  }
  LambdaExpressionSimilarityMetric.prototype.invoke_heho5o$ = function (lhs, rhs) {
    return this.metric(lhs, rhs);
  };
  LambdaExpressionSimilarityMetric.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LambdaExpressionSimilarityMetric',
    interfaces: [ExpressionSimilarityMetric]
  };
  function functionsOnlyInLeft$ObjectLiteral() {
  }
  functionsOnlyInLeft$ObjectLiteral.prototype.invoke_heho5o$ = function (lhs, rhs) {
    var lhsVars = lhs.getContainedFunctions();
    var rhsVars = rhs.getContainedFunctions();
    return minus(lhsVars, rhsVars).size;
  };
  functionsOnlyInLeft$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [ExpressionSimilarityMetric]
  };
  var functionsOnlyInLeft;
  function functionsOnlyInRight$ObjectLiteral() {
  }
  functionsOnlyInRight$ObjectLiteral.prototype.invoke_heho5o$ = function (lhs, rhs) {
    var lhsVars = lhs.getContainedFunctions();
    var rhsVars = rhs.getContainedFunctions();
    return minus(rhsVars, lhsVars).size;
  };
  functionsOnlyInRight$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [ExpressionSimilarityMetric]
  };
  var functionsOnlyInRight;
  var simplifiedDisparityMetric;
  var disparityMatrixMetric;
  function DisparityMatrixMetric(minSubtreeDepth) {
    if (minSubtreeDepth === void 0)
      minSubtreeDepth = 3;
    this.minSubtreeDepth_0 = minSubtreeDepth;
  }
  DisparityMatrixMetric.prototype.invoke_heho5o$ = function (lhs, rhs) {
    var normalizedLhs = first(lhs.cloneWithNormalization_1g1bdl$(void 0, true).children);
    var normalizedRhs = first(rhs.cloneWithNormalization_1g1bdl$(void 0, true).children);
    var $receiver = getNonLeafSubexpressions(normalizedLhs);
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (element.getDepth() >= this.minSubtreeDepth_0)
        destination.add_11rb$(element);
    }
    var leftSubexpressions = destination;
    var $receiver_0 = getNonLeafSubexpressions(normalizedRhs);
    var destination_0 = ArrayList_init();
    var tmp$_0;
    tmp$_0 = $receiver_0.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      if (element_0.getDepth() >= this.minSubtreeDepth_0)
        destination_0.add_11rb$(element_0);
    }
    var rightSubexpressions = destination_0;
    var comparator = new ExpressionComparator();
    var destination_1 = ArrayList_init();
    var tmp$_1;
    tmp$_1 = leftSubexpressions.iterator();
    loop_label: while (tmp$_1.hasNext()) {
      var element_1 = tmp$_1.next();
      var all$result;
      all$break: do {
        var tmp$_2;
        if (Kotlin.isType(rightSubexpressions, Collection) && rightSubexpressions.isEmpty()) {
          all$result = true;
          break all$break;
        }
        tmp$_2 = rightSubexpressions.iterator();
        while (tmp$_2.hasNext()) {
          var element_2 = tmp$_2.next();
          if (!!comparator.compareAsIs_5gxvt3$(element_1, element_2)) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      if (all$result)
        destination_1.add_11rb$(element_1);
    }
    var leftScore = destination_1.size;
    var destination_2 = ArrayList_init();
    var tmp$_3;
    tmp$_3 = rightSubexpressions.iterator();
    loop_label: while (tmp$_3.hasNext()) {
      var element_3 = tmp$_3.next();
      var all$result_0;
      all$break: do {
        var tmp$_4;
        if (Kotlin.isType(leftSubexpressions, Collection) && leftSubexpressions.isEmpty()) {
          all$result_0 = true;
          break all$break;
        }
        tmp$_4 = leftSubexpressions.iterator();
        while (tmp$_4.hasNext()) {
          var element_4 = tmp$_4.next();
          if (!!comparator.compareAsIs_5gxvt3$(element_4, element_3)) {
            all$result_0 = false;
            break all$break;
          }
        }
        all$result_0 = true;
      }
       while (false);
      if (all$result_0)
        destination_2.add_11rb$(element_3);
    }
    var rightScore = destination_2.size;
    return (leftScore + rightScore) / 2;
  };
  DisparityMatrixMetric.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DisparityMatrixMetric',
    interfaces: [ExpressionSimilarityMetric]
  };
  function isLeafNode($receiver) {
    return $receiver.children.isEmpty();
  }
  function getNonLeafSubexpressions($receiver) {
    if ($receiver.getDepth() <= 2)
      return listOf($receiver);
    var tmp$ = listOf($receiver);
    var $receiver_0 = $receiver.children;
    var destination = ArrayList_init();
    var tmp$_0;
    tmp$_0 = $receiver_0.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      var list = getNonLeafSubexpressions(element);
      addAll(destination, list);
    }
    return plus(tmp$, destination);
  }
  function distanceTo$lambda(it) {
    return average(it);
  }
  function distanceTo($receiver, expressions, metric, selector) {
    if (metric === void 0)
      metric = disparityMatrixMetric;
    if (selector === void 0)
      selector = distanceTo$lambda;
    var tmp$ = selector;
    var destination = ArrayList_init_0(collectionSizeOrDefault(expressions, 10));
    var tmp$_0;
    tmp$_0 = expressions.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination.add_11rb$(metric.invoke_heho5o$($receiver, item));
    }
    return tmp$(destination);
  }
  function Comparator$ObjectLiteral_6(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_6.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_6.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareByDescending$lambda_1 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(b), selector(a));
      };
    };
  });
  function Comparator$ObjectLiteral_7(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_7.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_7.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_3 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function Comparator$ObjectLiteral_8(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_8.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_8.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareByDescending$lambda_2 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(b), selector(a));
      };
    };
  });
  function Comparator$ObjectLiteral_9(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_9.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_9.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_4 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function ExpressionGenerationDirection(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ExpressionGenerationDirection_initFields() {
    ExpressionGenerationDirection_initFields = function () {
    };
    ExpressionGenerationDirection$ORIGINAL_TO_FINAL_instance = new ExpressionGenerationDirection('ORIGINAL_TO_FINAL', 0);
    ExpressionGenerationDirection$FINAL_TO_ORIGINAL_instance = new ExpressionGenerationDirection('FINAL_TO_ORIGINAL', 1);
  }
  var ExpressionGenerationDirection$ORIGINAL_TO_FINAL_instance;
  function ExpressionGenerationDirection$ORIGINAL_TO_FINAL_getInstance() {
    ExpressionGenerationDirection_initFields();
    return ExpressionGenerationDirection$ORIGINAL_TO_FINAL_instance;
  }
  var ExpressionGenerationDirection$FINAL_TO_ORIGINAL_instance;
  function ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance() {
    ExpressionGenerationDirection_initFields();
    return ExpressionGenerationDirection$FINAL_TO_ORIGINAL_instance;
  }
  ExpressionGenerationDirection.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionGenerationDirection',
    interfaces: [Enum]
  };
  function ExpressionGenerationDirection$values() {
    return [ExpressionGenerationDirection$ORIGINAL_TO_FINAL_getInstance(), ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance()];
  }
  ExpressionGenerationDirection.values = ExpressionGenerationDirection$values;
  function ExpressionGenerationDirection$valueOf(name) {
    switch (name) {
      case 'ORIGINAL_TO_FINAL':
        return ExpressionGenerationDirection$ORIGINAL_TO_FINAL_getInstance();
      case 'FINAL_TO_ORIGINAL':
        return ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance();
      default:throwISE('No enum constant mathhelper.twf.taskautogeneration.ExpressionGenerationDirection.' + name);
    }
  }
  ExpressionGenerationDirection.valueOf_61zpoe$ = ExpressionGenerationDirection$valueOf;
  function GeneratedExpression(expressionNode, code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags) {
    if (code === void 0)
      code = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = null;
    if (tags === void 0) {
      tags = LinkedHashSet_init();
    }
    this.expressionNode = expressionNode;
    this.code = code;
    this.nameEn = nameEn;
    this.nameRu = nameRu;
    this.descriptionShortEn = descriptionShortEn;
    this.descriptionShortRu = descriptionShortRu;
    this.descriptionEn = descriptionEn;
    this.descriptionRu = descriptionRu;
    this.subjectType = subjectType;
    this.tags = tags;
  }
  GeneratedExpression.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GeneratedExpression',
    interfaces: []
  };
  GeneratedExpression.prototype.component1 = function () {
    return this.expressionNode;
  };
  GeneratedExpression.prototype.component2 = function () {
    return this.code;
  };
  GeneratedExpression.prototype.component3 = function () {
    return this.nameEn;
  };
  GeneratedExpression.prototype.component4 = function () {
    return this.nameRu;
  };
  GeneratedExpression.prototype.component5 = function () {
    return this.descriptionShortEn;
  };
  GeneratedExpression.prototype.component6 = function () {
    return this.descriptionShortRu;
  };
  GeneratedExpression.prototype.component7 = function () {
    return this.descriptionEn;
  };
  GeneratedExpression.prototype.component8 = function () {
    return this.descriptionRu;
  };
  GeneratedExpression.prototype.component9 = function () {
    return this.subjectType;
  };
  GeneratedExpression.prototype.component10 = function () {
    return this.tags;
  };
  GeneratedExpression.prototype.copy_ay6on$ = function (expressionNode, code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags) {
    return new GeneratedExpression(expressionNode === void 0 ? this.expressionNode : expressionNode, code === void 0 ? this.code : code, nameEn === void 0 ? this.nameEn : nameEn, nameRu === void 0 ? this.nameRu : nameRu, descriptionShortEn === void 0 ? this.descriptionShortEn : descriptionShortEn, descriptionShortRu === void 0 ? this.descriptionShortRu : descriptionShortRu, descriptionEn === void 0 ? this.descriptionEn : descriptionEn, descriptionRu === void 0 ? this.descriptionRu : descriptionRu, subjectType === void 0 ? this.subjectType : subjectType, tags === void 0 ? this.tags : tags);
  };
  GeneratedExpression.prototype.toString = function () {
    return 'GeneratedExpression(expressionNode=' + Kotlin.toString(this.expressionNode) + (', code=' + Kotlin.toString(this.code)) + (', nameEn=' + Kotlin.toString(this.nameEn)) + (', nameRu=' + Kotlin.toString(this.nameRu)) + (', descriptionShortEn=' + Kotlin.toString(this.descriptionShortEn)) + (', descriptionShortRu=' + Kotlin.toString(this.descriptionShortRu)) + (', descriptionEn=' + Kotlin.toString(this.descriptionEn)) + (', descriptionRu=' + Kotlin.toString(this.descriptionRu)) + (', subjectType=' + Kotlin.toString(this.subjectType)) + (', tags=' + Kotlin.toString(this.tags)) + ')';
  };
  GeneratedExpression.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.expressionNode) | 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionShortRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionEn) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptionRu) | 0;
    result = result * 31 + Kotlin.hashCode(this.subjectType) | 0;
    result = result * 31 + Kotlin.hashCode(this.tags) | 0;
    return result;
  };
  GeneratedExpression.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.expressionNode, other.expressionNode) && Kotlin.equals(this.code, other.code) && Kotlin.equals(this.nameEn, other.nameEn) && Kotlin.equals(this.nameRu, other.nameRu) && Kotlin.equals(this.descriptionShortEn, other.descriptionShortEn) && Kotlin.equals(this.descriptionShortRu, other.descriptionShortRu) && Kotlin.equals(this.descriptionEn, other.descriptionEn) && Kotlin.equals(this.descriptionRu, other.descriptionRu) && Kotlin.equals(this.subjectType, other.subjectType) && Kotlin.equals(this.tags, other.tags)))));
  };
  function ExpressionTaskGeneratorSettings(expressionGenerationDirection, goalStepsCount, goalDifferentRulesCount, taskStartGenerator, compiledConfiguration, expressionSubstitutions, mandatorySubstitutions, maxCountSelectedOfTasksOnIteration, widthOfRulesApplicationsOnIteration, minStepsCountInAutogeneration, goalCompletionStepsCount, extendingSubstitutionsFilter, reducingSubstitutionsFilter, extendingExpressionSubstitutions, reducingExpressionSubstitutions, postprocessExpressionSubstitutions, mandatoryResultTransformations, newVariablesExpressionSubstitutions, nodeIdsToTransformSelector, substitutionChains) {
    if (expressionGenerationDirection === void 0)
      expressionGenerationDirection = ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance();
    if (goalStepsCount === void 0)
      goalStepsCount = 5;
    if (goalDifferentRulesCount === void 0)
      goalDifferentRulesCount = 4;
    if (taskStartGenerator === void 0)
      taskStartGenerator = ExpressionTaskGeneratorSettings_init$lambda;
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration();
    if (expressionSubstitutions === void 0)
      expressionSubstitutions = compiledConfiguration.compiledExpressionTreeTransformationRules;
    if (mandatorySubstitutions === void 0) {
      mandatorySubstitutions = emptySet();
    }
    if (maxCountSelectedOfTasksOnIteration === void 0)
      maxCountSelectedOfTasksOnIteration = 10;
    if (widthOfRulesApplicationsOnIteration === void 0)
      widthOfRulesApplicationsOnIteration = 10;
    if (minStepsCountInAutogeneration === void 0)
      minStepsCountInAutogeneration = 4;
    if (goalCompletionStepsCount === void 0)
      goalCompletionStepsCount = (goalStepsCount + 1 | 0) / 2 | 0;
    if (extendingSubstitutionsFilter === void 0)
      extendingSubstitutionsFilter = ExpressionTaskGeneratorSettings_init$lambda_0;
    if (reducingSubstitutionsFilter === void 0)
      reducingSubstitutionsFilter = ExpressionTaskGeneratorSettings_init$lambda_1;
    if (extendingExpressionSubstitutions === void 0) {
      var $receiver = expressionSubstitutions;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (extendingSubstitutionsFilter(element))
          destination.add_11rb$(element);
      }
      extendingExpressionSubstitutions = destination;
    }
    if (reducingExpressionSubstitutions === void 0) {
      var $receiver_0 = expressionSubstitutions;
      var destination_0 = ArrayList_init();
      var tmp$_0;
      tmp$_0 = $receiver_0.iterator();
      while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        if (reducingSubstitutionsFilter(element_0))
          destination_0.add_11rb$(element_0);
      }
      reducingExpressionSubstitutions = destination_0;
    }
    if (postprocessExpressionSubstitutions === void 0) {
      postprocessExpressionSubstitutions = expressionSubstitutionsFromRulePackITR(PostprocessorRulePack$Companion_getInstance().get(), emptyMap(), false);
    }
    if (mandatoryResultTransformations === void 0) {
      mandatoryResultTransformations = emptyList();
    }
    if (newVariablesExpressionSubstitutions === void 0) {
      newVariablesExpressionSubstitutions = emptyMap();
    }
    if (nodeIdsToTransformSelector === void 0)
      nodeIdsToTransformSelector = ExpressionTaskGeneratorSettings_init$lambda_2;
    if (substitutionChains === void 0) {
      substitutionChains = emptyMap();
    }
    this.expressionGenerationDirection = expressionGenerationDirection;
    this.goalStepsCount = goalStepsCount;
    this.goalDifferentRulesCount = goalDifferentRulesCount;
    this.taskStartGenerator = taskStartGenerator;
    this.compiledConfiguration = compiledConfiguration;
    this.expressionSubstitutions = expressionSubstitutions;
    this.mandatorySubstitutions = mandatorySubstitutions;
    this.maxCountSelectedOfTasksOnIteration = maxCountSelectedOfTasksOnIteration;
    this.widthOfRulesApplicationsOnIteration = widthOfRulesApplicationsOnIteration;
    this.minStepsCountInAutogeneration = minStepsCountInAutogeneration;
    this.goalCompletionStepsCount = goalCompletionStepsCount;
    this.extendingSubstitutionsFilter = extendingSubstitutionsFilter;
    this.reducingSubstitutionsFilter = reducingSubstitutionsFilter;
    this.extendingExpressionSubstitutions = extendingExpressionSubstitutions;
    this.reducingExpressionSubstitutions = reducingExpressionSubstitutions;
    this.postprocessExpressionSubstitutions = postprocessExpressionSubstitutions;
    this.mandatoryResultTransformations = mandatoryResultTransformations;
    this.newVariablesExpressionSubstitutions = newVariablesExpressionSubstitutions;
    this.nodeIdsToTransformSelector = nodeIdsToTransformSelector;
    this.substitutionChains = substitutionChains;
    setExpressionSubstitutions(this.compiledConfiguration, this.expressionSubstitutions);
  }
  function ExpressionTaskGeneratorSettings_init$lambda(it) {
    var $receiver = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    $receiver.addChild_em03xr$(new ExpressionNode(NodeType$VARIABLE_getInstance(), '1'));
    return new GeneratedExpression($receiver, 'e1', void 0, void 0, void 0, void 0, void 0, void 0, 'standard_math');
  }
  function ExpressionTaskGeneratorSettings_init$lambda_0(it) {
    return ensureNotNull(it.priority) >= 20;
  }
  function ExpressionTaskGeneratorSettings_init$lambda_1(it) {
    return ensureNotNull(it.priority) <= 30;
  }
  function ExpressionTaskGeneratorSettings_init$lambda_2(expressionNode) {
    return selectRandomNodeIdsToTransform(expressionNode);
  }
  ExpressionTaskGeneratorSettings.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionTaskGeneratorSettings',
    interfaces: []
  };
  ExpressionTaskGeneratorSettings.prototype.component1 = function () {
    return this.expressionGenerationDirection;
  };
  ExpressionTaskGeneratorSettings.prototype.component2 = function () {
    return this.goalStepsCount;
  };
  ExpressionTaskGeneratorSettings.prototype.component3 = function () {
    return this.goalDifferentRulesCount;
  };
  ExpressionTaskGeneratorSettings.prototype.component4 = function () {
    return this.taskStartGenerator;
  };
  ExpressionTaskGeneratorSettings.prototype.component5 = function () {
    return this.compiledConfiguration;
  };
  ExpressionTaskGeneratorSettings.prototype.component6 = function () {
    return this.expressionSubstitutions;
  };
  ExpressionTaskGeneratorSettings.prototype.component7 = function () {
    return this.mandatorySubstitutions;
  };
  ExpressionTaskGeneratorSettings.prototype.component8 = function () {
    return this.maxCountSelectedOfTasksOnIteration;
  };
  ExpressionTaskGeneratorSettings.prototype.component9 = function () {
    return this.widthOfRulesApplicationsOnIteration;
  };
  ExpressionTaskGeneratorSettings.prototype.component10 = function () {
    return this.minStepsCountInAutogeneration;
  };
  ExpressionTaskGeneratorSettings.prototype.component11 = function () {
    return this.goalCompletionStepsCount;
  };
  ExpressionTaskGeneratorSettings.prototype.component12 = function () {
    return this.extendingSubstitutionsFilter;
  };
  ExpressionTaskGeneratorSettings.prototype.component13 = function () {
    return this.reducingSubstitutionsFilter;
  };
  ExpressionTaskGeneratorSettings.prototype.component14 = function () {
    return this.extendingExpressionSubstitutions;
  };
  ExpressionTaskGeneratorSettings.prototype.component15 = function () {
    return this.reducingExpressionSubstitutions;
  };
  ExpressionTaskGeneratorSettings.prototype.component16 = function () {
    return this.postprocessExpressionSubstitutions;
  };
  ExpressionTaskGeneratorSettings.prototype.component17 = function () {
    return this.mandatoryResultTransformations;
  };
  ExpressionTaskGeneratorSettings.prototype.component18 = function () {
    return this.newVariablesExpressionSubstitutions;
  };
  ExpressionTaskGeneratorSettings.prototype.component19 = function () {
    return this.nodeIdsToTransformSelector;
  };
  ExpressionTaskGeneratorSettings.prototype.component20 = function () {
    return this.substitutionChains;
  };
  ExpressionTaskGeneratorSettings.prototype.copy_8wlvm2$ = function (expressionGenerationDirection, goalStepsCount, goalDifferentRulesCount, taskStartGenerator, compiledConfiguration, expressionSubstitutions, mandatorySubstitutions, maxCountSelectedOfTasksOnIteration, widthOfRulesApplicationsOnIteration, minStepsCountInAutogeneration, goalCompletionStepsCount, extendingSubstitutionsFilter, reducingSubstitutionsFilter, extendingExpressionSubstitutions, reducingExpressionSubstitutions, postprocessExpressionSubstitutions, mandatoryResultTransformations, newVariablesExpressionSubstitutions, nodeIdsToTransformSelector, substitutionChains) {
    return new ExpressionTaskGeneratorSettings(expressionGenerationDirection === void 0 ? this.expressionGenerationDirection : expressionGenerationDirection, goalStepsCount === void 0 ? this.goalStepsCount : goalStepsCount, goalDifferentRulesCount === void 0 ? this.goalDifferentRulesCount : goalDifferentRulesCount, taskStartGenerator === void 0 ? this.taskStartGenerator : taskStartGenerator, compiledConfiguration === void 0 ? this.compiledConfiguration : compiledConfiguration, expressionSubstitutions === void 0 ? this.expressionSubstitutions : expressionSubstitutions, mandatorySubstitutions === void 0 ? this.mandatorySubstitutions : mandatorySubstitutions, maxCountSelectedOfTasksOnIteration === void 0 ? this.maxCountSelectedOfTasksOnIteration : maxCountSelectedOfTasksOnIteration, widthOfRulesApplicationsOnIteration === void 0 ? this.widthOfRulesApplicationsOnIteration : widthOfRulesApplicationsOnIteration, minStepsCountInAutogeneration === void 0 ? this.minStepsCountInAutogeneration : minStepsCountInAutogeneration, goalCompletionStepsCount === void 0 ? this.goalCompletionStepsCount : goalCompletionStepsCount, extendingSubstitutionsFilter === void 0 ? this.extendingSubstitutionsFilter : extendingSubstitutionsFilter, reducingSubstitutionsFilter === void 0 ? this.reducingSubstitutionsFilter : reducingSubstitutionsFilter, extendingExpressionSubstitutions === void 0 ? this.extendingExpressionSubstitutions : extendingExpressionSubstitutions, reducingExpressionSubstitutions === void 0 ? this.reducingExpressionSubstitutions : reducingExpressionSubstitutions, postprocessExpressionSubstitutions === void 0 ? this.postprocessExpressionSubstitutions : postprocessExpressionSubstitutions, mandatoryResultTransformations === void 0 ? this.mandatoryResultTransformations : mandatoryResultTransformations, newVariablesExpressionSubstitutions === void 0 ? this.newVariablesExpressionSubstitutions : newVariablesExpressionSubstitutions, nodeIdsToTransformSelector === void 0 ? this.nodeIdsToTransformSelector : nodeIdsToTransformSelector, substitutionChains === void 0 ? this.substitutionChains : substitutionChains);
  };
  ExpressionTaskGeneratorSettings.prototype.toString = function () {
    return 'ExpressionTaskGeneratorSettings(expressionGenerationDirection=' + Kotlin.toString(this.expressionGenerationDirection) + (', goalStepsCount=' + Kotlin.toString(this.goalStepsCount)) + (', goalDifferentRulesCount=' + Kotlin.toString(this.goalDifferentRulesCount)) + (', taskStartGenerator=' + Kotlin.toString(this.taskStartGenerator)) + (', compiledConfiguration=' + Kotlin.toString(this.compiledConfiguration)) + (', expressionSubstitutions=' + Kotlin.toString(this.expressionSubstitutions)) + (', mandatorySubstitutions=' + Kotlin.toString(this.mandatorySubstitutions)) + (', maxCountSelectedOfTasksOnIteration=' + Kotlin.toString(this.maxCountSelectedOfTasksOnIteration)) + (', widthOfRulesApplicationsOnIteration=' + Kotlin.toString(this.widthOfRulesApplicationsOnIteration)) + (', minStepsCountInAutogeneration=' + Kotlin.toString(this.minStepsCountInAutogeneration)) + (', goalCompletionStepsCount=' + Kotlin.toString(this.goalCompletionStepsCount)) + (', extendingSubstitutionsFilter=' + Kotlin.toString(this.extendingSubstitutionsFilter)) + (', reducingSubstitutionsFilter=' + Kotlin.toString(this.reducingSubstitutionsFilter)) + (', extendingExpressionSubstitutions=' + Kotlin.toString(this.extendingExpressionSubstitutions)) + (', reducingExpressionSubstitutions=' + Kotlin.toString(this.reducingExpressionSubstitutions)) + (', postprocessExpressionSubstitutions=' + Kotlin.toString(this.postprocessExpressionSubstitutions)) + (', mandatoryResultTransformations=' + Kotlin.toString(this.mandatoryResultTransformations)) + (', newVariablesExpressionSubstitutions=' + Kotlin.toString(this.newVariablesExpressionSubstitutions)) + (', nodeIdsToTransformSelector=' + Kotlin.toString(this.nodeIdsToTransformSelector)) + (', substitutionChains=' + Kotlin.toString(this.substitutionChains)) + ')';
  };
  ExpressionTaskGeneratorSettings.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.expressionGenerationDirection) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalStepsCount) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalDifferentRulesCount) | 0;
    result = result * 31 + Kotlin.hashCode(this.taskStartGenerator) | 0;
    result = result * 31 + Kotlin.hashCode(this.compiledConfiguration) | 0;
    result = result * 31 + Kotlin.hashCode(this.expressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.mandatorySubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxCountSelectedOfTasksOnIteration) | 0;
    result = result * 31 + Kotlin.hashCode(this.widthOfRulesApplicationsOnIteration) | 0;
    result = result * 31 + Kotlin.hashCode(this.minStepsCountInAutogeneration) | 0;
    result = result * 31 + Kotlin.hashCode(this.goalCompletionStepsCount) | 0;
    result = result * 31 + Kotlin.hashCode(this.extendingSubstitutionsFilter) | 0;
    result = result * 31 + Kotlin.hashCode(this.reducingSubstitutionsFilter) | 0;
    result = result * 31 + Kotlin.hashCode(this.extendingExpressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.reducingExpressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.postprocessExpressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.mandatoryResultTransformations) | 0;
    result = result * 31 + Kotlin.hashCode(this.newVariablesExpressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.nodeIdsToTransformSelector) | 0;
    result = result * 31 + Kotlin.hashCode(this.substitutionChains) | 0;
    return result;
  };
  ExpressionTaskGeneratorSettings.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.expressionGenerationDirection, other.expressionGenerationDirection) && Kotlin.equals(this.goalStepsCount, other.goalStepsCount) && Kotlin.equals(this.goalDifferentRulesCount, other.goalDifferentRulesCount) && Kotlin.equals(this.taskStartGenerator, other.taskStartGenerator) && Kotlin.equals(this.compiledConfiguration, other.compiledConfiguration) && Kotlin.equals(this.expressionSubstitutions, other.expressionSubstitutions) && Kotlin.equals(this.mandatorySubstitutions, other.mandatorySubstitutions) && Kotlin.equals(this.maxCountSelectedOfTasksOnIteration, other.maxCountSelectedOfTasksOnIteration) && Kotlin.equals(this.widthOfRulesApplicationsOnIteration, other.widthOfRulesApplicationsOnIteration) && Kotlin.equals(this.minStepsCountInAutogeneration, other.minStepsCountInAutogeneration) && Kotlin.equals(this.goalCompletionStepsCount, other.goalCompletionStepsCount) && Kotlin.equals(this.extendingSubstitutionsFilter, other.extendingSubstitutionsFilter) && Kotlin.equals(this.reducingSubstitutionsFilter, other.reducingSubstitutionsFilter) && Kotlin.equals(this.extendingExpressionSubstitutions, other.extendingExpressionSubstitutions) && Kotlin.equals(this.reducingExpressionSubstitutions, other.reducingExpressionSubstitutions) && Kotlin.equals(this.postprocessExpressionSubstitutions, other.postprocessExpressionSubstitutions) && Kotlin.equals(this.mandatoryResultTransformations, other.mandatoryResultTransformations) && Kotlin.equals(this.newVariablesExpressionSubstitutions, other.newVariablesExpressionSubstitutions) && Kotlin.equals(this.nodeIdsToTransformSelector, other.nodeIdsToTransformSelector) && Kotlin.equals(this.substitutionChains, other.substitutionChains)))));
  };
  function ExpressionTaskIntermediateData(expressionBeforePostprocessPhase1, expressionBeforePostprocessPhase2, appliedPostprocessSubstitutions) {
    if (expressionBeforePostprocessPhase1 === void 0)
      expressionBeforePostprocessPhase1 = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    if (expressionBeforePostprocessPhase2 === void 0)
      expressionBeforePostprocessPhase2 = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
    if (appliedPostprocessSubstitutions === void 0) {
      appliedPostprocessSubstitutions = LinkedHashMap_init_0();
    }
    this.expressionBeforePostprocessPhase1 = expressionBeforePostprocessPhase1;
    this.expressionBeforePostprocessPhase2 = expressionBeforePostprocessPhase2;
    this.appliedPostprocessSubstitutions = appliedPostprocessSubstitutions;
  }
  ExpressionTaskIntermediateData.prototype.clone = function () {
    return new ExpressionTaskIntermediateData(this.expressionBeforePostprocessPhase1.clone(), this.expressionBeforePostprocessPhase2.clone(), toMutableMap(this.appliedPostprocessSubstitutions));
  };
  ExpressionTaskIntermediateData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionTaskIntermediateData',
    interfaces: []
  };
  ExpressionTaskIntermediateData.prototype.component1 = function () {
    return this.expressionBeforePostprocessPhase1;
  };
  ExpressionTaskIntermediateData.prototype.component2 = function () {
    return this.expressionBeforePostprocessPhase2;
  };
  ExpressionTaskIntermediateData.prototype.component3 = function () {
    return this.appliedPostprocessSubstitutions;
  };
  ExpressionTaskIntermediateData.prototype.copy_6dwp82$ = function (expressionBeforePostprocessPhase1, expressionBeforePostprocessPhase2, appliedPostprocessSubstitutions) {
    return new ExpressionTaskIntermediateData(expressionBeforePostprocessPhase1 === void 0 ? this.expressionBeforePostprocessPhase1 : expressionBeforePostprocessPhase1, expressionBeforePostprocessPhase2 === void 0 ? this.expressionBeforePostprocessPhase2 : expressionBeforePostprocessPhase2, appliedPostprocessSubstitutions === void 0 ? this.appliedPostprocessSubstitutions : appliedPostprocessSubstitutions);
  };
  ExpressionTaskIntermediateData.prototype.toString = function () {
    return 'ExpressionTaskIntermediateData(expressionBeforePostprocessPhase1=' + Kotlin.toString(this.expressionBeforePostprocessPhase1) + (', expressionBeforePostprocessPhase2=' + Kotlin.toString(this.expressionBeforePostprocessPhase2)) + (', appliedPostprocessSubstitutions=' + Kotlin.toString(this.appliedPostprocessSubstitutions)) + ')';
  };
  ExpressionTaskIntermediateData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.expressionBeforePostprocessPhase1) | 0;
    result = result * 31 + Kotlin.hashCode(this.expressionBeforePostprocessPhase2) | 0;
    result = result * 31 + Kotlin.hashCode(this.appliedPostprocessSubstitutions) | 0;
    return result;
  };
  ExpressionTaskIntermediateData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.expressionBeforePostprocessPhase1, other.expressionBeforePostprocessPhase1) && Kotlin.equals(this.expressionBeforePostprocessPhase2, other.expressionBeforePostprocessPhase2) && Kotlin.equals(this.appliedPostprocessSubstitutions, other.appliedPostprocessSubstitutions)))));
  };
  function ExpressionTask(startExpression, currentExpression, requiredSubstitutions, usedSubstitutions, previousExpressions, solution, solutionsStepTree, hints, time, badStructureFine, expressionTaskIntermediateData, tagWeightMap) {
    if (currentExpression === void 0)
      currentExpression = startExpression;
    if (requiredSubstitutions === void 0) {
      requiredSubstitutions = LinkedHashSet_init();
    }
    if (usedSubstitutions === void 0) {
      usedSubstitutions = ArrayList_init();
    }
    if (previousExpressions === void 0) {
      previousExpressions = ArrayList_init();
    }
    if (solution === void 0)
      solution = '';
    if (solutionsStepTree === void 0) {
      solutionsStepTree = ArrayList_init();
    }
    if (hints === void 0) {
      hints = ArrayList_init();
    }
    if (time === void 0)
      time = 0;
    if (badStructureFine === void 0)
      badStructureFine = 0.0;
    if (expressionTaskIntermediateData === void 0)
      expressionTaskIntermediateData = new ExpressionTaskIntermediateData();
    if (tagWeightMap === void 0) {
      var $receiver = RuleTag$values_0();
      var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
      var destination = LinkedHashMap_init(capacity);
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(element, 1.0);
      }
      tagWeightMap = toMutableMap(destination);
    }
    this.startExpression = startExpression;
    this.currentExpression = currentExpression;
    this.requiredSubstitutions = requiredSubstitutions;
    this.usedSubstitutions = usedSubstitutions;
    this.previousExpressions = previousExpressions;
    this.solution = solution;
    this.solutionsStepTree = solutionsStepTree;
    this.hints = hints;
    this.time = time;
    this.badStructureFine = badStructureFine;
    this.expressionTaskIntermediateData = expressionTaskIntermediateData;
    this.tagWeightMap = tagWeightMap;
  }
  ExpressionTask.prototype.clone = function () {
    var result = this.copy_c91eva$();
    result.currentExpression = this.currentExpression.clone();
    result.requiredSubstitutions = LinkedHashSet_init();
    result.requiredSubstitutions.addAll_brywnq$(this.requiredSubstitutions);
    result.usedSubstitutions = ArrayList_init();
    result.usedSubstitutions.addAll_brywnq$(this.usedSubstitutions);
    result.previousExpressions = ArrayList_init();
    result.previousExpressions.addAll_brywnq$(this.previousExpressions);
    result.solutionsStepTree = ArrayList_init();
    result.solutionsStepTree.addAll_brywnq$(this.solutionsStepTree);
    result.hints = ArrayList_init();
    result.hints.addAll_brywnq$(this.hints);
    result.expressionTaskIntermediateData = this.expressionTaskIntermediateData.clone();
    result.tagWeightMap = LinkedHashMap_init_0();
    result.tagWeightMap.putAll_a2k3zr$(this.tagWeightMap);
    return result;
  };
  ExpressionTask.prototype.badExpressionStructureFine = function () {
    this.badStructureFine = badStructureFine(this.currentExpression);
    return this.badStructureFine;
  };
  ExpressionTask.prototype.updateTagWeightMap_m3l3r0$ = function (usedSubstitution, scaleForUsedTag) {
    if (scaleForUsedTag === void 0)
      scaleForUsedTag = 0.7;
    var tmp$;
    if (usedSubstitution.tagsForTaskGenerator.isEmpty()) {
      return;
    }
    var mainTag = first(usedSubstitution.tagsForTaskGenerator);
    var weight = (tmp$ = this.tagWeightMap.get_11rb$(mainTag)) != null ? tmp$ : 1.0;
    var $receiver = this.tagWeightMap;
    var value = scaleForUsedTag * weight;
    $receiver.put_xwzc9p$(mainTag, value);
  };
  ExpressionTask.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionTask',
    interfaces: []
  };
  ExpressionTask.prototype.component1 = function () {
    return this.startExpression;
  };
  ExpressionTask.prototype.component2 = function () {
    return this.currentExpression;
  };
  ExpressionTask.prototype.component3 = function () {
    return this.requiredSubstitutions;
  };
  ExpressionTask.prototype.component4 = function () {
    return this.usedSubstitutions;
  };
  ExpressionTask.prototype.component5 = function () {
    return this.previousExpressions;
  };
  ExpressionTask.prototype.component6 = function () {
    return this.solution;
  };
  ExpressionTask.prototype.component7 = function () {
    return this.solutionsStepTree;
  };
  ExpressionTask.prototype.component8 = function () {
    return this.hints;
  };
  ExpressionTask.prototype.component9 = function () {
    return this.time;
  };
  ExpressionTask.prototype.component10 = function () {
    return this.badStructureFine;
  };
  ExpressionTask.prototype.component11 = function () {
    return this.expressionTaskIntermediateData;
  };
  ExpressionTask.prototype.component12 = function () {
    return this.tagWeightMap;
  };
  ExpressionTask.prototype.copy_c91eva$ = function (startExpression, currentExpression, requiredSubstitutions, usedSubstitutions, previousExpressions, solution, solutionsStepTree, hints, time, badStructureFine, expressionTaskIntermediateData, tagWeightMap) {
    return new ExpressionTask(startExpression === void 0 ? this.startExpression : startExpression, currentExpression === void 0 ? this.currentExpression : currentExpression, requiredSubstitutions === void 0 ? this.requiredSubstitutions : requiredSubstitutions, usedSubstitutions === void 0 ? this.usedSubstitutions : usedSubstitutions, previousExpressions === void 0 ? this.previousExpressions : previousExpressions, solution === void 0 ? this.solution : solution, solutionsStepTree === void 0 ? this.solutionsStepTree : solutionsStepTree, hints === void 0 ? this.hints : hints, time === void 0 ? this.time : time, badStructureFine === void 0 ? this.badStructureFine : badStructureFine, expressionTaskIntermediateData === void 0 ? this.expressionTaskIntermediateData : expressionTaskIntermediateData, tagWeightMap === void 0 ? this.tagWeightMap : tagWeightMap);
  };
  ExpressionTask.prototype.toString = function () {
    return 'ExpressionTask(startExpression=' + Kotlin.toString(this.startExpression) + (', currentExpression=' + Kotlin.toString(this.currentExpression)) + (', requiredSubstitutions=' + Kotlin.toString(this.requiredSubstitutions)) + (', usedSubstitutions=' + Kotlin.toString(this.usedSubstitutions)) + (', previousExpressions=' + Kotlin.toString(this.previousExpressions)) + (', solution=' + Kotlin.toString(this.solution)) + (', solutionsStepTree=' + Kotlin.toString(this.solutionsStepTree)) + (', hints=' + Kotlin.toString(this.hints)) + (', time=' + Kotlin.toString(this.time)) + (', badStructureFine=' + Kotlin.toString(this.badStructureFine)) + (', expressionTaskIntermediateData=' + Kotlin.toString(this.expressionTaskIntermediateData)) + (', tagWeightMap=' + Kotlin.toString(this.tagWeightMap)) + ')';
  };
  ExpressionTask.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.startExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.currentExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.requiredSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.usedSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.previousExpressions) | 0;
    result = result * 31 + Kotlin.hashCode(this.solution) | 0;
    result = result * 31 + Kotlin.hashCode(this.solutionsStepTree) | 0;
    result = result * 31 + Kotlin.hashCode(this.hints) | 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.badStructureFine) | 0;
    result = result * 31 + Kotlin.hashCode(this.expressionTaskIntermediateData) | 0;
    result = result * 31 + Kotlin.hashCode(this.tagWeightMap) | 0;
    return result;
  };
  ExpressionTask.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.startExpression, other.startExpression) && Kotlin.equals(this.currentExpression, other.currentExpression) && Kotlin.equals(this.requiredSubstitutions, other.requiredSubstitutions) && Kotlin.equals(this.usedSubstitutions, other.usedSubstitutions) && Kotlin.equals(this.previousExpressions, other.previousExpressions) && Kotlin.equals(this.solution, other.solution) && Kotlin.equals(this.solutionsStepTree, other.solutionsStepTree) && Kotlin.equals(this.hints, other.hints) && Kotlin.equals(this.time, other.time) && Kotlin.equals(this.badStructureFine, other.badStructureFine) && Kotlin.equals(this.expressionTaskIntermediateData, other.expressionTaskIntermediateData) && Kotlin.equals(this.tagWeightMap, other.tagWeightMap)))));
  };
  function reweighNewVariablesRules(newVariablesSubstitutionsMap, currentTask) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var counter = LinkedHashMap_init_0();
    tmp$ = newVariablesSubstitutionsMap.keys.iterator();
    while (tmp$.hasNext()) {
      var varName = tmp$.next();
      counter.put_xwzc9p$(varName, 0);
    }
    currentTask.currentExpression.countNumberOfVariablesInMap_2wsk9e$(counter);
    var $receiver = counter.values;
    var any$result;
    any$break: do {
      var tmp$_3;
      if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
        any$result = false;
        break any$break;
      }
      tmp$_3 = $receiver.iterator();
      while (tmp$_3.hasNext()) {
        var element = tmp$_3.next();
        if (element === 0) {
          any$result = true;
          break any$break;
        }
      }
      any$result = false;
    }
     while (false);
    var weightPerVar = any$result ? 50 : 80;
    var overallNumberOfVariables = sum_0(counter.values) + newVariablesSubstitutionsMap.values.size | 0;
    var sumMaxWeigh = Kotlin.imul(weightPerVar, newVariablesSubstitutionsMap.values.size);
    var answer = ArrayList_init();
    tmp$_0 = newVariablesSubstitutionsMap.keys.iterator();
    while (tmp$_0.hasNext()) {
      var varName_0 = tmp$_0.next();
      tmp$_1 = ensureNotNull(newVariablesSubstitutionsMap.get_11rb$(varName_0)).iterator();
      while (tmp$_1.hasNext()) {
        var substitution = tmp$_1.next();
        answer.add_11rb$(substitution.copy_ru8ki6$(void 0, sumMaxWeigh * (((tmp$_2 = counter.get_11rb$(varName_0)) != null ? tmp$_2 : 0) + 1 | 0) / overallNumberOfVariables));
      }
    }
    return answer;
  }
  function generateExpressionTransformationTasks$lambda(it) {
    return it.expressionSubstitution.weightInTaskAutoGeneration;
  }
  function generateExpressionTransformationTasks$lambda_0(it) {
    var tmp$;
    var sum = 0.0;
    tmp$ = it.requiredSubstitutions.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum += element.weightInTaskAutoGeneration;
    }
    return sum;
  }
  function generateExpressionTransformationTasks$lambda_1(closure$compiledConfiguration) {
    return function (it) {
      return closure$compiledConfiguration.similarityMetric.invoke_heho5o$(it.startExpression, it.currentExpression);
    };
  }
  function generateExpressionTransformationTasks$lambda_2(it) {
    var tmp$;
    var sum = 0.0;
    tmp$ = it.requiredSubstitutions.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum += element.weightInTaskAutoGeneration;
    }
    return sum;
  }
  function generateExpressionTransformationTasks$lambda_3(it) {
    return it.badExpressionStructureFine();
  }
  function generateExpressionTransformationTasks$lambda_4(closure$compiledConfiguration) {
    return function (it) {
      return closure$compiledConfiguration.similarityMetric.invoke_heho5o$(it.startExpression, it.currentExpression);
    };
  }
  function generateExpressionTransformationTasks(expressionTaskGeneratorSettings) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16;
    var compiledConfiguration = expressionTaskGeneratorSettings.compiledConfiguration;
    var expressionComparator = compiledConfiguration.factComparator.expressionComparator;
    if (expressionTaskGeneratorSettings.expressionGenerationDirection === ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance()) {
      tmp$ = swapPartsInExpressionSubstitutions(expressionTaskGeneratorSettings.extendingExpressionSubstitutions);
    }
     else {
      tmp$ = expressionTaskGeneratorSettings.extendingExpressionSubstitutions;
    }
    var actualExtendingExpressionSubstitutions = tmp$;
    if (expressionTaskGeneratorSettings.expressionGenerationDirection === ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance()) {
      tmp$_0 = swapPartsInExpressionSubstitutions(expressionTaskGeneratorSettings.reducingExpressionSubstitutions);
    }
     else {
      tmp$_0 = expressionTaskGeneratorSettings.reducingExpressionSubstitutions;
    }
    var actualReducingExpressionSubstitutions = tmp$_0;
    var taskStart = expressionTaskGeneratorSettings.taskStartGenerator(compiledConfiguration);
    var allTasks = ArrayList_init();
    var currentTasks = ArrayList_init();
    var $receiver = taskStart.expressionNode.clone();
    applyAllImmediateSubstitutions($receiver, compiledConfiguration);
    var startExpression = new ExpressionTask($receiver);
    currentTasks.add_11rb$(startExpression);
    var iterationsCount = expressionTaskGeneratorSettings.goalStepsCount + 2 | 0;
    var stepId = {v: 1};
    while (!currentTasks.isEmpty()) {
      var newCurrentTasks = ArrayList_init();
      tmp$_1 = currentTasks.iterator();
      while (tmp$_1.hasNext()) {
        var currentTask = tmp$_1.next();
        var currentExpression = currentTask.currentExpression;
        currentExpression.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$();
        var actualNewVariablesExpressionSubstitutions = reweighNewVariablesRules(expressionTaskGeneratorSettings.newVariablesExpressionSubstitutions, currentTask);
        if (stepId.v < expressionTaskGeneratorSettings.goalCompletionStepsCount) {
          tmp$_2 = plus(expressionTaskGeneratorSettings.extendingExpressionSubstitutions, actualNewVariablesExpressionSubstitutions);
        }
         else {
          tmp$_2 = expressionTaskGeneratorSettings.reducingExpressionSubstitutions;
        }
        setExpressionSubstitutions(compiledConfiguration, tmp$_2);
        tmp$_3 = expressionTaskGeneratorSettings.widthOfRulesApplicationsOnIteration;
        for (var j = 1; j <= tmp$_3; j++) {
          var selectedNodeIds = selectNodeIdsToTransformByLastStepId(currentExpression);
          if (selectedNodeIds.isEmpty() || (selectedNodeIds.size === 1 && randomInt(0, 100) === 0)) {
            var randomNodeId = random(currentExpression.getAllChildrenNodeIds(), Random.Default);
            if (selectedNodeIds.isEmpty() || first(selectedNodeIds) !== randomNodeId) {
              selectedNodeIds = plus(selectedNodeIds, listOf(randomNodeId));
            }
          }
          if (selectedNodeIds.isEmpty()) {
            continue;
          }
          var applications = findApplicableSubstitutionsInSelectedPlace(currentExpression, copyToArray(selectedNodeIds), compiledConfiguration, void 0, true);
          tmp$_4 = take(sortedWith(applications, new Comparator$ObjectLiteral_6(compareByDescending$lambda_1(generateExpressionTransformationTasks$lambda))), expressionTaskGeneratorSettings.widthOfRulesApplicationsOnIteration).iterator();
          loop_label: while (tmp$_4.hasNext()) {
            var application = tmp$_4.next();
            if (!application.expressionSubstitution.isNormalType()) {
              addSubstitutionToResultExpression(application);
              addStepIdToResultExpression(application, stepId.v);
            }
            var newTask = currentTask.clone();
            newTask.currentExpression = application.resultExpression;
            newTask.previousExpressions.add_11rb$(newTask.currentExpression.clone());
            newTask.usedSubstitutions.add_11rb$(application.expressionSubstitution);
            var $receiver_0 = currentTask.previousExpressions;
            var any$result;
            any$break: do {
              var tmp$_17;
              if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
                any$result = false;
                break any$break;
              }
              tmp$_17 = $receiver_0.iterator();
              while (tmp$_17.hasNext()) {
                var element = tmp$_17.next();
                if (compareExpressionNodes(element, newTask.currentExpression)) {
                  any$result = true;
                  break any$break;
                }
              }
              any$result = false;
            }
             while (false);
            if (any$result) {
              continue loop_label;
            }
            newTask.solutionsStepTree.add_11rb$(new SolutionsStepITR(newTask.currentExpression.toString(), application.expressionSubstitution, selectedNodeIds, stepId.v, (tmp$_6 = (tmp$_5 = lastOrNull(newTask.solutionsStepTree)) != null ? tmp$_5.stepId : null) != null ? tmp$_6 : -1));
            newTask.time = newTask.time + (Kotlin.imul(numberToInt(application.expressionSubstitution.weight + 1), selectedNodeIds.size) * 2 | 0) | 0;
            newCurrentTasks.add_11rb$(newTask);
          }
        }
        var functionsInExpression = currentExpression.getContainedFunctions();
        var appropriateSubstitutions = ArrayList_init();
        if (stepId.v < expressionTaskGeneratorSettings.goalCompletionStepsCount) {
          tmp$_7 = plus(actualExtendingExpressionSubstitutions, actualNewVariablesExpressionSubstitutions);
        }
         else {
          tmp$_7 = actualReducingExpressionSubstitutions;
        }
        var actualExpressionSubstitutions = tmp$_7;
        tmp$_8 = actualExpressionSubstitutions.iterator();
        while (tmp$_8.hasNext()) {
          var expressionSubstitution = tmp$_8.next();
          if (expressionSubstitution.isAppropriateToFunctions_ywdfdh$(functionsInExpression) && expressionSubstitution.left.nodeType !== NodeType$EMPTY_getInstance()) {
            if (!expressionSubstitution.findAllPossibleSubstitutionPlaces_i8kf4x$(currentExpression, expressionComparator).isEmpty()) {
              expressionSubstitution.setStepIdForRight_za3lpa$(stepId.v);
              appropriateSubstitutions.add_11rb$(expressionSubstitution);
            }
          }
        }
        var tmp$_18;
        var sum = 0.0;
        tmp$_18 = appropriateSubstitutions.iterator();
        while (tmp$_18.hasNext()) {
          var element_0 = tmp$_18.next();
          sum += element_0.weightInTaskAutoGeneration;
        }
        var appropriateSubstitutionWeight = sum;
        if (appropriateSubstitutionWeight < BaseOperationsComputation$Companion_getInstance().epsilon) {
          continue;
        }
        tmp$_9 = expressionTaskGeneratorSettings.widthOfRulesApplicationsOnIteration;
        loop_label: for (var j_0 = 1; j_0 <= tmp$_9; j_0++) {
          var newTask_0 = currentTask.clone();
          var selector = random_1(0.0, appropriateSubstitutionWeight);
          var currentSubstitutionIndex = 0;
          while (selector > appropriateSubstitutions.get_za3lpa$(currentSubstitutionIndex).weightInTaskAutoGeneration) {
            selector -= appropriateSubstitutions.get_za3lpa$(currentSubstitutionIndex).weightInTaskAutoGeneration;
            currentSubstitutionIndex = currentSubstitutionIndex + 1 | 0;
          }
          var selectedSubstitution = appropriateSubstitutions.get_za3lpa$(currentSubstitutionIndex);
          var places = selectedSubstitution.findAllPossibleSubstitutionPlaces_i8kf4x$(newTask_0.currentExpression, expressionComparator);
          if (places.size === 0) {
            continue loop_label;
          }
           else {
            var changedExpression = newTask_0.currentExpression.clone();
            newTask_0.previousExpressions.add_11rb$(newTask_0.currentExpression.clone());
            newTask_0.usedSubstitutions.add_11rb$(selectedSubstitution);
            var waysOfApplyingCount = (1 << places.size) + 1 | 0;
            if (waysOfApplyingCount > 0) {
              tmp$_10 = randomInt(1, waysOfApplyingCount);
            }
             else {
              tmp$_10 = randomInt(1, 2147483647);
            }
            var bitMask = tmp$_10;
            var changedNodeIds = selectedSubstitution.applySubstitutionByBitMask_uet8du$(places, bitMask);
            var $receiver_1 = currentTask.previousExpressions;
            var any$result_0;
            any$break: do {
              var tmp$_19;
              if (Kotlin.isType($receiver_1, Collection) && $receiver_1.isEmpty()) {
                any$result_0 = false;
                break any$break;
              }
              tmp$_19 = $receiver_1.iterator();
              while (tmp$_19.hasNext()) {
                var element_1 = tmp$_19.next();
                if (compareExpressionNodes(element_1, newTask_0.currentExpression)) {
                  any$result_0 = true;
                  break any$break;
                }
              }
              any$result_0 = false;
            }
             while (false);
            if (any$result_0) {
              continue loop_label;
            }
            newTask_0.solutionsStepTree.add_11rb$(new SolutionsStepITR(changedExpression.toString(), selectedSubstitution, changedNodeIds, stepId.v, (tmp$_12 = (tmp$_11 = lastOrNull(newTask_0.solutionsStepTree)) != null ? tmp$_11.stepId : null) != null ? tmp$_12 : -1));
            newTask_0.time = newTask_0.time + (Kotlin.imul(numberToInt(selectedSubstitution.weight + 1), changedNodeIds.size) * 2 | 0) | 0;
            var substitutionChains = expressionTaskGeneratorSettings.substitutionChains;
            var chainContinuation = substitutionChains.get_11rb$(selectedSubstitution.code);
            if (chainContinuation != null) {
              var randomSubstitutionContinuation = random(chainContinuation, Random.Default);
              var taskAfterChainApplication = newTask_0.clone();
              var changedAfterChainApplicationExpression = taskAfterChainApplication.currentExpression.clone();
              taskAfterChainApplication.previousExpressions.add_11rb$(taskAfterChainApplication.currentExpression.clone());
              taskAfterChainApplication.usedSubstitutions.add_11rb$(randomSubstitutionContinuation);
              var substPlaces = randomSubstitutionContinuation.findAllPossibleSubstitutionPlaces_i8kf4x$(changedAfterChainApplicationExpression, expressionComparator);
              var modifiedNodeIds = randomSubstitutionContinuation.applySubstitutionByBitMask_uet8du$(substPlaces, bitMask);
              taskAfterChainApplication.solutionsStepTree.add_11rb$(new SolutionsStepITR(changedAfterChainApplicationExpression.toString(), randomSubstitutionContinuation, modifiedNodeIds, stepId.v, (tmp$_14 = (tmp$_13 = lastOrNull(taskAfterChainApplication.solutionsStepTree)) != null ? tmp$_13.stepId : null) != null ? tmp$_14 : -1));
              taskAfterChainApplication.time = taskAfterChainApplication.time + (Kotlin.imul(numberToInt(selectedSubstitution.weight + 1), changedNodeIds.size) * 2 | 0) | 0;
            }
          }
          newCurrentTasks.add_11rb$(newTask_0);
        }
      }
      var $receiver_2 = newCurrentTasks;
      var tmp$_20;
      var set = HashSet_init();
      var list = ArrayList_init();
      tmp$_20 = $receiver_2.iterator();
      while (tmp$_20.hasNext()) {
        var e = tmp$_20.next();
        var key = e.currentExpression.toString();
        if (set.add_11rb$(key))
          list.add_11rb$(e);
      }
      newCurrentTasks = toMutableList(list);
      if (stepId.v <= (expressionTaskGeneratorSettings.goalCompletionStepsCount / 2 | 0)) {
        var tmp$_21 = sortedWith(newCurrentTasks, new Comparator$ObjectLiteral_6(compareByDescending$lambda_1(generateExpressionTransformationTasks$lambda_0)));
        var a = expressionTaskGeneratorSettings.maxCountSelectedOfTasksOnIteration;
        var b = newCurrentTasks.size;
        var tmp$_22 = take(tmp$_21, Math_0.min(a, b));
        var tmp$_23 = sortedWith(newCurrentTasks, new Comparator$ObjectLiteral_6(compareByDescending$lambda_1(generateExpressionTransformationTasks$lambda_1(compiledConfiguration))));
        var a_0 = expressionTaskGeneratorSettings.maxCountSelectedOfTasksOnIteration;
        var b_0 = newCurrentTasks.size;
        var $receiver_3 = plus(tmp$_22, take(tmp$_23, Math_0.min(a_0, b_0)));
        var tmp$_24;
        var set_0 = HashSet_init();
        var list_0 = ArrayList_init();
        tmp$_24 = $receiver_3.iterator();
        while (tmp$_24.hasNext()) {
          var e_0 = tmp$_24.next();
          var key_0 = e_0.currentExpression.toString();
          if (set_0.add_11rb$(key_0))
            list_0.add_11rb$(e_0);
        }
        newCurrentTasks = toMutableList(list_0);
      }
       else {
        var tmp$_25 = sortedWith(newCurrentTasks, new Comparator$ObjectLiteral_6(compareByDescending$lambda_1(generateExpressionTransformationTasks$lambda_2)));
        var a_1 = expressionTaskGeneratorSettings.maxCountSelectedOfTasksOnIteration;
        var b_1 = newCurrentTasks.size;
        var tmp$_26 = take(tmp$_25, Math_0.min(a_1, b_1));
        var tmp$_27 = sortedWith(newCurrentTasks, new Comparator$ObjectLiteral_7(compareBy$lambda_3(generateExpressionTransformationTasks$lambda_3)));
        var a_2 = expressionTaskGeneratorSettings.maxCountSelectedOfTasksOnIteration;
        var b_2 = newCurrentTasks.size;
        var $receiver_4 = plus(tmp$_26, take(tmp$_27, Math_0.min(a_2, b_2)));
        var tmp$_28;
        var set_1 = HashSet_init();
        var list_1 = ArrayList_init();
        tmp$_28 = $receiver_4.iterator();
        while (tmp$_28.hasNext()) {
          var e_1 = tmp$_28.next();
          var key_1 = e_1.currentExpression.toString();
          if (set_1.add_11rb$(key_1))
            list_1.add_11rb$(e_1);
        }
        newCurrentTasks = toMutableList(list_1);
      }
      var tmp$_29 = allTasks;
      var $receiver_5 = newCurrentTasks;
      var destination = ArrayList_init();
      var tmp$_30;
      tmp$_30 = $receiver_5.iterator();
      while (tmp$_30.hasNext()) {
        var element_2 = tmp$_30.next();
        if (element_2.previousExpressions.size >= expressionTaskGeneratorSettings.minStepsCountInAutogeneration)
          destination.add_11rb$(element_2);
      }
      tmp$_29.addAll_brywnq$(destination);
      var $receiver_6 = newCurrentTasks;
      var destination_0 = ArrayList_init();
      var tmp$_31;
      tmp$_31 = $receiver_6.iterator();
      while (tmp$_31.hasNext()) {
        var element_3 = tmp$_31.next();
        if (element_3.previousExpressions.size < iterationsCount)
          destination_0.add_11rb$(element_3);
      }
      currentTasks = toMutableList(destination_0);
      stepId.v = stepId.v + 1 | 0;
    }
    var $receiver_7 = allTasks;
    var tmp$_32;
    var set_2 = HashSet_init();
    var list_2 = ArrayList_init();
    tmp$_32 = $receiver_7.iterator();
    while (tmp$_32.hasNext()) {
      var e_2 = tmp$_32.next();
      var key_2 = e_2.currentExpression.toString();
      if (set_2.add_11rb$(key_2))
        list_2.add_11rb$(e_2);
    }
    allTasks = toMutableList(list_2);
    var tmp$_33;
    tmp$_33 = allTasks.iterator();
    while (tmp$_33.hasNext()) {
      var element_4 = tmp$_33.next();
      applyAllSubstitutions(element_4.currentExpression, expressionTaskGeneratorSettings.mandatoryResultTransformations);
      element_4.currentExpression = simplifyAndNormalizeExpression(element_4.currentExpression, compiledConfiguration);
    }
    var resultAllTasks = ArrayList_init();
    tmp$_15 = allTasks.iterator();
    while (tmp$_15.hasNext()) {
      var task = tmp$_15.next();
      var isNew = true;
      tmp$_16 = resultAllTasks.iterator();
      while (tmp$_16.hasNext()) {
        var resultTask = tmp$_16.next();
        if (compiledConfiguration.factComparator.expressionComparator.compareAsIs_5gxvt3$(task.currentExpression, resultTask.currentExpression)) {
          isNew = false;
          break;
        }
      }
      if (isNew) {
        resultAllTasks.add_11rb$(task);
      }
    }
    var $receiver_8 = resultAllTasks;
    var destination_1 = ArrayList_init_0(collectionSizeOrDefault($receiver_8, 10));
    var tmp$_34;
    tmp$_34 = $receiver_8.iterator();
    while (tmp$_34.hasNext()) {
      var item = tmp$_34.next();
      destination_1.add_11rb$(postprocessGeneratedTask(item, expressionTaskGeneratorSettings.postprocessExpressionSubstitutions, expressionComparator, stepId.v));
    }
    var destination_2 = ArrayList_init();
    var tmp$_35;
    tmp$_35 = destination_1.iterator();
    while (tmp$_35.hasNext()) {
      var element_5 = tmp$_35.next();
      if (!containsUncertainties(element_5.currentExpression, expressionComparator))
        destination_2.add_11rb$(element_5);
    }
    var tmp$_36;
    var set_3 = HashSet_init();
    var list_3 = ArrayList_init();
    tmp$_36 = destination_2.iterator();
    while (tmp$_36.hasNext()) {
      var e_3 = tmp$_36.next();
      var key_3 = e_3.currentExpression.cloneWithNormalization_1g1bdl$(void 0, true).toString();
      if (set_3.add_11rb$(key_3))
        list_3.add_11rb$(e_3);
    }
    resultAllTasks = toMutableList(list_3);
    var $receiver_9 = resultAllTasks;
    if ($receiver_9.size > 1) {
      sortWith($receiver_9, new Comparator$ObjectLiteral_8(compareByDescending$lambda_2(generateExpressionTransformationTasks$lambda_4(compiledConfiguration))));
    }
    var tmp$_37;
    tmp$_37 = resultAllTasks.iterator();
    while (tmp$_37.hasNext()) {
      var element_6 = tmp$_37.next();
      var $receiver_10 = element_6.usedSubstitutions;
      var destination_3 = LinkedHashMap_init_0();
      var tmp$_38;
      tmp$_38 = $receiver_10.iterator();
      while (tmp$_38.hasNext()) {
        var element_7 = tmp$_38.next();
        var key_4 = element_7.code;
        var tmp$_0_0;
        var value = destination_3.get_11rb$(key_4);
        if (value == null) {
          var answer = ArrayList_init();
          destination_3.put_xwzc9p$(key_4, answer);
          tmp$_0_0 = answer;
        }
         else {
          tmp$_0_0 = value;
        }
        var list_4 = tmp$_0_0;
        list_4.add_11rb$(element_7);
      }
      var $receiver_11 = destination_3.values;
      var destination_4 = ArrayList_init_0(collectionSizeOrDefault($receiver_11, 10));
      var tmp$_39;
      tmp$_39 = $receiver_11.iterator();
      while (tmp$_39.hasNext()) {
        var item_0 = tmp$_39.next();
        destination_4.add_11rb$(first(item_0));
      }
      element_6.requiredSubstitutions = toMutableSet_1(destination_4);
      var $receiver_12 = element_6.requiredSubstitutions;
      var destination_5 = ArrayList_init_0(collectionSizeOrDefault($receiver_12, 10));
      var tmp$_40;
      tmp$_40 = $receiver_12.iterator();
      while (tmp$_40.hasNext()) {
        var item_1 = tmp$_40.next();
        destination_5.add_11rb$(new HintITR('Use rule ' + '$' + '$' + expressionToTexString(item_1.left) + '=' + expressionToTexString(item_1.right) + '$' + '$', '\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439 \u043F\u0440\u0430\u0432\u0438\u043B\u043E ' + '$' + '$' + expressionToTexString(item_1.left) + '=' + expressionToTexString(item_1.right) + '$' + '$'));
      }
      element_6.hints = toMutableList(destination_5);
      var $receiver_13 = ArrayList_init();
      $receiver_13.addAll_brywnq$(element_6.previousExpressions);
      $receiver_13.add_11rb$(element_6.currentExpression);
      var expressionsInSolution = $receiver_13;
      if (expressionTaskGeneratorSettings.expressionGenerationDirection === ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance()) {
        reverse(expressionsInSolution);
      }
      var destination_6 = ArrayList_init_0(collectionSizeOrDefault(expressionsInSolution, 10));
      var tmp$_41;
      tmp$_41 = expressionsInSolution.iterator();
      while (tmp$_41.hasNext()) {
        var item_2 = tmp$_41.next();
        destination_6.add_11rb$(expressionToString(item_2));
      }
      element_6.solution = joinToString(destination_6, ' = ');
    }
    var $receiver_14 = resultAllTasks;
    var destination_7 = ArrayList_init_0(collectionSizeOrDefault($receiver_14, 10));
    var tmp$_42;
    tmp$_42 = $receiver_14.iterator();
    while (tmp$_42.hasNext()) {
      var item_3 = tmp$_42.next();
      var tmp$_43 = destination_7.add_11rb$;
      var tmp$_44, tmp$_45, tmp$_46, tmp$_47, tmp$_48, tmp$_49, tmp$_50, tmp$_51, tmp$_52, tmp$_53, tmp$_54;
      tmp$_44 = taskStart.code;
      tmp$_45 = taskStart.nameEn;
      tmp$_46 = taskStart.nameRu;
      tmp$_47 = taskStart.descriptionShortEn;
      tmp$_48 = taskStart.descriptionShortRu;
      tmp$_49 = taskStart.descriptionEn;
      tmp$_50 = taskStart.descriptionRu;
      tmp$_51 = taskStart.subjectType;
      tmp$_52 = taskStart.tags;
      if (expressionTaskGeneratorSettings.expressionGenerationDirection === ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance()) {
        tmp$_53 = item_3.currentExpression.toString();
      }
       else {
        tmp$_53 = item_3.startExpression.toString();
      }
      if (expressionTaskGeneratorSettings.expressionGenerationDirection === ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance()) {
        tmp$_54 = item_3.startExpression.toString();
      }
       else {
        tmp$_54 = item_3.currentExpression.toString();
      }
      tmp$_43.call(destination_7, new TaskITR(void 0, tmp$_44, void 0, void 0, tmp$_45, tmp$_46, tmp$_47, tmp$_48, tmp$_49, tmp$_50, tmp$_51, tmp$_52, tmp$_53, void 0, void 0, 'expression', tmp$_54, void 0, void 0, '', void 0, void 0, listOf(new RulePackLinkITR(void 0, 'AdvancedTrigonometry')), emptyList(), item_3.previousExpressions.size, item_3.time, 1.0, void 0, item_3.solution, mapOf(to('data', item_3.solutionsStepTree)), mapOf(to('data', item_3.hints)), void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, item_3.expressionTaskIntermediateData));
    }
    return destination_7;
  }
  function findPossibleSubstitutions(task, allSubstitutions, expressionComparator) {
    var possibleSubstitutions = ArrayList_init();
    var tmp$;
    tmp$ = allSubstitutions.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var places = element.findAllPossibleSubstitutionPlaces_i8kf4x$(task.currentExpression, expressionComparator);
      if (places.size > 0) {
        possibleSubstitutions.add_11rb$(element);
      }
    }
    return possibleSubstitutions;
  }
  function postprocessGeneratedTask(task, postprocessSubstitutions, expressionComparator, stepId) {
    var tmp$, tmp$_0, tmp$_1;
    var currentTask = task.clone();
    var possibleSubstitutions = findPossibleSubstitutions(currentTask, postprocessSubstitutions, expressionComparator);
    while (!possibleSubstitutions.isEmpty()) {
      tmp$ = postprocessSubstitutions.iterator();
      while (tmp$.hasNext()) {
        var substitution = tmp$.next();
        var newTask = currentTask.clone();
        var places = substitution.findAllPossibleSubstitutionPlaces_i8kf4x$(newTask.currentExpression, expressionComparator);
        if (places.size === 0) {
          continue;
        }
         else {
          var changedExpression = newTask.currentExpression.clone();
          newTask.previousExpressions.add_11rb$(newTask.currentExpression.clone());
          newTask.usedSubstitutions.add_11rb$(substitution);
          var bitMask = (1 << places.size) - 1 | 0;
          var changedNodeIds = substitution.applySubstitutionByBitMask_uet8du$(places, bitMask);
          var $receiver = newTask.expressionTaskIntermediateData.appliedPostprocessSubstitutions;
          var key = substitution.code;
          $receiver.put_xwzc9p$(key, stepId);
          newTask.solutionsStepTree.add_11rb$(new SolutionsStepITR(changedExpression.toString(), substitution, changedNodeIds, stepId, (tmp$_1 = (tmp$_0 = lastOrNull(newTask.solutionsStepTree)) != null ? tmp$_0.stepId : null) != null ? tmp$_1 : -1));
        }
        currentTask = newTask;
      }
      possibleSubstitutions = findPossibleSubstitutions(currentTask, postprocessSubstitutions, expressionComparator);
    }
    currentTask.expressionTaskIntermediateData.expressionBeforePostprocessPhase1 = task.currentExpression.clone();
    return currentTask;
  }
  function simplifyAndNormalizeExpression(expression, compiledConfiguration) {
    var result = {v: compiledConfiguration.factComparator.expressionComparator.baseOperationsDefinitions.simplifyExpressionTree_em03xr$(expression)};
    normalizeExpressionToUsualForm(result.v, compiledConfiguration);
    result.v.normalizeTrivialFunctions();
    simplifyExpressionRecursive(result.v, compiledConfiguration);
    if (!equals(result.v.value, '')) {
      var $receiver = new ExpressionNode(NodeType$FUNCTION_getInstance(), '');
      $receiver.addChild_em03xr$(result.v);
      result.v = $receiver;
    }
    return result.v;
  }
  function simplifyExpressionRecursive$lambda(it) {
    return replace_0(replace(replace(it.toString(), '(', ''), ')', ''), 45, 126);
  }
  function simplifyExpressionRecursive(expression, compiledConfiguration) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = expression.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      simplifyExpressionRecursive(child, compiledConfiguration);
    }
    if (((tmp$_1 = (tmp$_0 = expression.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) === true) {
      var $receiver = expression.children;
      if ($receiver.size > 1) {
        sortWith($receiver, new Comparator$ObjectLiteral_9(compareBy$lambda_4(simplifyExpressionRecursive$lambda)));
      }
    }
    return expression;
  }
  function swapPartsInExpressionSubstitutions(expressionSubstitutions) {
    var tmp$;
    var swappedExpressionSubstitutions = ArrayList_init();
    tmp$ = expressionSubstitutions.iterator();
    while (tmp$.hasNext()) {
      var expressionSubstitution = tmp$.next();
      swappedExpressionSubstitutions.add_11rb$(new ExpressionSubstitution(expressionSubstitution.right, expressionSubstitution.left, expressionSubstitution.weight, expressionSubstitution.basedOnTaskContext, expressionSubstitution.code, expressionSubstitution.nameEn, expressionSubstitution.nameRu, expressionSubstitution.comparisonType, void 0, void 0, expressionSubstitution.matchJumbledAndNested, expressionSubstitution.priority, expressionSubstitution.changeOnlyOrder, expressionSubstitution.simpleAdditional, expressionSubstitution.isExtending, expressionSubstitution.normalizationType, void 0, expressionSubstitution.weightInTaskAutoGeneration));
    }
    return swappedExpressionSubstitutions;
  }
  function compareExpressionNodes(first, second) {
    var tmp$, tmp$_0;
    first.fillStructureStringIdentifiers_5osufp$();
    second.fillStructureStringIdentifiers_5osufp$();
    var result = (tmp$ = first.expressionStrictureIdentifier) != null ? tmp$.equals(second.expressionStrictureIdentifier) : null;
    if (result == null) {
      result = false;
    }
    return typeof (tmp$_0 = result) === 'boolean' ? tmp$_0 : throwCCE();
  }
  function badStructureFine($receiver) {
    var badStructureFine = 0.0;
    if (patternDoubleMinus($receiver)) {
      badStructureFine += 2;
    }
    if (patternUnaryMinus($receiver)) {
      badStructureFine += 0.5;
    }
    if (patternDoubleMinusInFraction($receiver)) {
      badStructureFine += 3;
    }
    if (patternThreeLevelsInFraction($receiver)) {
      badStructureFine += 0.5;
    }
    if (patternTooManyLevelsExist($receiver)) {
      badStructureFine += 3;
    }
    if (patternConstMulConst($receiver)) {
      badStructureFine += 3;
    }
    badStructureFine += $receiver.getDepth();
    return badStructureFine;
  }
  function getMaxFractionLevel($receiver, initialCount) {
    if (initialCount === void 0)
      initialCount = 0;
    var tmp$;
    if ($receiver.children.isEmpty())
      return initialCount;
    var fracCount = equals($receiver.value, '/') ? initialCount + 1 | 0 : 0;
    var $receiver_0 = $receiver.children;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_0;
    tmp$_0 = $receiver_0.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination.add_11rb$(getMaxFractionLevel(item, fracCount));
    }
    return (tmp$ = max(destination)) != null ? tmp$ : 0;
  }
  function selectRandomNodeIdsToTransform($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var depth = $receiver.getDepth();
    var rnd = randomInt(0, depth);
    if (rnd === 0 && !equals($receiver.value, '')) {
      return listOf($receiver.nodeId);
    }
     else if (rnd === 1 && ((tmp$_0 = (tmp$ = $receiver.functionStringDefinition) != null ? tmp$.function : null) != null ? tmp$_0.isCommutativeWithNullWeight : null) === true) {
      var result = ArrayList_init();
      var childrenShuffled = shuffled($receiver.children);
      tmp$_1 = childrenShuffled.iterator();
      while (tmp$_1.hasNext()) {
        var child = tmp$_1.next();
        if (randomInt(0, result.size) === 0) {
          result.add_11rb$(child.nodeId);
        }
      }
      return result;
    }
     else {
      var childrenShuffled_0 = shuffled($receiver.children);
      tmp$_2 = childrenShuffled_0.iterator();
      while (tmp$_2.hasNext()) {
        var child_0 = tmp$_2.next();
        var result_0 = selectRandomNodeIdsToTransform(child_0);
        if (!result_0.isEmpty() && randomBoolean()) {
          return result_0;
        }
      }
    }
    return emptyList();
  }
  function nodeIdToPlaceWeight($receiver, parentStepId) {
    var tmp$;
    var resultWeights = LinkedHashMap_init_0();
    var a = $receiver.lastModifiedStepId + 2 | 0;
    var b = parentStepId - 1 | 0;
    var startWeight = Math_0.max(a, b);
    var currentWeight = startWeight;
    tmp$ = $receiver.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var childResult = nodeIdToPlaceWeight(child, startWeight);
      resultWeights.putAll_a2k3zr$(childResult.first);
      var a_0 = currentWeight;
      var b_0 = childResult.second - 1 | 0;
      currentWeight = Math_0.max(a_0, b_0);
    }
    var value = currentWeight;
    resultWeights.put_xwzc9p$($receiver, value);
    return to(resultWeights, currentWeight);
  }
  function selectNodeIdsToTransformByLastStepId($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var placesWeights = nodeIdToPlaceWeight($receiver, $receiver.lastModifiedStepId).first;
    var placesWeightsCount = sum_0(placesWeights.values);
    var choice = randomInt(0, placesWeightsCount);
    var current = 0;
    tmp$ = placesWeights.entries.iterator();
    while (tmp$.hasNext()) {
      var tmp$_3 = tmp$.next();
      var v = tmp$_3.key;
      var k = tmp$_3.value;
      if (current <= choice && choice < (current + k | 0)) {
        if (((tmp$_1 = (tmp$_0 = v.functionStringDefinition) != null ? tmp$_0.function : null) != null ? tmp$_1.isCommutativeWithNullWeight : null) === true && randomBoolean()) {
          var result = ArrayList_init();
          var childrenShuffled = shuffled($receiver.children);
          tmp$_2 = childrenShuffled.iterator();
          while (tmp$_2.hasNext()) {
            var child = tmp$_2.next();
            if (randomInt(0, result.size) === 0) {
              result.add_11rb$(child.nodeId);
            }
          }
          return result;
        }
         else if (!equals(v.value, '')) {
          return listOf(v.nodeId);
        }
         else {
          return emptyList();
        }
      }
      current = current + k | 0;
    }
    return emptyList();
  }
  function ExpressionUtils() {
    ExpressionUtils$Companion_getInstance();
  }
  function ExpressionUtils$Companion() {
    ExpressionUtils$Companion_instance = this;
  }
  ExpressionUtils$Companion.prototype.structureStringToGeneratedExpression_61zpoe$ = function (structureString) {
    var node = structureStringToExpression(structureString);
    var generatedExpression = new GeneratedExpression(new ExpressionNode(NodeType$FUNCTION_getInstance(), ''), '', '', '', '', '', '', '', 'standard_math', LinkedHashSet_init());
    generatedExpression.expressionNode = node;
    return generatedExpression;
  };
  ExpressionUtils$Companion.prototype.stringToGeneratedExpression_61zpoe$ = function (stringExpression) {
    var expressionTreeParser = new ExpressionTreeParser(stringExpression, true);
    expressionTreeParser.parse();
    var node = expressionTreeParser.root;
    var generatedExpression = new GeneratedExpression(new ExpressionNode(NodeType$FUNCTION_getInstance(), ''), '', '', '', '', '', '', '', 'standard_math', LinkedHashSet_init());
    generatedExpression.expressionNode = node;
    return generatedExpression;
  };
  ExpressionUtils$Companion.prototype.toExpressionSubstitutions_mh4gj9$ = function (rulePackList, tags) {
    if (tags === void 0)
      tags = RuleTag$values_0();
    var substitutions = ArrayList_init();
    var tmp$;
    tmp$ = rulePackList.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      substitutions.addAll_brywnq$(this.toExpressionSubstitutions_0(element, tags));
    }
    var destination = ArrayList_init();
    var tmp$_0;
    tmp$_0 = substitutions.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      if (element_0.weightInTaskAutoGeneration !== 0.0)
        destination.add_11rb$(element_0);
    }
    return destination;
  };
  ExpressionUtils$Companion.prototype.toExpressionSubstitutions_0 = function (rulePack, tags) {
    if (tags === void 0)
      tags = RuleTag$values_0();
    var tmp$, tmp$_0;
    var substitutions = ArrayList_init();
    var tmp$_1;
    if ((tmp$ = rulePack.rules) != null) {
      var destination = ArrayList_init();
      var tmp$_2;
      tmp$_2 = tmp$.iterator();
      while (tmp$_2.hasNext()) {
        var element = tmp$_2.next();
        if (toList(tags).containsAll_brywnq$(element.tagsForTaskGenerator))
          destination.add_11rb$(element);
      }
      tmp$_1 = destination;
    }
     else
      tmp$_1 = null;
    if ((tmp$_0 = tmp$_1) != null) {
      var tmp$_3;
      tmp$_3 = tmp$_0.iterator();
      while (tmp$_3.hasNext()) {
        var element_0 = tmp$_3.next();
        substitutions.add_11rb$(this.toExpressionSubstitution_0(element_0));
      }
    }
    return substitutions;
  };
  ExpressionUtils$Companion.prototype.toExpressionSubstitution_0 = function (rule) {
    return expressionSubstitutionFromRuleITR(rule);
  };
  ExpressionUtils$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ExpressionUtils$Companion_instance = null;
  function ExpressionUtils$Companion_getInstance() {
    if (ExpressionUtils$Companion_instance === null) {
      new ExpressionUtils$Companion();
    }
    return ExpressionUtils$Companion_instance;
  }
  ExpressionUtils.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionUtils',
    interfaces: []
  };
  function splitConstants(task, compiledConfiguration, stepId) {
    var normalizedTask = task.clone();
    normalizedTask.currentExpression = traverseAndSplitConstants(normalizedTask.currentExpression, compiledConfiguration);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    logTransformation(task, normalizedTask, 'splitConstants', stepId);
    return normalizedTask;
  }
  function traverseAndSplitConstants(node, compiledConfiguration) {
    var tmp$;
    var updatedChildren = ArrayList_init();
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var updatedChild = traverseAndSplitConstants(child, compiledConfiguration);
      updatedChildren.add_11rb$(updatedChild);
      updatedChild.parent = node;
    }
    node.children = updatedChildren;
    if (node.isIntNumber() && !equals(node.value, '') && !insideExponent(node, compiledConfiguration.factComparator.expressionComparator)) {
      var constantValue = toInt(node.value);
      if (constantValue <= 1) {
        return node;
      }
      var firstHalf = randomInt(1, Math_0.max(1, constantValue));
      var secondHalf = constantValue - firstHalf | 0;
      return ExpressionNodeBuilder$Companion_getInstance().buildNodeFromTerms_seplnl$(mutableListOf([ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(firstHalf), ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(secondHalf)]), compiledConfiguration);
    }
    return node;
  }
  function verifyAllPartsHasBeenTransformed$lambda(closure$initialNode, closure$resultNode) {
    return function () {
      return 'verifyAllPartsHasBeenTransformed: initialNode = ' + closure$initialNode.computeIdentifier_5osufp$() + ', ' + ('resultNode = ' + closure$resultNode.computeIdentifier_5osufp$());
    };
  }
  function verifyAllPartsHasBeenTransformed$lambda_0(closure$initialNode, closure$resultNode) {
    return function () {
      return 'verifyAllPartsHasBeenTransformed - task is dropped! (fraction criteria 1): initialNode = ' + closure$initialNode.computeIdentifier_5osufp$() + ', ' + ('resultNode = ' + closure$resultNode.computeIdentifier_5osufp$());
    };
  }
  function verifyAllPartsHasBeenTransformed$lambda_1(closure$node) {
    return function () {
      return 'verifyAllPartsHasBeenTransformed - task is dropped! (node is not transformed criteria):' + (' not transformed node = ' + closure$node.computeIdentifier_5osufp$());
    };
  }
  function verifyAllPartsHasBeenTransformed$lambda_2(closure$initialNode, closure$resultNode) {
    return function () {
      return 'verifyAllPartsHasBeenTransformed - task is dropped! (fraction criteria 2): initialNode = ' + closure$initialNode.computeIdentifier_5osufp$() + ', ' + ('resultNode = ' + closure$resultNode.computeIdentifier_5osufp$());
    };
  }
  function verifyAllPartsHasBeenTransformed$lambda_3(closure$initialNode, closure$resultNode) {
    return function () {
      return 'verifyAllPartsHasBeenTransformed - task is dropped! (the same identifiers criteria): initialNode = ' + closure$initialNode.computeIdentifier_5osufp$() + ', ' + ('resultNode = ' + closure$resultNode.computeIdentifier_5osufp$());
    };
  }
  function verifyAllPartsHasBeenTransformed(initial, result) {
    var tmp$;
    var initialNode = getModule(initial);
    var resultNode = getModule(result);
    log_1.addMessage_cte53e$(verifyAllPartsHasBeenTransformed$lambda(initialNode, resultNode), MessageType$TECHNICAL_getInstance());
    if (equals(initialNode.value, '/') && equals(resultNode.value, '/')) {
      log_1.addMessage_cte53e$(verifyAllPartsHasBeenTransformed$lambda_0(initialNode, resultNode), MessageType$TECHNICAL_getInstance());
      return false;
    }
    if (equals(resultNode.value, '+') || equals(resultNode.value, '*')) {
      var nodesShouldBeTransformed = getTermsOrMultipliers(initialNode);
      var actualNodes = getTermsOrMultipliers(resultNode);
      tmp$ = nodesShouldBeTransformed.iterator();
      loop_label: while (tmp$.hasNext()) {
        var node = tmp$.next();
        var any$result;
        any$break: do {
          var tmp$_0;
          if (Kotlin.isType(actualNodes, Collection) && actualNodes.isEmpty()) {
            any$result = false;
            break any$break;
          }
          tmp$_0 = actualNodes.iterator();
          while (tmp$_0.hasNext()) {
            var element = tmp$_0.next();
            if (equals(getModule(element).identifier, getModule(node).identifier)) {
              any$result = true;
              break any$break;
            }
          }
          any$result = false;
        }
         while (false);
        if (any$result) {
          log_1.addMessage_cte53e$(verifyAllPartsHasBeenTransformed$lambda_1(node), MessageType$TECHNICAL_getInstance());
          return false;
        }
      }
    }
     else if (equals(initialNode.value, '/')) {
      var initialNominator = initialNode.children.get_za3lpa$(0);
      var initialDenominator = initialNode.children.get_za3lpa$(1);
      if (equals(resultNode.value, '/')) {
        var resultNominator = resultNode.children.get_za3lpa$(0);
        var resultDenominator = resultNode.children.get_za3lpa$(1);
        var isValidationFailed = equals(getModule(initialNominator).identifier, getModule(resultNominator).identifier) || equals(getModule(initialDenominator).identifier, getModule(resultDenominator).identifier);
        if (isValidationFailed) {
          log_1.addMessage_cte53e$(verifyAllPartsHasBeenTransformed$lambda_2(initialNode, resultNode), MessageType$TECHNICAL_getInstance());
        }
        return isValidationFailed;
      }
    }
    if (equals(initialNode.identifier, resultNode.identifier)) {
      log_1.addMessage_cte53e$(verifyAllPartsHasBeenTransformed$lambda_3(initialNode, resultNode), MessageType$TECHNICAL_getInstance());
      return false;
    }
    return true;
  }
  function getTermsOrMultipliers(root) {
    if (equals(root.value, '*') || equals(root.value, '+')) {
      return root.children;
    }
    return mutableListOf([root]);
  }
  function validateTask$lambda(closure$warningMessage) {
    return function () {
      return closure$warningMessage.toString();
    };
  }
  function validateTask(resultTask, taskStart, expressionComparator) {
    var initialExpression = taskStart.expressionNode;
    var resultExpression = resultTask.currentExpression;
    var isValid = expressionComparator.fastProbabilityCheckOnIncorrectTransformation_41dun6$(initialExpression, resultExpression);
    if (!isValid) {
      var warningMessage = (new StringBuilder('Generated task is not equal to initial! \n')).append_gw00v9$('Initial: ' + initialExpression.identifier + ' ' + '\n').append_gw00v9$('Result: ' + resultExpression.identifier);
      log_1.addMessage_cte53e$(validateTask$lambda(warningMessage), MessageType$TECHNICAL_getInstance());
      return false;
    }
    return true;
  }
  function applySimplePostprocessorRules(task, postprocessSubstitutions, expressionComparator, stepId) {
    var tmp$, tmp$_0, tmp$_1;
    var currentTask = task.clone();
    var possibleSubstitutions = findPossibleSubstitutions(currentTask, postprocessSubstitutions, expressionComparator);
    while (!possibleSubstitutions.isEmpty()) {
      tmp$ = postprocessSubstitutions.iterator();
      while (tmp$.hasNext()) {
        var substitution = tmp$.next();
        var newTask = currentTask.clone();
        var places = substitution.findAllPossibleSubstitutionPlaces_i8kf4x$(newTask.currentExpression, expressionComparator);
        if (places.size === 0) {
          continue;
        }
         else {
          var changedExpression = newTask.currentExpression.clone();
          newTask.previousExpressions.add_11rb$(newTask.currentExpression.clone());
          newTask.usedSubstitutions.add_11rb$(substitution);
          var bitMask = (1 << places.size) - 1 | 0;
          var changedNodeIds = substitution.applySubstitutionByBitMask_uet8du$(places, bitMask);
          var $receiver = newTask.expressionTaskIntermediateData.appliedPostprocessSubstitutions;
          var key = substitution.code;
          $receiver.put_xwzc9p$(key, stepId);
          newTask.solutionsStepTree.add_11rb$(new SolutionsStepITR(changedExpression.toString(), substitution, changedNodeIds, stepId, (tmp$_1 = (tmp$_0 = lastOrNull(newTask.solutionsStepTree)) != null ? tmp$_0.stepId : null) != null ? tmp$_1 : -1));
        }
        currentTask = newTask;
      }
      possibleSubstitutions = findPossibleSubstitutions(currentTask, postprocessSubstitutions, expressionComparator);
    }
    currentTask.expressionTaskIntermediateData.expressionBeforePostprocessPhase1 = task.currentExpression.clone();
    return currentTask;
  }
  function applySophisticatedPostprocessorRules(task, compiledConfiguration, stepId) {
    var prevTask = task;
    var newTask = dragDescendantsUpper(task, '+', compiledConfiguration);
    logTransformation(prevTask, newTask, 'dragTheDescendantsOfPlusUpper', stepId);
    prevTask = newTask;
    newTask = dragDescendantsUpper(newTask, '*', compiledConfiguration);
    logTransformation(prevTask, newTask, 'dragTheDescendantsOfMultiplicationUpper', stepId);
    prevTask = newTask;
    newTask = reduceTerms(newTask, compiledConfiguration.factComparator.expressionComparator);
    logTransformation(prevTask, newTask, 'reduceTerms', stepId);
    prevTask = newTask;
    newTask = getRidOfMultilayerFractions(newTask, compiledConfiguration);
    logTransformation(prevTask, newTask, 'getRidOfMultilayerFractions', stepId);
    prevTask = newTask;
    newTask = reduceFractions(newTask);
    logTransformation(prevTask, newTask, 'reduceFractions', stepId);
    prevTask = newTask;
    newTask = dragConstantsToTheLeft(newTask);
    logTransformation(prevTask, newTask, 'dragConstantsToTheLeft', stepId);
    prevTask = newTask;
    newTask = getRidOfDuplicatedNodes(newTask, compiledConfiguration);
    logTransformation(prevTask, newTask, 'getRidOfDuplicatedNodes', stepId);
    prevTask = newTask;
    newTask = getRidOfLongFractionIfNeeded(newTask, compiledConfiguration);
    logTransformation(prevTask, newTask, 'getRidOfLongFractionIfNeeded', stepId);
    prevTask = newTask;
    newTask = performComputationIfNeeded(newTask, compiledConfiguration);
    logTransformation(prevTask, newTask, 'performComputationIfNeeded', stepId);
    return newTask;
  }
  function postprocess$lambda() {
    return 'WARNING: endless cycle';
  }
  function postprocess$lambda_0(closure$prevTask) {
    return function () {
      return 'Prev task: ' + closure$prevTask.v.currentExpression.computeIdentifier_5osufp$();
    };
  }
  function postprocess$lambda_1(closure$postprocessedTask) {
    return function () {
      return 'Postprocessed task: ' + closure$postprocessedTask.v.currentExpression.computeIdentifier_5osufp$();
    };
  }
  function postprocess(task, postprocessSubstitutions, compiledConfiguration, stepId) {
    var prevTask = {v: null};
    var postprocessedTask = {v: task};
    var iterationsCount = 0;
    do {
      prevTask.v = postprocessedTask.v;
      postprocessedTask.v = applySophisticatedPostprocessorRules(prevTask.v, compiledConfiguration, stepId);
      postprocessedTask.v = applySimplePostprocessorRules(postprocessedTask.v, postprocessSubstitutions, compiledConfiguration.factComparator.expressionComparator, stepId);
      iterationsCount = iterationsCount + 1 | 0;
      if (iterationsCount > 50) {
        log_1.addMessage_cte53e$(postprocess$lambda, MessageType$TECHNICAL_getInstance());
        log_1.addMessage_cte53e$(postprocess$lambda_0(prevTask), MessageType$TECHNICAL_getInstance());
        log_1.addMessage_cte53e$(postprocess$lambda_1(postprocessedTask), MessageType$TECHNICAL_getInstance());
        return postprocessedTask.v;
      }
    }
     while (!equals(prevTask.v.currentExpression.identifier, postprocessedTask.v.currentExpression.identifier));
    return postprocessedTask.v;
  }
  function performComputationIfNeeded(task, compiledConfiguration) {
    var normalizedTask = task.clone();
    traverseAndPerformComputation(normalizedTask.currentExpression, compiledConfiguration);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    return normalizedTask;
  }
  function traverseAndPerformComputation(inputNode, compiledConfiguration) {
    var tmp$;
    var node = inputNode;
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '+')) {
      node = makeComputation(node, '+');
    }
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '*')) {
      node = makeComputation(node, '*');
    }
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      traverseAndPerformComputation(child, compiledConfiguration);
    }
  }
  function retrieveNumbers(nodes) {
    var destination = ArrayList_init_0(collectionSizeOrDefault(nodes, 10));
    var tmp$;
    tmp$ = nodes.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(computeExponentIfNeeded(item));
    }
    var destination_0 = ArrayList_init();
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      if (element.isIntNumber() || (equals(element.value, '-') && element.children.size === 1 && element.children.get_za3lpa$(0).isIntNumber()))
        destination_0.add_11rb$(element);
    }
    return toMutableList(destination_0);
  }
  function findGCD(a, b) {
    var a_0 = abs(a);
    var b_0 = abs(b);
    var n1 = Math_0.max(a_0, b_0);
    var a_1 = abs(a);
    var b_1 = abs(b);
    var n2 = Math_0.min(a_1, b_1);
    while (n1 !== n2) {
      if (n1 > n2)
        n1 = n1 - n2 | 0;
      else
        n2 = n2 - n1 | 0;
    }
    return n1;
  }
  function computeSum(numbers) {
    var destination = ArrayList_init_0(collectionSizeOrDefault(numbers, 10));
    var tmp$;
    tmp$ = numbers.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var transform$result;
      if (equals(item.value, '-')) {
        transform$result = -toInt(item.children.get_za3lpa$(0).value) | 0;
      }
       else {
        transform$result = toInt(item.value);
      }
      tmp$_0.call(destination, transform$result);
    }
    var iterator = destination.iterator();
    if (!iterator.hasNext())
      throw UnsupportedOperationException_init("Empty collection can't be reduced.");
    var accumulator = iterator.next();
    while (iterator.hasNext()) {
      accumulator = accumulator + iterator.next() | 0;
    }
    return accumulator;
  }
  function computeProd(numbers) {
    var destination = ArrayList_init_0(collectionSizeOrDefault(numbers, 10));
    var tmp$;
    tmp$ = numbers.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var transform$result;
      if (equals(item.value, '-')) {
        transform$result = -toInt(item.children.get_za3lpa$(0).value) | 0;
      }
       else {
        transform$result = toInt(item.value);
      }
      tmp$_0.call(destination, transform$result);
    }
    var iterator = destination.iterator();
    if (!iterator.hasNext())
      throw UnsupportedOperationException_init("Empty collection can't be reduced.");
    var accumulator = iterator.next();
    while (iterator.hasNext()) {
      accumulator = Kotlin.imul(accumulator, iterator.next());
    }
    return accumulator;
  }
  function makeComputation(node, operation) {
    var terms = node.children;
    var numbers = retrieveNumbers(terms);
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = terms.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (!numbers.contains_11rb$(element))
        destination.add_11rb$(element);
    }
    var notNumbers = destination;
    if (numbers.size > 1) {
      switch (operation) {
        case '+':
          var sum = computeSum(numbers);
          var sumNode = ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(sum, node);
          node.children = mutableListOf([sumNode]);
          node.children.addAll_brywnq$(notNumbers);
          break;
        case '*':
          var prod = computeProd(numbers);
          var prodNode = ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(prod, node);
          node.children = mutableListOf([prodNode]);
          node.children.addAll_brywnq$(notNumbers);
          break;
      }
    }
    if (node.children.size === 1) {
      return node.children.get_za3lpa$(0);
    }
    return node;
  }
  function computeExponentIfNeeded(node) {
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '^') && node.children.get_za3lpa$(0).isIntNumber() && node.children.get_za3lpa$(1).isIntNumber()) {
      var base = toInt(node.children.get_za3lpa$(0).value);
      var degree = toInt(node.children.get_za3lpa$(1).value);
      var result = powInt(base, degree);
      return ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(result, node);
    }
    return node;
  }
  function powInt(base, degree) {
    return numberToInt(Math_0.pow(base, degree));
  }
  function traverseAndGetRidOfLongFractionIfNeeded(node, compiledConfiguration) {
    var tmp$;
    var updatedChildren = ArrayList_init();
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var updatedChild = traverseAndGetRidOfLongFractionIfNeeded(child, compiledConfiguration);
      updatedChildren.add_11rb$(updatedChild);
      updatedChild.parent = node;
    }
    node.children = updatedChildren;
    return getRidOfLongFraction(node, compiledConfiguration);
  }
  function getRidOfLongFraction(node, compiledConfiguration, nominatorToDenominatorRatioMax) {
    if (nominatorToDenominatorRatioMax === void 0)
      nominatorToDenominatorRatioMax = 20.0;
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '/')) {
      var ratio = node.children.get_za3lpa$(0).identifier.length / node.children.get_za3lpa$(1).identifier.length | 0;
      if (ratio > nominatorToDenominatorRatioMax) {
        var nominator = node.children.get_za3lpa$(0);
        var denominator = node.children.get_za3lpa$(1);
        var one = ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(1);
        var oneDividedByDenominator = ExpressionNodeBuilder$Companion_getInstance().buildNodeFromDividendAndDivisor_19bx18$(one, denominator, compiledConfiguration);
        return ExpressionNodeBuilder$Companion_getInstance().buildNodeFromMultipliers_n3gvqs$(listOf_0([oneDividedByDenominator, nominator]), compiledConfiguration);
      }
    }
    return node;
  }
  function logTransformation(prevTask, newTask, transformationName, stepId) {
    var tmp$, tmp$_0;
    if (!equals(prevTask.currentExpression.identifier, newTask.currentExpression.identifier)) {
      var substitution = new ExpressionSubstitution(prevTask.currentExpression, newTask.currentExpression, void 0, void 0, transformationName);
      var $receiver = newTask.expressionTaskIntermediateData.appliedPostprocessSubstitutions;
      var key = substitution.code;
      $receiver.put_xwzc9p$(key, stepId);
      newTask.solutionsStepTree.add_11rb$(new SolutionsStepITR(newTask.currentExpression.toString(), substitution, ArrayList_init(), stepId, (tmp$_0 = (tmp$ = lastOrNull(newTask.solutionsStepTree)) != null ? tmp$.stepId : null) != null ? tmp$_0 : -1));
      newTask.previousExpressions.add_11rb$(newTask.currentExpression.clone());
    }
  }
  function getRidOfDuplicatedNodes(task, compiledConfiguration) {
    var normalizedTask = task.clone();
    normalizedTask.currentExpression = traverseAndGetRidOfDuplicatedTerms(normalizedTask.currentExpression, compiledConfiguration);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    normalizedTask = normalizedTask.clone();
    normalizedTask.currentExpression = traverseAndGetRidOfDuplicatedMultipliers(normalizedTask.currentExpression, compiledConfiguration);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    return normalizedTask;
  }
  function traverseAndGetRidOfDuplicatedTerms(node, compiledConfiguration) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      traverseAndGetRidOfDuplicatedTerms(child, compiledConfiguration);
    }
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '+')) {
      var $receiver = node.children;
      var destination = LinkedHashMap_init_0();
      var tmp$_2;
      tmp$_2 = $receiver.iterator();
      while (tmp$_2.hasNext()) {
        var element = tmp$_2.next();
        var key = getKeyPartForTerm(element, compiledConfiguration).computeIdentifier_5osufp$();
        var tmp$_0_0;
        var value = destination.get_11rb$(key);
        if (value == null) {
          var answer = ArrayList_init();
          destination.put_xwzc9p$(key, answer);
          tmp$_0_0 = answer;
        }
         else {
          tmp$_0_0 = value;
        }
        var list = tmp$_0_0;
        list.add_11rb$(element);
      }
      var nodesMap = destination;
      var all$result;
      all$break: do {
        var tmp$_3;
        if (nodesMap.isEmpty()) {
          all$result = true;
          break all$break;
        }
        tmp$_3 = nodesMap.entries.iterator();
        while (tmp$_3.hasNext()) {
          var element_0 = tmp$_3.next();
          if (!(element_0.value.size <= 1)) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      if (all$result) {
        return node;
      }
      var result = ArrayList_init();
      tmp$_0 = nodesMap.entries.iterator();
      while (tmp$_0.hasNext()) {
        var tmp$_4 = tmp$_0.next();
        var id = tmp$_4.key;
        var nodes = tmp$_4.value;
        var destination_0 = ArrayList_init_0(collectionSizeOrDefault(nodes, 10));
        var tmp$_5;
        tmp$_5 = nodes.iterator();
        while (tmp$_5.hasNext()) {
          var item = tmp$_5.next();
          destination_0.add_11rb$(getCountForTerm(item));
        }
        var iterator = destination_0.iterator();
        if (!iterator.hasNext())
          throw UnsupportedOperationException_init("Empty collection can't be reduced.");
        var accumulator = iterator.next();
        while (iterator.hasNext()) {
          accumulator = accumulator + iterator.next() | 0;
        }
        var count = accumulator;
        if (count === 1) {
          result.add_11rb$(nodes.get_za3lpa$(0));
        }
         else {
          var counterNode = ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(count);
          var idNode = structureStringToExpression(id);
          var resultNode = idNode.children.size > 0 ? idNode.children.get_za3lpa$(0) : idNode;
          result.add_11rb$(ExpressionNodeBuilder$Companion_getInstance().buildNodeFromMultipliers_n3gvqs$(mutableListOf([counterNode, resultNode]), compiledConfiguration));
        }
      }
      if (result.size === 1) {
        var updatedNode = result.get_za3lpa$(0);
        node.children = updatedNode.children;
        node.value = updatedNode.value;
        node.identifier = updatedNode.identifier;
        tmp$_1 = updatedNode.children.iterator();
        while (tmp$_1.hasNext()) {
          var child_0 = tmp$_1.next();
          child_0.parent = node;
        }
      }
       else {
        node.children = result;
      }
    }
    return node;
  }
  function traverseAndGetRidOfDuplicatedMultipliers(node, compiledConfiguration) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      traverseAndGetRidOfDuplicatedMultipliers(child, compiledConfiguration);
    }
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '*')) {
      var $receiver = node.children;
      var destination = LinkedHashMap_init_0();
      var tmp$_2;
      tmp$_2 = $receiver.iterator();
      while (tmp$_2.hasNext()) {
        var element = tmp$_2.next();
        var key = getKeyPartForMultiplier(element).identifier;
        var tmp$_0_0;
        var value = destination.get_11rb$(key);
        if (value == null) {
          var answer = ArrayList_init();
          destination.put_xwzc9p$(key, answer);
          tmp$_0_0 = answer;
        }
         else {
          tmp$_0_0 = value;
        }
        var list = tmp$_0_0;
        list.add_11rb$(element);
      }
      var nodesMap = destination;
      var all$result;
      all$break: do {
        var tmp$_3;
        if (nodesMap.isEmpty()) {
          all$result = true;
          break all$break;
        }
        tmp$_3 = nodesMap.entries.iterator();
        while (tmp$_3.hasNext()) {
          var element_0 = tmp$_3.next();
          if (!(element_0.value.size <= 1)) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      if (all$result) {
        return node;
      }
      var result = ArrayList_init();
      tmp$_0 = nodesMap.entries.iterator();
      loop_label: while (tmp$_0.hasNext()) {
        var tmp$_4 = tmp$_0.next();
        var id = tmp$_4.key;
        var nodes = tmp$_4.value;
        var all$result_0;
        all$break: do {
          var tmp$_5;
          if (Kotlin.isType(nodes, Collection) && nodes.isEmpty()) {
            all$result_0 = true;
            break all$break;
          }
          tmp$_5 = nodes.iterator();
          while (tmp$_5.hasNext()) {
            var element_1 = tmp$_5.next();
            if (!element_1.isConstant()) {
              all$result_0 = false;
              break all$break;
            }
          }
          all$result_0 = true;
        }
         while (false);
        if (all$result_0) {
          result.addAll_brywnq$(nodes);
          continue loop_label;
        }
        var destination_0 = ArrayList_init_0(collectionSizeOrDefault(nodes, 10));
        var tmp$_6;
        tmp$_6 = nodes.iterator();
        while (tmp$_6.hasNext()) {
          var item = tmp$_6.next();
          destination_0.add_11rb$(getCountForMultiplier(item));
        }
        var iterator = destination_0.iterator();
        if (!iterator.hasNext())
          throw UnsupportedOperationException_init("Empty collection can't be reduced.");
        var accumulator = iterator.next();
        while (iterator.hasNext()) {
          accumulator = accumulator + iterator.next() | 0;
        }
        var degree = accumulator;
        if (degree === 1) {
          result.add_11rb$(nodes.get_za3lpa$(0));
        }
         else {
          var degreeExponent = ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(degree);
          var idNode = structureStringToExpression(id);
          var degreeBase = idNode.children.size > 0 ? idNode.children.get_za3lpa$(0) : idNode;
          var exp = compiledConfiguration.createExpressionFunctionNode_twmih4$('^', -1, listOf_0([degreeBase, degreeExponent]));
          result.add_11rb$(exp);
        }
      }
      if (result.size === 1) {
        var updatedNode = result.get_za3lpa$(0);
        node.children = updatedNode.children;
        node.value = updatedNode.value;
        node.identifier = updatedNode.identifier;
        tmp$_1 = updatedNode.children.iterator();
        while (tmp$_1.hasNext()) {
          var child_0 = tmp$_1.next();
          child_0.parent = node;
        }
      }
       else {
        node.children = result;
      }
    }
    return node;
  }
  function getCountForTerm(node) {
    var numbers = retrieveNumbers(node.children);
    if (numbers.isEmpty()) {
      return 1;
    }
    return computeProd(numbers);
  }
  function getCountForMultiplier(node) {
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '^')) {
      return computeSum(listOf(node.children.get_za3lpa$(1)));
    }
    return 1;
  }
  function getKeyPartForTerm(node, compiledConfiguration) {
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '*')) {
      var numbers = retrieveNumbers(node.children);
      var $receiver = node.children;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!numbers.contains_11rb$(element))
          destination.add_11rb$(element);
      }
      var notNumbers = destination;
      if (notNumbers.size === 1) {
        return notNumbers.get_za3lpa$(0);
      }
      return ExpressionNodeBuilder$Companion_getInstance().buildNodeFromMultipliers_n3gvqs$(notNumbers, compiledConfiguration);
    }
    return node;
  }
  function getKeyPartForMultiplier(node) {
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '^')) {
      return node.children.get_za3lpa$(0);
    }
    return node;
  }
  function getRidOfMultilayerFractions(task, compiledConfiguration) {
    var normalizedTask = task.clone();
    normalizedTask.currentExpression = traverseAndLayFractions(normalizedTask.currentExpression, compiledConfiguration);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    return normalizedTask;
  }
  function traverseAndLayFractions(node, compiledConfiguration) {
    var tmp$;
    var updatedChildren = ArrayList_init();
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var updatedChild = traverseAndLayFractions(child, compiledConfiguration);
      updatedChildren.add_11rb$(updatedChild);
      updatedChild.parent = node;
    }
    node.children = updatedChildren;
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '/')) {
      var nominatorNodes = ArrayList_init();
      var denominatorNodes = ArrayList_init();
      layFractionRecursively(node, nominatorNodes, denominatorNodes);
      return ExpressionNodeBuilder$Companion_getInstance().buildNodeFromDividendAndDivisor_19bx18$(ExpressionNodeBuilder$Companion_getInstance().buildNodeFromMultipliers_n3gvqs$(nominatorNodes, compiledConfiguration), ExpressionNodeBuilder$Companion_getInstance().buildNodeFromMultipliers_n3gvqs$(denominatorNodes, compiledConfiguration), compiledConfiguration);
    }
    return node;
  }
  function layFractionRecursively(node, nominatorNodes, denominatorNodes, isInsideNominator) {
    if (isInsideNominator === void 0)
      isInsideNominator = true;
    var tmp$;
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '/')) {
      var children = node.children;
      layFractionRecursively(children.get_za3lpa$(0), nominatorNodes, denominatorNodes, isInsideNominator);
      layFractionRecursively(children.get_za3lpa$(1), nominatorNodes, denominatorNodes, !isInsideNominator);
    }
     else if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '*')) {
      tmp$ = node.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        layFractionRecursively(child, nominatorNodes, denominatorNodes, isInsideNominator);
      }
    }
     else {
      if (isInsideNominator) {
        nominatorNodes.add_11rb$(node);
      }
       else {
        denominatorNodes.add_11rb$(node);
      }
    }
  }
  function dragDescendantsUpper(task, operation, compiledConfiguration) {
    var normalizedTask = task.clone();
    normalizedTask.currentExpression = traverseAndDragDescendantsUpper(normalizedTask.currentExpression, operation, compiledConfiguration);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    return normalizedTask;
  }
  function traverseAndDragDescendantsUpper(node, operation, compiledConfiguration) {
    var tmp$;
    var updatedChildren = ArrayList_init();
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      var updatedChild = traverseAndDragDescendantsUpper(child, operation, compiledConfiguration);
      updatedChildren.add_11rb$(updatedChild);
      updatedChild.parent = node;
    }
    node.children = updatedChildren;
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, operation)) {
      var nodes = ArrayList_init();
      collectNodesRecursively(node, operation, nodes);
      if (equals(operation, '+')) {
        return ExpressionNodeBuilder$Companion_getInstance().buildNodeFromTerms_seplnl$(nodes, compiledConfiguration);
      }
       else if (equals(operation, '*')) {
        return ExpressionNodeBuilder$Companion_getInstance().buildNodeFromMultipliers_n3gvqs$(nodes, compiledConfiguration);
      }
    }
    return node;
  }
  function collectNodesRecursively(node, operation, nodes) {
    var tmp$;
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, operation)) {
      tmp$ = node.children.iterator();
      while (tmp$.hasNext()) {
        var child = tmp$.next();
        collectNodesRecursively(child, operation, nodes);
      }
    }
     else {
      nodes.add_11rb$(node);
    }
  }
  function dragConstantsToTheLeft(task) {
    var normalizedTask = task.clone();
    traverseAndSortChildrenAscendingByIdentifier(normalizedTask.currentExpression);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    return normalizedTask;
  }
  function getRidOfLongFractionIfNeeded(task, compiledConfiguration) {
    var normalizedTask = task.clone();
    normalizedTask.currentExpression = traverseAndGetRidOfLongFractionIfNeeded(normalizedTask.currentExpression, compiledConfiguration);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    return normalizedTask;
  }
  function traverseAndSortChildrenAscendingByIdentifier$lambda(it) {
    return !it.isConstant();
  }
  function traverseAndSortChildrenAscendingByIdentifier$lambda_0(it) {
    return getModule(it).identifier.length;
  }
  function traverseAndSortChildrenAscendingByIdentifier$lambda_1(it) {
    return it.identifier;
  }
  function traverseAndSortChildrenAscendingByIdentifier(node) {
    var tmp$;
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      traverseAndSortChildrenAscendingByIdentifier(child);
    }
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '*')) {
      sortWith(node.children, compareBy([traverseAndSortChildrenAscendingByIdentifier$lambda, traverseAndSortChildrenAscendingByIdentifier$lambda_0, traverseAndSortChildrenAscendingByIdentifier$lambda_1]));
    }
  }
  function reduceFractions(task) {
    var normalizedTask = task.clone();
    traverseAndReduceFractions(normalizedTask.currentExpression);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    return normalizedTask;
  }
  function traverseAndReduceFractions(node) {
    var tmp$;
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      traverseAndReduceFractions(child);
    }
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '/')) {
      var nominatorNodes = getMultipliers(node.children.get_za3lpa$(0));
      var denominatorNodes = getMultipliers(node.children.get_za3lpa$(1));
      var nominatorNodesAfterReduce = makeReduce(nominatorNodes, denominatorNodes);
      var denominatorNodesAfterReduce = makeReduce(denominatorNodes, nominatorNodes);
      reduceIntegersInFraction(node, nominatorNodesAfterReduce, denominatorNodesAfterReduce);
      if (nominatorNodesAfterReduce.isEmpty()) {
        node.children.set_wxm5ur$(0, ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(1, node));
      }
       else if (nominatorNodesAfterReduce.size === 1) {
        node.children.set_wxm5ur$(0, nominatorNodesAfterReduce.get_za3lpa$(0));
      }
       else {
        node.children.get_za3lpa$(0).children = nominatorNodesAfterReduce;
      }
      if (denominatorNodesAfterReduce.isEmpty()) {
        node.children.set_wxm5ur$(1, ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(1, node));
      }
       else if (denominatorNodesAfterReduce.size === 1) {
        node.children.set_wxm5ur$(1, denominatorNodesAfterReduce.get_za3lpa$(0));
      }
       else {
        node.children.get_za3lpa$(1).children = denominatorNodesAfterReduce;
      }
    }
  }
  function reduceIntegersInFraction(parentNode, nominatorNodes, denominatorNodes) {
    var numbersInNominator = retrieveNumbers(nominatorNodes);
    var numbersInDenominator = retrieveNumbers(denominatorNodes);
    if (numbersInNominator.isEmpty() || numbersInDenominator.isEmpty()) {
      return;
    }
    var nominatorProd = computeProd(numbersInNominator);
    if (nominatorProd === 0) {
      return;
    }
    var denominatorProd = computeProd(numbersInDenominator);
    var gcd = findGCD(nominatorProd, denominatorProd);
    var nominatorResult = nominatorProd / gcd | 0;
    var denominatorResult = denominatorProd / gcd | 0;
    nominatorNodes.removeAll_brywnq$(numbersInNominator);
    denominatorNodes.removeAll_brywnq$(numbersInDenominator);
    nominatorNodes.add_wxm5ur$(0, ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(nominatorResult, parentNode));
    denominatorNodes.add_wxm5ur$(0, ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(denominatorResult, parentNode));
  }
  function makeReduce(nodesToReduce, nodesMustNotBeInResult) {
    var tmp$;
    var result = ArrayList_init();
    tmp$ = nodesToReduce.iterator();
    loop_label: while (tmp$.hasNext()) {
      var node = tmp$.next();
      if (equals(node.value, '1') || equals(node.value, '(1)')) {
        continue loop_label;
      }
      var none$result;
      none$break: do {
        var tmp$_0;
        if (Kotlin.isType(nodesMustNotBeInResult, Collection) && nodesMustNotBeInResult.isEmpty()) {
          none$result = true;
          break none$break;
        }
        tmp$_0 = nodesMustNotBeInResult.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (equals(element.identifier, node.identifier)) {
            none$result = false;
            break none$break;
          }
        }
        none$result = true;
      }
       while (false);
      if (none$result) {
        result.add_11rb$(node);
      }
    }
    return result;
  }
  function getMultipliers(node) {
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '*')) {
      return node.children;
    }
    return mutableListOf([node]);
  }
  function reduceTerms(task, expressionComparator) {
    var normalizedTask = task.clone();
    traverseAndReduceTerms(normalizedTask.currentExpression, expressionComparator);
    normalizedTask.currentExpression.identifier = normalizedTask.currentExpression.toString();
    return normalizedTask;
  }
  function traverseAndReduceTerms(node, expressionComparator) {
    var tmp$;
    tmp$ = node.children.iterator();
    while (tmp$.hasNext()) {
      var child = tmp$.next();
      traverseAndReduceTerms(child, expressionComparator);
    }
    if (node.nodeType === NodeType$FUNCTION_getInstance() && equals(node.value, '+')) {
      var $receiver = node.children;
      var destination = ArrayList_init();
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (!equals(element.value, '0') && !equals(element.value, '(0)'))
          destination.add_11rb$(element);
      }
      var remainingNodes = toMutableList(destination);
      while (true) {
        var nodesAfterReduce = makeSingleReduce(remainingNodes);
        if (remainingNodes.size === nodesAfterReduce.size) {
          remainingNodes = nodesAfterReduce;
          break;
        }
        remainingNodes = nodesAfterReduce;
      }
      if (remainingNodes.isEmpty()) {
        remainingNodes.add_11rb$(ExpressionNodeBuilder$Companion_getInstance().buildNodeFromConstant_73ahh6$(0, node));
      }
      node.children = remainingNodes;
    }
  }
  function makeSingleReduce(nodesToReduce) {
    var tmp$;
    var nodes = toMutableList(nodesToReduce);
    tmp$ = nodes.iterator();
    while (tmp$.hasNext()) {
      var node = tmp$.next();
      var oppositeNode = getOppositeNode(nodes, node);
      if (oppositeNode != null) {
        var $receiver = nodes;
        var destination = ArrayList_init();
        var tmp$_0;
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (!(element != null ? element.equals(node) : null) && !equals(element, oppositeNode))
            destination.add_11rb$(element);
        }
        nodes = toMutableList(destination);
        return nodes;
      }
    }
    return nodesToReduce;
  }
  function getOppositeNode(allNodes, nodeToCheck) {
    var tmp$;
    tmp$ = allNodes.iterator();
    while (tmp$.hasNext()) {
      var node = tmp$.next();
      if (hasDifferentSign(node, nodeToCheck) && areEqualByModule(node, nodeToCheck)) {
        return node;
      }
    }
    return null;
  }
  function hasDifferentSign(term1, term2) {
    return patternStartWithUnaryMinus(term1) !== patternStartWithUnaryMinus(term2);
  }
  function areEqualByModule(term1, term2) {
    var moduleOfTerm1 = getModule(term1);
    var moduleOfTerm2 = getModule(term2);
    return equals(moduleOfTerm1.identifier, moduleOfTerm2.identifier);
  }
  function getModule(node) {
    var currentNode = node;
    while ((equals(currentNode.value, '') || equals(currentNode.value, '+') || equals(currentNode.value, '-')) && currentNode.children.size === 1) {
      currentNode = currentNode.children.get_za3lpa$(0);
    }
    return currentNode;
  }
  function containsTrigonometricFunction($receiver) {
    return $receiver.containsFunctionBesides_ywdfdh$(ExpressionComparator$Companion_getInstance().trigonometricAutoCheckingFunctionsSet);
  }
  function containsTrigonometricFunctionInResult($receiver) {
    return containsTrigonometricFunction($receiver.right);
  }
  function containsTrigonometricFunctionInResult_0($receiver) {
    return containsTrigonometricFunction($receiver.expressionSubstitution.right);
  }
  function insideExponent($receiver, expressionComparator) {
    var parent = $receiver.parent;
    var prev = $receiver;
    while (parent != null) {
      if (parent.nodeType === NodeType$FUNCTION_getInstance() && equals(parent.value, '^') && !expressionComparator.compareAsIs_5gxvt3$(parent.children.get_za3lpa$(0), prev)) {
        return true;
      }
      prev = parent;
      parent = parent.parent;
    }
    return false;
  }
  function insideTrigonometricFunction($receiver) {
    var p = $receiver.parent;
    while (p != null) {
      if (p.nodeType === NodeType$FUNCTION_getInstance() && ExpressionComparator$Companion_getInstance().trigonometricAutoCheckingFunctionsSet.contains_11rb$(p.value)) {
        return true;
      }
      p = p.parent;
    }
    return false;
  }
  function LogarithmsRulePack() {
    LogarithmsRulePack$Companion_getInstance();
  }
  function LogarithmsRulePack$Companion() {
    LogarithmsRulePack$Companion_instance = this;
    this.extendingFromSingleNumber = listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(1)))', '(log(a;/(1;a)))', 25, true, false, false, false, void 0, void 0, void 0, 2.5), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(log(1;a))', 25, true, false, false, false, void 0, void 0, void 0, 2.7), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(+(log(a;b);-(log(a;b))))', 25, true, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(log(a;a))', 25, true, false, false, false, void 0, void 0, void 0, 2.6), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(^(x;log(a;1)))', 25, true, false, false, false, void 0, void 0, void 0, 2.6), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(2)', '(+(log(a;a);log(b;b)))', 25, true, false, false, false, void 0, void 0, void 0, 2.5), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(2)', '(log(^(a;2);a))', 25, true, false, false, false, void 0, void 0, void 0, 4.75), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(3)', '(log(^(a;3);a))', 25, true, false, false, false, void 0, void 0, void 0, 4.75), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(3)', '(+(log(a;a);log(b;b);log(c;c)))', 25, true, false, false, false, void 0, void 0, void 0, 3.5), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(4)', '(log(^(a;4);a))', 25, true, false, false, false, void 0, void 0, void 0, 5.0)]);
    this.extendingFromSimpleLogarithm = listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;a))', '(/(log(a;b);log(a;b)))', 25, true, false, false, false, void 0, void 0, void 0, 6.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;a))', '(log(*(a;3);*(a;3)))', 25, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;a))', '(log(*(a;2);*(a;2)))', 25, true, false, false, false, void 0, void 0, void 0, 2.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;b))', '(log(*(a;1);b))', 25, true, false, false, false, void 0, void 0, void 0, 2.5), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;b))', '(log(/(a;1);b))', 25, true, false, false, false, void 0, void 0, void 0, 6.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;b))', '(log(^(a;1);b))', 25, true, false, true, false, void 0, void 0, void 0, 6.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;b))', '(log(/(*(a;c);c);b))', 25, true, false, true, false, void 0, void 0, void 0, 1.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;b))', '(+(-(log(/(1;a);b))))', 25, true, false, false, false, void 0, void 0, void 0, 6.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(c;b))', '(/(log(c;a);log(b;a)))', 25, true, false, false, false, void 0, void 0, void 0, 5.0)]);
    this.extendingInLogarithmContext = listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(^(a;2);b))', '(log(+(*(-(a;b);+(a;b));^(b;2));b))', 25, true, false, false, false, void 0, void 0, void 0, 5.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(*(1;a);b))', '(+(log(a;b);0))', 25, true, false, false, false, void 0, void 0, void 0, 2.5), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(*(2;a);b))', '(+(log(a;b);log(a;b)))', 25, true, false, false, false, void 0, void 0, void 0, 2.5), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(/(b;c);a))', '(+(log(b;a);-(log(c;a))))', 25, true, false, false, false, void 0, void 0, void 0, 2.5), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(/(b;c);a))', '(+(log(b;a);-(log(c;a))))', 25, true, false, false, false, void 0, void 0, void 0, 2.5)]);
    this.extendingFromFraction = listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(m;k))', '(log(^(a;k);^(a;m)))', 25, true, false, false, false, void 0, void 0, void 0, 3.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;k))', '(log(^(a;k);a))', 25, true, false, false, false, void 0, void 0, void 0, 3.0)]);
    this.logarithmsRulePack = new RulePackITR('LogarithmExtending', void 0, void 0, 'Logarithm extending rules', '\u0420\u0430\u0441\u0448\u0438\u0440\u044F\u044E\u0449\u0438\u0435 \u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u043D\u0430 \u043B\u043E\u0433\u0430\u0440\u0438\u0444\u043C\u044B', '', '', void 0, void 0, 'standard_math', listOf(new RulePackLinkITR(void 0, 'Logarithm')), plus(plus(plus(this.extendingFromSingleNumber, this.extendingFromSimpleLogarithm), this.extendingInLogarithmContext), this.extendingFromFraction));
  }
  LogarithmsRulePack$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var LogarithmsRulePack$Companion_instance = null;
  function LogarithmsRulePack$Companion_getInstance() {
    if (LogarithmsRulePack$Companion_instance === null) {
      new LogarithmsRulePack$Companion();
    }
    return LogarithmsRulePack$Companion_instance;
  }
  LogarithmsRulePack.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LogarithmsRulePack',
    interfaces: []
  };
  function LogarithmsStandardMathRulePacks() {
    LogarithmsStandardMathRulePacks$Companion_getInstance();
  }
  function LogarithmsStandardMathRulePacks$Companion() {
    LogarithmsStandardMathRulePacks$Companion_instance = this;
    this.defaultStandardMathRulePacks = listOf_0([new RulePackITR('ArithmeticPositiveAddition', void 0, void 0, 'Addition of Positive Numbers', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u0447\u0438\u0441\u0435\u043B', 'Addition of Positive Numbers', '\u041F\u0440\u0430\u0432\u0438\u043B \u0434\u043B\u044F \u0437\u0430\u0434\u0430\u0447 \u043D\u0430 \u0441\u0447\u0435\u0442 \u0434\u043B\u044F \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0449\u0438\u0445', 'Addition of Positive Numbers', '\u041F\u0440\u0430\u0432\u0438\u043B\u0430 \u0434\u043B\u044F \u0437\u0430\u0434\u0430\u0447 \u043D\u0430 \u0441\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435 \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u0447\u0438\u0441\u0435\u043B. \u0421\u043E\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u044B \u0442\u0430\u043A, \u0447\u0442\u043E\u0431\u044B \u043D\u0435 \u0434\u0430\u0442\u044C \u0432\u044B\u0439\u0442\u0438 \u0432 \u043E\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043B\u044C\u043D\u0443\u044E \u043E\u0431\u043B\u0430\u0441\u0442\u044C', 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;b))', '(+(b;a))', 20, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(+(a;0))', 35, true, false, false, false), new RuleITR('SimpleComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('ZeroComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('PositiveNumberPlusMinus1', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 20, false, false, false, false), new RuleITR('ParentBracketsExpansion', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false), new RuleITR('ArgumentsSwap', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('ArgumentsPermutation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('ArgumentsPermutationInOriginalOrder', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 41, false, false, false, false)])), new RulePackITR('ArithmeticAddition', void 0, void 0, 'Addition and Subtraction', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435', 'Arithmetic Addition and Subtraction', '\u0410\u0440\u0438\u0444\u043C\u0435\u0442\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0441\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435', void 0, void 0, 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a))', '(a)', 30, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;b))', '(+(b;a))', 20, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(+(a;0))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(+(-(a)))))', '(a)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(+(-(a))))', '(a)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(-(a)))', '(a)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(+(-(+(-(a)))))', 95, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;-(a)))', '(0)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(a);a))', '(0)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;+(-(a))))', '(0)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(+(-(a));a))', '(0)', 4, false, false, false, false), new RuleITR('SimpleComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('ZeroComputation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 5, false, false, false, false), new RuleITR('NumberPlusMinus1', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 20, false, false, false, false), new RuleITR('MinusInOutBrackets', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 31, false, false, false, false), new RuleITR('ParentBracketsExpansion', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false), new RuleITR('ArgumentsSwap', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('ArgumentsPermutation', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 40, false, false, false, false), new RuleITR('ArgumentsPermutationInOriginalOrder', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 41, false, false, false, false), new RuleITR('AdditiveComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false)])), new RulePackITR('ArithmeticMultiplication', void 0, void 0, 'Addition Subtraction Multiplication', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435 \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435', 'Arithmetic Addition, Subtraction and Multiplication', '\u0410\u0440\u0438\u0444\u043C\u0435\u0442\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0441\u043B\u043E\u0436\u0435\u043D\u0438\u0435, \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435 \u0438 \u0443\u043D\u043E\u0436\u0435\u043D\u0438\u0435', void 0, void 0, 'standard_math', listOf(new RulePackLinkITR(void 0, 'ArithmeticAddition')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;0))', '(0)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(0;a))', '(0)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0)', '(*(a;0))', 35, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;1))', '(a)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(1;a))', '(a)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(*(a;1))', 35, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;b))', '(*(b;a))', 20, true, false, false, false), new RuleITR('OpeningBrackets', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 30, false, false, false, false), new RuleITR('ReduceArithmetic', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false), new RuleITR('TwoSidesArithmeticReduce', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false), new RuleITR('MultiplicationFactorization', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 15, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;a))', '(*(2;a))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;+(a)))', '(*(2;a))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(+(a);a))', '(*(2;a))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(2;a))', '(+(a;a))', 35, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;*(a;n)))', '(*(a;+(n;1)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;+(n;1)))', '(+(a;*(a;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(*(a;n);a))', '(*(a;+(1;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;+(1;n)))', '(+(*(a;n);a))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(*(A;C)))', '(*(+(-(A));C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(-(A);C))', '(+(-(*(A;C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(*(A;C)))', '(*(A;+(-(C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;-(C)))', '(+(-(*(A;C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;-(C)))', '(*(+(-(A));C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(-(A);C))', '(*(A;+(-(C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(*(A;C))))', '(*(+(-(A));C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(-(A));C))', '(+(-(*(A;C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(*(A;C))))', '(*(A;+(-(C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;+(-(C))))', '(+(-(*(A;C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;+(-(C))))', '(*(+(-(A));C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(-(A));C))', '(*(A;+(-(C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(-(A);-(B)))', '(*(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;B))', '(*(+(-(A));+(-(B))))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(-(A));+(-(B))))', '(*(A;B))', 35, false, false, false, false)])), new RulePackITR('ArithmeticDivision', void 0, void 0, 'Rational Numbers', '\u0420\u0430\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0435 \u0447\u0438\u0441\u043B\u0430', 'Addition, Subtraction, Multiplication and Division', '\u0421\u043B\u043E\u0436\u0435\u043D\u0438\u0435, \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435, \u0443\u043D\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0434\u0435\u043B\u0435\u043D\u0438\u0435', void 0, void 0, 'standard_math', listOf(new RulePackLinkITR(void 0, 'ArithmeticMultiplication')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(0;a))', '(0)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;1))', '(a)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;a))', '(1)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(1;a);a))', '(1)', 4, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;/(1;a)))', '(a)', 4, false, true, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(/(1;/(1;a)))', 90, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(0.5)', '(/(1;2))', 15, false, false, true, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;2))', '(0.5)', 5, false, false, true, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;b))', '(/(*(a;b);*(b;b)))', 90, true, false, false, false), new RuleITR('MultiplicativeComplicatingExtension', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 92, false, false, false, false), new RuleITR('ReduceFraction', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 10, false, false, false, false), new RuleITR('DecimalToFraction', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 15, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(/(A;C)))', '(/(+(-(A));C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(-(A);C))', '(+(-(/(A;C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(/(A;C)))', '(/(A;+(-(C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;-(C)))', '(+(-(/(A;C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;-(C)))', '(/(+(-(A));C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(-(A);C))', '(/(A;+(-(C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(/(A;C))))', '(/(+(-(A));C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(-(A));C))', '(+(-(/(A;C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(/(A;C))))', '(/(A;+(-(C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;+(-(C))))', '(+(-(/(A;C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;+(-(C))))', '(/(+(-(A));C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(-(A));C))', '(/(A;+(-(C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(-(A);-(B)))', '(/(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;B))', '(/(+(-(A));+(-(B))))', 80, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(-(A));+(-(B))))', '(/(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(/(B;C);/(A;D)))', '(/(+(*(B;D);*(C;A));*(C;D)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(/(B;C);-(/(A;D))))', '(/(+(*(B;D);-(*(C;A)));*(C;D)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;/(B;A)))', '(B)', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(B;A);A))', '(B)', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;/(B;C)))', '(/(*(A;B);C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(B;C);A))', '(/(*(A;B);C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;B))', '(/(1;/(B;A)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;/(B;A)))', '(/(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(A;B);C))', '(*(A;/(B;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(/(B;C);A))', '(/(B;*(A;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(B;*(A;C)))', '(/(/(B;C);A))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;/(B;C)))', '(/(*(A;C);B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(A;C);B))', '(/(A;/(B;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;*(B;C)))', '(*(/(A;B);/(1;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;*(B;C)))', '(*(/(1;B);/(A;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(A;B);/(1;C)))', '(/(A;*(B;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(1;B);/(A;C)))', '(/(A;*(B;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(D;B);/(A;C)))', '(/(*(D;A);*(B;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(D;A);*(B;C)))', '(*(/(D;B);/(A;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(D;A);*(B;A)))', '(/(D;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(D;A);*(D;C)))', '(/(A;C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(D;A);D))', '(A)', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(*(A;D);D))', '(A)', 35, false, false, false, false)])), new RulePackITR('ArithmeticExponentiation', void 0, void 0, 'Algebraic Numbers', '\u0410\u043B\u0433\u0435\u0431\u0440\u0430\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0447\u0438\u0441\u043B\u0430', 'Pow, Ratio, Product, Difference, Sum', '\u0421\u0442\u0435\u043F\u0435\u043D\u044C, \u0447\u0430\u0441\u0442\u043D\u043E\u0435, \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435, \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C, \u0441\u0443\u043C\u043C\u0430', 'Pow, Division, Multiplication, Subtraction, Addition', '\u0412\u043E\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u0432 \u0441\u0442\u0435\u043F\u0435\u043D\u044C, \u0434\u0435\u043B\u0435\u043D\u0438\u0435, \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435, \u0432\u044B\u0447\u0438\u0442\u0430\u043D\u0438\u0435, \u0441\u043B\u043E\u0436\u0435\u043D\u0438\u0435', 'standard_math', listOf(new RulePackLinkITR(void 0, 'ArithmeticDivision')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(a;1))', 95, true, false, true, false, void 0, void 0, void 0, 0.0), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(^(1;2))', 95, true, false, true, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(1)', '(^(1;3))', 95, true, false, true, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;a))', '(^(a;+(-(1))))', 80, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(-(1))))', '(/(1;a))', 40, false, false, false, false), new RuleITR('PowFactorization', void 0, void 0, void 0, void 0, void 0, void 0, '', '', 15, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(b;-(c))))', '(/(^(a;b);^(a;c)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(a;b);^(a;c)))', '(^(a;+(b;-(c))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(B;^(A;C)))', '(*(B;^(A;+(-(C)))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(B;^(A;+(-(C)))))', '(/(B;^(A;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;^(A;C)))', '(^(A;+(-(C))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;+(-(C))))', '(/(1;^(A;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;B))', '(^(/(B;A);+(-(1))))', 35, true, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(/(B;A);+(-(1))))', '(/(A;B))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;0))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(1;A))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;1))', '(A)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(0;A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;a))', '(^(a;2))', 40, false, false, true, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;2))', '(*(a;a))', 40, false, false, true, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;^(a;n)))', '(^(a;+(n;1)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(n;1)))', '(*(a;^(a;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(^(a;n);a))', '(^(a;+(1;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(1;n)))', '(*(^(a;n);a))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(a;n);a))', '(^(a;+(n;-(1))))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(n;-(1))))', '(/(^(a;n);a))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;*(B;C)))', '(^(^(A;B);C))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(^(A;B);C))', '(^(A;*(B;C)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(/(B;C);A))', '(/(^(B;A);^(C;A)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(^(B;A);^(C;A)))', '(^(/(B;C);A))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(-(A);*(2;n)))', '(^(A;*(2;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(-(A);2))', '(^(A;2))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(-(A));*(2;n)))', '(^(A;*(2;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(-(A));2))', '(^(A;2))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;*(2;n)))', '(^(+(-(a));*(2;n)))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;2))', '(^(+(-(a));2))', 35, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(^(a;b);/(1;b)))', '(a)', 5, false, false, false, false)])), new RulePackITR('ArithmeticPowExtension', void 0, void 0, 'Pow from Root and Root from Pow', '\u0421\u0442\u0435\u043F\u0435\u043D\u044C \u0438\u0437 \u043A\u043E\u0440\u043D\u044F \u0438 \u043A\u043E\u0440\u0435\u043D\u044C \u0438\u0437 \u0441\u0442\u0435\u043F\u0435\u043D\u0438', 'Straight and Reverse Application of Root and Pow', '\u041F\u0440\u044F\u043C\u043E\u0435 \u0438 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u0435 \u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D\u0438\u0435 \u0441\u0442\u0435\u043F\u0435\u043D\u0438 \u0438 \u043A\u043E\u0440\u043D\u044F', 'Moved to separate rule pack because of not full domain', '\u0412\u044B\u043D\u0435\u0441\u0435\u043D\u043E \u0432 \u043E\u0442\u0434\u0435\u043B\u044C\u043D\u044B\u0439 \u043F\u0430\u043A\u0435\u0442 \u043F\u0440\u0430\u0432\u0438\u043B \u0442\u0430\u043A \u043A\u0430\u043A \u043D\u0435 \u0432\u0435\u0437\u0434\u0435 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043E', 'standard_math', listOf(new RulePackLinkITR(void 0, 'ArithmeticExponentiation')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(^(a;2);/(1;2)))', 96, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(^(a;/(1;2));2))', 96, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(^(a;3);/(1;3)))', 96, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(a)', '(^(^(a;/(1;3));3))', 96, false, false, false, false)])), new RulePackITR('ShortMultiplication', void 0, void 0, 'Short Multiplication', '\u0421\u043E\u043A\u0440\u0430\u0449\u0435\u043D\u043D\u043E\u0435 \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u0435', 'Short Multiplication Formulas', '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0441\u043E\u043A\u0440\u0430\u0449\u0435\u043D\u043D\u043E\u0433\u043E \u0443\u043C\u043D\u043E\u0436\u0435\u043D\u0438\u044F', 'Difference of Squares, Square of Sum, Square of Difference, Sum of Cubes, Difference of Cubes, Cube of Sum, Cube of Difference', '\u0420\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u043A\u0432\u0430\u0434\u0440\u0430\u0442\u043E\u0432, \u043A\u0432\u0430\u0434\u0440\u0430\u0442 \u0441\u0443\u043C\u043C\u044B, \u043A\u0432\u0430\u0434\u0440\u0430\u0442 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438, \u0441\u0443\u043C\u043C\u0430 \u043A\u0443\u0431\u043E\u0432, \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u043A\u0443\u0431\u043E\u0432, \u043A\u0443\u0431 \u0441\u0443\u043C\u043C\u044B, \u043A\u0443\u0431 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438', 'standard_math', listOf(new RulePackLinkITR(void 0, 'ArithmeticExponentiation')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);-(^(b;2))))', '(*(+(a;-(b));+(a;b)))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;-(b));+(a;b)))', '(+(^(a;2);-(^(b;2))))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(a;b);2))', '(+(^(a;2);*(2;a;b);^(b;2)))', 25, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);*(2;a;b);^(b;2)))', '(^(+(a;b);2))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);*(2;a);1))', '(^(+(a;1);2))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(a;-(b));2))', '(+(^(a;2);-(*(2;a;b));^(b;2)))', 25, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);-(*(2;a;b));^(b;2)))', '(^(+(a;-(b));2))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;2);-(*(2;a));1))', '(^(+(a;-(1));2))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(a;b);3))', '(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))', 25, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))', '(^(+(a;b);3))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);*(3;^(a;2));*(3;a);1))', '(^(+(a;1);3))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(a;-(b));3))', '(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))', 25, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))', '(^(+(a;-(b));3))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);-(*(3;^(a;2)));*(3;a);-(1)))', '(^(+(a;-(1));3))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);-(^(b;3))))', '(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))', 25, true, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))', '(+(^(a;3);-(^(b;3))))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;-(1));+(^(a;2);a;1)))', '(+(^(a;3);-(^(1;3))))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(^(a;3);^(b;3)))', '(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))', '(+(^(a;3);^(b;3)))', 25, false, true, false, false, 'SORTED'), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(a;1);+(^(a;2);-(a);1)))', '(+(^(a;3);^(1;3)))', 25, false, true, false, false, 'SORTED')])), new RulePackITR('Logarithm', void 0, void 0, 'Logarithm', '\u041B\u043E\u0433\u0430\u0440\u0438\u0444\u043C', 'Basic Properties Without Regard to Domain', '\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F', void 0, void 0, 'standard_math', listOf(new RulePackLinkITR(void 0, 'ShortMultiplication')), listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;log(b;a)))', '(b)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(1;A))', '(0)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(A;A))', '(1)', 5, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(*(b;c);a))', '(+(log(b;a);log(c;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(log(b;a);log(c;a)))', '(log(*(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(*(b;c;d);a))', '(+(log(b;a);log(c;a);log(d;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(log(b;a);log(c;a);log(d;a)))', '(log(*(b;c;d);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(*(b;c;d;e);a))', '(+(log(b;a);log(c;a);log(d;a);log(e;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(log(b;a);log(c;a);log(d;a);log(e;a)))', '(log(*(b;c;d;e);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(/(b;c);a))', '(+(log(b;a);-(log(c;a))))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(log(b;a);-(log(c;a))))', '(log(/(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(^(b;c);a))', '(*(c;log(b;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(c;log(b;a)))', '(log(^(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(log(b;a);c))', '(log(^(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(b;^(a;k)))', '(/(log(b;a);k))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(log(b;a);k))', '(log(b;^(a;k)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;log(b;a)))', '(log(a;b))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(a;b))', '(/(1;log(b;a)))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(log(c;a);log(b;a)))', '(log(c;b))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(/(b;c);a))', '(+(-(log(/(c;b);a))))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(log(/(c;b);a))))', '(log(/(b;c);a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(b;a))', '(+(-(log(/(1;b);a))))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(log(/(1;b);a))))', '(log(b;a))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(log(/(1;b);a))', '(+(-(log(b;a))))', 25, false, false, false, false), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(log(b;a))))', '(log(/(1;b);a))', 25, false, false, false, false)]))]);
  }
  LogarithmsStandardMathRulePacks$Companion.prototype.get = function () {
    return this.defaultStandardMathRulePacks;
  };
  LogarithmsStandardMathRulePacks$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var LogarithmsStandardMathRulePacks$Companion_instance = null;
  function LogarithmsStandardMathRulePacks$Companion_getInstance() {
    if (LogarithmsStandardMathRulePacks$Companion_instance === null) {
      new LogarithmsStandardMathRulePacks$Companion();
    }
    return LogarithmsStandardMathRulePacks$Companion_instance;
  }
  LogarithmsStandardMathRulePacks.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LogarithmsStandardMathRulePacks',
    interfaces: []
  };
  function PostprocessorRulePack() {
    PostprocessorRulePack$Companion_getInstance();
  }
  function PostprocessorRulePack$Companion() {
    PostprocessorRulePack$Companion_instance = this;
    this.postprocessorRulePack = listOf(new RulePackITR('PostprocessorRules', void 0, void 0, 'Postprocessor Rules', '\u041F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438 \u043F\u043E\u0441\u0442\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u043E\u0440\u0430', 'Postprocessor Rules', '\u041F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438 \u043F\u043E\u0441\u0442\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u043E\u0440\u0430', "This rules are applied to every autogenerated task in order to normalize it's form", '\u0414\u0430\u043D\u043D\u044B\u0435 \u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u043F\u0440\u0438\u043C\u0435\u043D\u044F\u044E\u0442\u0441\u044F \u043A \u043A\u0430\u0436\u0434\u043E\u0439 \u0441\u043E\u0437\u0434\u0430\u043D\u043D\u043E\u0439 \u0430\u0432\u0442\u043E\u0433\u0435\u043D\u0435\u0440\u0430\u0442\u043E\u0440\u043E\u043C \u0437\u0430\u0434\u0430\u0447\u0435 \u0441 \u0446\u0435\u043B\u044C\u044E \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u0437\u0430\u0434\u0430\u0447\u0438 \u043A \u043D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u043E\u043C\u0443 \u0432\u0438\u0434\u0443', 'standard_math', void 0, listOf_0([new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(+(-(a)))))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(+(-(a))))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(-(-(a)))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;1))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(1;a))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;a))', '(*(2;a))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*((+(-(A)));C))', '(+(-(*(A;C))))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;(+(-(C)))))', '(+(-(*(A;C))))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(-(A));C))', '(+(-(*(A;C))))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;+(-(C))))', '(+(-(*(A;C))))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(-(A));+(-(B))))', '(*(A;B))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(A;+(-(1))))', '(+(-(*(A;1))))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;1))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;a))', '(1)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(/(1;a);a))', '(1)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;/(1;a)))', '(a)', 4, false, true, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;(+(-(C)))))', '(+(-(/(A;C))))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(+(-(A));C))', '(+(-(/(A;C))))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;+(-(C))))', '(+(-(/(A;C))))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;/(B;A)))', '(/(A;B))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(A;/(B;C)))', '(/(*(A;C);B))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(a;+(-(1))))', '(/(1;a))', 40, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^((/(1;a));+(-(1))))', '(a)', 40, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;^(a;+(-(1)))))', '(a)', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;^(a;+(-(b)))))', '(^(a;b))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;+(-(C))))', '(/(1;^(A;C)))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(A;1))', '(A)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;a))', '(^(a;2))', 40, false, false, true, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;a;b))', '(*(^(a;2);b))', 40, false, false, true, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(b;a;a))', '(*(b;^(a;2)))', 40, false, false, true, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(+(-(a));a))', '(+(-(^(a;2))))', 40, false, false, true, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;+(-(a))))', '(+(-(^(a;2))))', 40, false, false, true, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*((+(-(a)));(+(-(a)))))', '(^(a;2))', 40, false, false, true, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(-(A);*(2;n)))', '(^(A;*(2;n)))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(-(A);2))', '(^(A;2))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(-(A));*(2;n)))', '(^(A;*(2;n)))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(+(-(A));2))', '(^(A;2))', 35, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(^(a;0.5);2))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(^(^(a;2);0.5))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;(^(a;(+(-(1)))))))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;(^(a;(+(-(b)))))))', '(^(a;b))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;-(a)))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(-(a);a))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(a;0))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(0;a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(0;a))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(a;0))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(0;a))', '(0)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;b;c))', '(/(*(a;c);b))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(+(a;b);c))', '(+(a;b;c))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(+(a;b);-(c)))', '(+(a;b;+(-(c))))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(+(+(a;-(b));c))', '(+(a;+(-(b));c))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;^(/(b;c);n)))', '(/(*(a;^(c;n));^(b;n)))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(a;0.5))', '(*(2;a))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(*(n;/(a;n)))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;tg(a)))', '(ctg(a))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(1;ctg(a)))', '(tg(a))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(sin(a);cos(a)))', '(tg(a))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(/(cos(a);sin(a)))', '(ctg(a))', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(not(not(a)))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a;a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a;a))', '(a)', 5, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(or(a))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(and(a))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true), new RuleITR('', void 0, void 0, void 0, void 0, void 0, void 0, '(alleq(a))', '(a)', 4, false, false, false, false, void 0, void 0, void 0, 0.0, true)])));
  }
  PostprocessorRulePack$Companion.prototype.get = function () {
    return this.postprocessorRulePack.get_za3lpa$(0);
  };
  PostprocessorRulePack$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var PostprocessorRulePack$Companion_instance = null;
  function PostprocessorRulePack$Companion_getInstance() {
    if (PostprocessorRulePack$Companion_instance === null) {
      new PostprocessorRulePack$Companion();
    }
    return PostprocessorRulePack$Companion_instance;
  }
  PostprocessorRulePack.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PostprocessorRulePack',
    interfaces: []
  };
  function RuleTag_0(name, ordinal, code, readyForUseInProduction) {
    if (readyForUseInProduction === void 0)
      readyForUseInProduction = true;
    Enum.call(this);
    this.code = code;
    this.readyForUseInProduction = readyForUseInProduction;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function RuleTag_initFields_0() {
    RuleTag_initFields_0 = function () {
    };
    RuleTag$BASIC_MATH_instance_0 = new RuleTag_0('BASIC_MATH', 0, '\u0411\u0430\u0437\u043E\u0432\u044B\u0435 \u043F\u0440\u0430\u0432\u0438\u043B\u0430 \u043C\u0430\u0442\u0435\u043C\u0430\u0442\u0438\u043A\u0438');
    RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_instance_0 = new RuleTag_0('TRIGONOMETRY_FUNCTIONS_DEFINITION', 1, '\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0445 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 (sin, cos, tg, ctg), \u0438\u0445 \u0447\u0451\u0442\u043D\u043E\u0441\u0442\u044C/\u043D\u0435\u0447\u0451\u0442\u043D\u043E\u0441\u0442\u044C');
    RuleTag$TRIGONOMETRY_STANDARD_ANGLES_instance_0 = new RuleTag_0('TRIGONOMETRY_STANDARD_ANGLES', 2, '\u0421\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0435 \u0443\u0433\u043B\u044B \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u0442\u0430\u0431\u043B\u0438\u0446\u044B');
    RuleTag$TRIGONOMETRY_BASIC_IDENTITY_instance_0 = new RuleTag_0('TRIGONOMETRY_BASIC_IDENTITY', 3, '\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u0442\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u043E');
    RuleTag$TRIGONOMETRY_PERIODIC_instance_0 = new RuleTag_0('TRIGONOMETRY_PERIODIC', 4, '\u041F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439');
    RuleTag$TRIGONOMETRY_SHIFTING_instance_0 = new RuleTag_0('TRIGONOMETRY_SHIFTING', 5, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u0438\u044F');
    RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_instance_0 = new RuleTag_0('TRIGONOMETRY_INVERSE_FUNCTIONS', 6, '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435');
    RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_instance_0 = new RuleTag_0('TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES', 7, '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430');
    RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_instance_0 = new RuleTag_0('TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED', 8, '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u043F\u0440\u043E\u0434\u0432\u0438\u043D\u0443\u0442\u044B\u0435 \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u0430');
    RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_instance_0 = new RuleTag_0('TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES', 9, '\u0410\u0440\u043A\u0444\u0443\u043D\u043A\u0446\u0438\u0438 - \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0435 \u0443\u0433\u043B\u044B \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u0442\u0430\u0431\u043B\u0438\u0446\u044B');
    RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_instance_0 = new RuleTag_0('TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES', 10, '\u0421\u0443\u043C\u043C\u0430 \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u043E\u0432 - sin, cos');
    RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_instance_0 = new RuleTag_0('TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES', 11, '\u0421\u0443\u043C\u043C\u0430 \u0438 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u043E\u0432 - tg, ctg');
    RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_instance_0 = new RuleTag_0('TRIGONOMETRY_DOUBLE_ANGLES', 12, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0434\u0432\u043E\u0439\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430');
    RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_instance_0 = new RuleTag_0('TRIGONOMETRY_TRIPLE_ANGLES', 13, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0442\u0440\u043E\u0439\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430');
    RuleTag$TRIGONOMETRY_HALF_ANGLES_instance_0 = new RuleTag_0('TRIGONOMETRY_HALF_ANGLES', 14, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u043E\u043B\u043E\u0432\u0438\u043D\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430');
    RuleTag$TRIGONOMETRY_MULTI_ANGLES_instance_0 = new RuleTag_0('TRIGONOMETRY_MULTI_ANGLES', 15, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430 \u043A\u0440\u0430\u0442\u043D\u043E\u0441\u0442\u0438 \u0431\u043E\u043B\u0435\u0435 3');
    RuleTag$TRIGONOMETRY_POWER_REDUCING_instance_0 = new RuleTag_0('TRIGONOMETRY_POWER_REDUCING', 16, '\u0424\u043E\u0440\u043C\u0443\u043B\u044B \u043F\u043E\u043D\u0438\u0436\u0435\u043D\u0438\u044F \u0441\u0442\u0435\u043F\u0435\u043D\u0438');
    RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_instance_0 = new RuleTag_0('TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS', 17, '\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435 \u0441\u0443\u043C\u043C\u044B/\u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u0432 \u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435');
    RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_instance_0 = new RuleTag_0('TRIGONOMETRY_AUXILIARY_ARGUMENT', 18, '\u0424\u043E\u0440\u043C\u0443\u043B\u0430 \u0432\u0441\u043F\u043E\u043C\u043E\u0433\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0433\u043E \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u0430', false);
    RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_instance_0 = new RuleTag_0('TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION', 19, '\u0423\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u0430\u044F \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0430');
    RuleTag$TRIGONOMETRY_EULER_FORMULAS_instance_0 = new RuleTag_0('TRIGONOMETRY_EULER_FORMULAS', 20, '\u041F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u0442\u0440\u0438\u0433\u043E\u043D\u043E\u043C\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u0432 \u043A\u043E\u043C\u043F\u043B\u0435\u043A\u0441\u043D\u043E\u0439 \u0444\u043E\u0440\u043C\u0435', false);
    RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_instance_0 = new RuleTag_0('TRIGONOMETRY_HYPERBOLIC_FUNCTIONS', 21, '\u0413\u0438\u043F\u0435\u0440\u0431\u043E\u043B\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0438', false);
  }
  var RuleTag$BASIC_MATH_instance_0;
  function RuleTag$BASIC_MATH_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$BASIC_MATH_instance_0;
  }
  var RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_instance_0;
  function RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_instance_0;
  }
  var RuleTag$TRIGONOMETRY_STANDARD_ANGLES_instance_0;
  function RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_STANDARD_ANGLES_instance_0;
  }
  var RuleTag$TRIGONOMETRY_BASIC_IDENTITY_instance_0;
  function RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_BASIC_IDENTITY_instance_0;
  }
  var RuleTag$TRIGONOMETRY_PERIODIC_instance_0;
  function RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_PERIODIC_instance_0;
  }
  var RuleTag$TRIGONOMETRY_SHIFTING_instance_0;
  function RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_SHIFTING_instance_0;
  }
  var RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_instance_0;
  function RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_instance_0;
  }
  var RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_instance_0;
  function RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_instance_0;
  }
  var RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_instance_0;
  function RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_instance_0;
  }
  var RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_instance_0;
  function RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_instance_0;
  }
  var RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_instance_0;
  function RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_instance_0;
  }
  var RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_instance_0;
  function RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_instance_0;
  }
  var RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_instance_0;
  function RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_instance_0;
  }
  var RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_instance_0;
  function RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_instance_0;
  }
  var RuleTag$TRIGONOMETRY_HALF_ANGLES_instance_0;
  function RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_HALF_ANGLES_instance_0;
  }
  var RuleTag$TRIGONOMETRY_MULTI_ANGLES_instance_0;
  function RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_MULTI_ANGLES_instance_0;
  }
  var RuleTag$TRIGONOMETRY_POWER_REDUCING_instance_0;
  function RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_POWER_REDUCING_instance_0;
  }
  var RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_instance_0;
  function RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_instance_0;
  }
  var RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_instance_0;
  function RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_instance_0;
  }
  var RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_instance_0;
  function RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_instance_0;
  }
  var RuleTag$TRIGONOMETRY_EULER_FORMULAS_instance_0;
  function RuleTag$TRIGONOMETRY_EULER_FORMULAS_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_EULER_FORMULAS_instance_0;
  }
  var RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_instance_0;
  function RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_getInstance_0() {
    RuleTag_initFields_0();
    return RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_instance_0;
  }
  RuleTag_0.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RuleTag',
    interfaces: [Enum]
  };
  function RuleTag$values_0() {
    return [RuleTag$BASIC_MATH_getInstance_0(), RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0(), RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0(), RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0(), RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0(), RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0(), RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0(), RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0(), RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance_0(), RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0(), RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0(), RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_getInstance_0(), RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance_0(), RuleTag$TRIGONOMETRY_EULER_FORMULAS_getInstance_0(), RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_getInstance_0()];
  }
  RuleTag_0.values = RuleTag$values_0;
  function RuleTag$valueOf_0(name) {
    switch (name) {
      case 'BASIC_MATH':
        return RuleTag$BASIC_MATH_getInstance_0();
      case 'TRIGONOMETRY_FUNCTIONS_DEFINITION':
        return RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0();
      case 'TRIGONOMETRY_STANDARD_ANGLES':
        return RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0();
      case 'TRIGONOMETRY_BASIC_IDENTITY':
        return RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0();
      case 'TRIGONOMETRY_PERIODIC':
        return RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0();
      case 'TRIGONOMETRY_SHIFTING':
        return RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0();
      case 'TRIGONOMETRY_INVERSE_FUNCTIONS':
        return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0();
      case 'TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES':
        return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0();
      case 'TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED':
        return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0();
      case 'TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES':
        return RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0();
      case 'TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES':
        return RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0();
      case 'TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES':
        return RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0();
      case 'TRIGONOMETRY_DOUBLE_ANGLES':
        return RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0();
      case 'TRIGONOMETRY_TRIPLE_ANGLES':
        return RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0();
      case 'TRIGONOMETRY_HALF_ANGLES':
        return RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0();
      case 'TRIGONOMETRY_MULTI_ANGLES':
        return RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance_0();
      case 'TRIGONOMETRY_POWER_REDUCING':
        return RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0();
      case 'TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS':
        return RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0();
      case 'TRIGONOMETRY_AUXILIARY_ARGUMENT':
        return RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_getInstance_0();
      case 'TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION':
        return RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance_0();
      case 'TRIGONOMETRY_EULER_FORMULAS':
        return RuleTag$TRIGONOMETRY_EULER_FORMULAS_getInstance_0();
      case 'TRIGONOMETRY_HYPERBOLIC_FUNCTIONS':
        return RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_getInstance_0();
      default:throwISE('No enum constant mathhelper.twf.taskautogeneration.RuleTag.' + name);
    }
  }
  RuleTag_0.valueOf_61zpoe$ = RuleTag$valueOf_0;
  function SortOrder(name, ordinal, code) {
    Enum.call(this);
    this.code = code;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SortOrder_initFields() {
    SortOrder_initFields = function () {
    };
    SortOrder$ASC_instance = new SortOrder('ASC', 0, '\u041F\u043E \u0432\u043E\u0437\u0440\u0430\u0441\u0442\u0430\u043D\u0438\u044E');
    SortOrder$DESC_instance = new SortOrder('DESC', 1, '\u041F\u043E \u0443\u0431\u044B\u0432\u0430\u043D\u0438\u044E');
  }
  var SortOrder$ASC_instance;
  function SortOrder$ASC_getInstance() {
    SortOrder_initFields();
    return SortOrder$ASC_instance;
  }
  var SortOrder$DESC_instance;
  function SortOrder$DESC_getInstance() {
    SortOrder_initFields();
    return SortOrder$DESC_instance;
  }
  SortOrder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SortOrder',
    interfaces: [Enum]
  };
  function SortOrder$values() {
    return [SortOrder$ASC_getInstance(), SortOrder$DESC_getInstance()];
  }
  SortOrder.values = SortOrder$values;
  function SortOrder$valueOf(name) {
    switch (name) {
      case 'ASC':
        return SortOrder$ASC_getInstance();
      case 'DESC':
        return SortOrder$DESC_getInstance();
      default:throwISE('No enum constant mathhelper.twf.taskautogeneration.SortOrder.' + name);
    }
  }
  SortOrder.valueOf_61zpoe$ = SortOrder$valueOf;
  function SortType(name, ordinal, code) {
    Enum.call(this);
    this.code = code;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SortType_initFields() {
    SortType_initFields = function () {
    };
    SortType$BY_RULE_TAG_USAGE_instance = new SortType('BY_RULE_TAG_USAGE', 0, '\u041F\u043E \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u043D\u044B\u0445 \u0442\u0435\u0433\u043E\u0432');
    SortType$BY_TASK_LENGTH_instance = new SortType('BY_TASK_LENGTH', 1, '\u041F\u043E \u0434\u043B\u0438\u043D\u0435 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u044F');
  }
  var SortType$BY_RULE_TAG_USAGE_instance;
  function SortType$BY_RULE_TAG_USAGE_getInstance() {
    SortType_initFields();
    return SortType$BY_RULE_TAG_USAGE_instance;
  }
  var SortType$BY_TASK_LENGTH_instance;
  function SortType$BY_TASK_LENGTH_getInstance() {
    SortType_initFields();
    return SortType$BY_TASK_LENGTH_instance;
  }
  SortType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SortType',
    interfaces: [Enum]
  };
  function SortType$values() {
    return [SortType$BY_RULE_TAG_USAGE_getInstance(), SortType$BY_TASK_LENGTH_getInstance()];
  }
  SortType.values = SortType$values;
  function SortType$valueOf(name) {
    switch (name) {
      case 'BY_RULE_TAG_USAGE':
        return SortType$BY_RULE_TAG_USAGE_getInstance();
      case 'BY_TASK_LENGTH':
        return SortType$BY_TASK_LENGTH_getInstance();
      default:throwISE('No enum constant mathhelper.twf.taskautogeneration.SortType.' + name);
    }
  }
  SortType.valueOf_61zpoe$ = SortType$valueOf;
  function Comparator$ObjectLiteral_10(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_10.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_10.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareByDescending$lambda_3 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(b), selector(a));
      };
    };
  });
  function Comparator$ObjectLiteral_11(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_11.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_11.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_5 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function Comparator$ObjectLiteral_12(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_12.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_12.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  function thenComparator$lambda(this$thenComparator, closure$comparison) {
    return function (a, b) {
      var previousCompare = this$thenComparator.compare(a, b);
      return previousCompare !== 0 ? previousCompare : closure$comparison(a, b);
    };
  }
  function GeneratorSettings(expressionGenerationDirection, targetWeight, targetWeightWindowCoefficient, taskStartGenerator, compiledConfiguration, expressionSubstitutions, maxCountSelectedOfTasksOnIteration, minWidthOfRulesApplicationsOnIteration, maxWidthOfRulesApplicationsOnIteration, minStepsCountInAutogeneration, extendReduceFactor, extendingExpressionSubstitutions, reducingExpressionSubstitutions, postprocessExpressionSubstitutions, mandatoryResultTransformations, newVariablesExpressionSubstitutions, nodeIdsToTransformSelector, sortType, sortOrder, maxTaskCount) {
    if (expressionGenerationDirection === void 0)
      expressionGenerationDirection = ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance();
    if (targetWeight === void 0)
      targetWeight = 5.0;
    if (targetWeightWindowCoefficient === void 0)
      targetWeightWindowCoefficient = 0.2;
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration();
    if (expressionSubstitutions === void 0)
      expressionSubstitutions = compiledConfiguration.compiledExpressionTreeTransformationRules;
    if (maxCountSelectedOfTasksOnIteration === void 0)
      maxCountSelectedOfTasksOnIteration = 20;
    if (minWidthOfRulesApplicationsOnIteration === void 0)
      minWidthOfRulesApplicationsOnIteration = 3;
    if (maxWidthOfRulesApplicationsOnIteration === void 0)
      maxWidthOfRulesApplicationsOnIteration = 50;
    if (minStepsCountInAutogeneration === void 0)
      minStepsCountInAutogeneration = 5;
    if (extendReduceFactor === void 0)
      extendReduceFactor = 1.5;
    if (extendingExpressionSubstitutions === void 0) {
      var $receiver = expressionSubstitutions;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.isExtending)
          destination.add_11rb$(element);
      }
      extendingExpressionSubstitutions = destination;
    }
    if (reducingExpressionSubstitutions === void 0) {
      var $receiver_0 = expressionSubstitutions;
      var destination_0 = ArrayList_init();
      var tmp$_0;
      tmp$_0 = $receiver_0.iterator();
      while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        if (!element_0.isExtending)
          destination_0.add_11rb$(element_0);
      }
      reducingExpressionSubstitutions = destination_0;
    }
    if (postprocessExpressionSubstitutions === void 0) {
      postprocessExpressionSubstitutions = expressionSubstitutionsFromRulePackITR(PostprocessorRulePack$Companion_getInstance().get(), emptyMap(), false);
    }
    if (mandatoryResultTransformations === void 0) {
      mandatoryResultTransformations = emptyList();
    }
    if (newVariablesExpressionSubstitutions === void 0) {
      newVariablesExpressionSubstitutions = emptyMap();
    }
    if (nodeIdsToTransformSelector === void 0)
      nodeIdsToTransformSelector = GeneratorSettings_init$lambda;
    if (sortType === void 0)
      sortType = SortType$BY_RULE_TAG_USAGE_getInstance();
    if (sortOrder === void 0)
      sortOrder = SortOrder$DESC_getInstance();
    if (maxTaskCount === void 0)
      maxTaskCount = 50;
    this.expressionGenerationDirection = expressionGenerationDirection;
    this.targetWeight = targetWeight;
    this.targetWeightWindowCoefficient = targetWeightWindowCoefficient;
    this.taskStartGenerator = taskStartGenerator;
    this.compiledConfiguration = compiledConfiguration;
    this.expressionSubstitutions = expressionSubstitutions;
    this.maxCountSelectedOfTasksOnIteration = maxCountSelectedOfTasksOnIteration;
    this.minWidthOfRulesApplicationsOnIteration = minWidthOfRulesApplicationsOnIteration;
    this.maxWidthOfRulesApplicationsOnIteration = maxWidthOfRulesApplicationsOnIteration;
    this.minStepsCountInAutogeneration = minStepsCountInAutogeneration;
    this.extendReduceFactor = extendReduceFactor;
    this.extendingExpressionSubstitutions = extendingExpressionSubstitutions;
    this.reducingExpressionSubstitutions = reducingExpressionSubstitutions;
    this.postprocessExpressionSubstitutions = postprocessExpressionSubstitutions;
    this.mandatoryResultTransformations = mandatoryResultTransformations;
    this.newVariablesExpressionSubstitutions = newVariablesExpressionSubstitutions;
    this.nodeIdsToTransformSelector = nodeIdsToTransformSelector;
    this.sortType = sortType;
    this.sortOrder = sortOrder;
    this.maxTaskCount = maxTaskCount;
  }
  function GeneratorSettings_init$lambda(expressionNode) {
    return selectRandomNodeIdsToTransform(expressionNode);
  }
  GeneratorSettings.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GeneratorSettings',
    interfaces: []
  };
  GeneratorSettings.prototype.component1 = function () {
    return this.expressionGenerationDirection;
  };
  GeneratorSettings.prototype.component2 = function () {
    return this.targetWeight;
  };
  GeneratorSettings.prototype.component3 = function () {
    return this.targetWeightWindowCoefficient;
  };
  GeneratorSettings.prototype.component4 = function () {
    return this.taskStartGenerator;
  };
  GeneratorSettings.prototype.component5 = function () {
    return this.compiledConfiguration;
  };
  GeneratorSettings.prototype.component6 = function () {
    return this.expressionSubstitutions;
  };
  GeneratorSettings.prototype.component7 = function () {
    return this.maxCountSelectedOfTasksOnIteration;
  };
  GeneratorSettings.prototype.component8 = function () {
    return this.minWidthOfRulesApplicationsOnIteration;
  };
  GeneratorSettings.prototype.component9 = function () {
    return this.maxWidthOfRulesApplicationsOnIteration;
  };
  GeneratorSettings.prototype.component10 = function () {
    return this.minStepsCountInAutogeneration;
  };
  GeneratorSettings.prototype.component11 = function () {
    return this.extendReduceFactor;
  };
  GeneratorSettings.prototype.component12 = function () {
    return this.extendingExpressionSubstitutions;
  };
  GeneratorSettings.prototype.component13 = function () {
    return this.reducingExpressionSubstitutions;
  };
  GeneratorSettings.prototype.component14 = function () {
    return this.postprocessExpressionSubstitutions;
  };
  GeneratorSettings.prototype.component15 = function () {
    return this.mandatoryResultTransformations;
  };
  GeneratorSettings.prototype.component16 = function () {
    return this.newVariablesExpressionSubstitutions;
  };
  GeneratorSettings.prototype.component17 = function () {
    return this.nodeIdsToTransformSelector;
  };
  GeneratorSettings.prototype.component18 = function () {
    return this.sortType;
  };
  GeneratorSettings.prototype.component19 = function () {
    return this.sortOrder;
  };
  GeneratorSettings.prototype.component20 = function () {
    return this.maxTaskCount;
  };
  GeneratorSettings.prototype.copy_dqe0z5$ = function (expressionGenerationDirection, targetWeight, targetWeightWindowCoefficient, taskStartGenerator, compiledConfiguration, expressionSubstitutions, maxCountSelectedOfTasksOnIteration, minWidthOfRulesApplicationsOnIteration, maxWidthOfRulesApplicationsOnIteration, minStepsCountInAutogeneration, extendReduceFactor, extendingExpressionSubstitutions, reducingExpressionSubstitutions, postprocessExpressionSubstitutions, mandatoryResultTransformations, newVariablesExpressionSubstitutions, nodeIdsToTransformSelector, sortType, sortOrder, maxTaskCount) {
    return new GeneratorSettings(expressionGenerationDirection === void 0 ? this.expressionGenerationDirection : expressionGenerationDirection, targetWeight === void 0 ? this.targetWeight : targetWeight, targetWeightWindowCoefficient === void 0 ? this.targetWeightWindowCoefficient : targetWeightWindowCoefficient, taskStartGenerator === void 0 ? this.taskStartGenerator : taskStartGenerator, compiledConfiguration === void 0 ? this.compiledConfiguration : compiledConfiguration, expressionSubstitutions === void 0 ? this.expressionSubstitutions : expressionSubstitutions, maxCountSelectedOfTasksOnIteration === void 0 ? this.maxCountSelectedOfTasksOnIteration : maxCountSelectedOfTasksOnIteration, minWidthOfRulesApplicationsOnIteration === void 0 ? this.minWidthOfRulesApplicationsOnIteration : minWidthOfRulesApplicationsOnIteration, maxWidthOfRulesApplicationsOnIteration === void 0 ? this.maxWidthOfRulesApplicationsOnIteration : maxWidthOfRulesApplicationsOnIteration, minStepsCountInAutogeneration === void 0 ? this.minStepsCountInAutogeneration : minStepsCountInAutogeneration, extendReduceFactor === void 0 ? this.extendReduceFactor : extendReduceFactor, extendingExpressionSubstitutions === void 0 ? this.extendingExpressionSubstitutions : extendingExpressionSubstitutions, reducingExpressionSubstitutions === void 0 ? this.reducingExpressionSubstitutions : reducingExpressionSubstitutions, postprocessExpressionSubstitutions === void 0 ? this.postprocessExpressionSubstitutions : postprocessExpressionSubstitutions, mandatoryResultTransformations === void 0 ? this.mandatoryResultTransformations : mandatoryResultTransformations, newVariablesExpressionSubstitutions === void 0 ? this.newVariablesExpressionSubstitutions : newVariablesExpressionSubstitutions, nodeIdsToTransformSelector === void 0 ? this.nodeIdsToTransformSelector : nodeIdsToTransformSelector, sortType === void 0 ? this.sortType : sortType, sortOrder === void 0 ? this.sortOrder : sortOrder, maxTaskCount === void 0 ? this.maxTaskCount : maxTaskCount);
  };
  GeneratorSettings.prototype.toString = function () {
    return 'GeneratorSettings(expressionGenerationDirection=' + Kotlin.toString(this.expressionGenerationDirection) + (', targetWeight=' + Kotlin.toString(this.targetWeight)) + (', targetWeightWindowCoefficient=' + Kotlin.toString(this.targetWeightWindowCoefficient)) + (', taskStartGenerator=' + Kotlin.toString(this.taskStartGenerator)) + (', compiledConfiguration=' + Kotlin.toString(this.compiledConfiguration)) + (', expressionSubstitutions=' + Kotlin.toString(this.expressionSubstitutions)) + (', maxCountSelectedOfTasksOnIteration=' + Kotlin.toString(this.maxCountSelectedOfTasksOnIteration)) + (', minWidthOfRulesApplicationsOnIteration=' + Kotlin.toString(this.minWidthOfRulesApplicationsOnIteration)) + (', maxWidthOfRulesApplicationsOnIteration=' + Kotlin.toString(this.maxWidthOfRulesApplicationsOnIteration)) + (', minStepsCountInAutogeneration=' + Kotlin.toString(this.minStepsCountInAutogeneration)) + (', extendReduceFactor=' + Kotlin.toString(this.extendReduceFactor)) + (', extendingExpressionSubstitutions=' + Kotlin.toString(this.extendingExpressionSubstitutions)) + (', reducingExpressionSubstitutions=' + Kotlin.toString(this.reducingExpressionSubstitutions)) + (', postprocessExpressionSubstitutions=' + Kotlin.toString(this.postprocessExpressionSubstitutions)) + (', mandatoryResultTransformations=' + Kotlin.toString(this.mandatoryResultTransformations)) + (', newVariablesExpressionSubstitutions=' + Kotlin.toString(this.newVariablesExpressionSubstitutions)) + (', nodeIdsToTransformSelector=' + Kotlin.toString(this.nodeIdsToTransformSelector)) + (', sortType=' + Kotlin.toString(this.sortType)) + (', sortOrder=' + Kotlin.toString(this.sortOrder)) + (', maxTaskCount=' + Kotlin.toString(this.maxTaskCount)) + ')';
  };
  GeneratorSettings.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.expressionGenerationDirection) | 0;
    result = result * 31 + Kotlin.hashCode(this.targetWeight) | 0;
    result = result * 31 + Kotlin.hashCode(this.targetWeightWindowCoefficient) | 0;
    result = result * 31 + Kotlin.hashCode(this.taskStartGenerator) | 0;
    result = result * 31 + Kotlin.hashCode(this.compiledConfiguration) | 0;
    result = result * 31 + Kotlin.hashCode(this.expressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxCountSelectedOfTasksOnIteration) | 0;
    result = result * 31 + Kotlin.hashCode(this.minWidthOfRulesApplicationsOnIteration) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxWidthOfRulesApplicationsOnIteration) | 0;
    result = result * 31 + Kotlin.hashCode(this.minStepsCountInAutogeneration) | 0;
    result = result * 31 + Kotlin.hashCode(this.extendReduceFactor) | 0;
    result = result * 31 + Kotlin.hashCode(this.extendingExpressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.reducingExpressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.postprocessExpressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.mandatoryResultTransformations) | 0;
    result = result * 31 + Kotlin.hashCode(this.newVariablesExpressionSubstitutions) | 0;
    result = result * 31 + Kotlin.hashCode(this.nodeIdsToTransformSelector) | 0;
    result = result * 31 + Kotlin.hashCode(this.sortType) | 0;
    result = result * 31 + Kotlin.hashCode(this.sortOrder) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxTaskCount) | 0;
    return result;
  };
  GeneratorSettings.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.expressionGenerationDirection, other.expressionGenerationDirection) && Kotlin.equals(this.targetWeight, other.targetWeight) && Kotlin.equals(this.targetWeightWindowCoefficient, other.targetWeightWindowCoefficient) && Kotlin.equals(this.taskStartGenerator, other.taskStartGenerator) && Kotlin.equals(this.compiledConfiguration, other.compiledConfiguration) && Kotlin.equals(this.expressionSubstitutions, other.expressionSubstitutions) && Kotlin.equals(this.maxCountSelectedOfTasksOnIteration, other.maxCountSelectedOfTasksOnIteration) && Kotlin.equals(this.minWidthOfRulesApplicationsOnIteration, other.minWidthOfRulesApplicationsOnIteration) && Kotlin.equals(this.maxWidthOfRulesApplicationsOnIteration, other.maxWidthOfRulesApplicationsOnIteration) && Kotlin.equals(this.minStepsCountInAutogeneration, other.minStepsCountInAutogeneration) && Kotlin.equals(this.extendReduceFactor, other.extendReduceFactor) && Kotlin.equals(this.extendingExpressionSubstitutions, other.extendingExpressionSubstitutions) && Kotlin.equals(this.reducingExpressionSubstitutions, other.reducingExpressionSubstitutions) && Kotlin.equals(this.postprocessExpressionSubstitutions, other.postprocessExpressionSubstitutions) && Kotlin.equals(this.mandatoryResultTransformations, other.mandatoryResultTransformations) && Kotlin.equals(this.newVariablesExpressionSubstitutions, other.newVariablesExpressionSubstitutions) && Kotlin.equals(this.nodeIdsToTransformSelector, other.nodeIdsToTransformSelector) && Kotlin.equals(this.sortType, other.sortType) && Kotlin.equals(this.sortOrder, other.sortOrder) && Kotlin.equals(this.maxTaskCount, other.maxTaskCount)))));
  };
  function generateTrigonometricTasks$lambda(closure$settings) {
    return function () {
      return 'targetWeight = ' + closure$settings.targetWeight;
    };
  }
  function generateTrigonometricTasks$lambda_0(closure$tagsChosen) {
    return function () {
      return 'chosen tags: ' + joinToString(closure$tagsChosen, ', ');
    };
  }
  function generateTrigonometricTasks$lambda_1(closure$initialTask) {
    return function () {
      return 'initial task: ' + closure$initialTask.currentExpression.computeIdentifier_5osufp$();
    };
  }
  function generateTrigonometricTasks$lambda_2(closure$currentTasksAfterSplittingConstants) {
    return function () {
      return 'number of tasks after splitting constants: ' + toString(closure$currentTasksAfterSplittingConstants.size);
    };
  }
  function generateTrigonometricTasks$lambda_3(closure$currentTasksAfterSplittingConstants) {
    return function () {
      var $receiver = closure$currentTasksAfterSplittingConstants;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.currentExpression.computeIdentifier_5osufp$());
      }
      return 'tasks after splitting constants: ' + joinToString(destination, ', \n');
    };
  }
  function generateTrigonometricTasks$lambda_4(closure$stepId, closure$taskMaxWeight, closure$targetWeightThreshold) {
    return function () {
      return 'ERROR: the algorithm is cycled (max weight is not updated), stepId = ' + closure$stepId.v + ', ' + ('maxWeight = ' + closure$taskMaxWeight.v + ', target = ' + closure$targetWeightThreshold);
    };
  }
  function generateTrigonometricTasks$lambda_5(closure$stepIdCopy) {
    return function () {
      return 'stepId = ' + closure$stepIdCopy;
    };
  }
  function generateTrigonometricTasks$lambda_6(closure$stepIdCopy, closure$j) {
    return function () {
      return 'stepId = ' + closure$stepIdCopy + ', trialNumber = ' + closure$j;
    };
  }
  function generateTrigonometricTasks$lambda_7(closure$newCurrentTasksAfterCut) {
    return function () {
      var $receiver = closure$newCurrentTasksAfterCut;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.currentExpression.computeIdentifier_5osufp$());
      }
      return 'after cut: ' + joinToString(destination, ', \n');
    };
  }
  function generateTrigonometricTasks$lambda$lambda(i) {
    return expressionToString(i);
  }
  function generateTrigonometricTasks$lambda_8(closure$tasksBeforeFinalFilter) {
    return function () {
      var $receiver = closure$tasksBeforeFinalFilter;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.currentExpression.computeIdentifier_5osufp$());
      }
      return 'before final filter: ' + joinToString(destination, ', \n');
    };
  }
  function generateTrigonometricTasks$lambda_9(closure$tasksWithNeededComplexity) {
    return function () {
      var $receiver = closure$tasksWithNeededComplexity;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.currentExpression.computeIdentifier_5osufp$());
      }
      return 'with needed weight : ' + joinToString(destination, ', \n');
    };
  }
  function generateTrigonometricTasks$lambda_10(closure$tasksWithNeededComplexity) {
    return function () {
      var $receiver = closure$tasksWithNeededComplexity;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.currentExpression.computeIdentifier_5osufp$());
      }
      return 'WARNING: no tasks with needed weight. Tasks with max weight will be chosen : ' + joinToString(destination, ', \n');
    };
  }
  function generateTrigonometricTasks$lambda_11(it) {
    var tmp$;
    var sum = 0.0;
    tmp$ = it.usedSubstitutions.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum += element.difficultyInTaskAutoGeneration;
    }
    return sum;
  }
  function generateTrigonometricTasks$lambda_12(closure$resultAllTasks) {
    return function () {
      var $receiver = closure$resultAllTasks.v;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.currentExpression.computeIdentifier_5osufp$());
      }
      return 'after final filter: ' + joinToString(destination, ', \n');
    };
  }
  function generateTrigonometricTasks$lambda_13(closure$generatorIterationCounter) {
    return function () {
      return 'iterations total: ' + closure$generatorIterationCounter.v;
    };
  }
  function generateTrigonometricTasks(settings) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var compiledConfiguration = settings.compiledConfiguration;
    var expressionComparator = compiledConfiguration.factComparator.expressionComparator;
    var taskStartGeneratedExpression = settings.taskStartGenerator(compiledConfiguration);
    log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda(settings), MessageType$TECHNICAL_getInstance());
    var $receiver = settings.expressionSubstitutions;
    var destination = ArrayList_init();
    var tmp$_4;
    tmp$_4 = $receiver.iterator();
    while (tmp$_4.hasNext()) {
      var element = tmp$_4.next();
      var list = element.tagsForTaskGenerator;
      addAll(destination, list);
    }
    var $receiver_0 = distinct(destination);
    var destination_0 = ArrayList_init();
    var tmp$_5;
    tmp$_5 = $receiver_0.iterator();
    while (tmp$_5.hasNext()) {
      var element_0 = tmp$_5.next();
      if (element_0 !== RuleTag$BASIC_MATH_getInstance_0())
        destination_0.add_11rb$(element_0);
    }
    var tagsChosen = destination_0;
    log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_0(tagsChosen), MessageType$TECHNICAL_getInstance());
    var initialTask = new ExpressionTask(taskStartGeneratedExpression.expressionNode.clone());
    log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_1(initialTask), MessageType$TECHNICAL_getInstance());
    var taskStart = initialTask.clone();
    taskStart = dragConstantsToTheLeft(taskStart);
    var allTasks = ArrayList_init();
    var currentTasks = ArrayList_init();
    currentTasks.add_11rb$(taskStart);
    for (var i = 1; i <= 5; i++) {
      currentTasks.add_11rb$(splitConstants(taskStart, compiledConfiguration, 0));
    }
    currentTasks = unify(currentTasks, compiledConfiguration);
    var currentTasksAfterSplittingConstants = toMutableList(currentTasks);
    log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_2(currentTasksAfterSplittingConstants), MessageType$TECHNICAL_getInstance());
    log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_3(currentTasksAfterSplittingConstants), MessageType$TECHNICAL_getInstance());
    var stepId = {v: 1};
    var generatorIterationCounter = {v: 0};
    var targetWeightThreshold = settings.targetWeight + 2;
    var taskMaxWeightPrev = -1.0;
    var taskMaxWeight = {v: 0.0};
    while (taskMaxWeight.v < targetWeightThreshold) {
      if (taskMaxWeight.v <= taskMaxWeightPrev) {
        log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_4(stepId, taskMaxWeight, targetWeightThreshold), MessageType$TECHNICAL_getInstance());
        break;
      }
      var newTasks = ArrayList_init();
      var stepIdCopy = stepId.v;
      log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_5(stepIdCopy), MessageType$TECHNICAL_getInstance());
      tmp$ = currentTasks.iterator();
      while (tmp$.hasNext()) {
        var currentTask = tmp$.next();
        var tmp$_6;
        var sum = 0.0;
        tmp$_6 = currentTask.usedSubstitutions.iterator();
        while (tmp$_6.hasNext()) {
          var element_1 = tmp$_6.next();
          sum += element_1.difficultyInTaskAutoGeneration;
        }
        if (sum < settings.targetWeight * settings.extendReduceFactor) {
          tmp$_0 = settings.extendingExpressionSubstitutions;
        }
         else {
          tmp$_0 = settings.reducingExpressionSubstitutions;
        }
        setExpressionSubstitutions(compiledConfiguration, tmp$_0);
        var numberOfTrials = settings.maxWidthOfRulesApplicationsOnIteration;
        var tasksProducedFromThis = ArrayList_init();
        for (var j = 1; j <= numberOfTrials; j++) {
          log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_6(stepIdCopy, j), MessageType$TECHNICAL_getInstance());
          tryToGenerateNewTasks(currentTask, tasksProducedFromThis, settings, stepId.v);
          generatorIterationCounter.v = generatorIterationCounter.v + 1 | 0;
          newTasks.addAll_brywnq$(tasksProducedFromThis);
          var tmp$_7 = j >= settings.minWidthOfRulesApplicationsOnIteration;
          if (tmp$_7) {
            tmp$_7 = !tasksProducedFromThis.isEmpty();
          }
          if (tmp$_7) {
            break;
          }
        }
      }
      newTasks = unify(newTasks, compiledConfiguration);
      var $receiver_1 = newTasks;
      var destination_1 = LinkedHashMap_init_0();
      var tmp$_8;
      tmp$_8 = $receiver_1.iterator();
      while (tmp$_8.hasNext()) {
        var element_2 = tmp$_8.next();
        var tmp$_9;
        var key = (tmp$_9 = lastOrNull(element_2.previousExpressions)) != null ? tmp$_9.identifier : null;
        var tmp$_0_0;
        var value = destination_1.get_11rb$(key);
        if (value == null) {
          var answer = ArrayList_init();
          destination_1.put_xwzc9p$(key, answer);
          tmp$_0_0 = answer;
        }
         else {
          tmp$_0_0 = value;
        }
        var list_0 = tmp$_0_0;
        list_0.add_11rb$(element_2);
      }
      var groupsByPreviousExpression = destination_1;
      if (groupsByPreviousExpression.isEmpty()) {
        tmp$_1 = 0;
      }
       else {
        var x = settings.maxCountSelectedOfTasksOnIteration / groupsByPreviousExpression.size;
        tmp$_1 = numberToInt(Math_0.ceil(x));
      }
      var maxCountPerGroup = tmp$_1;
      var newCurrentTasksAfterCut = ArrayList_init();
      tmp$_2 = groupsByPreviousExpression.entries.iterator();
      while (tmp$_2.hasNext()) {
        var tmp$_10 = tmp$_2.next();
        var tasksInGroup = tmp$_10.value;
        var sortedTasks = sortTasks(tasksInGroup, settings.sortType, settings.sortOrder, tagsChosen);
        var b = tasksInGroup.size;
        newCurrentTasksAfterCut.addAll_brywnq$(sortedTasks.subList_vux9f0$(0, Math_0.min(maxCountPerGroup, b)));
      }
      log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_7(newCurrentTasksAfterCut), MessageType$TECHNICAL_getInstance());
      newTasks = newCurrentTasksAfterCut;
      allTasks.addAll_brywnq$(newTasks);
      var $receiver_2 = allTasks;
      var tmp$_11;
      var set = HashSet_init();
      var list_1 = ArrayList_init();
      tmp$_11 = $receiver_2.iterator();
      while (tmp$_11.hasNext()) {
        var e = tmp$_11.next();
        var key_0 = e.currentExpression.toString();
        if (set.add_11rb$(key_0))
          list_1.add_11rb$(e);
      }
      allTasks = toMutableList(list_1);
      currentTasks = newTasks;
      taskMaxWeightPrev = taskMaxWeight.v;
      var $receiver_3 = allTasks;
      var destination_2 = ArrayList_init_0(collectionSizeOrDefault($receiver_3, 10));
      var tmp$_12;
      tmp$_12 = $receiver_3.iterator();
      while (tmp$_12.hasNext()) {
        var item = tmp$_12.next();
        var tmp$_13 = destination_2.add_11rb$;
        var tmp$_14;
        var sum_0 = 0.0;
        tmp$_14 = item.usedSubstitutions.iterator();
        while (tmp$_14.hasNext()) {
          var element_3 = tmp$_14.next();
          sum_0 += element_3.difficultyInTaskAutoGeneration;
        }
        tmp$_13.call(destination_2, sum_0);
      }
      taskMaxWeight.v = (tmp$_3 = max_0(destination_2)) != null ? tmp$_3 : 0.0;
      stepId.v = stepId.v + 1 | 0;
    }
    var tmp$_15;
    tmp$_15 = allTasks.iterator();
    while (tmp$_15.hasNext()) {
      var element_4 = tmp$_15.next();
      applyAllSubstitutions(element_4.currentExpression, settings.mandatoryResultTransformations);
      element_4.currentExpression = simplifyAndNormalizeExpression(element_4.currentExpression, compiledConfiguration);
    }
    var $receiver_4 = allTasks;
    var destination_3 = ArrayList_init_0(collectionSizeOrDefault($receiver_4, 10));
    var tmp$_16;
    tmp$_16 = $receiver_4.iterator();
    while (tmp$_16.hasNext()) {
      var item_0 = tmp$_16.next();
      destination_3.add_11rb$(postprocess(item_0, settings.postprocessExpressionSubstitutions, compiledConfiguration, stepId.v));
    }
    allTasks = toMutableList(destination_3);
    var resultAllTasks = {v: unify(allTasks, compiledConfiguration)};
    var tmp$_17;
    tmp$_17 = resultAllTasks.v.iterator();
    while (tmp$_17.hasNext()) {
      var element_5 = tmp$_17.next();
      var $receiver_5 = element_5.usedSubstitutions;
      var destination_4 = LinkedHashMap_init_0();
      var tmp$_18;
      tmp$_18 = $receiver_5.iterator();
      while (tmp$_18.hasNext()) {
        var element_6 = tmp$_18.next();
        var key_1 = element_6.code;
        var tmp$_0_1;
        var value_0 = destination_4.get_11rb$(key_1);
        if (value_0 == null) {
          var answer_0 = ArrayList_init();
          destination_4.put_xwzc9p$(key_1, answer_0);
          tmp$_0_1 = answer_0;
        }
         else {
          tmp$_0_1 = value_0;
        }
        var list_2 = tmp$_0_1;
        list_2.add_11rb$(element_6);
      }
      var $receiver_6 = destination_4.values;
      var destination_5 = ArrayList_init_0(collectionSizeOrDefault($receiver_6, 10));
      var tmp$_19;
      tmp$_19 = $receiver_6.iterator();
      while (tmp$_19.hasNext()) {
        var item_1 = tmp$_19.next();
        destination_5.add_11rb$(first(item_1));
      }
      element_5.requiredSubstitutions = toMutableSet_1(destination_5);
      var $receiver_7 = element_5.requiredSubstitutions;
      var destination_6 = ArrayList_init_0(collectionSizeOrDefault($receiver_7, 10));
      var tmp$_20;
      tmp$_20 = $receiver_7.iterator();
      while (tmp$_20.hasNext()) {
        var item_2 = tmp$_20.next();
        destination_6.add_11rb$(new HintITR('Use rule ' + '$' + '$' + expressionToTexString(item_2.left) + '=' + expressionToTexString(item_2.right) + '$' + '$', '\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439 \u043F\u0440\u0430\u0432\u0438\u043B\u043E ' + '$' + '$' + expressionToTexString(item_2.left) + '=' + expressionToTexString(item_2.right) + '$' + '$'));
      }
      element_5.hints = toMutableList(destination_6);
      var $receiver_8 = ArrayList_init();
      $receiver_8.addAll_brywnq$(element_5.previousExpressions);
      $receiver_8.add_11rb$(element_5.currentExpression);
      var expressionsInSolution = $receiver_8;
      element_5.solution = joinToString(expressionsInSolution, ' = ', void 0, void 0, void 0, void 0, generateTrigonometricTasks$lambda$lambda);
    }
    var tasksBeforeFinalFilter = resultAllTasks.v;
    log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_8(tasksBeforeFinalFilter), MessageType$TECHNICAL_getInstance());
    var $receiver_9 = resultAllTasks.v;
    var destination_7 = ArrayList_init();
    var tmp$_21;
    tmp$_21 = $receiver_9.iterator();
    while (tmp$_21.hasNext()) {
      var element_7 = tmp$_21.next();
      if (validateTask(element_7, taskStartGeneratedExpression, expressionComparator))
        destination_7.add_11rb$(element_7);
    }
    var destination_8 = ArrayList_init();
    var tmp$_22;
    tmp$_22 = destination_7.iterator();
    while (tmp$_22.hasNext()) {
      var element_8 = tmp$_22.next();
      if (verifyAllPartsHasBeenTransformed(initialTask.currentExpression, element_8.currentExpression))
        destination_8.add_11rb$(element_8);
    }
    resultAllTasks.v = toMutableList(destination_8);
    var minWeight = (1 - settings.targetWeightWindowCoefficient) * settings.targetWeight;
    var maxWeight = (1 + settings.targetWeightWindowCoefficient) * settings.targetWeight;
    var $receiver_10 = resultAllTasks.v;
    var destination_9 = ArrayList_init();
    var tmp$_23;
    tmp$_23 = $receiver_10.iterator();
    while (tmp$_23.hasNext()) {
      var element_9 = tmp$_23.next();
      var tmp$_24 = rangeTo(minWeight, maxWeight);
      var tmp$_25;
      var sum_1 = 0.0;
      tmp$_25 = element_9.usedSubstitutions.iterator();
      while (tmp$_25.hasNext()) {
        var element_10 = tmp$_25.next();
        sum_1 += element_10.difficultyInTaskAutoGeneration;
      }
      if (tmp$_24.contains_mef7kx$(sum_1))
        destination_9.add_11rb$(element_9);
    }
    var tasksWithNeededComplexity = toMutableList(destination_9);
    log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_9(tasksWithNeededComplexity), MessageType$TECHNICAL_getInstance());
    if (tasksWithNeededComplexity.isEmpty()) {
      log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_10(tasksWithNeededComplexity), MessageType$TECHNICAL_getInstance());
      var $receiver_11 = resultAllTasks.v;
      var destination_10 = ArrayList_init();
      var tmp$_26;
      tmp$_26 = $receiver_11.iterator();
      while (tmp$_26.hasNext()) {
        var element_11 = tmp$_26.next();
        var tmp$_27;
        var sum_2 = 0.0;
        tmp$_27 = element_11.usedSubstitutions.iterator();
        while (tmp$_27.hasNext()) {
          var element_12 = tmp$_27.next();
          sum_2 += element_12.difficultyInTaskAutoGeneration;
        }
        if (sum_2 <= maxWeight)
          destination_10.add_11rb$(element_11);
      }
      resultAllTasks.v = toMutableList(destination_10);
      var $receiver_12 = resultAllTasks.v;
      if ($receiver_12.size > 1) {
        sortWith($receiver_12, new Comparator$ObjectLiteral_10(compareByDescending$lambda_3(generateTrigonometricTasks$lambda_11)));
      }
      resultAllTasks.v = toMutableList(take(resultAllTasks.v, 5));
    }
     else {
      resultAllTasks.v = tasksWithNeededComplexity;
    }
    resultAllTasks.v = sortTasks(resultAllTasks.v, settings.sortType, settings.sortOrder, tagsChosen);
    var tmp$_28 = resultAllTasks.v;
    var a = resultAllTasks.v.size;
    var b_0 = settings.maxTaskCount;
    resultAllTasks.v = tmp$_28.subList_vux9f0$(0, Math_0.min(a, b_0));
    log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_12(resultAllTasks), MessageType$TECHNICAL_getInstance());
    log_1.addMessage_cte53e$(generateTrigonometricTasks$lambda_13(generatorIterationCounter), MessageType$TECHNICAL_getInstance());
    var $receiver_13 = resultAllTasks.v;
    var destination_11 = ArrayList_init_0(collectionSizeOrDefault($receiver_13, 10));
    var tmp$_29;
    tmp$_29 = $receiver_13.iterator();
    while (tmp$_29.hasNext()) {
      var item_3 = tmp$_29.next();
      var tmp$_30 = destination_11.add_11rb$;
      var tmp$_31 = void 0;
      var tmp$_32 = taskStartGeneratedExpression.code;
      var tmp$_33 = void 0;
      var tmp$_34 = void 0;
      var tmp$_35 = taskStartGeneratedExpression.nameEn;
      var tmp$_36 = taskStartGeneratedExpression.nameRu;
      var tmp$_37 = taskStartGeneratedExpression.descriptionShortEn;
      var tmp$_38 = taskStartGeneratedExpression.descriptionShortRu;
      var tmp$_39 = taskStartGeneratedExpression.descriptionEn;
      var tmp$_40 = taskStartGeneratedExpression.descriptionRu;
      var tmp$_41 = taskStartGeneratedExpression.subjectType;
      var $receiver_14 = item_3.usedSubstitutions;
      var destination_12 = ArrayList_init();
      var tmp$_42;
      tmp$_42 = $receiver_14.iterator();
      while (tmp$_42.hasNext()) {
        var element_13 = tmp$_42.next();
        var list_3 = element_13.tagsForTaskGenerator;
        addAll(destination_12, list_3);
      }
      var destination_13 = ArrayList_init_0(collectionSizeOrDefault(destination_12, 10));
      var tmp$_43;
      tmp$_43 = destination_12.iterator();
      while (tmp$_43.hasNext()) {
        var item_4 = tmp$_43.next();
        destination_13.add_11rb$(item_4.name);
      }
      var tmp$_44 = toMutableSet_1(destination_13);
      var tmp$_45 = item_3.startExpression.toString();
      var tmp$_46 = void 0;
      var tmp$_47 = void 0;
      var tmp$_48 = item_3.currentExpression.toString();
      var tmp$_49 = void 0;
      var tmp$_50 = void 0;
      var tmp$_51 = void 0;
      var tmp$_52 = void 0;
      var tmp$_53 = emptyList();
      var tmp$_54 = emptyList();
      var tmp$_55 = item_3.previousExpressions.size;
      var tmp$_56 = item_3.time;
      var tmp$_57;
      var sum_3 = 0.0;
      tmp$_57 = item_3.usedSubstitutions.iterator();
      while (tmp$_57.hasNext()) {
        var element_14 = tmp$_57.next();
        sum_3 += element_14.difficultyInTaskAutoGeneration;
      }
      tmp$_30.call(destination_11, new TaskITR(tmp$_31, tmp$_32, tmp$_33, tmp$_34, tmp$_35, tmp$_36, tmp$_37, tmp$_38, tmp$_39, tmp$_40, tmp$_41, tmp$_44, tmp$_45, tmp$_46, tmp$_47, 'expression', tmp$_48, tmp$_49, tmp$_50, '', tmp$_51, tmp$_52, tmp$_53, tmp$_54, tmp$_55, tmp$_56, sum_3, settings.targetWeight, item_3.solution, mapOf(to('data', item_3.solutionsStepTree)), mapOf(to('data', item_3.hints)), void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, item_3.expressionTaskIntermediateData));
    }
    return destination_11;
  }
  function sortTasks$lambda(closure$tagsChosen) {
    return function (it) {
      return getTagUsage(it, closure$tagsChosen);
    };
  }
  function sortTasks$lambda_0(it) {
    return it.currentExpression.identifier.length;
  }
  function sortTasks$lambda_1(closure$expressionLengthComparator) {
    return function (t1, t2) {
      return closure$expressionLengthComparator.v.compare(t1, t2);
    };
  }
  function sortTasks(tasks, sortType, sortOrder, tagsChosen) {
    var tmp$;
    var tagUsageComparator = new Comparator$ObjectLiteral_11(compareBy$lambda_5(sortTasks$lambda(tagsChosen)));
    var expressionLengthComparator = {v: new Comparator$ObjectLiteral_11(compareBy$lambda_5(sortTasks$lambda_0))};
    if (sortOrder === SortOrder$DESC_getInstance()) {
      tagUsageComparator = reversed_0(tagUsageComparator);
      expressionLengthComparator.v = reversed_0(expressionLengthComparator.v);
    }
    switch (sortType.name) {
      case 'BY_RULE_TAG_USAGE':
        tmp$ = toMutableList(sortedWith(tasks, new Comparator$ObjectLiteral_12(thenComparator$lambda(tagUsageComparator, sortTasks$lambda_1(expressionLengthComparator)))));
        break;
      case 'BY_TASK_LENGTH':
        tmp$ = toMutableList(sortedWith(tasks, expressionLengthComparator.v));
        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  }
  function tryToGenerateNewTasks(currentTask, newCurrentTasks, settings, stepId) {
    var compiledConfiguration = settings.compiledConfiguration;
    var currentExpression = currentTask.currentExpression;
    currentExpression.computeNodeIdsAsNumbersInDirectTraversalAndDistancesToRoot_ydzd23$();
    placesThenSubstitutionsGenerator(currentTask, newCurrentTasks, compiledConfiguration, stepId);
    substitutionsThenPlacesGenerator(currentTask, newCurrentTasks, settings, stepId);
  }
  function placesThenSubstitutionsGenerator$lambda(closure$stepId, closure$applications) {
    return function () {
      var tmp$ = '(places, then substitutions) stepId = ' + closure$stepId + ', ';
      var $receiver = closure$applications;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var item = tmp$_0.next();
        destination.add_11rb$('rule: ' + item.expressionSubstitution.computeIdentifier_6taknv$(false) + ', result: ' + item.resultExpression.computeIdentifier_5osufp$());
      }
      return tmp$ + ('applications = ' + joinToString(destination, ', \n'));
    };
  }
  function placesThenSubstitutionsGenerator$lambda_0(closure$stepId, closure$application) {
    return function () {
      return '(places, then substitutions) stepId = ' + closure$stepId + ', rule ' + closure$application.expressionSubstitution.computeIdentifier_6taknv$(false) + " is failed (can't be applied inside exponent or trigonometric function)";
    };
  }
  function placesThenSubstitutionsGenerator$lambda_1(closure$stepId, closure$application) {
    return function () {
      return '(places, then substitutions) stepId = ' + closure$stepId + ', rule ' + closure$application.expressionSubstitution.computeIdentifier_6taknv$(false) + ' is failed (leads to one of previous expressions)';
    };
  }
  function placesThenSubstitutionsGenerator$lambda_2(closure$stepId, closure$newTask, closure$application) {
    return function () {
      return '(places, then substitutions) ' + ('stepId = ' + closure$stepId + ', new task = ' + closure$newTask.currentExpression.computeIdentifier_5osufp$() + ', ') + ('used substitution = ' + closure$application.expressionSubstitution.computeIdentifier_6taknv$(false));
    };
  }
  function placesThenSubstitutionsGenerator(currentTask, newCurrentTasks, compiledConfiguration, stepId) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var currentExpression = currentTask.currentExpression;
    var expressionComparator = compiledConfiguration.factComparator.expressionComparator;
    var selectedNodeIds = selectRandomNodeIdsToTransform(currentExpression);
    tmp$ = selectedNodeIds.iterator();
    while (tmp$.hasNext()) {
      var nodeId = tmp$.next();
      var applications = findApplicableSubstitutionsInSelectedPlace(currentExpression, copyToArray(listOf(nodeId)), compiledConfiguration, void 0, true);
      log_1.addMessage_cte53e$(placesThenSubstitutionsGenerator$lambda(stepId, applications), MessageType$TECHNICAL_getInstance());
      tmp$_0 = applications.iterator();
      loop_label: while (tmp$_0.hasNext()) {
        var application = tmp$_0.next();
        if (containsTrigonometricFunctionInResult_0(application) && (insideExponent(application.originalExpressionChangingPart, expressionComparator) || insideTrigonometricFunction(application.originalExpressionChangingPart))) {
          log_1.addMessage_cte53e$(placesThenSubstitutionsGenerator$lambda_0(stepId, application), MessageType$TECHNICAL_getInstance());
          continue loop_label;
        }
        var $receiver = currentTask.previousExpressions;
        var any$result;
        any$break: do {
          var tmp$_3;
          if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
            any$result = false;
            break any$break;
          }
          tmp$_3 = $receiver.iterator();
          while (tmp$_3.hasNext()) {
            var element = tmp$_3.next();
            if (compareExpressionNodes(element, application.resultExpression)) {
              any$result = true;
              break any$break;
            }
          }
          any$result = false;
        }
         while (false);
        if (any$result) {
          log_1.addMessage_cte53e$(placesThenSubstitutionsGenerator$lambda_1(stepId, application), MessageType$TECHNICAL_getInstance());
          continue loop_label;
        }
        var newTask = currentTask.clone();
        newTask.previousExpressions.add_11rb$(newTask.currentExpression.clone());
        newTask.currentExpression = application.resultExpression;
        newTask.usedSubstitutions.add_11rb$(application.expressionSubstitution);
        newTask.solutionsStepTree.add_11rb$(new SolutionsStepITR(newTask.currentExpression.toString(), application.expressionSubstitution, listOf(nodeId), stepId, (tmp$_2 = (tmp$_1 = lastOrNull(newTask.solutionsStepTree)) != null ? tmp$_1.stepId : null) != null ? tmp$_2 : -1));
        newTask.updateTagWeightMap_m3l3r0$(application.expressionSubstitution);
        newCurrentTasks.add_11rb$(newTask);
        log_1.addMessage_cte53e$(placesThenSubstitutionsGenerator$lambda_2(stepId, newTask, application), MessageType$TECHNICAL_getInstance());
      }
    }
  }
  function substitutionsThenPlacesGenerator$lambda(closure$stepId, closure$appropriateSubstitutions) {
    return function () {
      var tmp$ = '(substitutions, then places) stepId = ' + closure$stepId + ', ';
      var $receiver = closure$appropriateSubstitutions.v;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var item = tmp$_0.next();
        destination.add_11rb$('code = ' + item.computeIdentifier_6taknv$(false) + ', ' + ('weightInTaskAutoGeneration = ' + item.weightInTaskAutoGeneration + ', weight = ' + item.difficultyInTaskAutoGeneration));
      }
      return tmp$ + ('appropriate substitutions: ' + joinToString(destination, ', \n'));
    };
  }
  function substitutionsThenPlacesGenerator$lambda_0(closure$selector, closure$appropriateSubstitutionWeight) {
    return function () {
      return 'selector value = ' + closure$selector.v + ' (out of ' + closure$appropriateSubstitutionWeight + ')';
    };
  }
  function substitutionsThenPlacesGenerator$lambda_1(closure$stepId, closure$selectedSubstitution) {
    return function () {
      return '(substitutions, then places) stepId = ' + closure$stepId + ', ' + ('selected substitution: ' + closure$selectedSubstitution.computeIdentifier_6taknv$(false));
    };
  }
  function substitutionsThenPlacesGenerator$lambda_2(closure$stepId, closure$selectedSubstitution) {
    return function () {
      return '(substitutions, then places) stepId = ' + closure$stepId + ', ' + ('selected substitution: ' + closure$selectedSubstitution.computeIdentifier_6taknv$(false) + ' failed (inside exponent or trigonometric function)');
    };
  }
  function substitutionsThenPlacesGenerator$lambda_3(closure$stepId, closure$selectedSubstitution) {
    return function () {
      return '(substitutions, then places) stepId = ' + closure$stepId + ', ' + ('selected substitution: ' + closure$selectedSubstitution.computeIdentifier_6taknv$(false) + ' failed (no places)');
    };
  }
  function substitutionsThenPlacesGenerator$lambda_4(closure$stepId, closure$newTask) {
    return function () {
      return '(substitutions, then places) stepId = ' + closure$stepId + ', ' + ('task is failed (leads to one of previous nodes): ' + closure$newTask.currentExpression.computeIdentifier_5osufp$());
    };
  }
  function substitutionsThenPlacesGenerator$lambda_5(closure$stepId, closure$newTask, closure$selectedSubstitution) {
    return function () {
      return '(substitutions, then places) ' + ('stepId = ' + closure$stepId + ', new task = ' + closure$newTask.currentExpression.computeIdentifier_5osufp$() + ', ') + ('used substitution = ' + closure$selectedSubstitution.computeIdentifier_6taknv$(false));
    };
  }
  function substitutionsThenPlacesGenerator(currentTask, newCurrentTasks, settings, stepId) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var compiledConfiguration = settings.compiledConfiguration;
    var expressionComparator = compiledConfiguration.factComparator.expressionComparator;
    var currentExpression = currentTask.currentExpression;
    var functionsInExpression = currentExpression.getContainedFunctions();
    var tmp$_4;
    var sum = 0.0;
    tmp$_4 = currentTask.usedSubstitutions.iterator();
    while (tmp$_4.hasNext()) {
      var element = tmp$_4.next();
      sum += element.difficultyInTaskAutoGeneration;
    }
    if (sum < settings.targetWeight * settings.extendReduceFactor) {
      tmp$ = settings.extendingExpressionSubstitutions;
    }
     else {
      tmp$ = settings.reducingExpressionSubstitutions;
    }
    var actualExpressionSubstitutions = tmp$;
    var appropriateSubstitutions = {v: ArrayList_init()};
    tmp$_0 = actualExpressionSubstitutions.iterator();
    while (tmp$_0.hasNext()) {
      var substitution = tmp$_0.next();
      if (substitution.isAppropriateToFunctions_ywdfdh$(functionsInExpression) && substitution.left.nodeType !== NodeType$EMPTY_getInstance()) {
        if (!substitution.findAllPossibleSubstitutionPlaces_i8kf4x$(currentExpression, expressionComparator).isEmpty()) {
          substitution.setStepIdForRight_za3lpa$(stepId);
          appropriateSubstitutions.v.add_11rb$(substitution);
        }
      }
    }
    var $receiver = appropriateSubstitutions.v;
    var destination = ArrayList_init();
    var tmp$_5;
    tmp$_5 = $receiver.iterator();
    while (tmp$_5.hasNext()) {
      var element_0 = tmp$_5.next();
      if (element_0.difficultyInTaskAutoGeneration > 0.0)
        destination.add_11rb$(element_0);
    }
    var appropriateSubstitutionsWithNonZeroWeight = toMutableList(destination);
    if (!appropriateSubstitutionsWithNonZeroWeight.isEmpty()) {
      appropriateSubstitutions.v = appropriateSubstitutionsWithNonZeroWeight;
    }
    log_1.addMessage_cte53e$(substitutionsThenPlacesGenerator$lambda(stepId, appropriateSubstitutions), MessageType$TECHNICAL_getInstance());
    var tmp$_6;
    var sum_0 = 0.0;
    tmp$_6 = appropriateSubstitutions.v.iterator();
    while (tmp$_6.hasNext()) {
      var element_1 = tmp$_6.next();
      var tmp$_7;
      var mainTag = first(element_1.tagsForTaskGenerator);
      var tagWeight = (tmp$_7 = currentTask.tagWeightMap.get_11rb$(mainTag)) != null ? tmp$_7 : 1.0;
      sum_0 += element_1.weightInTaskAutoGeneration * tagWeight;
    }
    var appropriateSubstitutionWeight = sum_0;
    if (appropriateSubstitutionWeight < BaseOperationsComputation$Companion_getInstance().epsilon) {
      return;
    }
    var newTask = currentTask.clone();
    var selector = {v: random_1(0.0, appropriateSubstitutionWeight)};
    log_1.addMessage_cte53e$(substitutionsThenPlacesGenerator$lambda_0(selector, appropriateSubstitutionWeight), MessageType$TECHNICAL_getInstance());
    var currentSubstitutionIndex = 0;
    var currentSubstitution = appropriateSubstitutions.v.get_za3lpa$(0);
    while (selector.v > currentSubstitution.weightInTaskAutoGeneration) {
      var mainTag_0 = first(currentSubstitution.tagsForTaskGenerator);
      var tagWeight_0 = (tmp$_1 = currentTask.tagWeightMap.get_11rb$(mainTag_0)) != null ? tmp$_1 : 1.0;
      selector.v -= currentSubstitution.weightInTaskAutoGeneration * tagWeight_0;
      currentSubstitutionIndex = currentSubstitutionIndex + 1 | 0;
      currentSubstitution = appropriateSubstitutions.v.get_za3lpa$(currentSubstitutionIndex);
    }
    var selectedSubstitution = appropriateSubstitutions.v.get_za3lpa$(currentSubstitutionIndex);
    log_1.addMessage_cte53e$(substitutionsThenPlacesGenerator$lambda_1(stepId, selectedSubstitution), MessageType$TECHNICAL_getInstance());
    var places = selectedSubstitution.findAllPossibleSubstitutionPlaces_i8kf4x$(newTask.currentExpression, expressionComparator);
    if (containsTrigonometricFunctionInResult(selectedSubstitution)) {
      var $receiver_0 = places;
      var destination_0 = ArrayList_init();
      var tmp$_8;
      tmp$_8 = $receiver_0.iterator();
      while (tmp$_8.hasNext()) {
        var element_2 = tmp$_8.next();
        if (!insideExponent(element_2.originalValue, expressionComparator) && !insideTrigonometricFunction(element_2.originalValue))
          destination_0.add_11rb$(element_2);
      }
      places = toMutableList(destination_0);
      if (places.isEmpty()) {
        log_1.addMessage_cte53e$(substitutionsThenPlacesGenerator$lambda_2(stepId, selectedSubstitution), MessageType$TECHNICAL_getInstance());
        return;
      }
    }
    if (places.size === 0) {
      log_1.addMessage_cte53e$(substitutionsThenPlacesGenerator$lambda_3(stepId, selectedSubstitution), MessageType$TECHNICAL_getInstance());
      return;
    }
    var changedExpression = newTask.currentExpression.clone();
    newTask.previousExpressions.add_11rb$(newTask.currentExpression.clone());
    newTask.usedSubstitutions.add_11rb$(selectedSubstitution);
    var bitMask = 1 << randomInt(0, places.size - 1 | 0);
    var changedNodeIds = selectedSubstitution.applySubstitutionByBitMask_uet8du$(places, bitMask);
    var $receiver_1 = currentTask.previousExpressions;
    var any$result;
    any$break: do {
      var tmp$_9;
      if (Kotlin.isType($receiver_1, Collection) && $receiver_1.isEmpty()) {
        any$result = false;
        break any$break;
      }
      tmp$_9 = $receiver_1.iterator();
      while (tmp$_9.hasNext()) {
        var element_3 = tmp$_9.next();
        if (compareExpressionNodes(element_3, newTask.currentExpression)) {
          any$result = true;
          break any$break;
        }
      }
      any$result = false;
    }
     while (false);
    if (any$result) {
      log_1.addMessage_cte53e$(substitutionsThenPlacesGenerator$lambda_4(stepId, newTask), MessageType$TECHNICAL_getInstance());
      return;
    }
    newTask.solutionsStepTree.add_11rb$(new SolutionsStepITR(changedExpression.toString(), selectedSubstitution, changedNodeIds, stepId, (tmp$_3 = (tmp$_2 = lastOrNull(newTask.solutionsStepTree)) != null ? tmp$_2.stepId : null) != null ? tmp$_3 : -1));
    newTask.updateTagWeightMap_m3l3r0$(selectedSubstitution);
    log_1.addMessage_cte53e$(substitutionsThenPlacesGenerator$lambda_5(stepId, newTask, selectedSubstitution), MessageType$TECHNICAL_getInstance());
    newCurrentTasks.add_11rb$(newTask);
  }
  function getTagUsage(task, tagsChosen) {
    var $receiver = task.usedSubstitutions;
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var list = element.tagsForTaskGenerator;
      addAll(destination, list);
    }
    var usedTags = distinct(destination);
    return intersect(usedTags, tagsChosen).size / tagsChosen.size;
  }
  function unify(tasks, compiledConfiguration) {
    var tmp$, tmp$_0;
    var unifiedTasks = ArrayList_init();
    tmp$ = tasks.iterator();
    while (tmp$.hasNext()) {
      var task = tmp$.next();
      var isNew = true;
      tmp$_0 = unifiedTasks.iterator();
      while (tmp$_0.hasNext()) {
        var unifiedTask = tmp$_0.next();
        if (compiledConfiguration.factComparator.expressionComparator.compareAsIs_5gxvt3$(task.currentExpression, unifiedTask.currentExpression)) {
          isNew = false;
          break;
        }
      }
      if (isNew) {
        unifiedTasks.add_11rb$(task);
      }
    }
    return unifiedTasks;
  }
  function VariableLink(targetVariable, computingExpression, sourceVariables, comparisonType) {
    this.targetVariable = targetVariable;
    this.computingExpression = computingExpression;
    this.sourceVariables = sourceVariables;
    this.comparisonType = comparisonType;
  }
  VariableLink.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VariableLink',
    interfaces: []
  };
  VariableLink.prototype.component1 = function () {
    return this.targetVariable;
  };
  VariableLink.prototype.component2 = function () {
    return this.computingExpression;
  };
  VariableLink.prototype.component3 = function () {
    return this.sourceVariables;
  };
  VariableLink.prototype.component4 = function () {
    return this.comparisonType;
  };
  VariableLink.prototype.copy_n3l7qa$ = function (targetVariable, computingExpression, sourceVariables, comparisonType) {
    return new VariableLink(targetVariable === void 0 ? this.targetVariable : targetVariable, computingExpression === void 0 ? this.computingExpression : computingExpression, sourceVariables === void 0 ? this.sourceVariables : sourceVariables, comparisonType === void 0 ? this.comparisonType : comparisonType);
  };
  VariableLink.prototype.toString = function () {
    return 'VariableLink(targetVariable=' + Kotlin.toString(this.targetVariable) + (', computingExpression=' + Kotlin.toString(this.computingExpression)) + (', sourceVariables=' + Kotlin.toString(this.sourceVariables)) + (', comparisonType=' + Kotlin.toString(this.comparisonType)) + ')';
  };
  VariableLink.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.targetVariable) | 0;
    result = result * 31 + Kotlin.hashCode(this.computingExpression) | 0;
    result = result * 31 + Kotlin.hashCode(this.sourceVariables) | 0;
    result = result * 31 + Kotlin.hashCode(this.comparisonType) | 0;
    return result;
  };
  VariableLink.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.targetVariable, other.targetVariable) && Kotlin.equals(this.computingExpression, other.computingExpression) && Kotlin.equals(this.sourceVariables, other.sourceVariables) && Kotlin.equals(this.comparisonType, other.comparisonType)))));
  };
  function VariableData(name, fromVariableLinks, toVariableLinks, mandatorySources) {
    if (fromVariableLinks === void 0) {
      fromVariableLinks = LinkedHashMap_init_0();
    }
    if (toVariableLinks === void 0) {
      toVariableLinks = LinkedHashMap_init_0();
    }
    if (mandatorySources === void 0) {
      mandatorySources = LinkedHashSet_init();
    }
    this.name = name;
    this.fromVariableLinks = fromVariableLinks;
    this.toVariableLinks = toVariableLinks;
    this.mandatorySources = mandatorySources;
  }
  VariableData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VariableData',
    interfaces: []
  };
  VariableData.prototype.component1 = function () {
    return this.name;
  };
  VariableData.prototype.component2 = function () {
    return this.fromVariableLinks;
  };
  VariableData.prototype.component3 = function () {
    return this.toVariableLinks;
  };
  VariableData.prototype.component4 = function () {
    return this.mandatorySources;
  };
  VariableData.prototype.copy_r42err$ = function (name, fromVariableLinks, toVariableLinks, mandatorySources) {
    return new VariableData(name === void 0 ? this.name : name, fromVariableLinks === void 0 ? this.fromVariableLinks : fromVariableLinks, toVariableLinks === void 0 ? this.toVariableLinks : toVariableLinks, mandatorySources === void 0 ? this.mandatorySources : mandatorySources);
  };
  VariableData.prototype.toString = function () {
    return 'VariableData(name=' + Kotlin.toString(this.name) + (', fromVariableLinks=' + Kotlin.toString(this.fromVariableLinks)) + (', toVariableLinks=' + Kotlin.toString(this.toVariableLinks)) + (', mandatorySources=' + Kotlin.toString(this.mandatorySources)) + ')';
  };
  VariableData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.fromVariableLinks) | 0;
    result = result * 31 + Kotlin.hashCode(this.toVariableLinks) | 0;
    result = result * 31 + Kotlin.hashCode(this.mandatorySources) | 0;
    return result;
  };
  VariableData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.fromVariableLinks, other.fromVariableLinks) && Kotlin.equals(this.toVariableLinks, other.toVariableLinks) && Kotlin.equals(this.mandatorySources, other.mandatorySources)))));
  };
  function TestPointGenerator(compiledConfiguration, expressionComparisonExpanse) {
    if (expressionComparisonExpanse === void 0)
      expressionComparisonExpanse = new ExpressionComparisonExpanse(compiledConfiguration);
    this.compiledConfiguration = compiledConfiguration;
    this.expressionComparisonExpanse = expressionComparisonExpanse;
    this.variablesData = LinkedHashMap_init_0();
    this.possibleStartVariables = LinkedHashSet_init();
  }
  TestPointGenerator.prototype.addVariableLinkToVariable_qry7ab$ = function (name, variableLink) {
    var tmp$;
    var variableLinks = (tmp$ = this.variablesData.get_11rb$(name)) != null ? tmp$ : new VariableData(name);
    equals(variableLink.targetVariable, name);
  };
  TestPointGenerator.prototype.addCondition_4i7xhz$ = function (expressionComparison) {
    var tmp$;
    var variableRelations = ArrayList_init();
    this.expressionComparisonExpanse.expanseGenerator_lmvlsj$(expressionComparison, variableRelations, true);
    var targetVariables = LinkedHashSet_init();
    var allVariables = plus_0(expressionComparison.leftExpression.data.getContainedVariables(), expressionComparison.rightExpression.data.getContainedVariables());
    tmp$ = variableRelations.iterator();
    while (tmp$.hasNext()) {
      var relation = tmp$.next();
      var sourceVariables = relation.rightExpression.data.getContainedVariables();
      var variableLink = new VariableLink(relation.leftExpression.data.value, relation.rightExpression.data, sourceVariables, relation.comparisonType);
    }
  };
  TestPointGenerator.prototype.generateNewPoint = function () {
    var variableUninitializedSourcesCount = LinkedHashMap_init_0();
    var result = LinkedHashMap_init_0();
    return result;
  };
  TestPointGenerator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TestPointGenerator',
    interfaces: []
  };
  function Comparator$ObjectLiteral_13(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_13.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_13.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_6 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function ColoringTask(startPosition, endPosition, color) {
    this.startPosition = startPosition;
    this.endPosition = endPosition;
    this.color = color;
  }
  ColoringTask.prototype.texColor = function () {
    switch (this.color) {
      case '7F00FF':
        return 'purple';
      case '007F00':
        return 'green';
      case 'FF00FF':
        return 'yellow';
      case 'FF0000':
        return 'red';
      default:return 'black';
    }
  };
  ColoringTask.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ColoringTask',
    interfaces: []
  };
  ColoringTask.prototype.component1 = function () {
    return this.startPosition;
  };
  ColoringTask.prototype.component2 = function () {
    return this.endPosition;
  };
  ColoringTask.prototype.component3 = function () {
    return this.color;
  };
  ColoringTask.prototype.copy_98i29q$ = function (startPosition, endPosition, color) {
    return new ColoringTask(startPosition === void 0 ? this.startPosition : startPosition, endPosition === void 0 ? this.endPosition : endPosition, color === void 0 ? this.color : color);
  };
  ColoringTask.prototype.toString = function () {
    return 'ColoringTask(startPosition=' + Kotlin.toString(this.startPosition) + (', endPosition=' + Kotlin.toString(this.endPosition)) + (', color=' + Kotlin.toString(this.color)) + ')';
  };
  ColoringTask.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.startPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.endPosition) | 0;
    result = result * 31 + Kotlin.hashCode(this.color) | 0;
    return result;
  };
  ColoringTask.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.startPosition, other.startPosition) && Kotlin.equals(this.endPosition, other.endPosition) && Kotlin.equals(this.color, other.color)))));
  };
  function setBackgroundColorMathMl(string, color) {
    return replaceFirst(string, 'MathML">', 'MathML' + '"' + ' mathcolor=' + '"' + '#' + color + '"' + '>');
  }
  function brushMathMl$lambda(it) {
    return it.startPosition;
  }
  function brushMathMl(string, coloringTasks) {
    var tmp$;
    var result = StringBuilder_init_0();
    var lastHandledPosition = 0;
    var destination = ArrayList_init();
    var tmp$_0;
    tmp$_0 = coloringTasks.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      if (element.startPosition <= element.endPosition)
        destination.add_11rb$(element);
    }
    var sortedColoringTasks = sortedWith(destination, new Comparator$ObjectLiteral_13(compareBy$lambda_6(brushMathMl$lambda)));
    tmp$ = sortedColoringTasks.iterator();
    while (tmp$.hasNext()) {
      var task = tmp$.next();
      var startIndexPair = findAnyOf(string, listOf_0(['<mo>', '<mn>', '<mi>']), task.startPosition - 4 | 0);
      var approxStartPosition = startIndexPair != null && startIndexPair.first <= task.startPosition ? startIndexPair.first : task.startPosition;
      var startPosition = skipClosingTags(string, findFirstNotInTagNotInMtext(string, approxStartPosition));
      if (task.startPosition === task.endPosition || startPosition >= get_lastIndex_0(string)) {
        var startIndex = lastHandledPosition;
        result.append_gw00v9$(colorOnlyNewLineSplittingSign(string.substring(startIndex, startPosition)));
        result.append_gw00v9$(coloringStart(task.color) + underlining + coloringEnd);
        lastHandledPosition = startPosition;
      }
       else {
        var endPosition = findClosestPlaceToTargetOnTheSameLevel(string, startPosition, task.endPosition);
        var startIndex_0 = lastHandledPosition;
        result.append_gw00v9$(string.substring(startIndex_0, startPosition));
        result.append_gw00v9$(coloringStart(task.color));
        result.append_gw00v9$(colorOnlyNewLineSplittingSign(string.substring(startPosition, endPosition)));
        result.append_gw00v9$(coloringEnd);
        lastHandledPosition = endPosition;
      }
    }
    var startIndex_1 = lastHandledPosition;
    result.append_gw00v9$(string.substring(startIndex_1));
    return result.toString();
  }
  function dropPerformedMathMLBrushing(string) {
    var result = dropPerformedMathMLBrushingInternal(string);
    var resultLast = string;
    while (!equals(result, resultLast)) {
      var newResult = dropPerformedMathMLBrushingInternal(result);
      resultLast = result;
      result = newResult;
    }
    return result;
  }
  function dropPerformedMathMLBrushingInternal(string) {
    var result = StringBuilder_init_0();
    var currentPosition = 0;
    while (currentPosition < string.length) {
      var indexPair = findAnyOf(string, listOf_0([coloringBoldHeaderStart, coloringBoldHeaderStartGeneral, coloringHeaderStart, coloringHeaderStartGeneral, boldHeaderStart, boldHeaderStartGeneral]), currentPosition);
      if (indexPair != null) {
        if (equals(indexPair.second, coloringBoldHeaderStart)) {
          var startIndex = currentPosition;
          var endIndex = indexPair.first;
          result.append_gw00v9$(string.substring(startIndex, endIndex));
          currentPosition = indexPair.first + coloringBoldStartLength | 0;
          var newCurrentPosition = skipFromRemainingExpressionWhileClosingTagNotFound('mrow', string, currentPosition);
          var startIndex_0 = currentPosition;
          result.append_gw00v9$(string.substring(startIndex_0, newCurrentPosition));
          currentPosition = newCurrentPosition + coloringEndLength | 0;
        }
         else if (equals(indexPair.second, coloringHeaderStart)) {
          var startIndex_1 = currentPosition;
          var endIndex_0 = indexPair.first;
          result.append_gw00v9$(string.substring(startIndex_1, endIndex_0));
          currentPosition = indexPair.first + coloringStartLength | 0;
          var newCurrentPosition_0 = skipFromRemainingExpressionWhileClosingTagNotFound('mrow', string, currentPosition);
          var startIndex_2 = currentPosition;
          result.append_gw00v9$(string.substring(startIndex_2, newCurrentPosition_0));
          currentPosition = newCurrentPosition_0 + coloringEndLength | 0;
        }
         else if (equals(indexPair.second, boldHeaderStart)) {
          var startIndex_3 = currentPosition;
          var endIndex_1 = indexPair.first;
          result.append_gw00v9$(string.substring(startIndex_3, endIndex_1));
          currentPosition = indexPair.first + boldStartLength | 0;
          var newCurrentPosition_1 = skipFromRemainingExpressionWhileClosingTagNotFound('mrow', string, currentPosition);
          var startIndex_4 = currentPosition;
          result.append_gw00v9$(string.substring(startIndex_4, newCurrentPosition_1));
          currentPosition = newCurrentPosition_1 + coloringEndLength | 0;
        }
         else if (equals(indexPair.second, coloringBoldHeaderStartGeneral)) {
          var startIndex_5 = currentPosition;
          var endIndex_2 = indexPair.first;
          result.append_gw00v9$(string.substring(startIndex_5, endIndex_2));
          currentPosition = indexPair.first + 39 | 0;
        }
         else if (equals(indexPair.second, coloringHeaderStartGeneral)) {
          var startIndex_6 = currentPosition;
          var endIndex_3 = indexPair.first;
          result.append_gw00v9$(string.substring(startIndex_6, endIndex_3));
          currentPosition = indexPair.first + 20 | 0;
        }
         else if (equals(indexPair.second, boldHeaderStartGeneral)) {
          var startIndex_7 = currentPosition;
          var endIndex_4 = indexPair.first;
          result.append_gw00v9$(string.substring(startIndex_7, endIndex_4));
          currentPosition = indexPair.first + 19 | 0;
        }
         else
          break;
      }
       else {
        var startIndex_8 = currentPosition;
        result.append_gw00v9$(string.substring(startIndex_8));
        break;
      }
    }
    return result.toString();
  }
  function coloringStart(color) {
    return coloringBoldHeaderStart + color + '"' + '>';
  }
  var coloringEnd;
  var coloringBoldHeaderStartGeneral;
  var coloringBoldHeaderStart;
  var coloringBoldStartLength;
  var coloringHeaderStartGeneral;
  var coloringHeaderStart;
  var coloringStartLength;
  var boldHeaderStartGeneral;
  var boldHeaderStart;
  var boldStartLength;
  var coloringEndLength;
  var coloringOffset;
  var underlining;
  function colorOnlyNewLineSplittingSign(splittingSign) {
    var newSplittingSign = splittingSign;
    if (splittingSign.length === 0 || startsWith(splittingSign, '<mspace linebreak="newline"/>')) {
      newSplittingSign = '<mo>=<\/mo><mo>&gt;<\/mo>' + splittingSign;
    }
    return newSplittingSign;
  }
  function transformationPartsToLog(transformationsPart) {
    return transformationsPart.computeIdentifier_6taknv$(false);
  }
  function transformationPartsToLog_0(transformation) {
    return transformation.computeIdentifier_6taknv$(false);
  }
  function transformationPartsToLog_1(transformation) {
    return transformation.computeIdentifier_6taknv$(false);
  }
  function transformationPartsToLog_2(transformation) {
    return transformation.computeIdentifier_6taknv$(false);
  }
  function Comparator$ObjectLiteral_14(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_14.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_14.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda_7 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function setBackgroundColorTex(string, color) {
    return '\\' + 'textcolor{' + color + '}{' + string + '}';
  }
  function brushTex$lambda(it) {
    return it.startPosition;
  }
  function brushTex(string, coloringTasks) {
    var tmp$;
    var result = StringBuilder_init_0();
    var lastHandledPosition = 0;
    var destination = ArrayList_init();
    var tmp$_0;
    tmp$_0 = coloringTasks.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      if (element.startPosition <= element.endPosition)
        destination.add_11rb$(element);
    }
    var sortedColoringTasks = sortedWith(destination, new Comparator$ObjectLiteral_14(compareBy$lambda_7(brushTex$lambda)));
    tmp$ = sortedColoringTasks.iterator();
    while (tmp$.hasNext()) {
      var task = tmp$.next();
      if (task.startPosition >= get_lastIndex_0(string)) {
        var startIndex = lastHandledPosition;
        var endIndex = get_lastIndex_0(string);
        result.append_gw00v9$(string.substring(startIndex, endIndex));
        result.append_gw00v9$('\\' + 'textcolor{' + task.texColor() + '}{.}');
      }
       else {
        var startIndex_0 = lastHandledPosition;
        var endIndex_0 = task.startPosition;
        result.append_gw00v9$(string.substring(startIndex_0, endIndex_0));
        if (task.startPosition === task.endPosition || task.startPosition >= get_lastIndex_0(string)) {
          result.append_gw00v9$('\\' + 'textcolor{' + task.texColor() + '}{.}');
          lastHandledPosition = task.startPosition;
        }
         else {
          var endPosition = findClosestPlaceToTargetOnTheSameLevel(string, task.startPosition, task.endPosition, false);
          result.append_gw00v9$('\\' + 'textcolor{' + task.texColor() + '}{');
          var startIndex_1 = task.startPosition;
          result.append_gw00v9$(string.substring(startIndex_1, endPosition));
          result.append_gw00v9$('}');
          lastHandledPosition = endPosition;
        }
      }
    }
    var startIndex_2 = lastHandledPosition;
    result.append_gw00v9$(string.substring(startIndex_2));
    return result.toString();
  }
  function dropPerformedTexBrushing(string) {
    var result = dropPerformedTexBrushingInternal(string);
    var resultLast = string;
    while (!equals(result, resultLast)) {
      var newResult = dropPerformedTexBrushingInternal(result);
      resultLast = result;
      result = newResult;
    }
    return result;
  }
  function addWithSpaceIfNeed($receiver, string) {
    var tmp$;
    if (!isBlank($receiver) && ((tmp$ = firstOrNull_0(string)) != null ? isLetterOrDigitOrUnderscore(unboxChar(tmp$)) : null) === true) {
      $receiver.append_gw00v9$(' ');
    }
    $receiver.append_gw00v9$(string);
  }
  function dropPerformedTexBrushingInternal$lambda(it) {
    return unboxChar(it) !== 125;
  }
  function dropPerformedTexBrushingInternal(string) {
    var result = StringBuilder_init_0();
    var currentPosition = 0;
    while (currentPosition < string.length) {
      var index = findAnyOf(string, listOf('\\textcolor{'), currentPosition);
      if (index != null) {
        var startIndex = currentPosition;
        var endIndex = index.first;
        addWithSpaceIfNeed(result, string.substring(startIndex, endIndex));
        currentPosition = index.first + index.second.length | 0;
        currentPosition = skipFromRemainingExpressionWhile(dropPerformedTexBrushingInternal$lambda, string, currentPosition) + 1 | 0;
        if (currentPosition < string.length && string.charCodeAt(currentPosition) === 123) {
          currentPosition = currentPosition + 1 | 0;
          var newCurrentPosition = skipFromRemainingExpressionWhileClosingBracketNotFound('}', '{', string, currentPosition);
          var startIndex_0 = currentPosition;
          addWithSpaceIfNeed(result, string.substring(startIndex_0, newCurrentPosition));
          currentPosition = newCurrentPosition + 1 | 0;
        }
      }
       else {
        var underlineIndex = findAnyOf(string, listOf('\\underline{'), currentPosition);
        if (underlineIndex != null) {
          var startIndex_1 = currentPosition;
          var endIndex_0 = underlineIndex.first;
          addWithSpaceIfNeed(result, string.substring(startIndex_1, endIndex_0));
          currentPosition = underlineIndex.first + underlineIndex.second.length | 0;
          var newCurrentPosition_0 = skipFromRemainingExpressionWhileClosingBracketNotFound('}', '{', string, currentPosition);
          var startIndex_2 = currentPosition;
          addWithSpaceIfNeed(result, string.substring(startIndex_2, newCurrentPosition_0));
          currentPosition = newCurrentPosition_0 + 1 | 0;
        }
         else {
          var startIndex_3 = currentPosition;
          addWithSpaceIfNeed(result, string.substring(startIndex_3));
          break;
        }
      }
    }
    return result.toString();
  }
  function createCompiledConfigurationFromExpressionSubstitutionsAndParams_JS(expressionSubstitutions, additionalParamsMap) {
    if (additionalParamsMap === void 0) {
      additionalParamsMap = emptyMap();
    }
    return createCompiledConfigurationFromExpressionSubstitutionsAndParams(expressionSubstitutions, additionalParamsMap);
  }
  function createConfigurationFromRulePacksAndParams_JS(rulePacks, additionalParamsMap) {
    if (rulePacks === void 0) {
      rulePacks = copyToArray(listOf('Algebra'));
    }
    if (additionalParamsMap === void 0) {
      additionalParamsMap = emptyMap();
    }
    return createConfigurationFromRulePacksAndParams(rulePacks, additionalParamsMap);
  }
  function createConfigurationFromRulePacksAndDetailSolutionCheckingParams_JS(rulePacks, wellKnownFunctionsString, expressionTransformationRulesString, maxExpressionTransformationWeight, unlimitedWellKnownFunctionsString, taskContextExpressionTransformationRules, maxDistBetweenDiffSteps, scopeFilter, wellKnownFunctions, unlimitedWellKnownFunctions, expressionTransformationRules) {
    if (rulePacks === void 0) {
      rulePacks = copyToArray(listOf('Algebra'));
    }
    if (wellKnownFunctionsString === void 0)
      wellKnownFunctionsString = ';;;0;;;;;;1;;;+;;;-1;;;-;;;-1;;;*;;;-1;;;/;;;-1;;;^;;;-1';
    if (expressionTransformationRulesString === void 0)
      expressionTransformationRulesString = 'S(i, a, a, f(i));;;f(a);;;S(i, a, b, f(i));;;S(i, a, b-1, f(i)) + f(b)';
    if (maxExpressionTransformationWeight === void 0)
      maxExpressionTransformationWeight = '1.0';
    if (unlimitedWellKnownFunctionsString === void 0)
      unlimitedWellKnownFunctionsString = wellKnownFunctionsString;
    if (taskContextExpressionTransformationRules === void 0)
      taskContextExpressionTransformationRules = '';
    if (maxDistBetweenDiffSteps === void 0)
      maxDistBetweenDiffSteps = '';
    if (scopeFilter === void 0)
      scopeFilter = '';
    if (wellKnownFunctions === void 0)
      wellKnownFunctions = [];
    if (unlimitedWellKnownFunctions === void 0)
      unlimitedWellKnownFunctions = wellKnownFunctions;
    if (expressionTransformationRules === void 0)
      expressionTransformationRules = [];
    return createConfigurationFromRulePacksAndDetailSolutionCheckingParams(rulePacks, wellKnownFunctionsString, expressionTransformationRulesString, maxExpressionTransformationWeight, unlimitedWellKnownFunctionsString, taskContextExpressionTransformationRules, maxDistBetweenDiffSteps, scopeFilter, toList(wellKnownFunctions), toList(unlimitedWellKnownFunctions), toList(expressionTransformationRules));
  }
  function stringToExpression_JS(string, scope, isMathMl, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (isMathMl === void 0)
      isMathMl = false;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    return stringToExpression(string, scope, isMathMl, functionConfiguration, compiledConfiguration);
  }
  function structureStringToExpression_JS(structureString, scope, functionConfiguration) {
    if (scope === void 0)
      scope = '';
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    return structureStringToExpression(structureString, scope, functionConfiguration);
  }
  function cloneExpression_JS(expressionNode) {
    return expressionNode.clone();
  }
  function expressionToString_JS(expressionNode, characterEscapingDepth) {
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    return expressionToString(expressionNode, characterEscapingDepth);
  }
  function expressionToUnicodeString_JS(expressionNode, characterEscapingDepth) {
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    return expressionToUnicodeString(expressionNode, characterEscapingDepth);
  }
  function expressionToTexString_JS(expressionNode, characterEscapingDepth) {
    if (characterEscapingDepth === void 0)
      characterEscapingDepth = 1;
    return expressionToTexString(expressionNode, characterEscapingDepth);
  }
  function expressionToStructureString_JS(expressionNode) {
    return expressionToStructureString(expressionNode);
  }
  function stringToStructureString_JS(string, scope, isMathMl, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (isMathMl === void 0)
      isMathMl = false;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    return stringToStructureString(string, scope, isMathMl, functionConfiguration, compiledConfiguration);
  }
  function expressionSubstitutionFromStrings_0(left, right, scope, basedOnTaskContext, functionConfiguration, compiledConfiguration) {
    if (scope === void 0)
      scope = '';
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (functionConfiguration === void 0) {
      var $receiver = split(scope, [';']);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element.length > 0)
          destination.add_11rb$(element);
      }
      functionConfiguration = new FunctionConfiguration(toSet(destination));
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    return expressionSubstitutionFromStrings(left, right, scope, basedOnTaskContext, void 0, void 0, void 0, void 0, void 0, functionConfiguration, compiledConfiguration);
  }
  function expressionSubstitutionFromStructureStrings_JS(leftStructureString, rightStructureString, basedOnTaskContext, matchJumbledAndNested, simpleAdditional, isExtending, priority, code, nameEn, nameRu) {
    if (leftStructureString === void 0)
      leftStructureString = '';
    if (rightStructureString === void 0)
      rightStructureString = '';
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = false;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = false;
    if (simpleAdditional === void 0)
      simpleAdditional = false;
    if (isExtending === void 0)
      isExtending = false;
    if (priority === void 0)
      priority = 50;
    if (code === void 0)
      code = '';
    if (nameEn === void 0)
      nameEn = '';
    if (nameRu === void 0)
      nameRu = '';
    return expressionSubstitutionFromStructureStrings(leftStructureString, rightStructureString, basedOnTaskContext, matchJumbledAndNested, simpleAdditional, isExtending, priority, code, nameEn, nameRu);
  }
  function findApplicableSubstitutionsInSelectedPlace_JS(expression, selectedNodeIds, compiledConfiguration, simplifyNotSelectedTopArguments, withReadyApplicationResult) {
    if (simplifyNotSelectedTopArguments === void 0)
      simplifyNotSelectedTopArguments = false;
    if (withReadyApplicationResult === void 0)
      withReadyApplicationResult = true;
    return copyToArray(findApplicableSubstitutionsInSelectedPlace(expression, selectedNodeIds, compiledConfiguration, simplifyNotSelectedTopArguments, withReadyApplicationResult));
  }
  function findSubstitutionPlacesInExpression_0(expression, substitution) {
    return copyToArray(findSubstitutionPlacesInExpression(expression, substitution));
  }
  function applySubstitution_1(expression, substitution, substitutionPlaces) {
    return applySubstitution(expression, substitution, toList(substitutionPlaces));
  }
  function checkSolutionInTex_JS(originalTexSolution, startExpressionIdentifier, targetFactPattern, additionalFactsIdentifiers, endExpressionIdentifier, targetFactIdentifier, comparisonSign, wellKnownFunctions, wellKnownFunctionsString, unlimitedWellKnownFunctions, unlimitedWellKnownFunctionsString, expressionTransformationRules, expressionTransformationRulesString, taskContextExpressionTransformationRules, rulePacks, maxExpressionTransformationWeight, maxDistBetweenDiffSteps, scopeFilter, shortErrorDescription) {
    if (startExpressionIdentifier === void 0)
      startExpressionIdentifier = '';
    if (targetFactPattern === void 0)
      targetFactPattern = '';
    if (additionalFactsIdentifiers === void 0)
      additionalFactsIdentifiers = '';
    if (endExpressionIdentifier === void 0)
      endExpressionIdentifier = '';
    if (targetFactIdentifier === void 0)
      targetFactIdentifier = '';
    if (comparisonSign === void 0)
      comparisonSign = '';
    if (wellKnownFunctions === void 0)
      wellKnownFunctions = [];
    if (wellKnownFunctionsString === void 0)
      wellKnownFunctionsString = ';;;0;;;;;;1;;;+;;;-1;;;-;;;-1;;;*;;;-1;;;/;;;-1;;;^;;;-1';
    if (unlimitedWellKnownFunctions === void 0)
      unlimitedWellKnownFunctions = wellKnownFunctions;
    if (unlimitedWellKnownFunctionsString === void 0)
      unlimitedWellKnownFunctionsString = wellKnownFunctionsString;
    if (expressionTransformationRules === void 0)
      expressionTransformationRules = [];
    if (expressionTransformationRulesString === void 0)
      expressionTransformationRulesString = 'S(i, a, a, f(i));;;f(a);;;S(i, a, b, f(i));;;S(i, a, b-1, f(i)) + f(b)';
    if (taskContextExpressionTransformationRules === void 0)
      taskContextExpressionTransformationRules = '';
    if (rulePacks === void 0) {
      rulePacks = copyToArray(emptyList());
    }
    if (maxExpressionTransformationWeight === void 0)
      maxExpressionTransformationWeight = '1.0';
    if (maxDistBetweenDiffSteps === void 0)
      maxDistBetweenDiffSteps = '';
    if (scopeFilter === void 0)
      scopeFilter = '';
    if (shortErrorDescription === void 0)
      shortErrorDescription = '0';
    return checkSolutionInTex(originalTexSolution, startExpressionIdentifier, targetFactPattern, additionalFactsIdentifiers, endExpressionIdentifier, targetFactIdentifier, comparisonSign, toList(wellKnownFunctions), wellKnownFunctionsString, toList(unlimitedWellKnownFunctions), unlimitedWellKnownFunctionsString, toList(expressionTransformationRules), expressionTransformationRulesString, taskContextExpressionTransformationRules, rulePacks, maxExpressionTransformationWeight, maxDistBetweenDiffSteps, scopeFilter, shortErrorDescription);
  }
  function checkSolutionInTexWithCompiledConfiguration_JS(originalTexSolution, compiledConfiguration, startExpressionIdentifier, targetFactPattern, comparisonSign, additionalFactsIdentifiers, endExpressionIdentifier, targetFactIdentifier, shortErrorDescription) {
    if (startExpressionIdentifier === void 0)
      startExpressionIdentifier = '';
    if (targetFactPattern === void 0)
      targetFactPattern = '';
    if (additionalFactsIdentifiers === void 0)
      additionalFactsIdentifiers = '';
    if (endExpressionIdentifier === void 0)
      endExpressionIdentifier = '';
    if (targetFactIdentifier === void 0)
      targetFactIdentifier = '';
    if (shortErrorDescription === void 0)
      shortErrorDescription = '0';
    return checkSolutionInTexWithCompiledConfiguration(originalTexSolution, compiledConfiguration, startExpressionIdentifier, targetFactPattern, comparisonSign, additionalFactsIdentifiers, endExpressionIdentifier, targetFactIdentifier, shortErrorDescription);
  }
  function createCompiledConfigurationFromITR_JS(taskITR, rulePacksITR, comparisonSettings) {
    if (comparisonSettings === void 0)
      comparisonSettings = new ComparisonSettings();
    return createCompiledConfigurationFromITR(taskITR, rulePacksITR, comparisonSettings);
  }
  function checkSolutionInTexITR_JS(originalTexSolution, taskITR, rulePacksITR, shortErrorDescription, skipTrivialCheck, comparisonSettings, inputCompiledConfiguration) {
    if (shortErrorDescription === void 0)
      shortErrorDescription = '0';
    if (skipTrivialCheck === void 0)
      skipTrivialCheck = false;
    if (comparisonSettings === void 0)
      comparisonSettings = new ComparisonSettings();
    if (inputCompiledConfiguration === void 0)
      inputCompiledConfiguration = null;
    return checkSolutionInTexITR(originalTexSolution, taskITR, rulePacksITR, shortErrorDescription, skipTrivialCheck, comparisonSettings, inputCompiledConfiguration);
  }
  function getParsedExpressionByMathML(mathML) {
    var expressionTreeParser = new ExpressionTreeParser(mathML);
    expressionTreeParser.parse();
    var root = expressionTreeParser.root;
    return root.toString();
  }
  function checkFactsInMathML_0(brushedMathML, wellKnownFunctions, expressionTransformationRules, targetFactIdentifier, targetVariablesNames, minNumberOfMultipliersInAnswer, maxNumberOfDivisionsInAnswer, additionalFactsIdentifiers, maxExpressionTransformationWeight, unlimitedWellKnownFunctions, shortErrorDescription, taskContextExpressionTransformationRules, allowedVariablesNames, maxDistBetweenDiffSteps, forbiddenFunctions, scopeFilter, makeFirstSingleTransformationChainFactCorrectWithoutAdditionalFacts) {
    if (wellKnownFunctions === void 0)
      wellKnownFunctions = '+;;;-1;;;-;;;-1;;;*;;;-1;;;/;;;-1';
    if (expressionTransformationRules === void 0)
      expressionTransformationRules = 'S(i, a, a, f(i));;;f(a);;;S(i, a, b, f(i));;;S(i, a, b-1, f(i)) + f(b)';
    if (targetFactIdentifier === void 0)
      targetFactIdentifier = '';
    if (targetVariablesNames === void 0)
      targetVariablesNames = '';
    if (minNumberOfMultipliersInAnswer === void 0)
      minNumberOfMultipliersInAnswer = '';
    if (maxNumberOfDivisionsInAnswer === void 0)
      maxNumberOfDivisionsInAnswer = '';
    if (additionalFactsIdentifiers === void 0)
      additionalFactsIdentifiers = '';
    if (maxExpressionTransformationWeight === void 0)
      maxExpressionTransformationWeight = '1.0';
    if (unlimitedWellKnownFunctions === void 0)
      unlimitedWellKnownFunctions = wellKnownFunctions;
    if (shortErrorDescription === void 0)
      shortErrorDescription = '0';
    if (taskContextExpressionTransformationRules === void 0)
      taskContextExpressionTransformationRules = '';
    if (allowedVariablesNames === void 0)
      allowedVariablesNames = '';
    if (maxDistBetweenDiffSteps === void 0)
      maxDistBetweenDiffSteps = '';
    if (forbiddenFunctions === void 0)
      forbiddenFunctions = '';
    if (scopeFilter === void 0)
      scopeFilter = '';
    if (makeFirstSingleTransformationChainFactCorrectWithoutAdditionalFacts === void 0)
      makeFirstSingleTransformationChainFactCorrectWithoutAdditionalFacts = '0';
    return checkFactsInMathML(brushedMathML, wellKnownFunctions, expressionTransformationRules, targetFactIdentifier, targetVariablesNames, minNumberOfMultipliersInAnswer, maxNumberOfDivisionsInAnswer, additionalFactsIdentifiers, maxExpressionTransformationWeight, unlimitedWellKnownFunctions, shortErrorDescription, taskContextExpressionTransformationRules, allowedVariablesNames, maxDistBetweenDiffSteps, forbiddenFunctions, scopeFilter, makeFirstSingleTransformationChainFactCorrectWithoutAdditionalFacts);
  }
  function getUserLogInPlainText() {
    return log_1.getLogInPlainText_ap6kjd$(MessageType$USER_getInstance());
  }
  function getUserLogInJson() {
    return log_1.getLogInJson_j7vfu1$(MessageType$USER_getInstance());
  }
  function getAllLogInPlainText() {
    return log_1.getLogInPlainText_ap6kjd$();
  }
  function getAllLogInJson() {
    return log_1.getLogInJson_j7vfu1$();
  }
  function encryptSolution(solution) {
    return hashCode(solution).toString() + '_' + solution.length;
  }
  function encryptResult(result, solution) {
    return result + ' ' + hashCode(solution) + '_' + solution.length;
  }
  function decodeUrlSymbols_JS(string) {
    return decodeUrlSymbols(string);
  }
  function compareWithoutSubstitutions_1(left, right, scope, notChangesOnVariablesFunction, maxExpressionBustCount, functionConfiguration, comparisonSettings, compiledConfiguration) {
    if (scope === void 0)
      scope = setOf('');
    if (notChangesOnVariablesFunction === void 0)
      notChangesOnVariablesFunction = setOf_0(['+', '-', '*', '/', '^']);
    if (maxExpressionBustCount === void 0)
      maxExpressionBustCount = 4096;
    if (functionConfiguration === void 0)
      functionConfiguration = new FunctionConfiguration(scope, notChangesOnVariablesFunction);
    if (comparisonSettings === void 0) {
      var $receiver = new ComparisonSettings();
      $receiver.maxExpressionBustCount = maxExpressionBustCount;
      comparisonSettings = $receiver;
    }
    if (compiledConfiguration === void 0)
      compiledConfiguration = new CompiledConfiguration(void 0, functionConfiguration);
    return compareWithoutSubstitutions(left, right, scope, notChangesOnVariablesFunction, maxExpressionBustCount, functionConfiguration, comparisonSettings, new DebugOutputMessages(), compiledConfiguration);
  }
  function createExpressionFrontInput_JS(expression, format) {
    return createExpressionFrontInput(expression, format);
  }
  function createRuleITR_JS(code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, left, right, priority, isExtending, matchJumbledAndNested, simpleAdditional, basedOnTaskContext, normalizationType, weight, subjectType) {
    if (code === void 0)
      code = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (left === void 0)
      left = null;
    if (right === void 0)
      right = null;
    if (priority === void 0)
      priority = null;
    if (isExtending === void 0)
      isExtending = null;
    if (matchJumbledAndNested === void 0)
      matchJumbledAndNested = null;
    if (simpleAdditional === void 0)
      simpleAdditional = null;
    if (basedOnTaskContext === void 0)
      basedOnTaskContext = null;
    if (normalizationType === void 0)
      normalizationType = null;
    if (weight === void 0)
      weight = null;
    if (subjectType === void 0)
      subjectType = null;
    return createRuleITR(code, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, left, right, priority, isExtending, matchJumbledAndNested, simpleAdditional, basedOnTaskContext, normalizationType, weight, subjectType);
  }
  function createRulePackLinkITR_JS(namespaceCode, rulePackCode) {
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (rulePackCode === void 0)
      rulePackCode = null;
    return createRulePackLinkITR(namespaceCode, rulePackCode);
  }
  function createRulePackITR_JS(code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, rulePacks, rules, otherCheckSolutionData, otherAutoGenerationData, otherData) {
    if (code === void 0)
      code = null;
    if (version === void 0)
      version = 0;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = 'standard_math';
    if (rulePacks === void 0)
      rulePacks = null;
    if (rules === void 0)
      rules = null;
    if (otherCheckSolutionData === void 0)
      otherCheckSolutionData = null;
    if (otherAutoGenerationData === void 0)
      otherAutoGenerationData = null;
    if (otherData === void 0)
      otherData = null;
    return createRulePackITR(code, version, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, rulePacks != null ? toList(rulePacks) : null, rules != null ? toList(rules) : null, otherCheckSolutionData, otherAutoGenerationData, otherData);
  }
  function createTaskITR_JS(taskCreationType, code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, originalExpression, goalType, goalExpression, goalPattern, goalNumberProperty, otherGoalData, rulePacks, rules, stepsNumber, time, difficulty, solution, solutionsStepsTree, interestingFacts, nextRecommendedTasks, hints, otherCheckSolutionData, countOfAutoGeneratedTasks, otherAutoGenerationData, otherAwardData, otherData) {
    if (taskCreationType === void 0)
      taskCreationType = 'manual';
    if (code === void 0)
      code = null;
    if (namespaceCode === void 0)
      namespaceCode = null;
    if (nameEn === void 0)
      nameEn = null;
    if (nameRu === void 0)
      nameRu = null;
    if (descriptionShortEn === void 0)
      descriptionShortEn = null;
    if (descriptionShortRu === void 0)
      descriptionShortRu = null;
    if (descriptionEn === void 0)
      descriptionEn = null;
    if (descriptionRu === void 0)
      descriptionRu = null;
    if (subjectType === void 0)
      subjectType = null;
    if (tags === void 0)
      tags = null;
    if (originalExpression === void 0)
      originalExpression = null;
    if (goalType === void 0)
      goalType = null;
    if (goalExpression === void 0)
      goalExpression = null;
    if (goalPattern === void 0)
      goalPattern = null;
    if (goalNumberProperty === void 0)
      goalNumberProperty = null;
    if (otherGoalData === void 0)
      otherGoalData = null;
    if (rulePacks === void 0)
      rulePacks = null;
    if (rules === void 0)
      rules = null;
    if (stepsNumber === void 0)
      stepsNumber = null;
    if (time === void 0)
      time = null;
    if (solution === void 0)
      solution = null;
    if (solutionsStepsTree === void 0)
      solutionsStepsTree = null;
    if (interestingFacts === void 0)
      interestingFacts = null;
    if (nextRecommendedTasks === void 0)
      nextRecommendedTasks = null;
    if (hints === void 0)
      hints = null;
    if (otherCheckSolutionData === void 0)
      otherCheckSolutionData = null;
    if (countOfAutoGeneratedTasks === void 0)
      countOfAutoGeneratedTasks = 0;
    if (otherAutoGenerationData === void 0)
      otherAutoGenerationData = null;
    if (otherAwardData === void 0)
      otherAwardData = null;
    if (otherData === void 0)
      otherData = null;
    return createTaskITR(taskCreationType, code, namespaceCode, nameEn, nameRu, descriptionShortEn, descriptionShortRu, descriptionEn, descriptionRu, subjectType, tags, originalExpression, goalType, goalExpression, goalPattern, goalNumberProperty, otherGoalData, rulePacks, rules, stepsNumber, time, difficulty, solution, solutionsStepsTree, interestingFacts, nextRecommendedTasks, hints, otherCheckSolutionData, countOfAutoGeneratedTasks, otherAutoGenerationData, otherAwardData, otherData);
  }
  function arrayToList_JS(data) {
    return toList(data);
  }
  function listToArray_JS(data) {
    return copyToArray(data);
  }
  function arrayToSet_JS(data) {
    return toSet_0(data);
  }
  function dinamicToMap_JS(data) {
    return mapOf_1(data);
  }
  function jsonStringToMap_JS(json) {
    return JsonParser$Companion_getInstance().parseMap_61zpoe$(json);
  }
  function jsonToMap_JS(json) {
    return JsonParser$Companion_getInstance().parseMapRecursive_qk3xy8$(json);
  }
  function generateTasks_JS(area, startExpression, rulepacks, additionalParamsJsonString) {
    if (rulepacks === void 0)
      rulepacks = [];
    if (additionalParamsJsonString === void 0)
      additionalParamsJsonString = '{}';
    return generateTasks(area, startExpression, rulepacks, additionalParamsJsonString);
  }
  function getAllTagsForGeneration_JS(area) {
    return getAllTagsForGeneration(area);
  }
  function getAllSortTypesForGeneration_JS() {
    return getAllSortTypesForGeneration();
  }
  function getAllSortOrdersForGeneration_JS() {
    return getAllSortOrdersForGeneration();
  }
  function getLogOfGeneration_JS() {
    return getLogOfGeneration();
  }
  function getReportOfGeneration_JS() {
    return getReportOfGeneration();
  }
  var package$mathhelper = _.mathhelper || (_.mathhelper = {});
  var package$twf = package$mathhelper.twf || (package$mathhelper.twf = {});
  var package$api = package$twf.api || (package$twf.api = {});
  package$api.createConfigurationFromRulePacksAndParams_79na2b$ = createConfigurationFromRulePacksAndParams;
  package$api.createConfigurationFromRulePacksAndDetailSolutionCheckingParams_nhn30y$ = createConfigurationFromRulePacksAndDetailSolutionCheckingParams;
  package$api.setExpressionSubstitutions_9hdlec$ = setExpressionSubstitutions;
  package$api.getRulePackCodesFromTree_3j9y4v$ = getRulePackCodesFromTree;
  package$api.actualRulePackCodesBySubject_kand9s$ = actualRulePackCodesBySubject;
  package$api.actualRulePackCodesBySubject_61zpoe$ = actualRulePackCodesBySubject_0;
  package$api.getAllAlgebraSubstitutions = getAllAlgebraSubstitutions;
  package$api.getArithmeticDivisionSubstitutions_6taknv$ = getArithmeticDivisionSubstitutions;
  package$api.getLogarithmSubstitutions_6taknv$ = getLogarithmSubstitutions;
  package$api.getFactorialSubstitutions_6taknv$ = getFactorialSubstitutions;
  package$api.getBasicTrigonometricDefinitionsIdentitySubstitutions_6taknv$ = getBasicTrigonometricDefinitionsIdentitySubstitutions;
  package$api.getTrigonometrySinCosSumReductionSubstitutions_6taknv$ = getTrigonometrySinCosSumReductionSubstitutions;
  package$api.getTrigonometrySubstitutions_6taknv$ = getTrigonometrySubstitutions;
  package$api.getAdvancedTrigonometrySubstitutions_6taknv$ = getAdvancedTrigonometrySubstitutions;
  package$api.getInverseTrigonometricFunctionsSubstitutions_6taknv$ = getInverseTrigonometricFunctionsSubstitutions;
  package$api.getComplexNumbersSubstitutions_6taknv$ = getComplexNumbersSubstitutions;
  package$api.getAllExtendedAlgebraSubstitutions = getAllExtendedAlgebraSubstitutions;
  package$api.getLogicBaseSubstitutions_6taknv$ = getLogicBaseSubstitutions;
  package$api.getLogicAbsorptionLawSubstitutions_6taknv$ = getLogicAbsorptionLawSubstitutions;
  package$api.getLogicResolutionSubstitutions_6taknv$ = getLogicResolutionSubstitutions;
  package$api.getAllLogicSubstitutions = getAllLogicSubstitutions;
  package$api.getLogicBaseOrAndNot_8rpvbv$ = getLogicBaseOrAndNot;
  package$api.getLogicBaseImplicXorAlleq_8rpvbv$ = getLogicBaseImplicXorAlleq;
  package$api.getLogicBaseSubstitutions_8rpvbv$ = getLogicBaseSubstitutions_0;
  package$api.getLogicAbsorptionLawSubstitutions_8rpvbv$ = getLogicAbsorptionLawSubstitutions_0;
  package$api.getLogicResolutionSubstitutions_8rpvbv$ = getLogicResolutionSubstitutions_0;
  package$api.getLogicNewVariablesSubstitutions_fzusl$ = getLogicNewVariablesSubstitutions;
  package$api.getLogicNewVariablesSubstitutions_ddfifv$ = getLogicNewVariablesSubstitutions_0;
  package$api.normalizeExpressionToUsualForm_37rhgh$ = normalizeExpressionToUsualForm;
  package$api.compareWithoutSubstitutions_99zg4x$ = compareWithoutSubstitutions;
  package$api.compareByPattern_hn76cs$ = compareByPattern;
  package$api.compareWithoutSubstitutions_mymgxz$ = compareWithoutSubstitutions_0;
  package$api.compareByPattern_amuzyr$ = compareByPattern_0;
  package$api.compareWithoutSubstitutionsStructureStrings_jl9eag$ = compareWithoutSubstitutionsStructureStrings;
  package$api.stringToExpression_a30txs$ = stringToExpression;
  package$api.expressionToString_gk94xr$ = expressionToString;
  package$api.expressionToUnicodeString_gk94xr$ = expressionToUnicodeString;
  package$api.expressionToTexString_gk94xr$ = expressionToTexString;
  package$api.structureStringToExpression_halvl3$ = structureStringToExpression;
  package$api.expressionToStructureString_em03xr$ = expressionToStructureString;
  package$api.stringToStructureString_a30txs$ = stringToStructureString;
  package$api.structureStringToString_jmr6y3$ = structureStringToString;
  package$api.structureStringToTexString_jmr6y3$ = structureStringToTexString;
  package$api.stringToExpressionStructurePattern_halvl3$ = stringToExpressionStructurePattern;
  package$api.investigateIfExpressionFormIsStructureString_61zpoe$ = investigateIfExpressionFormIsStructureString;
  package$api.decodeUrlSymbols_61zpoe$ = decodeUrlSymbols;
  package$api.optGenerateSimpleComputationRule_2yjvs5$ = optGenerateSimpleComputationRule;
  package$api.expressionSubstitutionFromStrings_wbi1s5$ = expressionSubstitutionFromStrings;
  package$api.expressionSubstitutionFromStructureStrings_nw1435$ = expressionSubstitutionFromStructureStrings;
  package$api.expressionSubstitutionFromRuleITR_bftldu$ = expressionSubstitutionFromRuleITR;
  package$api.expressionSubstitutionsFromRulePackITR_314120$ = expressionSubstitutionsFromRulePackITR;
  package$api.findSubstitutionPlacesInExpression_58u35j$ = findSubstitutionPlacesInExpression;
  package$api.applySubstitution_efjes9$ = applySubstitution;
  package$api.createCompiledConfigurationFromExpressionSubstitutionsAndParams_red3nl$ = createCompiledConfigurationFromExpressionSubstitutionsAndParams;
  package$api.findApplicableSubstitutionsInSelectedPlace_8wbcfm$ = findApplicableSubstitutionsInSelectedPlace;
  package$api.applySubstitutionInSelectedPlace_x5zgqy$ = applySubstitutionInSelectedPlace;
  package$api.checkAndAddNewVariableReplacement_1x0twy$ = checkAndAddNewVariableReplacement;
  package$api.generateSubstitutionsBySelectedNodesAndItsForwardInverseExtension_qe0rqz$ = generateSubstitutionsBySelectedNodesAndItsForwardInverseExtension;
  package$api.getAllowedForwardInverseExtensionTypes_3b06hw$ = getAllowedForwardInverseExtensionTypes;
  package$api.findLowestSubtreeTopOfSelectedNodesInExpression_mtyzax$ = findLowestSubtreeTopOfSelectedNodesInExpression;
  package$api.SubstitutionPlaceOfflineData = SubstitutionPlaceOfflineData;
  package$api.findSubstitutionPlacesCoordinatesInExpressionJSON_jm5u2b$ = findSubstitutionPlacesCoordinatesInExpressionJSON;
  package$api.findStructureStringsSubstitutionPlacesCoordinatesInExpressionJSON_jm5u2b$ = findStructureStringsSubstitutionPlacesCoordinatesInExpressionJSON;
  package$api.applyExpressionBySubstitutionPlaceCoordinates_7elrlf$ = applyExpressionBySubstitutionPlaceCoordinates;
  package$api.applyExpressionByStructureStringsSubstitutionPlaceCoordinates_7elrlf$ = applyExpressionByStructureStringsSubstitutionPlaceCoordinates;
  package$api.checkAndAddNewVariableReplacement_vvc9pq$ = checkAndAddNewVariableReplacement_0;
  package$api.createExpressionFrontInput_puj7f4$ = createExpressionFrontInput;
  package$api.createRuleITR_ho8e7n$ = createRuleITR;
  package$api.createRulePackLinkITR_rkkr90$ = createRulePackLinkITR;
  package$api.createRulePackITR_3fdfw8$ = createRulePackITR;
  package$api.createTaskITR_55ddg3$ = createTaskITR;
  package$api.createCompiledConfigurationFromITR_79w50a$ = createCompiledConfigurationFromITR;
  package$api.internalCreateCompiledConfigurationFromITR_ab1yta$ = internalCreateCompiledConfigurationFromITR;
  package$api.checkSolutionInTexITR_gaewyn$ = checkSolutionInTexITR;
  package$api.checkSolutionInTex_tlsgcf$ = checkSolutionInTex;
  package$api.checkSolutionInTexWithCompiledConfiguration_43fm9k$ = checkSolutionInTexWithCompiledConfiguration;
  package$api.checkChainCorrectnessInTex_puj7f4$ = checkChainCorrectnessInTex;
  package$api.generateTasks_4mx3vf$ = generateTasks;
  package$api.getLogOfGeneration = getLogOfGeneration;
  package$api.getReportOfGeneration = getReportOfGeneration;
  package$api.getAllTagsForGeneration_61zpoe$ = getAllTagsForGeneration;
  package$api.getAllSortTypesForGeneration = getAllSortTypesForGeneration;
  package$api.getAllSortOrdersForGeneration = getAllSortOrdersForGeneration;
  package$api.getDefaultRulePacks = getDefaultRulePacks;
  package$api.mapTargetWeight_mqu1mq$ = mapTargetWeight;
  var package$baseoperations = package$twf.baseoperations || (package$twf.baseoperations = {});
  package$baseoperations.BaseNumber = BaseNumber;
  package$baseoperations.BaseOperationDefinitionWithDomain = BaseOperationDefinitionWithDomain;
  Object.defineProperty(ComputationType, 'COMPLEX', {
    get: ComputationType$COMPLEX_getInstance
  });
  Object.defineProperty(ComputationType, 'DOUBLE', {
    get: ComputationType$DOUBLE_getInstance
  });
  package$baseoperations.ComputationType = ComputationType;
  Object.defineProperty(BaseOperationsComputation, 'Companion', {
    get: BaseOperationsComputation$Companion_getInstance
  });
  package$baseoperations.BaseOperationsComputation = BaseOperationsComputation;
  package$baseoperations.BaseOperationsDefinition = BaseOperationsDefinition;
  Object.defineProperty(ComputeExpressionVariableType, 'ALL_TO_NUMBERS', {
    get: ComputeExpressionVariableType$ALL_TO_NUMBERS_getInstance
  });
  Object.defineProperty(ComputeExpressionVariableType, 'ALL_TO_NUMBERS_OR_PI_OR_E', {
    get: ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_getInstance
  });
  Object.defineProperty(ComputeExpressionVariableType, 'ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED', {
    get: ComputeExpressionVariableType$ALL_TO_NUMBERS_OR_PI_OR_E_ADDITIVELY_GROUPED_getInstance
  });
  package$baseoperations.ComputeExpressionVariableType = ComputeExpressionVariableType;
  Object.defineProperty(package$baseoperations, 'defaultFunctionConfiguration', {
    get: function () {
      return defaultFunctionConfiguration;
    },
    set: function (value) {
      defaultFunctionConfiguration = value;
    }
  });
  package$baseoperations.BaseOperationsDefinitions = BaseOperationsDefinitions;
  Object.defineProperty(ComplexBaseOperation, 'Companion', {
    get: ComplexBaseOperation$Companion_getInstance
  });
  package$baseoperations.ComplexBaseOperation = ComplexBaseOperation;
  Object.defineProperty(DoubleBaseOperation, 'Companion', {
    get: DoubleBaseOperation$Companion_getInstance
  });
  package$baseoperations.DoubleBaseOperation = DoubleBaseOperation;
  Object.defineProperty(DomainSegment, 'Companion', {
    get: DomainSegment$Companion_getInstance
  });
  package$baseoperations.DomainSegment = DomainSegment;
  Object.defineProperty(DefinitionDomain, 'Companion', {
    get: DefinitionDomain$Companion_getInstance
  });
  package$baseoperations.DefinitionDomain = DefinitionDomain;
  package$baseoperations.EmptyDomainException = EmptyDomainException;
  package$baseoperations.AnalyticallyDefinedDomain = AnalyticallyDefinedDomain;
  Object.defineProperty(package$baseoperations, 'DomainAll', {
    get: function () {
      return DomainAll;
    }
  });
  Object.defineProperty(package$baseoperations, 'DomainNil', {
    get: function () {
      return DomainNil;
    }
  });
  package$baseoperations.MultivariateDefinitionDomain = MultivariateDefinitionDomain;
  var package$config = package$twf.config || (package$twf.config = {});
  package$config.CheckedFactColor = CheckedFactColor;
  package$config.CheckedFactAccentuation = CheckedFactAccentuation;
  Object.defineProperty(CheckingKeyWords, 'Companion', {
    get: CheckingKeyWords$Companion_getInstance
  });
  package$config.CheckingKeyWords = CheckingKeyWords;
  Object.defineProperty(ComparisonType, 'LEFT_MORE_OR_EQUAL', {
    get: ComparisonType$LEFT_MORE_OR_EQUAL_getInstance
  });
  Object.defineProperty(ComparisonType, 'LEFT_LESS_OR_EQUAL', {
    get: ComparisonType$LEFT_LESS_OR_EQUAL_getInstance
  });
  Object.defineProperty(ComparisonType, 'EQUAL', {
    get: ComparisonType$EQUAL_getInstance
  });
  Object.defineProperty(ComparisonType, 'LEFT_MORE', {
    get: ComparisonType$LEFT_MORE_getInstance
  });
  Object.defineProperty(ComparisonType, 'LEFT_LESS', {
    get: ComparisonType$LEFT_LESS_getInstance
  });
  package$config.ComparisonType = ComparisonType;
  package$config.reverse_oyeal$ = reverse_0;
  package$config.strictComparison_ye48dw$ = strictComparison;
  package$config.valueOfComparisonType_61zpoe$ = valueOfComparisonType;
  package$config.valueFromSignString_61zpoe$ = valueFromSignString;
  package$config.getAllComparisonTypeSignStrings_6taknv$ = getAllComparisonTypeSignStrings;
  package$config.ComparisonSettings = ComparisonSettings;
  package$config.GradientDescentComparisonConfiguration = GradientDescentComparisonConfiguration;
  package$config.DebugOutputMessages = DebugOutputMessages;
  package$config.CompiledConfiguration = CompiledConfiguration;
  Object.defineProperty(ErrorLevel, 'INFO', {
    get: ErrorLevel$INFO_getInstance
  });
  Object.defineProperty(ErrorLevel, 'WARNING', {
    get: ErrorLevel$WARNING_getInstance
  });
  Object.defineProperty(ErrorLevel, 'ERROR', {
    get: ErrorLevel$ERROR_getInstance
  });
  Object.defineProperty(ErrorLevel, 'FATAL_ERROR', {
    get: ErrorLevel$FATAL_ERROR_getInstance
  });
  package$config.ErrorLevel = ErrorLevel;
  package$config.ConfigurationError = ConfigurationError;
  package$config.FactTransformationRule = FactTransformationRule;
  package$config.FactsLogicConfiguration = FactsLogicConfiguration;
  Object.defineProperty(StringDefinitionType, 'BINARY_OPERATION', {
    get: StringDefinitionType$BINARY_OPERATION_getInstance
  });
  Object.defineProperty(StringDefinitionType, 'UNARY_LEFT_OPERATION', {
    get: StringDefinitionType$UNARY_LEFT_OPERATION_getInstance
  });
  Object.defineProperty(StringDefinitionType, 'UNARY_RIGHT_OPERATION', {
    get: StringDefinitionType$UNARY_RIGHT_OPERATION_getInstance
  });
  Object.defineProperty(StringDefinitionType, 'FUNCTION', {
    get: StringDefinitionType$FUNCTION_getInstance
  });
  package$config.StringDefinitionType = StringDefinitionType;
  Object.defineProperty(FunctionIdentifier, 'Companion', {
    get: FunctionIdentifier$Companion_getInstance
  });
  package$config.FunctionIdentifier = FunctionIdentifier;
  package$config.FunctionProperties = FunctionProperties;
  package$config.FunctionStringDefinition = FunctionStringDefinition;
  package$config.FunctionDefinition = FunctionDefinition;
  package$config.TreeTransformationRule = TreeTransformationRule;
  package$config.FunctionConfiguration = FunctionConfiguration;
  Object.defineProperty(package$config, 'notChangesOnVariablesInComparisonFunctionJsonName', {
    get: function () {
      return notChangesOnVariablesInComparisonFunctionJsonName;
    }
  });
  Object.defineProperty(package$config, 'notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName', {
    get: function () {
      return notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName;
    }
  });
  Object.defineProperty(package$config, 'defaultOtherCheckSolutionData', {
    get: function () {
      return defaultOtherCheckSolutionData;
    }
  });
  Object.defineProperty(package$config, 'namespaceCodeAndCodeDivider', {
    get: function () {
      return namespaceCodeAndCodeDivider;
    }
  });
  Object.defineProperty(package$config, 'taskSetCodeAndCodeDivider', {
    get: function () {
      return taskSetCodeAndCodeDivider;
    }
  });
  package$config.concatNamespaceAndCode_jyasbz$ = concatNamespaceAndCode;
  package$config.RuleITR = RuleITR;
  package$config.SolutionsStepITR = SolutionsStepITR;
  package$config.HintITR = HintITR;
  package$config.InterestingFact = InterestingFact;
  package$config.TaskITR = TaskITR;
  package$config.TaskSetITR = TaskSetITR;
  package$config.RulePackLinkITR = RulePackLinkITR;
  package$config.RulePackITR = RulePackITR;
  package$config.GameITR = GameITR;
  package$config.VariableReplacementRule = VariableReplacementRule;
  Object.defineProperty(package$config, 'PI_STRING', {
    get: function () {
      return PI_STRING;
    }
  });
  Object.defineProperty(package$config, 'PI_STRING_ASCII', {
    get: function () {
      return PI_STRING_ASCII;
    }
  });
  Object.defineProperty(package$config, 'PI_STRING_UNICODE', {
    get: function () {
      return PI_STRING_UNICODE;
    }
  });
  Object.defineProperty(package$config, 'PI_STRING_TEX', {
    get: function () {
      return PI_STRING_TEX;
    }
  });
  Object.defineProperty(package$config, 'E_STRING', {
    get: function () {
      return E_STRING;
    }
  });
  Object.defineProperty(package$config, 'E_STRING_UNICODE', {
    get: function () {
      return E_STRING_UNICODE;
    }
  });
  Object.defineProperty(package$config, 'PI_STRING_USUAL', {
    get: function () {
      return PI_STRING_USUAL;
    }
  });
  Object.defineProperty(package$config, 'E_STRING_USUAL', {
    get: function () {
      return E_STRING_USUAL;
    }
  });
  package$config.VariableConfiguration = VariableConfiguration;
  var package$defaultcontent = package$twf.defaultcontent || (package$twf.defaultcontent = {});
  package$defaultcontent.ExpressionFrontInput = ExpressionFrontInput;
  package$defaultcontent.toStructureStructureString_8vd3dx$ = toStructureStructureString;
  package$defaultcontent.RuleFrontInput = RuleFrontInput;
  package$defaultcontent.toRuleFrontInput_j2uxf$ = toRuleFrontInput;
  package$defaultcontent.TaskFrontInput = TaskFrontInput;
  package$defaultcontent.toTaskFrontInput_jxtb0q$ = toTaskFrontInput;
  package$defaultcontent.TaskSetFrontInput = TaskSetFrontInput;
  package$defaultcontent.toTaskSetFrontInput_xp25y4$ = toTaskSetFrontInput;
  package$defaultcontent.RulePackLinkFrontInput = RulePackLinkFrontInput;
  package$defaultcontent.toRulePackLinkFrontInput_4r8wu8$ = toRulePackLinkFrontInput;
  package$defaultcontent.RulePackFrontInput = RulePackFrontInput;
  package$defaultcontent.toRulePackFrontInput_1vuwuy$ = toRulePackFrontInput;
  package$defaultcontent.GameFrontInput = GameFrontInput;
  Object.defineProperty(ModifiedLogicRulePacks, 'Companion', {
    get: ModifiedLogicRulePacks$Companion_getInstance
  });
  var package$defaultrulepacks = package$defaultcontent.defaultrulepacks || (package$defaultcontent.defaultrulepacks = {});
  var package$logic = package$defaultrulepacks.logic || (package$defaultrulepacks.logic = {});
  package$logic.ModifiedLogicRulePacks = ModifiedLogicRulePacks;
  Object.defineProperty(NewWeightsLogicRulePack, 'Companion', {
    get: NewWeightsLogicRulePack$Companion_getInstance
  });
  package$logic.NewWeightsLogicRulePack = NewWeightsLogicRulePack;
  Object.defineProperty(ReportType, 'RESULT_ONLY', {
    get: ReportType$RESULT_ONLY_getInstance
  });
  Object.defineProperty(ReportType, 'RESULT_WITH_POSTPROCESSING', {
    get: ReportType$RESULT_WITH_POSTPROCESSING_getInstance
  });
  Object.defineProperty(ReportType, 'RESULT_WITH_SUBSTITUTIONS', {
    get: ReportType$RESULT_WITH_SUBSTITUTIONS_getInstance
  });
  Object.defineProperty(ReportType, 'RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS', {
    get: ReportType$RESULT_WITH_SUBSTITUTIONS_AND_INTERMEDIATE_EXPRESSIONS_getInstance
  });
  var package$autogeneration = package$defaultrulepacks.autogeneration || (package$defaultrulepacks.autogeneration = {});
  package$autogeneration.ReportType = ReportType;
  Object.defineProperty(RulePackProvider, 'Companion', {
    get: RulePackProvider$Companion_getInstance
  });
  package$autogeneration.RulePackProvider = RulePackProvider;
  Object.defineProperty(RuleTag, 'BASIC_MATH', {
    get: RuleTag$BASIC_MATH_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_FUNCTIONS_DEFINITION', {
    get: RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_STANDARD_ANGLES', {
    get: RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_BASIC_IDENTITY', {
    get: RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_PERIODIC', {
    get: RuleTag$TRIGONOMETRY_PERIODIC_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_SHIFTING', {
    get: RuleTag$TRIGONOMETRY_SHIFTING_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_INVERSE_FUNCTIONS', {
    get: RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES', {
    get: RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED', {
    get: RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES', {
    get: RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES', {
    get: RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES', {
    get: RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_DOUBLE_ANGLES', {
    get: RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_TRIPLE_ANGLES', {
    get: RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_HALF_ANGLES', {
    get: RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_MULTI_ANGLES', {
    get: RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_POWER_REDUCING', {
    get: RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS', {
    get: RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_AUXILIARY_ARGUMENT', {
    get: RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION', {
    get: RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_EULER_FORMULAS', {
    get: RuleTag$TRIGONOMETRY_EULER_FORMULAS_getInstance
  });
  Object.defineProperty(RuleTag, 'TRIGONOMETRY_HYPERBOLIC_FUNCTIONS', {
    get: RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_getInstance
  });
  package$autogeneration.RuleTag = RuleTag;
  Object.defineProperty(TaskSpecificLogicRulePacks, 'Companion', {
    get: TaskSpecificLogicRulePacks$Companion_getInstance
  });
  package$logic.TaskSpecificLogicRulePacks = TaskSpecificLogicRulePacks;
  Object.defineProperty(TexReportUtils, 'Companion', {
    get: TexReportUtils$Companion_getInstance
  });
  package$autogeneration.TexReportUtils = TexReportUtils;
  Object.defineProperty(TrigonometricRulePacks, 'Companion', {
    get: TrigonometricRulePacks$Companion_getInstance
  });
  package$autogeneration.TrigonometricRulePacks = TrigonometricRulePacks;
  Object.defineProperty(DefaultCombinatoricsRulePacks, 'Companion', {
    get: DefaultCombinatoricsRulePacks$Companion_getInstance
  });
  package$defaultrulepacks.DefaultCombinatoricsRulePacks = DefaultCombinatoricsRulePacks;
  Object.defineProperty(DefaultComplexRulePacks, 'Companion', {
    get: DefaultComplexRulePacks$Companion_getInstance
  });
  package$defaultrulepacks.DefaultComplexRulePacks = DefaultComplexRulePacks;
  Object.defineProperty(DefaultRulePacks, 'Companion', {
    get: DefaultRulePacks$Companion_getInstance
  });
  package$defaultrulepacks.DefaultRulePacks = DefaultRulePacks;
  Object.defineProperty(LogicRulePacks, 'Companion', {
    get: LogicRulePacks$Companion_getInstance
  });
  package$defaultrulepacks.LogicRulePacks = LogicRulePacks;
  Object.defineProperty(DefaultPhysicsRulePacks, 'Companion', {
    get: DefaultPhysicsRulePacks$Companion_getInstance
  });
  package$defaultrulepacks.DefaultPhysicsRulePacks = DefaultPhysicsRulePacks;
  Object.defineProperty(SetRulePacks, 'Companion', {
    get: SetRulePacks$Companion_getInstance
  });
  package$defaultrulepacks.SetRulePacks = SetRulePacks;
  Object.defineProperty(DefaultStandardMathRulePacks, 'Companion', {
    get: DefaultStandardMathRulePacks$Companion_getInstance
  });
  package$defaultrulepacks.DefaultStandardMathRulePacks = DefaultStandardMathRulePacks;
  Object.defineProperty(CombinatoricTaskSets, 'Companion', {
    get: CombinatoricTaskSets$Companion_getInstance
  });
  var package$defaulttasksets = package$defaultcontent.defaulttasksets || (package$defaultcontent.defaulttasksets = {});
  package$defaulttasksets.CombinatoricTaskSets = CombinatoricTaskSets;
  Object.defineProperty(DefaultTaskSets, 'Companion', {
    get: DefaultTaskSets$Companion_getInstance
  });
  package$defaulttasksets.DefaultTaskSets = DefaultTaskSets;
  Object.defineProperty(LogicTaskSets, 'Companion', {
    get: LogicTaskSets$Companion_getInstance
  });
  package$defaulttasksets.LogicTaskSets = LogicTaskSets;
  Object.defineProperty(SetTaskSets, 'Companion', {
    get: SetTaskSets$Companion_getInstance
  });
  package$defaulttasksets.SetTaskSets = SetTaskSets;
  Object.defineProperty(TriginometryTaskSets, 'Companion', {
    get: TriginometryTaskSets$Companion_getInstance
  });
  package$defaulttasksets.TriginometryTaskSets = TriginometryTaskSets;
  Object.defineProperty(TrigonometryStepByStep, 'Companion', {
    get: TrigonometryStepByStep$Companion_getInstance
  });
  package$defaulttasksets.TrigonometryStepByStep = TrigonometryStepByStep;
  Object.defineProperty(TaskTagCode, 'PROOF', {
    get: TaskTagCode$PROOF_getInstance
  });
  Object.defineProperty(TaskTagCode, 'SIMPLIFICATION', {
    get: TaskTagCode$SIMPLIFICATION_getInstance
  });
  Object.defineProperty(TaskTagCode, 'COMPUTATION', {
    get: TaskTagCode$COMPUTATION_getInstance
  });
  Object.defineProperty(TaskTagCode, 'EQUATION', {
    get: TaskTagCode$EQUATION_getInstance
  });
  Object.defineProperty(TaskTagCode, 'FACTORIZATION', {
    get: TaskTagCode$FACTORIZATION_getInstance
  });
  Object.defineProperty(TaskTagCode, 'REDUCE', {
    get: TaskTagCode$REDUCE_getInstance
  });
  Object.defineProperty(TaskTagCode, 'FORMULA_BASE', {
    get: TaskTagCode$FORMULA_BASE_getInstance
  });
  Object.defineProperty(TaskTagCode, 'FORMULA_DEDUCE', {
    get: TaskTagCode$FORMULA_DEDUCE_getInstance
  });
  Object.defineProperty(TaskTagCode, 'TRICK', {
    get: TaskTagCode$TRICK_getInstance
  });
  Object.defineProperty(TaskTagCode, 'SHORT_MULTIPLICATION', {
    get: TaskTagCode$SHORT_MULTIPLICATION_getInstance
  });
  Object.defineProperty(TaskTagCode, 'SUM_SQRS', {
    get: TaskTagCode$SUM_SQRS_getInstance
  });
  Object.defineProperty(TaskTagCode, 'DIFF_SQRS', {
    get: TaskTagCode$DIFF_SQRS_getInstance
  });
  Object.defineProperty(TaskTagCode, 'SQR_SUM', {
    get: TaskTagCode$SQR_SUM_getInstance
  });
  Object.defineProperty(TaskTagCode, 'SQR_DIFF', {
    get: TaskTagCode$SQR_DIFF_getInstance
  });
  Object.defineProperty(TaskTagCode, 'SUM_CUBES', {
    get: TaskTagCode$SUM_CUBES_getInstance
  });
  Object.defineProperty(TaskTagCode, 'DIFF_CUBES', {
    get: TaskTagCode$DIFF_CUBES_getInstance
  });
  Object.defineProperty(TaskTagCode, 'CUBE_SUM', {
    get: TaskTagCode$CUBE_SUM_getInstance
  });
  Object.defineProperty(TaskTagCode, 'CUBE_DIFF', {
    get: TaskTagCode$CUBE_DIFF_getInstance
  });
  Object.defineProperty(TaskTagCode, 'FRACTION', {
    get: TaskTagCode$FRACTION_getInstance
  });
  Object.defineProperty(TaskTagCode, 'TRIGONOMETRY', {
    get: TaskTagCode$TRIGONOMETRY_getInstance
  });
  Object.defineProperty(TaskTagCode, 'INVERSE_TRIGONOMETRY', {
    get: TaskTagCode$INVERSE_TRIGONOMETRY_getInstance
  });
  Object.defineProperty(TaskTagCode, 'DEGREES', {
    get: TaskTagCode$DEGREES_getInstance
  });
  Object.defineProperty(TaskTagCode, 'PYTHAGOREAN_IDENTITY', {
    get: TaskTagCode$PYTHAGOREAN_IDENTITY_getInstance
  });
  Object.defineProperty(TaskTagCode, 'TRIGONOMETRY_ANGLE_SUM', {
    get: TaskTagCode$TRIGONOMETRY_ANGLE_SUM_getInstance
  });
  Object.defineProperty(TaskTagCode, 'TRIGONOMETRY_SUM', {
    get: TaskTagCode$TRIGONOMETRY_SUM_getInstance
  });
  Object.defineProperty(TaskTagCode, 'TRIGONOMETRY_PRODUCT', {
    get: TaskTagCode$TRIGONOMETRY_PRODUCT_getInstance
  });
  Object.defineProperty(TaskTagCode, 'TRIGONOMETRY_REFLECTIONS', {
    get: TaskTagCode$TRIGONOMETRY_REFLECTIONS_getInstance
  });
  Object.defineProperty(TaskTagCode, 'LOGARITHM', {
    get: TaskTagCode$LOGARITHM_getInstance
  });
  Object.defineProperty(TaskTagCode, 'SET', {
    get: TaskTagCode$SET_getInstance
  });
  Object.defineProperty(TaskTagCode, 'LOGIC', {
    get: TaskTagCode$LOGIC_getInstance
  });
  Object.defineProperty(TaskTagCode, 'NORMAL_FORMS', {
    get: TaskTagCode$NORMAL_FORMS_getInstance
  });
  Object.defineProperty(TaskTagCode, 'CNF', {
    get: TaskTagCode$CNF_getInstance
  });
  Object.defineProperty(TaskTagCode, 'DNF', {
    get: TaskTagCode$DNF_getInstance
  });
  Object.defineProperty(TaskTagCode, 'RESOLUTION', {
    get: TaskTagCode$RESOLUTION_getInstance
  });
  Object.defineProperty(TaskTagCode, 'COMBINATORICS', {
    get: TaskTagCode$COMBINATORICS_getInstance
  });
  package$defaultcontent.TaskTagCode = TaskTagCode;
  Object.defineProperty(TaskSetTagCode, 'TRIGONOMETRY', {
    get: TaskSetTagCode$TRIGONOMETRY_getInstance
  });
  Object.defineProperty(TaskSetTagCode, 'LOGIC', {
    get: TaskSetTagCode$LOGIC_getInstance
  });
  Object.defineProperty(TaskSetTagCode, 'SET', {
    get: TaskSetTagCode$SET_getInstance
  });
  Object.defineProperty(TaskSetTagCode, 'COMBINATORICS', {
    get: TaskSetTagCode$COMBINATORICS_getInstance
  });
  Object.defineProperty(TaskSetTagCode, 'NORMAL_FORMS', {
    get: TaskSetTagCode$NORMAL_FORMS_getInstance
  });
  Object.defineProperty(TaskSetTagCode, 'RESOLUTION', {
    get: TaskSetTagCode$RESOLUTION_getInstance
  });
  Object.defineProperty(TaskSetTagCode, 'CHECK_YOURSELF', {
    get: TaskSetTagCode$CHECK_YOURSELF_getInstance
  });
  Object.defineProperty(TaskSetTagCode, 'STEP_BY_STEP', {
    get: TaskSetTagCode$STEP_BY_STEP_getInstance
  });
  Object.defineProperty(TaskSetTagCode, 'TRAIN_SET', {
    get: TaskSetTagCode$TRAIN_SET_getInstance
  });
  Object.defineProperty(TaskSetTagCode, 'EXTRAORDINARY', {
    get: TaskSetTagCode$EXTRAORDINARY_getInstance
  });
  package$defaultcontent.TaskSetTagCode = TaskSetTagCode;
  var package$expressiondomain = package$twf.expressiondomain || (package$twf.expressiondomain = {});
  package$expressiondomain.containsUncertainties_7illpf$ = containsUncertainties;
  var package$expressiontree = package$twf.expressiontree || (package$twf.expressiontree = {});
  package$expressiontree.containsDifferentiation_qrf28w$ = containsDifferentiation;
  package$expressiontree.diff_i6rm42$ = diff;
  Object.defineProperty(package$expressiontree, 'unlimitedWeight', {
    get: function () {
      return unlimitedWeight;
    }
  });
  package$expressiontree.buildDiffNode_o4dprl$ = buildDiffNode;
  package$expressiontree.calcSinCosDomain_z1xem5$ = calcSinCosDomain;
  Object.defineProperty(package$expressiontree, 'knownOps', {
    get: function () {
      return knownOps;
    }
  });
  Object.defineProperty(package$expressiontree, 'knownOpsAssociation', {
    get: function () {
      return knownOpsAssociation;
    }
  });
  package$expressiontree.DomainCalculator = DomainCalculator;
  package$expressiontree.ParserError = ParserError;
  package$expressiontree.GeneralError = GeneralError;
  package$expressiontree.SubstitutionApplicationError = SubstitutionApplicationError;
  Object.defineProperty(ExpressionComparator, 'Companion', {
    get: ExpressionComparator$Companion_getInstance
  });
  package$expressiontree.ExpressionComparator = ExpressionComparator;
  package$expressiontree.getComparingDirection_pi90oc$ = getComparingDirection;
  Object.defineProperty(NodeType, 'FUNCTION', {
    get: NodeType$FUNCTION_getInstance
  });
  Object.defineProperty(NodeType, 'VARIABLE', {
    get: NodeType$VARIABLE_getInstance
  });
  Object.defineProperty(NodeType, 'EMPTY', {
    get: NodeType$EMPTY_getInstance
  });
  Object.defineProperty(NodeType, 'ERROR', {
    get: NodeType$ERROR_getInstance
  });
  package$expressiontree.NodeType = NodeType;
  package$expressiontree.NodeValue = NodeValue;
  package$expressiontree.ExpressionStrictureIdentifier = ExpressionStrictureIdentifier;
  package$expressiontree.ExpressionNode = ExpressionNode;
  package$expressiontree.ExpressionNodeConstructor = ExpressionNodeConstructor;
  package$expressiontree.normalizeExpressionsForComparison_heho5o$ = normalizeExpressionsForComparison;
  package$expressiontree.subtractionTree_heho5o$ = subtractionTree;
  package$expressiontree.divisionTree_heho5o$ = divisionTree;
  package$expressiontree.addRootNodeToExpression_em03xr$ = addRootNodeToExpression;
  Object.defineProperty(package$expressiontree, 'zero', {
    get: function () {
      return zero;
    }
  });
  Object.defineProperty(package$expressiontree, 'one', {
    get: function () {
      return one;
    }
  });
  package$expressiontree.patternDoubleMinus_qrf28w$ = patternDoubleMinus;
  package$expressiontree.patternStartWithUnaryMinus_qrf28w$ = patternStartWithUnaryMinus;
  package$expressiontree.patternUnaryMinus_qrf28w$ = patternUnaryMinus;
  package$expressiontree.patternDoubleMinusInFraction_qrf28w$ = patternDoubleMinusInFraction;
  package$expressiontree.patternThreeLevelsInFraction_qrf28w$ = patternThreeLevelsInFraction;
  package$expressiontree.patternTooManyLevelsInFraction_qrf28w$ = patternTooManyLevelsInFraction;
  package$expressiontree.patternFractionExist_qrf28w$ = patternFractionExist;
  package$expressiontree.patternThreeLevelsExist_qrf28w$ = patternThreeLevelsExist;
  package$expressiontree.patternTooManyLevelsExist_qrf28w$ = patternTooManyLevelsExist;
  package$expressiontree.patternConstMulConst_qrf28w$ = patternConstMulConst;
  Object.defineProperty(package$expressiontree, 'PARENT_BRACKETS_EXPANSION', {
    get: function () {
      return PARENT_BRACKETS_EXPANSION;
    }
  });
  Object.defineProperty(package$expressiontree, 'REDUCE_FRACTION', {
    get: function () {
      return REDUCE_FRACTION;
    }
  });
  package$expressiontree.nodeIdsPositionsMap_9mvhws$ = nodeIdsPositionsMap;
  package$expressiontree.nodeIdsToNodeLinksInSameOrder_6mp1jf$ = nodeIdsToNodeLinksInSameOrder;
  package$expressiontree.findLowestSubtreeTopOfNodes_15xjic$ = findLowestSubtreeTopOfNodes;
  package$expressiontree.findLowestSubtreeWithNodes_od1um2$ = findLowestSubtreeWithNodes;
  package$expressiontree.cloneWithoutSelectedNodes_vvo8gf$ = cloneWithoutSelectedNodes;
  Object.defineProperty(ForwardInverseExtensionType, 'ADD_SUBTRACT', {
    get: ForwardInverseExtensionType$ADD_SUBTRACT_getInstance
  });
  Object.defineProperty(ForwardInverseExtensionType, 'MULTIPLY_DIVIDE', {
    get: ForwardInverseExtensionType$MULTIPLY_DIVIDE_getInstance
  });
  Object.defineProperty(ForwardInverseExtensionType, 'POW_ROOT', {
    get: ForwardInverseExtensionType$POW_ROOT_getInstance
  });
  Object.defineProperty(ForwardInverseExtensionType, 'EXPONENTIATE_LOGARITHM', {
    get: ForwardInverseExtensionType$EXPONENTIATE_LOGARITHM_getInstance
  });
  Object.defineProperty(ForwardInverseExtensionType, 'LOGIC_ABSORPTION', {
    get: ForwardInverseExtensionType$LOGIC_ABSORPTION_getInstance
  });
  Object.defineProperty(ForwardInverseExtensionType, 'XOR', {
    get: ForwardInverseExtensionType$XOR_getInstance
  });
  Object.defineProperty(ForwardInverseExtensionType, 'ONE_TO', {
    get: ForwardInverseExtensionType$ONE_TO_getInstance
  });
  Object.defineProperty(ForwardInverseExtensionType, 'ZERO_TO', {
    get: ForwardInverseExtensionType$ZERO_TO_getInstance
  });
  package$expressiontree.ForwardInverseExtensionType = ForwardInverseExtensionType;
  package$expressiontree.ForwardInverseExtension = ForwardInverseExtension;
  package$expressiontree.SubstitutionSelectionData = SubstitutionSelectionData;
  package$expressiontree.simpleCommutativeOperationSelectionHandling_me9lvg$ = simpleCommutativeOperationSelectionHandling;
  package$expressiontree.fillSubstitutionSelectionData_me9lvg$ = fillSubstitutionSelectionData;
  package$expressiontree.findConfiguredSubstitutionsApplications_43p103$ = findConfiguredSubstitutionsApplications;
  package$expressiontree.generateParentBracketsExpansionSubstitution_me9lvg$ = generateParentBracketsExpansionSubstitution;
  package$expressiontree.generateMinusInOutBracketsSubstitution_me9lvg$ = generateMinusInOutBracketsSubstitution;
  package$expressiontree.generatePermutationSubstitutions_cg0uhp$ = generatePermutationSubstitutions;
  package$expressiontree.ExpressionStrictureIdentifierCounter = ExpressionStrictureIdentifierCounter;
  package$expressiontree.generateReduceArithmeticSubstitutions_v21f6c$ = generateReduceArithmeticSubstitutions;
  package$expressiontree.generateReduceFractionSubstitutions_v21f6c$ = generateReduceFractionSubstitutions;
  package$expressiontree.getOperandsFrom2ArgsNode_z770r3$ = getOperandsFrom2ArgsNode;
  package$expressiontree.getMultipliersFromNode_jl9rdw$ = getMultipliersFromNode;
  package$expressiontree.handleAdditiveNodeAsReductionPart_6b5ml2$ = handleAdditiveNodeAsReductionPart;
  package$expressiontree.generateZeroComputationSubstitutions_cg0uhp$ = generateZeroComputationSubstitutions;
  package$expressiontree.generateOpeningBracketsSubstitutions_cg0uhp$ = generateOpeningBracketsSubstitutions;
  package$expressiontree.generateSimpleComputationSubstitutions_cg0uhp$ = generateSimpleComputationSubstitutions;
  package$expressiontree.generateNumberTransformationSubstitutions_cg0uhp$ = generateNumberTransformationSubstitutions;
  package$expressiontree.generateComplicatingExtensionSubstitutions_cg0uhp$ = generateComplicatingExtensionSubstitutions;
  package$expressiontree.applySubstitution_fta3rf$ = applySubstitution_0;
  package$expressiontree.generateFormIndependentSubstitutionsBySelectedNodes_cg0uhp$ = generateFormIndependentSubstitutionsBySelectedNodes;
  package$expressiontree.generateFormDependentSubstitutionsBySelectedNodes_43p103$ = generateFormDependentSubstitutionsBySelectedNodes;
  package$expressiontree.generateFormDependentSubstitutionsBySelectedNodesWithExpressionSimplifications_3fn77o$ = generateFormDependentSubstitutionsBySelectedNodesWithExpressionSimplifications;
  package$expressiontree.generateSubstitutionsBySelectedNodes_3fn77o$ = generateSubstitutionsBySelectedNodes;
  package$expressiontree.generateSubstitutionsBySelectedNodesAndItsPolynomialRoot_a1klr$ = generateSubstitutionsBySelectedNodesAndItsPolynomialRoot;
  package$expressiontree.generateSubstitutionsBySelectedNodesAndItsForwardInverseExtension_uvb07k$ = generateSubstitutionsBySelectedNodesAndItsForwardInverseExtension_0;
  package$expressiontree.ExpressionStructurePart = ExpressionStructurePart;
  package$expressiontree.FunctionCondition = FunctionCondition;
  package$expressiontree.FunctionsCondition = FunctionsCondition;
  package$expressiontree.NumberInterval = NumberInterval;
  package$expressiontree.NumberCondition = NumberCondition;
  package$expressiontree.VariableCondition = VariableCondition;
  package$expressiontree.VariablesCondition = VariablesCondition;
  package$expressiontree.ChildrenCondition = ChildrenCondition;
  package$expressiontree.ExpressionStructureConditionNode = ExpressionStructureConditionNode;
  package$expressiontree.checkExpressionStructure_hn76cs$ = checkExpressionStructure;
  package$expressiontree.ExpressionStructureConditionConstructor = ExpressionStructureConditionConstructor;
  Object.defineProperty(package$expressiontree, 'additionalFactUsedVarName', {
    get: function () {
      return additionalFactUsedVarName;
    }
  });
  Object.defineProperty(SubstitutionInstanceVarType, 'EXPR_VAR', {
    get: SubstitutionInstanceVarType$EXPR_VAR_getInstance
  });
  Object.defineProperty(SubstitutionInstanceVarType, 'EXPR_FUNC', {
    get: SubstitutionInstanceVarType$EXPR_FUNC_getInstance
  });
  Object.defineProperty(SubstitutionInstanceVarType, 'COMPARABLE_VAR', {
    get: SubstitutionInstanceVarType$COMPARABLE_VAR_getInstance
  });
  Object.defineProperty(SubstitutionInstanceVarType, 'INFO', {
    get: SubstitutionInstanceVarType$INFO_getInstance
  });
  package$expressiontree.SubstitutionInstanceVarType = SubstitutionInstanceVarType;
  Object.defineProperty(ExpressionSubstitutionNormType, 'ORIGINAL', {
    get: ExpressionSubstitutionNormType$ORIGINAL_getInstance
  });
  Object.defineProperty(ExpressionSubstitutionNormType, 'SORTED', {
    get: ExpressionSubstitutionNormType$SORTED_getInstance
  });
  Object.defineProperty(ExpressionSubstitutionNormType, 'I_MULTIPLICATED', {
    get: ExpressionSubstitutionNormType$I_MULTIPLICATED_getInstance
  });
  Object.defineProperty(ExpressionSubstitutionNormType, 'SORTED_AND_I_MULTIPLICATED', {
    get: ExpressionSubstitutionNormType$SORTED_AND_I_MULTIPLICATED_getInstance
  });
  package$expressiontree.ExpressionSubstitutionNormType = ExpressionSubstitutionNormType;
  package$expressiontree.SubstitutionInstanceVar = SubstitutionInstanceVar;
  package$expressiontree.VarNamesTimeStorage = VarNamesTimeStorage;
  package$expressiontree.MatchedNode = MatchedNode;
  package$expressiontree.SubstitutionInstance = SubstitutionInstance;
  package$expressiontree.SubstitutionPlace = SubstitutionPlace;
  Object.defineProperty(ExpressionSubstitution, 'Companion', {
    get: ExpressionSubstitution$Companion_getInstance
  });
  package$expressiontree.ExpressionSubstitution = ExpressionSubstitution;
  package$expressiontree.applyAllFunctionSubstitutions_n8mogt$ = applyAllFunctionSubstitutions;
  package$expressiontree.applyAllSubstitutions_f250rj$ = applyAllSubstitutions;
  package$expressiontree.applyAllImmediateSubstitutions_gz4buk$ = applyAllImmediateSubstitutions;
  package$expressiontree.SubstitutionApplication = SubstitutionApplication;
  package$expressiontree.addSubstitutionToDiff_3yc2op$ = addSubstitutionToDiff;
  package$expressiontree.addSubstitutionToResultExpression_vlq1sf$ = addSubstitutionToResultExpression;
  package$expressiontree.addStepIdToDiff_h2wc0x$ = addStepIdToDiff;
  package$expressiontree.addStepIdToResultExpression_cp6tg3$ = addStepIdToResultExpression;
  Object.defineProperty(MathMlTagTreeNode$Type, 'EXPRESSION_PART_STRING', {
    get: MathMlTagTreeNode$Type$EXPRESSION_PART_STRING_getInstance
  });
  Object.defineProperty(MathMlTagTreeNode$Type, 'MATH_ML_FUNCTION', {
    get: MathMlTagTreeNode$Type$MATH_ML_FUNCTION_getInstance
  });
  Object.defineProperty(MathMlTagTreeNode$Type, 'BRACKET_FUNCTION', {
    get: MathMlTagTreeNode$Type$BRACKET_FUNCTION_getInstance
  });
  Object.defineProperty(MathMlTagTreeNode$Type, 'NAME', {
    get: MathMlTagTreeNode$Type$NAME_getInstance
  });
  Object.defineProperty(MathMlTagTreeNode$Type, 'OPERATION', {
    get: MathMlTagTreeNode$Type$OPERATION_getInstance
  });
  MathMlTagTreeNode.Type = MathMlTagTreeNode$Type;
  Object.defineProperty(MathMlTagTreeNode$TexArgumentType, 'USUAL', {
    get: MathMlTagTreeNode$TexArgumentType$USUAL_getInstance
  });
  Object.defineProperty(MathMlTagTreeNode$TexArgumentType, 'UNDERLINED', {
    get: MathMlTagTreeNode$TexArgumentType$UNDERLINED_getInstance
  });
  Object.defineProperty(MathMlTagTreeNode$TexArgumentType, 'POW', {
    get: MathMlTagTreeNode$TexArgumentType$POW_getInstance
  });
  MathMlTagTreeNode.TexArgumentType = MathMlTagTreeNode$TexArgumentType;
  package$expressiontree.MathMlTagTreeNode = MathMlTagTreeNode;
  package$expressiontree.swap_v5y4a0$ = swap;
  Object.defineProperty(ExpressionParserNode$Type, 'FUNCTION', {
    get: ExpressionParserNode$Type$FUNCTION_getInstance
  });
  Object.defineProperty(ExpressionParserNode$Type, 'VARIABLE', {
    get: ExpressionParserNode$Type$VARIABLE_getInstance
  });
  Object.defineProperty(ExpressionParserNode$Type, 'BINARY_OPERATION', {
    get: ExpressionParserNode$Type$BINARY_OPERATION_getInstance
  });
  Object.defineProperty(ExpressionParserNode$Type, 'UNARY_OPERATION', {
    get: ExpressionParserNode$Type$UNARY_OPERATION_getInstance
  });
  ExpressionParserNode.Type = ExpressionParserNode$Type;
  package$expressiontree.ExpressionParserNode = ExpressionParserNode;
  Object.defineProperty(ExpressionTreeParser$TokenParserState, 'UNDEFINED', {
    get: ExpressionTreeParser$TokenParserState$UNDEFINED_getInstance
  });
  Object.defineProperty(ExpressionTreeParser$TokenParserState, 'UNARY_OPERATION', {
    get: ExpressionTreeParser$TokenParserState$UNARY_OPERATION_getInstance
  });
  Object.defineProperty(ExpressionTreeParser$TokenParserState, 'BINARY_OPERATION', {
    get: ExpressionTreeParser$TokenParserState$BINARY_OPERATION_getInstance
  });
  Object.defineProperty(ExpressionTreeParser$TokenParserState, 'NUMBER', {
    get: ExpressionTreeParser$TokenParserState$NUMBER_getInstance
  });
  Object.defineProperty(ExpressionTreeParser$TokenParserState, 'NAME', {
    get: ExpressionTreeParser$TokenParserState$NAME_getInstance
  });
  Object.defineProperty(ExpressionTreeParser$TokenParserState, 'NAME_BREAK', {
    get: ExpressionTreeParser$TokenParserState$NAME_BREAK_getInstance
  });
  Object.defineProperty(ExpressionTreeParser$TokenParserState, 'COMMA', {
    get: ExpressionTreeParser$TokenParserState$COMMA_getInstance
  });
  ExpressionTreeParser.TokenParserState = ExpressionTreeParser$TokenParserState;
  Object.defineProperty(ExpressionTreeParser, 'Companion', {
    get: ExpressionTreeParser$Companion_getInstance
  });
  package$expressiontree.ExpressionTreeParser = ExpressionTreeParser;
  package$expressiontree.ExpressionTreeAnalyzer = ExpressionTreeAnalyzer;
  package$expressiontree.shouldTakeLog_em03xr$ = shouldTakeLog;
  package$expressiontree.getLog_37rhgh$ = getLog;
  package$expressiontree.alwaysPositiveFunction_em03xr$ = alwaysPositiveFunction;
  package$expressiontree.difference_19bx18$ = difference;
  package$expressiontree.ratio_19bx18$ = ratio;
  package$expressiontree.alwaysPositive_37rhgh$ = alwaysPositive;
  package$expressiontree.gradientDescentComparison_eerz9j$ = gradientDescentComparison;
  package$expressiontree.generalOpeningBracketsSubstitutions_lhzbix$ = generalOpeningBracketsSubstitutions;
  package$expressiontree.plusOperationByDot_fne2yy$ = plusOperationByDot;
  package$expressiontree.dotOperationByPlus_fne2yy$ = dotOperationByPlus;
  package$expressiontree.computeResultsOfOpeningBracketsSubstitutions_mdu6jj$ = computeResultsOfOpeningBracketsSubstitutions;
  Object.defineProperty(package$expressiontree, 'TREE_COMPUTATION_RULES_PRIORITY', {
    get: function () {
      return TREE_COMPUTATION_RULES_PRIORITY;
    }
  });
  Object.defineProperty(package$expressiontree, 'TREE_COMPUTATION_DEFAULT', {
    get: function () {
      return TREE_COMPUTATION_DEFAULT;
    }
  });
  package$expressiontree.SimpleComputationRuleParams = SimpleComputationRuleParams;
  Object.defineProperty(package$expressiontree, 'simpleComputationRuleParamsDefault', {
    get: function () {
      return simpleComputationRuleParamsDefault;
    }
  });
  Object.defineProperty(package$expressiontree, 'simpleComputationRuleParamsNoLimits', {
    get: function () {
      return simpleComputationRuleParamsNoLimits;
    }
  });
  package$expressiontree.calcComplexity_qrf28w$ = calcComplexity;
  package$expressiontree.computeNodeIfPossible_qrf28w$ = computeNodeIfPossible;
  package$expressiontree.computeNodeIfSimple_lsnny6$ = computeNodeIfSimple;
  package$expressiontree.tenPowToMakeZ_eiinas$ = tenPowToMakeZ;
  Object.defineProperty(ComparableTransformationPartType, 'EXPRESSION', {
    get: ComparableTransformationPartType$EXPRESSION_getInstance
  });
  Object.defineProperty(ComparableTransformationPartType, 'EXPRESSION_COMPARISON', {
    get: ComparableTransformationPartType$EXPRESSION_COMPARISON_getInstance
  });
  Object.defineProperty(ComparableTransformationPartType, 'MAIN_LINE_AND_NODE', {
    get: ComparableTransformationPartType$MAIN_LINE_AND_NODE_getInstance
  });
  Object.defineProperty(ComparableTransformationPartType, 'MAIN_LINE_OR_NODE', {
    get: ComparableTransformationPartType$MAIN_LINE_OR_NODE_getInstance
  });
  Object.defineProperty(ComparableTransformationPartType, 'EXPRESSION_CHAIN', {
    get: ComparableTransformationPartType$EXPRESSION_CHAIN_getInstance
  });
  Object.defineProperty(ComparableTransformationPartType, 'RULE', {
    get: ComparableTransformationPartType$RULE_getInstance
  });
  Object.defineProperty(ComparableTransformationPartType, 'RULE_POINTER', {
    get: ComparableTransformationPartType$RULE_POINTER_getInstance
  });
  Object.defineProperty(ComparableTransformationPartType, 'EMPTY', {
    get: ComparableTransformationPartType$EMPTY_getInstance
  });
  var package$factstransformations = package$twf.factstransformations || (package$twf.factstransformations = {});
  package$factstransformations.ComparableTransformationPartType = ComparableTransformationPartType;
  package$factstransformations.ComparableTransformationsPart = ComparableTransformationsPart;
  package$factstransformations.ComparisonResult = ComparisonResult;
  package$factstransformations.MainChainPart = MainChainPart;
  package$factstransformations.MainLineNode = MainLineNode;
  Object.defineProperty(Expression, 'Companion', {
    get: Expression$Companion_getInstance
  });
  package$factstransformations.Expression = Expression;
  package$factstransformations.emptyExpression = emptyExpression;
  package$factstransformations.ExpressionChain = ExpressionChain;
  Object.defineProperty(ExpressionComparison, 'Companion', {
    get: ExpressionComparison$Companion_getInstance
  });
  package$factstransformations.ExpressionComparison = ExpressionComparison;
  package$factstransformations.RulePointer = RulePointer;
  package$factstransformations.Rule = Rule;
  package$factstransformations.MainChain = MainChain;
  Object.defineProperty(MainLineAndNode, 'Companion', {
    get: MainLineAndNode$Companion_getInstance
  });
  package$factstransformations.MainLineAndNode = MainLineAndNode;
  Object.defineProperty(MainLineOrNode, 'Companion', {
    get: MainLineOrNode$Companion_getInstance
  });
  package$factstransformations.MainLineOrNode = MainLineOrNode;
  package$factstransformations.getInFactsFromMainLineNode_jh2c8r$ = getInFactsFromMainLineNode;
  package$factstransformations.getOutFactsFromMainLineNode_jh2c8r$ = getOutFactsFromMainLineNode;
  package$factstransformations.parsePartsFromIdentifier_r5gof1$ = parsePartsFromIdentifier;
  package$factstransformations.parseFromFactIdentifier_r5gof1$ = parseFromFactIdentifier;
  package$factstransformations.normalizeFactsForComparison_obm516$ = normalizeFactsForComparison;
  package$factstransformations.factWrapperForCheckingTransformations_48t8ok$ = factWrapperForCheckingTransformations;
  package$factstransformations.checkTransformationChain_ducisj$ = checkTransformationChain;
  package$factstransformations.FactConstructorViewer = FactConstructorViewer;
  package$factstransformations.ExpressionComparisonExpanse = ExpressionComparisonExpanse;
  package$factstransformations.FactComparator = FactComparator;
  Object.defineProperty(SubstitutionDirection, 'LEFT_TO_RIGHT', {
    get: SubstitutionDirection$LEFT_TO_RIGHT_getInstance
  });
  Object.defineProperty(SubstitutionDirection, 'RIGHT_TO_LEFT', {
    get: SubstitutionDirection$RIGHT_TO_LEFT_getInstance
  });
  Object.defineProperty(SubstitutionDirection, 'ALL_TO_ALL', {
    get: SubstitutionDirection$ALL_TO_ALL_getInstance
  });
  package$factstransformations.SubstitutionDirection = SubstitutionDirection;
  package$factstransformations.toUserString_natk5x$ = toUserString;
  package$factstransformations.FactSubstitutionPlace = FactSubstitutionPlace;
  package$factstransformations.FactSubstitution = FactSubstitution;
  package$factstransformations.emptyFactSubstitution = emptyFactSubstitution;
  TransformationChainParser.SemanticRangeShift = TransformationChainParser$SemanticRangeShift;
  package$factstransformations.TransformationChainParser = TransformationChainParser;
  Object.defineProperty(MessageType, 'USER', {
    get: MessageType$USER_getInstance
  });
  Object.defineProperty(MessageType, 'TECHNICAL', {
    get: MessageType$TECHNICAL_getInstance
  });
  Object.defineProperty(MessageType, 'ALL', {
    get: MessageType$ALL_getInstance
  });
  var package$logs = package$twf.logs || (package$twf.logs = {});
  package$logs.MessageType = MessageType;
  package$logs.LazyMessage = LazyMessage;
  package$logs.LazyLog = LazyLog;
  Object.defineProperty(package$logs, 'log', {
    get: function () {
      return log_1;
    }
  });
  var package$mainpoints = package$twf.mainpoints || (package$twf.mainpoints = {});
  package$mainpoints.checkFactsInMathML_ahi09q$ = checkFactsInMathML;
  package$mainpoints.replaceSpaceMathMLAliases_61zpoe$ = replaceSpaceMathMLAliases;
  Object.defineProperty(package$mainpoints, 'spaceRegex', {
    get: function () {
      return spaceRegex;
    }
  });
  package$mainpoints.deleteUnsupportedMathMLTags_61zpoe$ = deleteUnsupportedMathMLTags;
  package$mainpoints.correctMathMlTagsAccordingToBracketsFromEnd_61zpoe$ = correctMathMlTagsAccordingToBracketsFromEnd;
  package$mainpoints.specificMathMlSystemReplacements_61zpoe$ = specificMathMlSystemReplacements;
  package$mainpoints.addErrorStringToMathMLSolution_6hosri$ = addErrorStringToMathMLSolution;
  package$mainpoints.deleteErrorStringFromMathMLSolution_kwv3np$ = deleteErrorStringFromMathMLSolution;
  package$mainpoints.getListOfExpressionComparisonFactsFromFirstSystem_vh1to$ = getListOfExpressionComparisonFactsFromFirstSystem;
  Object.defineProperty(package$mainpoints, 'unsupportedTagListMathML', {
    get: function () {
      return unsupportedTagListMathML;
    }
  });
  Object.defineProperty(package$mainpoints, 'underliningStartMathML', {
    get: function () {
      return underliningStartMathML;
    }
  });
  Object.defineProperty(package$mainpoints, 'underliningEndMathML', {
    get: function () {
      return underliningEndMathML;
    }
  });
  package$mainpoints.TexVerificationResult = TexVerificationResult;
  package$mainpoints.checkFactsInTex_b115wo$ = checkFactsInTex;
  package$mainpoints.deleteUnsupportedTags_61zpoe$ = deleteUnsupportedTags;
  package$mainpoints.compiledConfigurationBySettings_eu700e$ = compiledConfigurationBySettings;
  package$mainpoints.combineSolutionRoot_sutxfd$ = combineSolutionRoot;
  package$mainpoints.pairsFromString_61zpoe$ = pairsFromString;
  package$mainpoints.pairsStringIntFromString_61zpoe$ = pairsStringIntFromString;
  package$mainpoints.additionalFactsFromItsIdentifiers_u10bx5$ = additionalFactsFromItsIdentifiers;
  Object.defineProperty(package$mainpoints, 'configSeparator', {
    get: function () {
      return configSeparator;
    }
  });
  Object.defineProperty(package$mainpoints, 'errorPrefix', {
    get: function () {
      return errorPrefix;
    }
  });
  Object.defineProperty(package$mainpoints, 'syntaxErrorPrefix', {
    get: function () {
      return syntaxErrorPrefix;
    }
  });
  Object.defineProperty(CageHolder, 'Companion', {
    get: CageHolder$Companion_getInstance
  });
  var package$numbers = package$twf.numbers || (package$twf.numbers = {});
  package$numbers.CageHolder = CageHolder;
  Object.defineProperty(Form, 'ALGEBRAIC', {
    get: Form$ALGEBRAIC_getInstance
  });
  Object.defineProperty(Form, 'TRIGONOMETRIC', {
    get: Form$TRIGONOMETRIC_getInstance
  });
  package$numbers.Form = Form;
  package$numbers.toComplex_s8ev3n$ = toComplex;
  package$numbers.toComplex_yrwdxr$ = toComplex_0;
  package$numbers.toComplexOrNull_pdl1vz$ = toComplexOrNull;
  package$numbers.toComplex_pdl1vz$ = toComplex_1;
  Object.defineProperty(Complex, 'Companion', {
    get: Complex$Companion_getInstance
  });
  package$numbers.Complex_init_1l9jwj$ = Complex_init;
  package$numbers.Complex = Complex;
  Object.defineProperty(LineSegmentHolder, 'Companion', {
    get: LineSegmentHolder$Companion_getInstance
  });
  package$numbers.LineSegmentHolder = LineSegmentHolder;
  package$numbers.toReal_s8ev3n$ = toReal;
  package$numbers.toReal_yrwdxr$ = toReal_0;
  package$numbers.toRealOrNull_pdl1vz$ = toRealOrNull;
  Object.defineProperty(Real, 'Companion', {
    get: Real$Companion_getInstance
  });
  package$numbers.Real_init_za3lpa$ = Real_init;
  package$numbers.Real = Real;
  Object.defineProperty(NumberIntervalType, 'SMALL_NATURAL', {
    get: NumberIntervalType$SMALL_NATURAL_getInstance
  });
  Object.defineProperty(NumberIntervalType, 'NATURAL', {
    get: NumberIntervalType$NATURAL_getInstance
  });
  Object.defineProperty(NumberIntervalType, 'INTEGER', {
    get: NumberIntervalType$INTEGER_getInstance
  });
  Object.defineProperty(NumberIntervalType, 'REAL', {
    get: NumberIntervalType$REAL_getInstance
  });
  package$numbers.NumberIntervalType = NumberIntervalType;
  var package$optimizerutils = package$twf.optimizerutils || (package$twf.optimizerutils = {});
  package$optimizerutils.InequalityApproximateSolver = InequalityApproximateSolver;
  Object.defineProperty(Case, 'ONE_DIMENSIONAL_POLYNOMIAL', {
    get: Case$ONE_DIMENSIONAL_POLYNOMIAL_getInstance
  });
  Object.defineProperty(Case, 'NONE', {
    get: Case$NONE_getInstance
  });
  package$optimizerutils.Case = Case;
  package$optimizerutils.SpecialCaseSolver = SpecialCaseSolver;
  package$optimizerutils.CompressedNodeDouble = CompressedNodeDouble;
  package$optimizerutils.OptimizerUtils = OptimizerUtils;
  package$optimizerutils.VariableInfo = VariableInfo;
  package$optimizerutils.Segment = Segment;
  package$optimizerutils.SegmentsUnion = SegmentsUnion;
  package$optimizerutils.VariableProperties = VariableProperties;
  package$optimizerutils.CompressedNode = CompressedNode;
  package$optimizerutils.DomainPointGenerator = DomainPointGenerator;
  var package$platformdependent = package$twf.platformdependent || (package$twf.platformdependent = {});
  package$platformdependent.entriesOf_za3rmp$ = entriesOf;
  package$platformdependent.mapOf_za3rmp$ = mapOf_1;
  Object.defineProperty(JsonParser, 'Companion', {
    get: JsonParser$Companion_getInstance
  });
  package$platformdependent.JsonParser = JsonParser;
  Object.defineProperty(package$platformdependent, 'random', {
    get: function () {
      return random_0;
    }
  });
  package$platformdependent.defaultRandom = defaultRandom;
  package$platformdependent.random_lu1900$ = random_1;
  package$platformdependent.randomInt_vux9f0$ = randomInt;
  package$platformdependent.randomBoolean = randomBoolean;
  package$platformdependent.abs_za3lpa$ = abs;
  package$platformdependent.toStringWithMinLength_c38nye$ = toStringWithMinLength;
  package$platformdependent.escapeCharacters_bm4lxs$ = escapeCharacters;
  package$platformdependent.escapeBackSlash_bm4lxs$ = escapeBackSlash;
  package$platformdependent.toShortString_yrwdxr$ = toShortString;
  package$platformdependent.lazyPrintln_87ejdh$ = lazyPrintln;
  var package$standartlibextensions = package$twf.standartlibextensions || (package$twf.standartlibextensions = {});
  package$standartlibextensions.abs_yrwdxr$ = abs_0;
  package$standartlibextensions.isNumberValuesEqual_puj7f4$ = isNumberValuesEqual;
  package$standartlibextensions.isLowerCaseLetter_myv2d0$ = isLowerCaseLetter;
  package$standartlibextensions.isUpperCaseLetter_myv2d0$ = isUpperCaseLetter;
  package$standartlibextensions.isLetter_myv2d0$ = isLetter;
  package$standartlibextensions.isLatinLetter_myv2d0$ = isLatinLetter;
  package$standartlibextensions.isLetterOrUnderscore_myv2d0$ = isLetterOrUnderscore;
  package$standartlibextensions.isDigit_myv2d0$ = isDigit;
  package$standartlibextensions.isLetterOrDigit_myv2d0$ = isLetterOrDigit;
  package$standartlibextensions.isLetterOrDigitOrUnderscore_myv2d0$ = isLetterOrDigitOrUnderscore;
  package$standartlibextensions.isNamePart_myv2d0$ = isNamePart;
  package$standartlibextensions.isNameOrNumberPart_myv2d0$ = isNameOrNumberPart;
  package$standartlibextensions.isNumberPart_myv2d0$ = isNumberPart;
  package$standartlibextensions.isOpenBracket_myv2d0$ = isOpenBracket;
  package$standartlibextensions.isCloseBracket_myv2d0$ = isCloseBracket;
  package$standartlibextensions.isTexArgumentsSeparator_myv2d0$ = isTexArgumentsSeparator;
  package$standartlibextensions.isBracket_myv2d0$ = isBracket;
  package$standartlibextensions.isUnarySignPart_s8itvh$ = isUnarySignPart;
  package$standartlibextensions.isBinarySignPart_mm7qii$ = isBinarySignPart;
  package$standartlibextensions.isSign_4lte5s$ = isSign;
  package$standartlibextensions.isWhiteSpace_6ic1pp$ = isWhiteSpace;
  package$standartlibextensions.prevCharOrSpace_6ic1pp$ = prevCharOrSpace;
  package$standartlibextensions.removeAllExceptLatin_pdl1vz$ = removeAllExceptLatin;
  package$standartlibextensions.toCustomCodeSuffixPart_pdl1vz$ = toCustomCodeSuffixPart;
  package$standartlibextensions.texStringPrefiltering_61zpoe$ = texStringPrefiltering;
  package$standartlibextensions.remainingExpressionStartsWith_rjan26$ = remainingExpressionStartsWith;
  package$standartlibextensions.readFromRemainingExpressionWhile_josn5q$ = readFromRemainingExpressionWhile;
  package$standartlibextensions.skipFromRemainingExpressionWhile_josn5q$ = skipFromRemainingExpressionWhile;
  package$standartlibextensions.skipFromRemainingExpressionWhileClosingTagNotFound_rjan26$ = skipFromRemainingExpressionWhileClosingTagNotFound;
  package$standartlibextensions.getBracketLevelChangeBeforeClosingTag_rjan26$ = getBracketLevelChangeBeforeClosingTag;
  package$standartlibextensions.findFirstNotInTagNotInMtext_bm4lxs$ = findFirstNotInTagNotInMtext;
  package$standartlibextensions.skipClosingTags_bm4lxs$ = skipClosingTags;
  package$standartlibextensions.selectPlacesForColoringByFragment_3m52m6$ = selectPlacesForColoringByFragment;
  package$standartlibextensions.findClosestPlaceToTargetOnTheSameLevel_yib5kn$ = findClosestPlaceToTargetOnTheSameLevel;
  package$standartlibextensions.skipFromRemainingExpressionWhileClosingBracketNotFound_ibifho$ = skipFromRemainingExpressionWhileClosingBracketNotFound;
  package$standartlibextensions.getIndexOfFirstBracketsValueEnd_cdtk8u$ = getIndexOfFirstBracketsValueEnd;
  package$standartlibextensions.NamedList = NamedList;
  package$standartlibextensions.splitStringByBracketsOnTopLevel_lmm34u$ = splitStringByBracketsOnTopLevel;
  package$standartlibextensions.SplittingString = SplittingString;
  package$standartlibextensions.splitBySubstringOnTopLevel_sc8eh$ = splitBySubstringOnTopLevel;
  package$standartlibextensions.readOpenTagStringIfItPresent_bm4lxs$ = readOpenTagStringIfItPresent;
  package$standartlibextensions.trimmedMathML_pdl1vz$ = trimmedMathML;
  package$standartlibextensions.getTagAttributes_61zpoe$ = getTagAttributes;
  package$standartlibextensions.removeNewLinesFromExpression_61zpoe$ = removeNewLinesFromExpression;
  package$standartlibextensions.findNewLinePlaces_61zpoe$ = findNewLinePlaces;
  Object.defineProperty(StringExtension, 'Companion', {
    get: StringExtension$Companion_getInstance
  });
  package$standartlibextensions.StringExtension = StringExtension;
  package$standartlibextensions.TransformationsPart = TransformationsPart;
  package$standartlibextensions.StringPart = StringPart;
  package$standartlibextensions.containsAny_k9a7eh$ = containsAny;
  package$standartlibextensions.containsAny_7wfnu2$ = containsAny_0;
  package$standartlibextensions.Letter = Letter;
  Object.defineProperty(package$standartlibextensions, 'lettersData', {
    get: function () {
      return lettersData;
    }
  });
  Object.defineProperty(package$standartlibextensions, 'texToUnicode', {
    get: function () {
      return texToUnicode;
    }
  });
  Object.defineProperty(package$standartlibextensions, 'unicodeToTex', {
    get: function () {
      return unicodeToTex;
    }
  });
  Object.defineProperty(package$standartlibextensions, 'texOpenBracket', {
    get: function () {
      return texOpenBracket;
    }
  });
  Object.defineProperty(package$standartlibextensions, 'texCloseBracket', {
    get: function () {
      return texCloseBracket;
    }
  });
  var package$taskautogeneration = package$twf.taskautogeneration || (package$twf.taskautogeneration = {});
  package$taskautogeneration.trigonometryShortMultiplicationStartExpressionGeneration_3b06hw$ = trigonometryShortMultiplicationStartExpressionGeneration;
  Object.defineProperty(ExpressionNodeBuilder, 'Companion', {
    get: ExpressionNodeBuilder$Companion_getInstance
  });
  package$taskautogeneration.ExpressionNodeBuilder = ExpressionNodeBuilder;
  package$taskautogeneration.ExpressionSimilarityMetric = ExpressionSimilarityMetric;
  package$taskautogeneration.CompoundSimilarityMetric = CompoundSimilarityMetric;
  Object.defineProperty(package$taskautogeneration, 'variableOnlyInLeft', {
    get: function () {
      return variableOnlyInLeft;
    }
  });
  Object.defineProperty(package$taskautogeneration, 'variableOnlyInRight', {
    get: function () {
      return variableOnlyInRight;
    }
  });
  package$taskautogeneration.LambdaExpressionSimilarityMetric = LambdaExpressionSimilarityMetric;
  Object.defineProperty(package$taskautogeneration, 'functionsOnlyInLeft', {
    get: function () {
      return functionsOnlyInLeft;
    }
  });
  Object.defineProperty(package$taskautogeneration, 'functionsOnlyInRight', {
    get: function () {
      return functionsOnlyInRight;
    }
  });
  Object.defineProperty(package$taskautogeneration, 'simplifiedDisparityMetric', {
    get: function () {
      return simplifiedDisparityMetric;
    }
  });
  Object.defineProperty(package$taskautogeneration, 'disparityMatrixMetric', {
    get: function () {
      return disparityMatrixMetric;
    }
  });
  package$taskautogeneration.DisparityMatrixMetric = DisparityMatrixMetric;
  package$taskautogeneration.isLeafNode_qrf28w$ = isLeafNode;
  package$taskautogeneration.getNonLeafSubexpressions_qrf28w$ = getNonLeafSubexpressions;
  package$taskautogeneration.distanceTo_82oxr1$ = distanceTo;
  Object.defineProperty(ExpressionGenerationDirection, 'ORIGINAL_TO_FINAL', {
    get: ExpressionGenerationDirection$ORIGINAL_TO_FINAL_getInstance
  });
  Object.defineProperty(ExpressionGenerationDirection, 'FINAL_TO_ORIGINAL', {
    get: ExpressionGenerationDirection$FINAL_TO_ORIGINAL_getInstance
  });
  package$taskautogeneration.ExpressionGenerationDirection = ExpressionGenerationDirection;
  package$taskautogeneration.GeneratedExpression = GeneratedExpression;
  package$taskautogeneration.ExpressionTaskGeneratorSettings = ExpressionTaskGeneratorSettings;
  package$taskautogeneration.ExpressionTaskIntermediateData = ExpressionTaskIntermediateData;
  package$taskautogeneration.ExpressionTask = ExpressionTask;
  package$taskautogeneration.reweighNewVariablesRules_3tiwji$ = reweighNewVariablesRules;
  package$taskautogeneration.generateExpressionTransformationTasks_8ndg6e$ = generateExpressionTransformationTasks;
  package$taskautogeneration.findPossibleSubstitutions_atry2m$ = findPossibleSubstitutions;
  package$taskautogeneration.postprocessGeneratedTask_u0kcr4$ = postprocessGeneratedTask;
  package$taskautogeneration.simplifyAndNormalizeExpression_37rhgh$ = simplifyAndNormalizeExpression;
  package$taskautogeneration.simplifyExpressionRecursive_37rhgh$ = simplifyExpressionRecursive;
  package$taskautogeneration.swapPartsInExpressionSubstitutions_pvxprz$ = swapPartsInExpressionSubstitutions;
  package$taskautogeneration.compareExpressionNodes_heho5o$ = compareExpressionNodes;
  package$taskautogeneration.badStructureFine_qrf28w$ = badStructureFine;
  package$taskautogeneration.getMaxFractionLevel_1k7ipq$ = getMaxFractionLevel;
  package$taskautogeneration.selectRandomNodeIdsToTransform_qrf28w$ = selectRandomNodeIdsToTransform;
  package$taskautogeneration.nodeIdToPlaceWeight_1k7ipq$ = nodeIdToPlaceWeight;
  package$taskautogeneration.selectNodeIdsToTransformByLastStepId_qrf28w$ = selectNodeIdsToTransformByLastStepId;
  Object.defineProperty(ExpressionUtils, 'Companion', {
    get: ExpressionUtils$Companion_getInstance
  });
  package$taskautogeneration.ExpressionUtils = ExpressionUtils;
  package$taskautogeneration.splitConstants_z8n7r6$ = splitConstants;
  package$taskautogeneration.traverseAndSplitConstants_37rhgh$ = traverseAndSplitConstants;
  package$taskautogeneration.verifyAllPartsHasBeenTransformed_heho5o$ = verifyAllPartsHasBeenTransformed;
  package$taskautogeneration.getTermsOrMultipliers_em03xr$ = getTermsOrMultipliers;
  package$taskautogeneration.validateTask_f3ciwn$ = validateTask;
  package$taskautogeneration.applySimplePostprocessorRules_u0kcr4$ = applySimplePostprocessorRules;
  package$taskautogeneration.applySophisticatedPostprocessorRules_z8n7r6$ = applySophisticatedPostprocessorRules;
  package$taskautogeneration.postprocess_e4rm8j$ = postprocess;
  package$taskautogeneration.performComputationIfNeeded_je7d3g$ = performComputationIfNeeded;
  package$taskautogeneration.traverseAndPerformComputation_37rhgh$ = traverseAndPerformComputation;
  package$taskautogeneration.retrieveNumbers_16qplw$ = retrieveNumbers;
  package$taskautogeneration.findGCD_vux9f0$ = findGCD;
  package$taskautogeneration.computeSum_16qplw$ = computeSum;
  package$taskautogeneration.computeProd_16qplw$ = computeProd;
  package$taskautogeneration.makeComputation_uagbb3$ = makeComputation;
  package$taskautogeneration.computeExponentIfNeeded_em03xr$ = computeExponentIfNeeded;
  package$taskautogeneration.powInt_vux9f0$ = powInt;
  package$taskautogeneration.traverseAndGetRidOfLongFractionIfNeeded_37rhgh$ = traverseAndGetRidOfLongFractionIfNeeded;
  package$taskautogeneration.getRidOfLongFraction_hgjmof$ = getRidOfLongFraction;
  package$taskautogeneration.logTransformation_j1u70w$ = logTransformation;
  package$taskautogeneration.getRidOfDuplicatedNodes_je7d3g$ = getRidOfDuplicatedNodes;
  package$taskautogeneration.traverseAndGetRidOfDuplicatedTerms_37rhgh$ = traverseAndGetRidOfDuplicatedTerms;
  package$taskautogeneration.traverseAndGetRidOfDuplicatedMultipliers_37rhgh$ = traverseAndGetRidOfDuplicatedMultipliers;
  package$taskautogeneration.getCountForTerm_em03xr$ = getCountForTerm;
  package$taskautogeneration.getCountForMultiplier_em03xr$ = getCountForMultiplier;
  package$taskautogeneration.getKeyPartForTerm_37rhgh$ = getKeyPartForTerm;
  package$taskautogeneration.getKeyPartForMultiplier_em03xr$ = getKeyPartForMultiplier;
  package$taskautogeneration.getRidOfMultilayerFractions_je7d3g$ = getRidOfMultilayerFractions;
  package$taskautogeneration.traverseAndLayFractions_37rhgh$ = traverseAndLayFractions;
  package$taskautogeneration.layFractionRecursively_58p42w$ = layFractionRecursively;
  package$taskautogeneration.dragDescendantsUpper_tq53he$ = dragDescendantsUpper;
  package$taskautogeneration.traverseAndDragDescendantsUpper_o4dprl$ = traverseAndDragDescendantsUpper;
  package$taskautogeneration.collectNodesRecursively_uetn24$ = collectNodesRecursively;
  package$taskautogeneration.dragConstantsToTheLeft_u0dnxg$ = dragConstantsToTheLeft;
  package$taskautogeneration.getRidOfLongFractionIfNeeded_je7d3g$ = getRidOfLongFractionIfNeeded;
  package$taskautogeneration.traverseAndSortChildrenAscendingByIdentifier_em03xr$ = traverseAndSortChildrenAscendingByIdentifier;
  package$taskautogeneration.reduceFractions_u0dnxg$ = reduceFractions;
  package$taskautogeneration.traverseAndReduceFractions_em03xr$ = traverseAndReduceFractions;
  package$taskautogeneration.reduceIntegersInFraction_bnakz5$ = reduceIntegersInFraction;
  package$taskautogeneration.makeReduce_ixh1dg$ = makeReduce;
  package$taskautogeneration.getMultipliers_em03xr$ = getMultipliers;
  package$taskautogeneration.reduceTerms_ncoq99$ = reduceTerms;
  package$taskautogeneration.traverseAndReduceTerms_mbp1b4$ = traverseAndReduceTerms;
  package$taskautogeneration.makeSingleReduce_u9mnl$ = makeSingleReduce;
  package$taskautogeneration.getOppositeNode_unh6wx$ = getOppositeNode;
  package$taskautogeneration.hasDifferentSign_heho5o$ = hasDifferentSign;
  package$taskautogeneration.areEqualByModule_heho5o$ = areEqualByModule;
  package$taskautogeneration.getModule_em03xr$ = getModule;
  package$taskautogeneration.containsTrigonometricFunction_qrf28w$ = containsTrigonometricFunction;
  package$taskautogeneration.containsTrigonometricFunctionInResult_hz870b$ = containsTrigonometricFunctionInResult;
  package$taskautogeneration.containsTrigonometricFunctionInResult_vlq1sf$ = containsTrigonometricFunctionInResult_0;
  package$taskautogeneration.insideExponent_7illpf$ = insideExponent;
  package$taskautogeneration.insideTrigonometricFunction_qrf28w$ = insideTrigonometricFunction;
  Object.defineProperty(LogarithmsRulePack, 'Companion', {
    get: LogarithmsRulePack$Companion_getInstance
  });
  var package$rulepack = package$taskautogeneration.rulepack || (package$taskautogeneration.rulepack = {});
  package$rulepack.LogarithmsRulePack = LogarithmsRulePack;
  Object.defineProperty(LogarithmsStandardMathRulePacks, 'Companion', {
    get: LogarithmsStandardMathRulePacks$Companion_getInstance
  });
  package$rulepack.LogarithmsStandardMathRulePacks = LogarithmsStandardMathRulePacks;
  Object.defineProperty(PostprocessorRulePack, 'Companion', {
    get: PostprocessorRulePack$Companion_getInstance
  });
  package$rulepack.PostprocessorRulePack = PostprocessorRulePack;
  Object.defineProperty(RuleTag_0, 'BASIC_MATH', {
    get: RuleTag$BASIC_MATH_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_FUNCTIONS_DEFINITION', {
    get: RuleTag$TRIGONOMETRY_FUNCTIONS_DEFINITION_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_STANDARD_ANGLES', {
    get: RuleTag$TRIGONOMETRY_STANDARD_ANGLES_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_BASIC_IDENTITY', {
    get: RuleTag$TRIGONOMETRY_BASIC_IDENTITY_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_PERIODIC', {
    get: RuleTag$TRIGONOMETRY_PERIODIC_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_SHIFTING', {
    get: RuleTag$TRIGONOMETRY_SHIFTING_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_INVERSE_FUNCTIONS', {
    get: RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES', {
    get: RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_PROPERTIES_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED', {
    get: RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_ADVANCED_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES', {
    get: RuleTag$TRIGONOMETRY_INVERSE_FUNCTIONS_STANDARD_ANGLES_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES', {
    get: RuleTag$TRIGONOMETRY_SIN_COS_SUM_AND_DIFF_OF_ANGLES_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES', {
    get: RuleTag$TRIGONOMETRY_TG_CTG_SUM_AND_DIFF_OF_ANGLES_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_DOUBLE_ANGLES', {
    get: RuleTag$TRIGONOMETRY_DOUBLE_ANGLES_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_TRIPLE_ANGLES', {
    get: RuleTag$TRIGONOMETRY_TRIPLE_ANGLES_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_HALF_ANGLES', {
    get: RuleTag$TRIGONOMETRY_HALF_ANGLES_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_MULTI_ANGLES', {
    get: RuleTag$TRIGONOMETRY_MULTI_ANGLES_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_POWER_REDUCING', {
    get: RuleTag$TRIGONOMETRY_POWER_REDUCING_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS', {
    get: RuleTag$TRIGONOMETRY_SUM_AND_DIFF_OF_FUNCTIONS_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_AUXILIARY_ARGUMENT', {
    get: RuleTag$TRIGONOMETRY_AUXILIARY_ARGUMENT_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION', {
    get: RuleTag$TRIGONOMETRY_WEIERSTRASS_SUBSTITUTION_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_EULER_FORMULAS', {
    get: RuleTag$TRIGONOMETRY_EULER_FORMULAS_getInstance_0
  });
  Object.defineProperty(RuleTag_0, 'TRIGONOMETRY_HYPERBOLIC_FUNCTIONS', {
    get: RuleTag$TRIGONOMETRY_HYPERBOLIC_FUNCTIONS_getInstance_0
  });
  package$taskautogeneration.RuleTag = RuleTag_0;
  Object.defineProperty(SortOrder, 'ASC', {
    get: SortOrder$ASC_getInstance
  });
  Object.defineProperty(SortOrder, 'DESC', {
    get: SortOrder$DESC_getInstance
  });
  package$taskautogeneration.SortOrder = SortOrder;
  Object.defineProperty(SortType, 'BY_RULE_TAG_USAGE', {
    get: SortType$BY_RULE_TAG_USAGE_getInstance
  });
  Object.defineProperty(SortType, 'BY_TASK_LENGTH', {
    get: SortType$BY_TASK_LENGTH_getInstance
  });
  package$taskautogeneration.SortType = SortType;
  package$taskautogeneration.GeneratorSettings = GeneratorSettings;
  package$taskautogeneration.generateTrigonometricTasks_n20lef$ = generateTrigonometricTasks;
  package$taskautogeneration.sortTasks_hb2lgh$ = sortTasks;
  package$taskautogeneration.tryToGenerateNewTasks_lm7l3j$ = tryToGenerateNewTasks;
  package$taskautogeneration.placesThenSubstitutionsGenerator_v8ou3a$ = placesThenSubstitutionsGenerator;
  package$taskautogeneration.substitutionsThenPlacesGenerator_lm7l3j$ = substitutionsThenPlacesGenerator;
  package$taskautogeneration.getTagUsage_6h8poe$ = getTagUsage;
  package$taskautogeneration.unify_xqvr29$ = unify;
  var package$testpointgeneration = package$twf.testpointgeneration || (package$twf.testpointgeneration = {});
  package$testpointgeneration.VariableLink = VariableLink;
  package$testpointgeneration.VariableData = VariableData;
  package$testpointgeneration.TestPointGenerator = TestPointGenerator;
  var package$visualization = package$twf.visualization || (package$twf.visualization = {});
  package$visualization.ColoringTask = ColoringTask;
  package$visualization.setBackgroundColorMathMl_puj7f4$ = setBackgroundColorMathMl;
  package$visualization.brushMathMl_12vgky$ = brushMathMl;
  package$visualization.dropPerformedMathMLBrushing_61zpoe$ = dropPerformedMathMLBrushing;
  package$visualization.dropPerformedMathMLBrushingInternal_61zpoe$ = dropPerformedMathMLBrushingInternal;
  package$visualization.transformationPartsToLog_jh2c8r$ = transformationPartsToLog;
  package$visualization.transformationPartsToLog_1plxii$ = transformationPartsToLog_0;
  package$visualization.transformationPartsToLog_qbz5v5$ = transformationPartsToLog_1;
  package$visualization.transformationPartsToLog_l6y0m8$ = transformationPartsToLog_2;
  package$visualization.setBackgroundColorTex_puj7f4$ = setBackgroundColorTex;
  package$visualization.brushTex_12vgky$ = brushTex;
  package$visualization.dropPerformedTexBrushing_61zpoe$ = dropPerformedTexBrushing;
  package$visualization.addWithSpaceIfNeed_s47sd7$ = addWithSpaceIfNeed;
  package$visualization.dropPerformedTexBrushingInternal_61zpoe$ = dropPerformedTexBrushingInternal;
  _.createCompiledConfigurationFromExpressionSubstitutionsAndParams = createCompiledConfigurationFromExpressionSubstitutionsAndParams_JS;
  _.createConfigurationFromRulePacksAndParams = createConfigurationFromRulePacksAndParams_JS;
  _.createConfigurationFromRulePacksAndDetailSolutionCheckingParams = createConfigurationFromRulePacksAndDetailSolutionCheckingParams_JS;
  _.stringToExpression = stringToExpression_JS;
  _.structureStringToExpression = structureStringToExpression_JS;
  _.cloneExpression = cloneExpression_JS;
  _.expressionToString = expressionToString_JS;
  _.expressionToUnicodeString = expressionToUnicodeString_JS;
  _.expressionToTexString = expressionToTexString_JS;
  _.expressionToStructureString = expressionToStructureString_JS;
  _.stringToStructureString = stringToStructureString_JS;
  _.expressionSubstitutionFromStrings = expressionSubstitutionFromStrings_0;
  _.expressionSubstitutionFromStructureStrings = expressionSubstitutionFromStructureStrings_JS;
  _.findApplicableSubstitutionsInSelectedPlace = findApplicableSubstitutionsInSelectedPlace_JS;
  _.findSubstitutionPlacesInExpression = findSubstitutionPlacesInExpression_0;
  _.applySubstitution = applySubstitution_1;
  _.checkSolutionInTex = checkSolutionInTex_JS;
  _.checkSolutionInTexWithCompiledConfiguration = checkSolutionInTexWithCompiledConfiguration_JS;
  _.createCompiledConfigurationFromITR = createCompiledConfigurationFromITR_JS;
  _.checkSolutionInTexITR = checkSolutionInTexITR_JS;
  _.getParsedExpressionByMathML = getParsedExpressionByMathML;
  _.checkFactsInMathML = checkFactsInMathML_0;
  _.getUserLogInPlainText = getUserLogInPlainText;
  _.getUserLogInJson = getUserLogInJson;
  _.getAllLogInPlainText = getAllLogInPlainText;
  _.getAllLogInJson = getAllLogInJson;
  _.encryptSolution = encryptSolution;
  _.encryptResult = encryptResult;
  _.decodeUrlSymbols = decodeUrlSymbols_JS;
  _.compareWithoutSubstitutions = compareWithoutSubstitutions_1;
  _.createExpressionFrontInput = createExpressionFrontInput_JS;
  _.createRuleITR = createRuleITR_JS;
  _.createRulePackLinkITR = createRulePackLinkITR_JS;
  _.createRulePackITR = createRulePackITR_JS;
  _.createTaskITR = createTaskITR_JS;
  _.arrayToList = arrayToList_JS;
  _.listToArray = listToArray_JS;
  _.arrayToSet = arrayToSet_JS;
  _.dinamicToMap = dinamicToMap_JS;
  _.jsonStringToMap = jsonStringToMap_JS;
  _.jsonToMap = jsonToMap_JS;
  _.generateTasks = generateTasks_JS;
  _.getAllTagsForGeneration = getAllTagsForGeneration_JS;
  _.getAllSortTypesForGeneration = getAllSortTypesForGeneration_JS;
  _.getAllSortOrdersForGeneration = getAllSortOrdersForGeneration_JS;
  _.getLogOfGeneration = getLogOfGeneration_JS;
  _.getReportOfGeneration = getReportOfGeneration_JS;
  MainChainPart.prototype.check_i0qcxd$ = ComparableTransformationsPart.prototype.check_i0qcxd$;
  MainLineNode.prototype.isSolutionForVariables_axkv0l$ = MainChainPart.prototype.isSolutionForVariables_axkv0l$;
  MainLineNode.prototype.check_i0qcxd$ = MainChainPart.prototype.check_i0qcxd$;
  Expression.prototype.isSolutionForVariables_axkv0l$ = MainChainPart.prototype.isSolutionForVariables_axkv0l$;
  Expression.prototype.check_i0qcxd$ = MainChainPart.prototype.check_i0qcxd$;
  ExpressionChain.prototype.check_i0qcxd$ = ComparableTransformationsPart.prototype.check_i0qcxd$;
  ExpressionComparison.prototype.isSolutionForVariables_axkv0l$ = MainChainPart.prototype.isSolutionForVariables_axkv0l$;
  ExpressionComparison.prototype.check_i0qcxd$ = MainChainPart.prototype.check_i0qcxd$;
  RulePointer.prototype.check_i0qcxd$ = MainChainPart.prototype.check_i0qcxd$;
  RulePointer.prototype.isSolutionForVariables_axkv0l$ = MainChainPart.prototype.isSolutionForVariables_axkv0l$;
  Rule.prototype.check_i0qcxd$ = MainChainPart.prototype.check_i0qcxd$;
  Rule.prototype.isSolutionForVariables_axkv0l$ = MainChainPart.prototype.isSolutionForVariables_axkv0l$;
  MainLineAndNode.prototype.isEmpty = MainLineNode.prototype.isEmpty;
  MainLineAndNode.prototype.isSolutionForVariables_axkv0l$ = MainLineNode.prototype.isSolutionForVariables_axkv0l$;
  MainLineAndNode.prototype.check_i0qcxd$ = MainLineNode.prototype.check_i0qcxd$;
  MainLineOrNode.prototype.isEmpty = MainLineNode.prototype.isEmpty;
  MainLineOrNode.prototype.isSolutionForVariables_axkv0l$ = MainLineNode.prototype.isSolutionForVariables_axkv0l$;
  MainLineOrNode.prototype.check_i0qcxd$ = MainLineNode.prototype.check_i0qcxd$;
  defaultFunctionConfiguration = new FunctionConfiguration();
  DomainAll = new DefinitionDomain(emptySet(), void 0, setOf(DomainSegment$Companion_getInstance().inclusive_lu1900$(kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY, kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY)));
  DomainNil = new DefinitionDomain(emptySet(), void 0, emptySet());
  notChangesOnVariablesInComparisonFunctionJsonName = 'nullWeightOperations';
  notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName = 'lightWeightOperations';
  defaultOtherCheckSolutionData = mapOf_0([to(notChangesOnVariablesInComparisonFunctionJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1), new FunctionIdentifier('^', -1)])), to(notChangesOnVariablesInComparisonFunctionWithoutTransformationsJsonName, listOf_0([new FunctionIdentifier('+', -1), new FunctionIdentifier('-', -1), new FunctionIdentifier('*', -1), new FunctionIdentifier('/', -1), new FunctionIdentifier('^', -1)]))]);
  namespaceCodeAndCodeDivider = '__';
  taskSetCodeAndCodeDivider = '__';
  PI_STRING = '3.14159265';
  PI_STRING_ASCII = 'pi';
  PI_STRING_UNICODE = '\u03C0';
  PI_STRING_TEX = '\\pi';
  E_STRING = '2.71828183';
  E_STRING_UNICODE = 'e';
  PI_STRING_USUAL = PI_STRING_UNICODE;
  E_STRING_USUAL = E_STRING_UNICODE;
  unlimitedWeight = 10000.0;
  knownOps = listOf_0([new BaseOperationDefinitionWithDomain('+', DomainAll, listOf_0([DomainAll, DomainAll]), knownOps$lambda), new BaseOperationDefinitionWithDomain('-', DomainAll, listOf_0([DomainAll, DomainAll]), knownOps$lambda_0), new BaseOperationDefinitionWithDomain('', DomainAll, listOf(DomainAll), knownOps$lambda_1), new BaseOperationDefinitionWithDomain('*', DomainAll, listOf_0([DomainAll, DomainAll]), knownOps$lambda_2), new BaseOperationDefinitionWithDomain('/', DomainAll, listOf_0([DomainAll, DomainAll.except_yqxtqz$(new Float64Array([0.0]))]), knownOps$lambda_3), new BaseOperationDefinitionWithDomain('sin', DefinitionDomain$Companion_getInstance().inclusive_lu1900$(-1.0, 1.0), listOf(DomainAll), knownOps$lambda_4), new BaseOperationDefinitionWithDomain('cos', DefinitionDomain$Companion_getInstance().inclusive_lu1900$(-1.0, 1.0), listOf(DomainAll), knownOps$lambda_5)]);
  var $receiver = knownOps;
  var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
  var destination = LinkedHashMap_init(capacity);
  var tmp$;
  tmp$ = $receiver.iterator();
  while (tmp$.hasNext()) {
    var element = tmp$.next();
    destination.put_xwzc9p$(element.baseOp, element);
  }
  knownOpsAssociation = destination;
  zero = (new ExpressionNode(NodeType$VARIABLE_getInstance(), '0')).wrap();
  one = (new ExpressionNode(NodeType$VARIABLE_getInstance(), '1')).wrap();
  PARENT_BRACKETS_EXPANSION = 'ParentBracketsExpansion';
  REDUCE_FRACTION = 'ReduceFraction';
  additionalFactUsedVarName = 'AFU';
  TREE_COMPUTATION_RULES_PRIORITY = 5;
  TREE_COMPUTATION_DEFAULT = 'SimpleComputation';
  simpleComputationRuleParamsDefault = new SimpleComputationRuleParams();
  simpleComputationRuleParamsNoLimits = new SimpleComputationRuleParams(setOf('SimpleComputationUniversity'), true);
  log_1 = new LazyLog();
  spaceRegex = Regex_init('&#x200\\d;');
  unsupportedTagListMathML = listOf_0(['mstyle', 'menclose', 'mpadded']);
  underliningStartMathML = '<menclose mathcolor="#7F0000" notation="bottom">';
  underliningEndMathML = '<\/menclose>';
  configSeparator = ';;;';
  errorPrefix = 'Error';
  syntaxErrorPrefix = 'Syntax';
  random_0 = Random.Default;
  lettersData = listOf_0([new Letter(945, 945, '\\alpha', '&#x3B1;'), new Letter(946, 946, '\\beta', '&#x3B2;'), new Letter(947, 947, '\\gamma', '&#x3B3;'), new Letter(960, 960, '\\pi', '&#x3C0;'), new Letter(969, 969, '\\omega', '&#x3C9;')]);
  var $receiver_0 = lettersData;
  var capacity_0 = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver_0, 10)), 16);
  var destination_0 = LinkedHashMap_init(capacity_0);
  var tmp$_0;
  tmp$_0 = $receiver_0.iterator();
  while (tmp$_0.hasNext()) {
    var element_0 = tmp$_0.next();
    destination_0.put_xwzc9p$(element_0.tex, String.fromCharCode(unboxChar(element_0.unicode)));
  }
  texToUnicode = destination_0;
  var $receiver_1 = lettersData;
  var capacity_1 = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver_1, 10)), 16);
  var destination_1 = LinkedHashMap_init(capacity_1);
  var tmp$_1;
  tmp$_1 = $receiver_1.iterator();
  while (tmp$_1.hasNext()) {
    var element_1 = tmp$_1.next();
    destination_1.put_xwzc9p$(String.fromCharCode(unboxChar(element_1.unicode)), element_1.tex);
  }
  unicodeToTex = destination_1;
  texOpenBracket = '\\left(';
  texCloseBracket = '\\right)';
  variableOnlyInLeft = new variableOnlyInLeft$ObjectLiteral();
  variableOnlyInRight = new variableOnlyInRight$ObjectLiteral();
  functionsOnlyInLeft = new functionsOnlyInLeft$ObjectLiteral();
  functionsOnlyInRight = new functionsOnlyInRight$ObjectLiteral();
  simplifiedDisparityMetric = new CompoundSimilarityMetric(listOf_0([variableOnlyInLeft, variableOnlyInRight, functionsOnlyInLeft, functionsOnlyInRight]));
  disparityMatrixMetric = new DisparityMatrixMetric(1);
  coloringEnd = '<\/mrow>';
  coloringBoldHeaderStartGeneral = ' mathvariant="bold" mathcolor="#';
  coloringBoldHeaderStart = '<mrow mathvariant="bold" mathcolor="#';
  coloringBoldStartLength = 45;
  coloringHeaderStartGeneral = ' mathcolor="#';
  coloringHeaderStart = '<mrow mathcolor="#';
  coloringStartLength = 26;
  boldHeaderStartGeneral = ' mathvariant="bold"';
  boldHeaderStart = '<mrow mathvariant="bold"';
  boldStartLength = 25;
  coloringEndLength = coloringEnd.length;
  coloringOffset = coloringStartLength + coloringEndLength | 0;
  underlining = '<mi>_<\/mi>';
  Kotlin.defineModule('twf_js', _);
  return _;
}(typeof twf_js === 'undefined' ? {} : twf_js, kotlin);
